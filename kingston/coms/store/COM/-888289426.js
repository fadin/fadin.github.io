var method_name = "ContentManager.cmsHTMLPageFind";

var server_time = new Date(2018, 8-1, 13, 7, 37, 45);

var execution_time = 0.039721;

ret = new Object();
ret.ToString = "Upload Data";
ret._ToString = "Upload Data";
ret.AlwaysGenerate = false;
ret.Body = "<%=form%>";
ret.Date = new Date(2016, 8-1, 6, 7, 10, 8);
ret.Description = "";
ret.Footer = "";
ret.ImageSource = "";
ret.Page = "Hosted/COM/Upload";
ret.Public = false;
ret.Script = "var jsData = [];\r\n\r\nend(function() {\r\n\twindow.DForm.bind();\r\n}, {\r\n\tform: window.DForm.render(\'frmUpload\', \"Data Upload\", [{\r\n\t\tname: \'DataMap\',\r\n\t\trequired: true,\r\n\t\ttype: \"select\",\r\n\t\tchange: function(o) {\r\n\t\t\tif (!o.DataMap.DateKey) {\r\n\t\t\t\talert(\"No DataKey for the selected DataMap.\\nPlease choose one in the Append Tab.\\nOtherwise the current datetime will be used.\")\r\n\t\t\t}\r\n\t\t},\r\n\t\tsource: function(o, f) {\r\n            o.DataSets = [{\r\n                Active: true,\r\n            }];\r\n            return o;\r\n\t\t},\r\n\t}, {\r\n\t\tname: \'DataSet\',\r\n\t\trequired: true,\r\n\t\ttype: \"select\",\r\n\t\tchange: function(o) {\r\n\t\t\tif (o.DataSet.Type == \"sql\") {\r\n\t\t\t\twindow.DForm.ask(\"Your Data-Set is a SQL Data Set. Do you want to auto-load it?\", function(answer) {\r\n\t\t\t\t\tif (!answer) return;\r\n\r\n\t\t\t\t\tsr._(\"comDataSetSQL\", function(ret) {\r\n\t\t\t\t\t\tjsData = ret;\r\n\t\t\t\t\t\twindow.DForm.info(\"Data Available: [\" + jsData.length + \"]\");\r\n\t\t\t\t\t\twindow.DForm.set({\r\n\t\t\t\t\t\t\tend: jsData.length\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}, o.DataSet);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t},\r\n\t\tsource: function(o, f) {\r\n\t\t    o.DataMap = f.DataMap;\r\n\t\t    return o;\r\n\t\t},\r\n\t}, {\r\n\t\tname: \'csv\',\r\n\t\tlabel: \'CSV File\',\r\n\t\trequired: true,\r\n\t\ttype: \"file\",\r\n\t\tupload: function(o, f) {\r\n\t\t\tjsData = Papa.parse(o.csv, {\r\n\t\t\t\theader: true,\r\n\t\t\t\tskipEmptyLines: true\r\n\t\t\t}).data;\r\n\t\t\twindow.DForm.info(\"Data Available: [\" + jsData.length + \"]\");\r\n\t\t\twindow.DForm.set({\r\n\t\t\t\tend: jsData.length\r\n\t\t\t});\r\n\t\t},\r\n\t\tbinary: false,\r\n\t\tlocal: true,\r\n\t}, {\r\n\t\tname: \'excel\',\r\n\t\tlabel: \'Excel File\',\r\n\t\trequired: true,\r\n\t\ttype: \"file\",\r\n\t\tupload: function(o, f) {\r\n\t\t\tjsData = window.DForm.excelToJSON(o.excel, 0, 1);\r\n\t\t\twindow.DForm.info(\"Data Available: [\" + jsData.length + \"]\");\r\n\t\t\twindow.DForm.set({\r\n\t\t\t\tend: jsData.length\r\n\t\t\t});\r\n\t\t},\r\n\t\tbinary: true,\r\n\t\tlocal: true,\r\n\t}, {\r\n\t\tname: \'start\',\r\n\t\trequired: true,\r\n\t\ttype: \"int\",\r\n\t\tvalue: 0,\r\n\t}, {\r\n\t\tname: \'step\',\r\n\t\trequired: true,\r\n\t\ttype: \"int\",\r\n\t\tvalue: 2000,\r\n\t}, {\r\n\t\tname: \'end\',\r\n\t\trequired: true,\r\n\t\ttype: \"int\",\r\n\t\tvalue: 2000,\r\n\t}, {\r\n\t\tgroup: \'Append\',\r\n\t\tname: \'takenOn\',\r\n\t\ttype: \'datetime\',\r\n\t}, {\r\n\t\tgroup: \'Append\',\r\n\t\tname: \'appGroup\',\r\n\t\ttype: \'select\',\r\n\t\ttable: \'Group\',\r\n\t}, {\r\n\t\tgroup: \'Append\',\r\n\t\tname: \'appRole\',\r\n\t\ttype: \'select\',\r\n\t\ttable: \'Role\',\r\n\t\tsource: function(o, fData) {\r\n\t\t\to.Group = fData.appGroup;\r\n\t\t\treturn o;\r\n\t\t}\r\n\t}, {\r\n\t\tgroup: \'Append\',\r\n\t\tname: \'appIdentity\',\r\n\t\ttype: \'select\',\r\n\t\ttable: \'Identity\',\r\n\t\tsource: function(o, fData) {\r\n\t\t\to.Group = fData.appGroup;\r\n\t\t\treturn o;\r\n\t\t}\r\n\t}, {\r\n\t\tname: \'progress\',\r\n\t\ttype: \'progress\',\r\n\t}], [{\r\n\t\tname: \'Cancel\',\r\n\t\tonclick: function(o) {\r\n\t\t    window.DForm.cancelled = true;\r\n\t\t}\r\n    }, {\r\n\t\tname: \'Upload\',\r\n\t\tonclick: function(o) {\r\n\t\t\to.data = jsData;\r\n\t\t\tvar batch = {\r\n\t\t\t\tActive: true,\r\n\t\t\t\tnabled: true,\r\n\t\t\t\tDataMap: o.DataMap.Id,\r\n\t\t\t\tOwner: window.me,\r\n\t\t\t\tName: o.DataMap.Name + \", Count: \" + o.data.length,\r\n\t\t\t\tDate: new Date(),\r\n\t\t\t};\r\n\r\n\t\t\tvar chStep = {\r\n\t\t\t\tActive: true,\r\n\t\t\t\tEnabled: true,\r\n\t\t\t\tTransformation: {\r\n\t\t\t\t\tORS: {\r\n\t\t\t\t\t\tDataMapValues: true\r\n\t\t\t\t\t},\r\n\t\t\t\t\tActive: true,\r\n\t\t\t\t\tEnabled: true,\r\n\t\t\t\t\tCodeDataFields: [{\r\n\t\t\t\t\t\tActive: true,\r\n\t\t\t\t\t\tEnabled: true,\r\n\t\t\t\t\t\tDataMap: {\r\n\t\t\t\t\t\t\tId: o.DataMap.Id\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}],\r\n\t\t\t\t\tDataMapValues: [{\r\n\t\t\t\t\t\tActive: true,\r\n\t\t\t\t\t\tEnabled: true,\r\n\t\t\t\t\t\tDataMap: {\r\n\t\t\t\t\t\t\tId: o.DataMap.Id\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}],\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tvar transform = function(v, t, chSteps, dFields, row) {\r\n\t\t\t\tif (!t) return v;\r\n\t\t\t\tvar changeSteps = [];\r\n\t\t\t\tfor (var s = 0; s < chSteps.length; s++)\r\n\t\t\t\t\tif (chSteps[s].Transformationid == t.Id) changeSteps.push(chSteps[s]);\r\n\r\n\t\t\t\tvar value = v;\r\n\t\t\t\tfor (s = 0; s < changeSteps.length; s++) {\r\n\t\t\t\t\t// apply change step to code\r\n\r\n\t\t\t\t\tvar ps = changeSteps[s].Parameters.split(\'|\');\r\n\t\t\t\t\tvar script = changeSteps[s].Operation.Script;\r\n\r\n\t\t\t\t\tfor (var _p = 0; _p < ps.length; _p++) {\r\n\t\t\t\t\t\tfor (var f = 0; f < dFields.length; f++) {\r\n\t\t\t\t\t\t\tps[_p] = ps[_p].replace(new RegExp(\'{{\' + dFields[f].CodeField + \'}}\', \'g\'), row[dFields[f].CodeField]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tscript = script.replace(new RegExp(\'{{[\' + _p + \']}}\', \'g\'), ps[_p]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tscript = script.replace(new RegExp(\"{{o}}\", \'g\'), value);\r\n\t\t\t\t\t//console.log(\"Running:\", script);\r\n\t\t\t\t\tvalue = sr.runScript(script);\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn value;\r\n\t\t\t};\r\n\t\t\t\r\n\t\t\tvar calls = [];\r\n\t\t\tcalls.push(sr._(\"comDataFieldFindall\", null, { //comDataFieldFindall\r\n\t\t\t\tActive: true,\r\n\t\t\t\tEnable: true,\r\n\t\t\t\tDataMap: {\r\n\t\t\t\t\tActive: true,\r\n\t\t\t\t\tId: o.DataMap.Id\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\t\t\tcalls.push(sr._(\"comDataMapValueFindall\", null, { //comDataMapValueFindall\r\n\t\t\t\t\tActive: true,\r\n\t\t\t\t\tEnable: true,\r\n\t\t\t\t\tDataMap: {\r\n\t\t\t\t\t\tActive: true,\r\n\t\t\t\t\t\tId: o.DataMap.Id\r\n\t\t\t\t\t}\r\n\t\t\t\t}));\r\n\t\t\tcalls.push(sr._(\"comChangeStepFindall\", null, chStep));\r\n\t\t\tcalls.push(sr._(\"comBatchInsert\", null, batch));\r\n\t\t\t\r\n\t\t\t$.when(...calls).done(function(dFields, dValues, chSteps, b){\r\n\t\t\t\tvar ret = [];\r\n\t\t\t\tfor (var i = Math.max(0, o.start); i < Math.min(o.data.length, o.end); i++) {\r\n\t\t\t\t\tvar p = {\r\n\t\t\t\t\t\tActive: true,\r\n\t\t\t\t\t\tDataSet: {\r\n\t\t\t\t\t\t\tId: o.DataSet.Id\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t};\r\n\t\t\t\t\tvar takenOn = \"\";\r\n\t\t\t\t\tvar format = \"\";\r\n\t\t\t\t\tif (o.DataMap.DateKey) {\r\n\t\t\t\t\t\ttakenOn += o.data[i][o.DataMap.DateKey];\r\n\t\t\t\t\t\tformat += o.DataMap.DateFormat;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (o.DataMap.TimeKey) {\r\n\t\t\t\t\t\ttakenOn += \" \" + o.data[i][o.DataMap.TimeKey];\r\n\t\t\t\t\t\tformat += \" \" + o.DataMap.TimeFormat;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (takenOn) {\r\n\t\t\t\t\t\tif (format.trim()) {\r\n\t\t\t\t\t\t\tp.TakenOn = moment(takenOn, format).toDate();\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tp.TakenOn = moment(takenOn).toDate();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tp.TakenOn = o.takenOn;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tvar pValues = [];\r\n\t\t\t\t\tfor (var j = 0; j < dValues.length; j++) {\r\n\t\t\t\t\t    var value;\r\n\t\t\t\t\t    try{\r\n    \t\t\t\t\t\tvalue = parseFloat((o.data[i][dValues[j].Code] || 0).replace(new RegExp(\",\", \'g\'), \'\')); // remove the thousands separator.\r\n\t\t\t\t\t    }catch(ex){\r\n\t\t\t\t\t    }\r\n\t\t\t\t\t\tif (isNaN(value)) continue;\r\n\t\t\t\t\t\t// apply transformation\r\n\t\t\t\t\t\tvalue = transform(value, dValues[j].Transformation, chSteps, dFields, o.data[i]);\r\n\t\t\t\t\t\tif (isNaN(value)) continue;\r\n\r\n\t\t\t\t\t\tpValues.push({\r\n\t\t\t\t\t\t\tActive: true,\r\n\t\t\t\t\t\t\tValue: value,\r\n\t\t\t\t\t\t\tDataMapValue: {\r\n\t\t\t\t\t\t\t\tId: dValues[j].Id\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tvar pids = [];\r\n\t\t\t\t\tfor (j = 0; j < dFields.length; j++) {\r\n\t\t\t\t\t\tvar code = o.data[i][dFields[j].CodeField.trim()];\r\n\t\t\t\t\t\t//console.log(\"data[\" + i + \"][\" + dFields[j].CodeField + \"] = \" + code);\r\n\t\t\t\t\t\tif (!code) continue; // we cannot add an invalid code\r\n\r\n\t\t\t\t\t\tvar name = o.data[i][dFields[j].NameField /* || dFields[j].CodeField*/ ];\r\n\t\t\t\t\t\t// apply transformations\r\n\t\t\t\t\t\tcode = transform(code, dFields[j].CodeTransformation, chSteps, dFields, o.data[i]);\r\n\r\n\t\t\t\t\t\tif (code) {\r\n\t\t\t\t\t\t\t// transformation resulted in a valid code\r\n\t\t\t\t\t\t\tvar vid = {\r\n\t\t\t\t\t\t\t\tActive: true,\r\n\t\t\t\t\t\t\t\tIdentity: {\r\n\t\t\t\t\t\t\t\t\tActive: true,\r\n\t\t\t\t\t\t\t\t\tCode: code,\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\tif (name) {\r\n\t\t\t\t\t\t\t\tvid.Identity.Name = name;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif (!dFields[j].Group) {\r\n\t\t\t\t\t\t\t\t_alert(dFields[j].NameField + \" has invalid Group (null). Check the console log for details.\");\r\n\t\t\t\t\t\t\t\tconsole.log(\"Null Group: \", dFields[j]);\r\n\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tvid.Identity.Group = {\r\n\t\t\t\t\t\t\t\tId: dFields[j].Group.Id,\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tvid.DataField = {\r\n\t\t\t\t\t\t\t    Id: dFields[j].Id,\r\n\t\t\t\t\t\t\t};\r\n\r\n\t\t\t\t\t\t\tif (dFields[j].Role) {\r\n\t\t\t\t\t\t\t\tvid.Role = {\r\n\t\t\t\t\t\t\t\t\tId: dFields[j].Role.Id\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tpids.push(vid);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (o.appIdentity) {\r\n\t\t\t\t\t\t// append identity to measurement\r\n\t\t\t\t\t\t// pids.push();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t//if (!pids.length) continue;\r\n\t\t\t\t\tp.PerformanceIdentities = pids;\r\n\t\t\t\t\tp.Batch = {\r\n\t\t\t\t\t\tId: b.Id\r\n\t\t\t\t\t};\r\n\t\t\t\t\tp.PerformanceValues = pValues;\r\n\r\n\t\t\t\t\tret.push(p);\r\n\t\t\t\t}\r\n\r\n\t\t\t\twindow.DForm.set({\r\n\t\t\t\t\tprogress: 0\r\n\t\t\t\t});\r\n\r\n\t\t\t\tvar insertBlock = function(ps, start, end) {\r\n\t\t\t\t\tif (end > ps.length) end = ps.length;\r\n\t\t\t\t\tconsole.log(\"Uploading from \" + start + \" to \" + end + \" out of \" + ps.length);\r\n\t\t\t\t\tvar ar = ps.slice(start, end);\r\n\t\t\t\t\tsr._(\"comPerformanceInsertall\", function(r) {\r\n\t\t\t\t\t\tconsole.log(\"Upload time: \" + moment().diff(now, \'seconds\', true));\r\n\t\t\t\t\t\twindow.DForm.set({\r\n\t\t\t\t\t\t\tprogress: (end * 1.0 / ps.length) * 100\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tif (end != ps.length && !window.DForm.cancelled) {\r\n\t\t\t\t\t\t\tnow = moment();\r\n\t\t\t\t\t\t\tinsertBlock(ps, end, 2 * end - start);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tconsole.log(\"Ended!\");\r\n\t\t\t\t\t\t\twindow.DForm.info(\"Performances Imported Successfully\");\r\n\t\t\t\t\t\t\twindow.DForm.busy(false);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, ar);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar now = moment();\r\n\r\n\t\t\t\tinsertBlock(ret, Math.max(0, o.start), Math.min(o.step, o.end, ret.length));\r\n\t\t\t});\r\n\t\t}\r\n\t}])\r\n});";
ret.Title = "Upload Data";
ret.Id = 1584;
ret.Authorid = 0;
ret.SectionPages = new Array();
ret.PageMenus = new Array();
ret.RelatingPages = new Array();
ret.RelatedPages = new Array();
ret.PageAccessRules = new Array();
ret.BugReports = new Array();
ret.PageAccessRights = new Array();
ret.PageStatuses = new Array();
ret.ReferenceMenus = new Array();
ret.PageAccessRequests = new Array();
ret.FeedbackPages = new Array();
ret.PageHelps = new Array();