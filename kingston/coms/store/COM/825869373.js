var method_name = "ContentManager.cmsHTMLPageFindall";

var server_time = new Date(2018, 8-1, 13, 7, 39, 52);

var execution_time = 0.042432;

ret = new Array();
ret[0] = new Object();
ret[0].ToString = "Utility Classes";
ret[0]._ToString = "Utility Classes";
ret[0].AlwaysGenerate = false;
ret[0].Body = "<%=form%>";
ret[0].Date = new Date(2018, 5-1, 19, 9, 36, 56);
ret[0].Description = "";
ret[0].Footer = "";
ret[0].ImageSource = "";
ret[0].Page = "Hosted/COM/Utils";
ret[0].Public = false;
ret[0].Script = "function Identity() {\r\n\tthis.Active = true;\r\n\r\n\tthis.Id = function(id) {\r\n\t\tif (!id) {\r\n\t\t\treturn this;\r\n\t\t}\r\n\t\tthis.Id = id[\"Id\"] || id;\r\n\t\treturn this;\r\n\t}\r\n\r\n\tthis.forUser = function(u) {\r\n\t\tif (!u) return this;\r\n\t\tif (this.Group && this.Group.Organization) return this;\r\n\r\n\t\tvar o = {\r\n\t\t\tActive: true,\r\n\t\t\tEnabled: true,\r\n\t\t\tOrganizationUsers: [u]\r\n\t\t};\r\n\r\n\t\tif (this.Group) {\r\n\t\t\tthis.Group.Organization = o;\r\n\t\t} else {\r\n\t\t\tthis.Group = {\r\n\t\t\t\tActive: true,\r\n\t\t\t\tOrganization: o\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\tthis.clone = function(obj) {\r\n\t\tvar copy;\r\n\r\n\t\t// Handle the 3 simple types, and null or undefined\r\n\t\tif (null == obj || \"object\" != typeof obj) return obj;\r\n\r\n\t\t// Handle Date\r\n\t\tif (obj instanceof Date) {\r\n\t\t\tcopy = new Date();\r\n\t\t\tcopy.setTime(obj.getTime());\r\n\t\t\treturn copy;\r\n\t\t}\r\n\r\n\t\t// Handle Array\r\n\t\tif (obj instanceof Array) {\r\n\t\t\tcopy = [];\r\n\t\t\tfor (var i = 0, len = obj.length; i < len; i++) {\r\n\t\t\t\tcopy[i] = clone(obj[i]);\r\n\t\t\t}\r\n\t\t\treturn copy;\r\n\t\t}\r\n\r\n\t\t// Handle Object\r\n\t\tif (obj instanceof Object) {\r\n\t\t\tcopy = {};\r\n\t\t\tfor (var attr in obj) {\r\n\t\t\t\tif (obj.hasOwnProperty(attr)) copy[attr] = this.clone(obj[attr]);\r\n\t\t\t}\r\n\t\t\treturn copy;\r\n\t\t}\r\n\r\n\t\tthrow new Error(\"Unable to copy obj! Its type isn\'t supported.\");\r\n\t}\r\n\r\n\tthis.ofGroup = function(group, role) {\r\n\t\tif (typeof group === \"string\") {\r\n\t\t\tgroup = {\r\n\t\t\t\tActive: true,\r\n\t\t\t\tCode: group,\r\n\t\t\t\tOPERATORS: {\r\n\t\t\t\t\tCode: \"=\"\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t}\r\n\t\tthis.Group = group;\r\n\t\tif (role) {\r\n\t\t\tthis.PerformanceIdentities = this.PerformanceIdentities || [];\r\n\t\t\tthis.PerformanceIdentities.push({\r\n\t\t\t\tActive: true,\r\n\t\t\t\tPerformance: {\r\n\t\t\t\t\tActive: true,\r\n\t\t\t\t},\r\n\t\t\t\tRole: role.Id ? role : {\r\n\t\t\t\t\tActive: true,\r\n\t\t\t\t\tName: role\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\r\n\tthis.is = function(code, name) {\r\n\t\tif (code || name) {\r\n\t\t\tthis.OPERATORS = {};\r\n\t\t}\r\n\t\tif (code) {\r\n\t\t\tthis.Code = code;\r\n\t\t\tthis.OPERATORS.Code = \"=\";\r\n\t\t}\r\n\t\tif (name) {\r\n\t\t\tthis.Name = name;\r\n\t\t\tthis.OPERATORS.Name = \"=\";\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\tthis.occurs = function(last, start, end) {\r\n\t\tvar data = [filter, TimeSpan.FromMinutes(0), filter, TimeSpan.FromMinutes(ep.Occurrence)];\r\n\t\tlast.setFindComparison(\"takenOn\", \"BETWEEN\", data);\r\n\t}\r\n\r\n\tthis.where = function(wid, dSet, bOR, start, end) {\r\n\t\tthis.PerformanceIdentities = this.PerformanceIdentities || [];\r\n\r\n\t\tvar pid = {\r\n\t\t\tActive: true,\r\n\t\t\tIdentity: {\r\n\t\t\t\tActive: true\r\n\t\t\t},\r\n\t\t\tPerformance: {\r\n\t\t\t\tActive: true,\r\n\t\t\t\tBatch: {\r\n\t\t\t\t\tActive: true,\r\n\t\t\t\t\tEnabled: true\r\n\t\t\t\t},\r\n\t\t\t\tDataSet: dSet,\r\n\t\t\t\tOPERATORS: {},\r\n\t\t\t\tPerformanceIdentities: [{\r\n\t\t\t\t\tActive: true,\r\n\t\t\t\t\tIdentity: wid || {\r\n\t\t\t\t\t\tActive: true\r\n\t\t\t\t\t},\r\n\t\t\t\t}]\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif (this.Group) {\r\n\t\t\tpid.Identity.Group = this.Group;\r\n\t\t}\r\n\t\tif (!bOR) {\r\n\t\t\tif (!this.OPERATORS) this.OPERATORS = {};\r\n\t\t\tthis.OPERATORS.PerformanceIdentities = \"INTERSECT\";\r\n\t\t}\r\n\t\tif (start || end) {\r\n\t\t\tvar last = pid.Performance.PerformanceIdentities[0];\r\n\t\t\tif (start || end) {\r\n\t\t\t\tlast.Performance = {\r\n\t\t\t\t\tDataSet: dSet,\r\n\t\t\t\t\tActive: true,\r\n\t\t\t\t\tBatch: {\r\n\t\t\t\t\t\tActive: true,\r\n\t\t\t\t\t\tEnabled: true\r\n\t\t\t\t\t},\r\n\t\t\t\t\tOPERATORS: {}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (start && end) {\r\n\t\t\t\t// between\r\n\t\t\t\tlast.Performance.TakenOn = start;\r\n\t\t\t\tlast.Performance.OPERATORS.TakenOn = \"BETWEEN \" + (window.sr.toDateTime(end) || end);\r\n\r\n\t\t\t\tpid.Performance.TakenOn = start;\r\n\t\t\t\tpid.Performance.OPERATORS.TakenOn = \"BETWEEN \" + (window.sr.toDateTime(end) || end);\r\n\t\t\t} else if (start && !end) {\r\n\t\t\t\t// after\r\n\t\t\t\tlast.Performance.TakenOn = start;\r\n\t\t\t\tlast.Performance.OPERATORS.TakenOn = \">\";\r\n\r\n\t\t\t\tpid.Performance.TakenOn = start;\r\n\t\t\t\tpid.Performance.OPERATORS.TakenOn = \">\";\r\n\t\t\t} else if (!start && end) {\r\n\t\t\t\t// after\r\n\t\t\t\tlast.Performance.TakenOn = end;\r\n\t\t\t\tlast.Performance.OPERATORS.TakenOn = \"<\";\r\n\r\n\t\t\t\tpid.Performance.TakenOn = end;\r\n\t\t\t\tpid.Performance.OPERATORS.TakenOn = \"<\";\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.PerformanceIdentities.push(pid);\r\n\t\treturn this;\r\n\t}\r\n\r\n\tthis.all = function(fCallback) {\r\n\t\tsr._(\"comIdentityFindall\", function(ret) {\r\n\t\t\tif (fCallback) fCallback(ret);\r\n\t\t}, this);\r\n\t}\r\n\r\n\tthis.count = function(fCallback) {\r\n\t\tsr._(\"comIdentityCount\", function(c) {\r\n\t\t\tif (fCallback) fCallback(c);\r\n\t\t}, this);\r\n\t}\r\n\r\n\tthis.each = function(arID, fName, fCallback, fDone) {\r\n\t\tif (!arID.length) {\r\n\t\t\tif (fDone) fDone();\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tarID[0][fName](function(ret) {\r\n\t\t\tif (fCallback) fCallback(arID[0], ret);\r\n\t\t\tnew Identity().each(arID.slice(1, arID.length), fName, fCallback, fDone);\r\n\t\t});\r\n\t}\r\n\r\n\tthis.performance = function(dSet, start, end) {\r\n\t\tvar p = {\r\n\t\t\tActive: true,\r\n\t\t\tBatch: {\r\n\t\t\t\tActive: true,\r\n\t\t\t\tEnabled: true\r\n\t\t\t},\r\n\t\t\tDataSet: dSet,\r\n\t\t\tPerformanceIdentities: [{\r\n\t\t\t\tActive: true,\r\n\t\t\t\tIdentity: this\r\n\t\t\t}],\r\n\t\t};\r\n\r\n\t\tif (start || end) {\r\n\t\t\tp.OPERATORS = p.OPERATORS || {};\r\n\t\t\tif (start && end) {\r\n\t\t\t\t// between\r\n\t\t\t\tp.TakenOn = start;\r\n\t\t\t\tp.OPERATORS.TakenOn = \"BETWEEN \" + (window.sr.toDateTime(end) || end);\r\n\t\t\t} else if (start && !end) {\r\n\t\t\t\t// after\r\n\t\t\t\tp.TakenOn = start;\r\n\t\t\t\tp.OPERATORS.TakenOn = \">\";\r\n\t\t\t} else if (!start && end) {\r\n\t\t\t\t// after\r\n\t\t\t\tp.TakenOn = end;\r\n\t\t\t\tp.OPERATORS.TakenOn = \"<\";\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn p;\r\n\t}\r\n\r\n\tthis.with = function(dataMap, value, comp, bOR, start, end) {\r\n\t\tthis.value(dataMap, comp, bOR, start, end);\r\n\t\tvar v = this.PerformanceIdentities[this.PerformanceIdentities.length - 1].Performance.PerformanceValues[0];\r\n\t\tv.Value = value;\r\n\t\tif (comp) {\r\n\t\t\tv.OPERATORS = {\r\n\t\t\t\tValue: comp\r\n\t\t\t};\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\r\n\tthis.value = function(dataMap, bOR, start, end) {\r\n\t\tthis.PerformanceIdentities = this.PerformanceIdentities || [];\r\n\t\tthis.PerformanceIdentities.push({\r\n\t\t\tActive: true,\r\n\t\t\tPerformance: {\r\n\t\t\t\tActive: true,\r\n\t\t\t\tBatch: {\r\n\t\t\t\t\tActive: true,\r\n\t\t\t\t\tEnabled: true\r\n\t\t\t\t},\r\n\t\t\t\tPerformanceValues: [{\r\n\t\t\t\t\tActive: true,\r\n\t\t\t\t\tDataMapValue: dataMap,\r\n\t\t\t\t}]\r\n\t\t\t}\r\n\t\t});\r\n\t\tif (!bOR) {\r\n\t\t\tif (!this.OPERATORS) this.OPERATORS = {};\r\n\t\t\tthis.OPERATORS.PerformanceIdentities = \"INTERSECT\";\r\n\t\t}\r\n\t\tif (start || end) {\r\n\t\t\tvar last = this.PerformanceIdentities[this.PerformanceIdentities.length - 1];\r\n\t\t\tlast.Performance.OPERATORS = last.Performance.OPERATORS || {};\r\n\t\t\tif (start && end) {\r\n\t\t\t\t// between\r\n\t\t\t\tlast.Performance.TakenOn = start;\r\n\t\t\t\tlast.Performance.OPERATORS.TakenOn = \">=\"; //[\"BETWEEN\", end];\r\n\t\t\t} else if (start && !end) {\r\n\t\t\t\t// after\r\n\t\t\t\tlast.Performance.TakenOn = start;\r\n\t\t\t\tlast.Performance.OPERATORS.TakenOn = \">\";\r\n\t\t\t} else if (!start && end) {\r\n\t\t\t\t// after\r\n\t\t\t\tlast.Performance.TakenOn = end;\r\n\t\t\t\tlast.Performance.OPERATORS.TakenOn = \"<\";\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n}\r\n\r\nfunction RunAnalytic(o) {\r\n\tthis.o = o;\r\n\tthis.ids = [];\r\n\tthis.idOver = [];\r\n\t\r\n\tthis.dates = function(start, end){\r\n\t    start = start || moment(this.o.startDate);\r\n\t    end = end || moment(this.o.endDate);\r\n\t    \r\n        start = moment(start).startOf(\'month\');\r\n        end = moment(end).startOf(\'month\');\r\n\t    \r\n    \tvar ret = [];\r\n    \tfor (var d = moment(start); d <= moment(end).add(this.o.Interval).startOf(\'month\'); ret.push(moment(d).toDate()), d.add(this.o.Interval));\r\n    \treturn ret;\r\n\t}\r\n\t\r\n\tthis.run = function(fCallBack) {\r\n\t    this.idOver = [];\r\n        $.when(sr.import($.map([\"ImportModule\"], x => \"Hosted/COM/\" + x))).then((...pages) => {\r\n            var mi = new ImportModule({Organization: {Code: \'ARZ\', OPERATORS: {Code: \'=\'}}});\r\n            mi.setTemplate(pages[0][0].Body);\r\n            $.when(mi.generate()).then(() => {\r\n\r\n                var g = new window[this.name(this.o.Group.Name)]();\r\n                var gMethod = this.o.DataSet.DataMap.Name;\r\n                if(this.o.Role){\r\n                    g.role(this.o.Role.Name);\r\n                    gMethod = this.o.Role.Name + gMethod;\r\n                }\r\n \r\n                var start = moment(this.o.startDate).startOf(\'month\');\r\n                var end = moment(this.o.endDate).startOf(\'month\');\r\n        \r\n                if(this.o.SubGroup){\r\n                    var over = new window[this.o.SubGroup.Name]();\r\n                    var method = this.o.DataSet.DataMap.Name;\r\n                    if(this.o.SubRole){\r\n                        over.role(this.o.SubRole.Name);\r\n                        method = this.o.SubRole.Name + method;\r\n                    }\r\n                    var options = {};\r\n                    if(this.o.FilterGroup){\r\n                        options[this.o.FilterGroup.Name] = {Id: this.o.FilterOptions.Id};\r\n                    }\r\n                    over[this.name(method)](options, start, end);\r\n                    this.idOver.push(over._identity);\r\n\r\n                    g[this.name(gMethod)](options, start, end);\r\n                }\r\n\r\n                sr._(\"CorporateMeasures.com\" + (this.o.MapValue ? \"IdentityValues\" : \"GroupCounts\"), null, g._identity, this.idOver, this.dates(), this.o.Aggregation).then(ret => {\r\n                    if(fCallBack) fCallBack(this.data(window.DForm.topData(ret, \"PARTITIONID\", \"V0\", this.o.Top)), ret);\r\n                });\r\n            });\r\n        });\r\n\t};\r\n\t\r\n\tthis.name = function(s){\r\n\t    return s.replace(/[\\ |\\-|\\.]/g, \'\');\r\n\t};\r\n\t\r\n\tthis._run = function(fCallBack) {\r\n\t\tthis.ids = [];\r\n\t\tthis.idOver = [];\r\n\r\n\t\tvar n900 = -900;\r\n\t\tthis.ids.push(new Identity().ofGroup(this.o.Group, this.o.Role));\r\n\t\tif (this.o.SubGroup) {\r\n\t\t\tvar subGroup = new Identity().ofGroup(this.o.SubGroup, this.o.SubRole);\r\n\t\t\tif (this.o.SubIdentities) subGroup.THIS = this.o.SubIdentities;\r\n\t\t\tthis.idOver.push(subGroup);\r\n\r\n\t\t\tthis.ids.push(new Identity().Id(n900--).ofGroup(this.o.SubGroup, this.o.SubRole));\r\n\t\t}\r\n\t\tif (this.o.filterGroup || this.o.groupValues) {\r\n\t\t\tif (this.o.groupValues) {\r\n\t\t\t\tthis.idOver.push(this.o.groupValues);\r\n\t\t\t} else {\r\n\t\t\t\tthis.idOver.push(new Identity().ofGroup(this.o.filterGroup));\r\n\t\t\t}\r\n\r\n\t\t\tthis.ids.push(new Identity().Id(n900--).ofGroup(this.o.filterGroup));\r\n\t\t}\r\n\r\n        var total = [];\r\n        var doRun = function(_this, start, end, _callBack){\r\n            // just to be sure, start and end should be the start of the month\r\n            start = moment(start).startOf(\'month\');\r\n            end = moment(end).startOf(\'month\');\r\n\r\n    \t\tif(_this.o.Async){\r\n    \t\t    sr.bAsync = true;\r\n    \t\t}\r\n    \t\tsr._(\"CorporateMeasures.com\" + (_this.o.MapValue ? \"IdentityValues\" : \"GroupCounts\"), (res) => {\r\n    \t\t    if(_this.o.Async && window.sr.bLocal){\r\n    \t\t        // we get back a MethodResult\r\n    \t\t        var timeout = setInterval(() => {\r\n    \t\t            sr._(\"ContentManager.cmsMethodResultFind\", null, {Code: res.Code}).then((mret) => {\r\n    \t\t                if(mret.Result){\r\n    \t\t                    sr.runScript(mret.Result);\r\n    \t\t                    clearInterval(timeout);\r\n\t\t                        $.merge(total, ret);\r\n    \t\t                    if(end<moment(_this.o.endDate).startOf(\'month\')){\r\n    \t\t                        // continue the call\r\n    \t\t                        doRun(_this, start.add(_this.o.Interval), end.add(_this.o.Interval), _callBack);\r\n    \t\t                    }else{\r\n        \t\t                    if(_callBack) _callBack(total);\r\n    \t\t                    }\r\n    \t\t                }\r\n    \t\t            });\r\n    \t\t        }, _this.o.PollSeconds*1000);\r\n    \t\t    }else{\r\n\t\t            $.merge(total, res);\r\n    \t\t        if(end<moment(_this.o.endDate).startOf(\'month\')){\r\n    \t\t            // continue the call\r\n    \t\t            doRun(_this, start.add(_this.o.Interval), end.add(_this.o.Interval), _callBack);\r\n    \t\t        }else{\r\n        \t\t        if(_callBack) _callBack(total);\r\n    \t\t        }\r\n    \t\t    }\r\n    \t\t}, _this.lastId(), _this.idOver, _this.dates(start, end), _this.o.Aggregation);\r\n        };\r\n\r\n        doRun(this, this.o.startDate, this.o.Divide?moment(this.o.startDate).add(this.o.Interval).subtract(1, \'second\').toDate():this.o.endDate, (ret) => {\r\n\t        if(fCallBack) fCallBack(this.data(window.DForm.topData(ret, \"PARTITIONID\", \"V0\", this.o.Top)), ret);\r\n        });\r\n\t}\r\n\r\n\tthis.pivot = function(total, format) {\r\n\t\tvar ret = [];\r\n\t\tvar times = groupBy(total, \'PARTITIONID\');\r\n\t\tfor (var i = 0; i < times.length; i++) {\r\n\t\t\tvar groups = groupBy(times[i].values, \'name\');\r\n\t\t\tfor (var j = 0; j < groups.length; j++) {\r\n\t\t\t\tret.push({\r\n\t\t\t\t\tTime: moment(times[i].key).format(format).toString(),\r\n\t\t\t\t\tDimension: groups[j].key,\r\n\t\t\t\t\tAggregation: groups[j].values[0].V0\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn ret;\r\n\t}\r\n\r\n\tthis.data = function(total) {\r\n\t\tif (this.o.Transformation) {\r\n\t\t\t// there is a transformation to be applied to the data. Get the operations and changesteps first\r\n\t\t\tsr._(\"CorporateMeasures.comChangeStepFindall\", null, {\r\n\t\t\t\tTransformation: this.o.Transformation\r\n\t\t\t}).done(function(csteps) {\r\n\t\t\t\t$.each(total, function(i, t) {\r\n\t\t\t\t\tif (t.V0 === \'\') {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t$.each(csteps, function(j, s) {\r\n\t\t\t\t\t\tvar script = s.Operation.Script;\r\n\t\t\t\t\t\t$.each(s.Parameters.split(\'|\'), function(k, p) {\r\n\t\t\t\t\t\t\tscript = script.replace(new RegExp(\'{{[\' + k + \']}}\', \'g\'), p);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tscript = script.replace(new RegExp(\'{{o}}\', \'g\'), t.V0);\r\n\t\t\t\t\t\tt.V0 = sr.runScript(script);\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tvar title = (this.o.Top ? \"Top \" + this.o.Top + \" \" : \"\") + (this.o.groupValues ? this.o.groupValues.Name + \" \" : \"\");\r\n\t\ttitle += this.o.MapValue ? this.o.MapValue.Name : (this.o.Role ? this.o.Role.Name + \" \" : \"\") + this.o.Group.Name;\r\n\t\ttitle += \" \" + this.o.Aggregation + \" by \" + (this.o.SubRole ? this.o.SubRole.Name + \" \" : \"\") + this.o.SubGroup.Name;\r\n\r\n\t\treturn {\r\n\t\t\ttype: this.o.Grid ? \'grid\' : \'bar\',\r\n\t\t\tdata: window.DForm.topData(total, \"PARTITIONID\", \"V0\", this.o.Top),\r\n\t\t\tlabels: [\"name\"],\r\n\t\t\tvalues: [\'V0\'],\r\n\t\t\tdimensions: [\'PARTITIONID\'],\r\n\t\t\ttitle: title,\r\n\t\t\tstartDate: this.o.startDate,\r\n\t\t\tendDate: this.o.endDate,\r\n\t\t\tinterval: this.o.Interval,\r\n\t\t};\r\n\t}\r\n\r\n\tthis.lastId = function() {\r\n\t\t//var ret = ids[ids.length-1];\r\n\t\tvar ret = null;\r\n\t\tvar p = {\r\n\t\t\tActive: true,\r\n\t\t\tTakenOn: this.o.startDate,\r\n\t\t\tOPERATORS: {\r\n\t\t\t\tTakenOn: \"BETWEEN \" + (window.sr.toDateTime(this.o.endDate) || this.o.endDate),\r\n\t\t\t\tPerformanceIdentities: \"INTERSECT\"\r\n\t\t\t},\r\n\t\t\tDataSet: this.o.DataSet,\r\n\t\t\tBatch: {\r\n\t\t\t\tActive: true,\r\n\t\t\t\tEnabled: true\r\n\t\t\t},\r\n\t\t\tPerformanceIdentities: []\r\n\t\t};\r\n\t\tif (this.o.MapValue) {\r\n\t\t\tret = {\r\n\t\t\t\tActive: true,\r\n\t\t\t\tDataMapValue: this.o.MapValue,\r\n\t\t\t\tPerformance: p,\r\n\t\t\t};\r\n\t\t} else {\r\n\t\t\tret = this.ids[0] || {\r\n\t\t\t\tActive: true,\r\n\t\t\t};\r\n\t\t\tret.PerformanceIdentities = [{\r\n\t\t\t\tActive: true,\r\n\t\t\t\tPerformance: p,\r\n\t\t\t}];\r\n\t\t}\r\n\t\tvar pis = null;\r\n\t\tif (this.o.MapValue) {\r\n\t\t\tpis = ret.Performance.PerformanceIdentities;\r\n\t\t} else {\r\n\t\t\tpis = ret.PerformanceIdentities[0].Performance.PerformanceIdentities;\r\n\t\t}\r\n\t\tfor (var _i = this.ids.length - 1; _i > 0; _i--) {\r\n\t\t\tpis.push({\r\n\t\t\t\tActive: true,\r\n\t\t\t\tIdentity: this.ids[_i],\r\n\t\t\t\tDataField: {\r\n\t\t\t\t    Active: true,\r\n\t\t\t\t    Group: this.ids[_i].Group,\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn ret;\r\n\t}\r\n}";
ret[0].Title = "Utility Classes";
ret[0].Id = 1591;
ret[0].Authorid = 0;
ret[0].SectionPages = new Array();
ret[0].PageMenus = new Array();
ret[0].RelatingPages = new Array();
ret[0].RelatedPages = new Array();
ret[0].PageAccessRules = new Array();
ret[0].BugReports = new Array();
ret[0].PageAccessRights = new Array();
ret[0].PageStatuses = new Array();
ret[0].ReferenceMenus = new Array();
ret[0].PageAccessRequests = new Array();
ret[0].FeedbackPages = new Array();
ret[0].PageHelps = new Array();