var method_name = "CorporateMeasures.comChangeStepFindall";

var server_time = new Date(2018, 8-1, 13, 7, 44, 26);

var execution_time = 2.110266;


var ret = new Array();
ret = new Array();
ret[0] = new Object();
ret[0].ToString = "Exam-Subs";
ret[0]._ToString = "Exam-Subs";
ret[0].Active = true;
ret[0].Date = new Date(2016, 11-1, 8, 4, 38, 0);
ret[0].Enabled = true;
ret[0].Name = "Exam-Subs";
ret[0].Order = 0;
ret[0].Parameters = "-|{{Subs}}";
ret[0].Remark = "";
ret[0].Id = 2;
ret[0].Operationid = 2;
ret[0].Operation = new Object();
ret[0].Operation.ToString = "Append";
ret[0].Operation._ToString = "Append";
ret[0].Operation.Active = true;
ret[0].Operation.Date = new Date(2016, 11-1, 22, 1, 43, 0);
ret[0].Operation.Enabled = true;
ret[0].Operation.Name = "Append";
ret[0].Operation.Remark = "Concatenate two inputs and add a third between them";
ret[0].Operation.Script = "\"{{o}}\"+\"{{0}}\"+\"{{1}}\"";
ret[0].Operation.Id = 2;
ret[0].Operation.ChangeSteps = new Array();
ret[0].Transformationid = 2;
ret[0].Transformation = new Object();
ret[0].Transformation.ToString = "Put Dash Between Fields";
ret[0].Transformation._ToString = "Put Dash Between Fields";
ret[0].Transformation.Active = true;
ret[0].Transformation.Code = "DashBetween";
ret[0].Transformation.Date = new Date(2016, 11-1, 8, 15, 46, 30);
ret[0].Transformation.Enabled = true;
ret[0].Transformation.Name = "Put Dash Between Fields";
ret[0].Transformation.Order = 0;
ret[0].Transformation.Remark = "";
ret[0].Transformation.Id = 2;
ret[0].Transformation.DataMapValues = new Array();
ret[0].Transformation.NameDataFields = new Array();
ret[0].Transformation.CodeDataFields = new Array();
ret[0].Transformation.ChangeSteps = new Array();
ret[1] = new Object();
ret[1].ToString = "Trim Last 6";
ret[1]._ToString = "Trim Last 6";
ret[1].Active = true;
ret[1].Date = new Date(2016, 10-1, 24, 15, 44, 8);
ret[1].Enabled = true;
ret[1].Name = "Trim Last 6";
ret[1].Order = 0;
ret[1].Parameters = "0|6";
ret[1].Remark = "Trim the last 6 digits of the barcode";
ret[1].Id = 1;
ret[1].Operationid = 1;
ret[1].Operation = new Object();
ret[1].Operation.ToString = "Sub String";
ret[1].Operation._ToString = "Sub String";
ret[1].Operation.Active = true;
ret[1].Operation.Date = new Date(2016, 10-1, 24, 10, 28, 0);
ret[1].Operation.Enabled = true;
ret[1].Operation.Name = "Sub String";
ret[1].Operation.Remark = "Removes part of the field based on start and end positions";
ret[1].Operation.Script = "\"{{o}}\".substring({{0}}, {{1}})";
ret[1].Operation.Id = 1;
ret[1].Operation.ChangeSteps = new Array();
ret[1].Transformationid = 1;
ret[1].Transformation = new Object();
ret[1].Transformation.ToString = "Barcode To 6 Digits";
ret[1].Transformation._ToString = "Barcode To 6 Digits";
ret[1].Transformation.Active = true;
ret[1].Transformation.Code = "BCD12to6";
ret[1].Transformation.Date = new Date(2016, 10-1, 24, 15, 41, 52);
ret[1].Transformation.Enabled = true;
ret[1].Transformation.Name = "Barcode To 6 Digits";
ret[1].Transformation.Order = 0;
ret[1].Transformation.Remark = "Change a 12 Digit barcode to a 6 digit barcode";
ret[1].Transformation.Id = 1;
ret[1].Transformation.DataMapValues = new Array();
ret[1].Transformation.NameDataFields = new Array();
ret[1].Transformation.CodeDataFields = new Array();
ret[1].Transformation.ChangeSteps = new Array();
ret[2] = new Object();
ret[2].ToString = "Hours In Bed";
ret[2]._ToString = "Hours In Bed";
ret[2].Active = true;
ret[2].Date = new Date(2018, 5-1, 2, 7, 22, 18);
ret[2].Enabled = true;
ret[2].Name = "Hours In Bed";
ret[2].Order = 0;
ret[2].Parameters = "60";
ret[2].Remark = "Converts Minutes to Hours of Bed Stay";
ret[2].Id = 9;
ret[2].Operationid = 6;
ret[2].Operation = new Object();
ret[2].Operation.ToString = "Divide";
ret[2].Operation._ToString = "Divide";
ret[2].Operation.Active = true;
ret[2].Operation.Date = new Date(2018, 5-1, 2, 7, 20, 44);
ret[2].Operation.Enabled = true;
ret[2].Operation.Name = "Divide";
ret[2].Operation.Remark = "Divide two numbers";
ret[2].Operation.Script = "{{o}}/{{0}}";
ret[2].Operation.Id = 6;
ret[2].Operation.ChangeSteps = new Array();
ret[2].Transformationid = 6;
ret[2].Transformation = new Object();
ret[2].Transformation.ToString = "Stay Minutes to Hours";
ret[2].Transformation._ToString = "Stay Minutes to Hours";
ret[2].Transformation.Active = true;
ret[2].Transformation.Code = "MinToHour";
ret[2].Transformation.Date = new Date(2018, 5-1, 2, 7, 20, 4);
ret[2].Transformation.Enabled = true;
ret[2].Transformation.Name = "Stay Minutes to Hours";
ret[2].Transformation.Order = 0;
ret[2].Transformation.Remark = "Converts Minutes to Hours";
ret[2].Transformation.Id = 6;
ret[2].Transformation.DataMapValues = new Array();
ret[2].Transformation.NameDataFields = new Array();
ret[2].Transformation.CodeDataFields = new Array();
ret[2].Transformation.ChangeSteps = new Array();
ret[3] = new Object();
ret[3].ToString = "Transaction Sign";
ret[3]._ToString = "Transaction Sign";
ret[3].Active = true;
ret[3].Date = new Date(2016, 11-1, 21, 13, 58, 12);
ret[3].Enabled = true;
ret[3].Name = "Transaction Sign";
ret[3].Order = 0;
ret[3].Parameters = "{{Type}}";
ret[3].Remark = "Fix sign of column based on transaction type field.";
ret[3].Id = 4;
ret[3].Operationid = 4;
ret[3].Operation = new Object();
ret[3].Operation.ToString = "Positive or Negative";
ret[3].Operation._ToString = "Positive or Negative";
ret[3].Operation.Active = true;
ret[3].Operation.Date = new Date(2016, 11-1, 22, 1, 54, 0);
ret[3].Operation.Enabled = true;
ret[3].Operation.Name = "Positive or Negative";
ret[3].Operation.Remark = "Makes a value positive or negative based on other fields";
ret[3].Operation.Script = "{{o}}*((\"{{0}}\"==\"PR\")?-1:1)";
ret[3].Operation.Id = 4;
ret[3].Operation.ChangeSteps = new Array();
ret[3].Transformationid = 3;
ret[3].Transformation = new Object();
ret[3].Transformation.ToString = "Cost to USD with Sign";
ret[3].Transformation._ToString = "Cost to USD with Sign";
ret[3].Transformation.Active = true;
ret[3].Transformation.Code = "To_USD";
ret[3].Transformation.Date = new Date(2016, 11-1, 21, 1, 55, 0);
ret[3].Transformation.Enabled = true;
ret[3].Transformation.Name = "Cost to USD with Sign";
ret[3].Transformation.Order = 0;
ret[3].Transformation.Remark = "Convert a money value to USD with appropriate sign based on transaction type";
ret[3].Transformation.Id = 3;
ret[3].Transformation.DataMapValues = new Array();
ret[3].Transformation.NameDataFields = new Array();
ret[3].Transformation.CodeDataFields = new Array();
ret[3].Transformation.ChangeSteps = new Array();
ret[4] = new Object();
ret[4].ToString = "Cat / Serial";
ret[4]._ToString = "Cat / Serial";
ret[4].Active = true;
ret[4].Date = new Date(2016, 11-1, 25, 10, 54, 0);
ret[4].Enabled = true;
ret[4].Name = "Cat / Serial";
ret[4].Order = 0;
ret[4].Parameters = "/|{{Cat.}}";
ret[4].Remark = "Category / Serial";
ret[4].Id = 7;
ret[4].Operationid = 5;
ret[4].Operation = new Object();
ret[4].Operation.ToString = "Prepend";
ret[4].Operation._ToString = "Prepend";
ret[4].Operation.Active = true;
ret[4].Operation.Date = new Date(2016, 11-1, 25, 3, 32, 0);
ret[4].Operation.Enabled = true;
ret[4].Operation.Name = "Prepend";
ret[4].Operation.Remark = "Prepend to the existing value";
ret[4].Operation.Script = "\"{{1}}\"+\"{{0}}\"+\"{{o}}\"";
ret[4].Operation.Id = 5;
ret[4].Operation.ChangeSteps = new Array();
ret[4].Transformationid = 5;
ret[4].Transformation = new Object();
ret[4].Transformation.ToString = "PI Item Code";
ret[4].Transformation._ToString = "PI Item Code";
ret[4].Transformation.Active = true;
ret[4].Transformation.Code = "ITCPI";
ret[4].Transformation.Date = new Date(2016, 11-1, 25, 22, 53, 15);
ret[4].Transformation.Enabled = true;
ret[4].Transformation.Name = "PI Item Code";
ret[4].Transformation.Order = 0;
ret[4].Transformation.Remark = "constructs the item code as such: Line/Cat/Serial";
ret[4].Transformation.Id = 5;
ret[4].Transformation.DataMapValues = new Array();
ret[4].Transformation.NameDataFields = new Array();
ret[4].Transformation.CodeDataFields = new Array();
ret[4].Transformation.ChangeSteps = new Array();
ret[5] = new Object();
ret[5].ToString = "Item Cat / Serial";
ret[5]._ToString = "Item Cat / Serial";
ret[5].Active = true;
ret[5].Date = new Date(2016, 11-1, 25, 2, 52, 0);
ret[5].Enabled = true;
ret[5].Name = "Item Cat / Serial";
ret[5].Order = 0;
ret[5].Parameters = "/|{{Cat}}";
ret[5].Remark = "Convert Serial to Item Category / Serial";
ret[5].Id = 5;
ret[5].Operationid = 5;
ret[5].Operation = new Object();
ret[5].Operation.ToString = "Prepend";
ret[5].Operation._ToString = "Prepend";
ret[5].Operation.Active = true;
ret[5].Operation.Date = new Date(2016, 11-1, 25, 3, 32, 0);
ret[5].Operation.Enabled = true;
ret[5].Operation.Name = "Prepend";
ret[5].Operation.Remark = "Prepend to the existing value";
ret[5].Operation.Script = "\"{{1}}\"+\"{{0}}\"+\"{{o}}\"";
ret[5].Operation.Id = 5;
ret[5].Operation.ChangeSteps = new Array();
ret[5].Transformationid = 4;
ret[5].Transformation = new Object();
ret[5].Transformation.ToString = "MVTX Item Code";
ret[5].Transformation._ToString = "MVTX Item Code";
ret[5].Transformation.Active = true;
ret[5].Transformation.Code = "ITCM";
ret[5].Transformation.Date = new Date(2016, 11-1, 25, 11, 50, 0);
ret[5].Transformation.Enabled = true;
ret[5].Transformation.Name = "MVTX Item Code";
ret[5].Transformation.Order = 0;
ret[5].Transformation.Remark = "constructs the item code as such: Line/Cat/Serial";
ret[5].Transformation.Id = 4;
ret[5].Transformation.DataMapValues = new Array();
ret[5].Transformation.NameDataFields = new Array();
ret[5].Transformation.CodeDataFields = new Array();
ret[5].Transformation.ChangeSteps = new Array();
ret[6] = new Object();
ret[6].ToString = "Cost in USD";
ret[6]._ToString = "Cost in USD";
ret[6].Active = true;
ret[6].Date = new Date(2016, 11-1, 21, 0, 8, 0);
ret[6].Enabled = true;
ret[6].Name = "Cost in USD";
ret[6].Order = 0;
ret[6].Parameters = "{{Curr}}";
ret[6].Remark = "Converts the Cost based ont he Curr value:USD, EUR, LL";
ret[6].Id = 3;
ret[6].Operationid = 3;
ret[6].Operation = new Object();
ret[6].Operation.ToString = "USD Value";
ret[6].Operation._ToString = "USD Value";
ret[6].Operation.Active = true;
ret[6].Operation.Date = new Date(2016, 11-1, 22, 1, 58, 0);
ret[6].Operation.Enabled = true;
ret[6].Operation.Name = "USD Value";
ret[6].Operation.Remark = "The Value in USD";
ret[6].Operation.Script = "(function(){var fact = 1;var curr = \"{{0}}\";if(curr==\"EUR\") fact = 1/1.2;if(curr==\"LL\") fact = 1.0/1500;return {{o}}*fact;})();";
ret[6].Operation.Id = 3;
ret[6].Operation.ChangeSteps = new Array();
ret[6].Transformationid = 3;
ret[6].Transformation = new Object();
ret[6].Transformation.ToString = "Cost to USD with Sign";
ret[6].Transformation._ToString = "Cost to USD with Sign";
ret[6].Transformation.Active = true;
ret[6].Transformation.Code = "To_USD";
ret[6].Transformation.Date = new Date(2016, 11-1, 21, 1, 55, 0);
ret[6].Transformation.Enabled = true;
ret[6].Transformation.Name = "Cost to USD with Sign";
ret[6].Transformation.Order = 0;
ret[6].Transformation.Remark = "Convert a money value to USD with appropriate sign based on transaction type";
ret[6].Transformation.Id = 3;
ret[6].Transformation.DataMapValues = new Array();
ret[6].Transformation.NameDataFields = new Array();
ret[6].Transformation.CodeDataFields = new Array();
ret[6].Transformation.ChangeSteps = new Array();
ret[7] = new Object();
ret[7].ToString = "Item Line / Serial";
ret[7]._ToString = "Item Line / Serial";
ret[7].Active = true;
ret[7].Date = new Date(2016, 11-1, 25, 2, 52, 0);
ret[7].Enabled = true;
ret[7].Name = "Item Line / Serial";
ret[7].Order = 1;
ret[7].Parameters = "/|{{Line}}";
ret[7].Remark = "Convert CAT/Serial to Line/CAT/Serial";
ret[7].Id = 6;
ret[7].Operationid = 5;
ret[7].Operation = new Object();
ret[7].Operation.ToString = "Prepend";
ret[7].Operation._ToString = "Prepend";
ret[7].Operation.Active = true;
ret[7].Operation.Date = new Date(2016, 11-1, 25, 3, 32, 0);
ret[7].Operation.Enabled = true;
ret[7].Operation.Name = "Prepend";
ret[7].Operation.Remark = "Prepend to the existing value";
ret[7].Operation.Script = "\"{{1}}\"+\"{{0}}\"+\"{{o}}\"";
ret[7].Operation.Id = 5;
ret[7].Operation.ChangeSteps = new Array();
ret[7].Transformationid = 4;
ret[7].Transformation = new Object();
ret[7].Transformation.ToString = "MVTX Item Code";
ret[7].Transformation._ToString = "MVTX Item Code";
ret[7].Transformation.Active = true;
ret[7].Transformation.Code = "ITCM";
ret[7].Transformation.Date = new Date(2016, 11-1, 25, 11, 50, 0);
ret[7].Transformation.Enabled = true;
ret[7].Transformation.Name = "MVTX Item Code";
ret[7].Transformation.Order = 0;
ret[7].Transformation.Remark = "constructs the item code as such: Line/Cat/Serial";
ret[7].Transformation.Id = 4;
ret[7].Transformation.DataMapValues = new Array();
ret[7].Transformation.NameDataFields = new Array();
ret[7].Transformation.CodeDataFields = new Array();
ret[7].Transformation.ChangeSteps = new Array();
ret[8] = new Object();
ret[8].ToString = "Line / Cat / Serial";
ret[8]._ToString = "Line / Cat / Serial";
ret[8].Active = true;
ret[8].Date = new Date(2016, 11-1, 25, 10, 55, 0);
ret[8].Enabled = true;
ret[8].Name = "Line / Cat / Serial";
ret[8].Order = 1;
ret[8].Parameters = "/|{{Line}}";
ret[8].Remark = "Line / Cat / Serial";
ret[8].Id = 8;
ret[8].Operationid = 5;
ret[8].Operation = new Object();
ret[8].Operation.ToString = "Prepend";
ret[8].Operation._ToString = "Prepend";
ret[8].Operation.Active = true;
ret[8].Operation.Date = new Date(2016, 11-1, 25, 3, 32, 0);
ret[8].Operation.Enabled = true;
ret[8].Operation.Name = "Prepend";
ret[8].Operation.Remark = "Prepend to the existing value";
ret[8].Operation.Script = "\"{{1}}\"+\"{{0}}\"+\"{{o}}\"";
ret[8].Operation.Id = 5;
ret[8].Operation.ChangeSteps = new Array();
ret[8].Transformationid = 5;
ret[8].Transformation = new Object();
ret[8].Transformation.ToString = "PI Item Code";
ret[8].Transformation._ToString = "PI Item Code";
ret[8].Transformation.Active = true;
ret[8].Transformation.Code = "ITCPI";
ret[8].Transformation.Date = new Date(2016, 11-1, 25, 22, 53, 15);
ret[8].Transformation.Enabled = true;
ret[8].Transformation.Name = "PI Item Code";
ret[8].Transformation.Order = 0;
ret[8].Transformation.Remark = "constructs the item code as such: Line/Cat/Serial";
ret[8].Transformation.Id = 5;
ret[8].Transformation.DataMapValues = new Array();
ret[8].Transformation.NameDataFields = new Array();
ret[8].Transformation.CodeDataFields = new Array();
ret[8].Transformation.ChangeSteps = new Array();


ret.Count = 9;