var method_name = "ContentManager.cmsHTMLPageFindall";

var server_time = new Date(2018, 7-1, 23, 14, 8, 0);

var execution_time = 0.042641;

ret = new Array();
ret[0] = new Object();
ret[0].ToString = "Report Section";
ret[0]._ToString = "Report Section";
ret[0].AlwaysGenerate = false;
ret[0].Body = "";
ret[0].Date = new Date(2018, 7-1, 11, 7, 19, 3);
ret[0].Description = "";
ret[0].Footer = "";
ret[0].ImageSource = "";
ret[0].Page = "Hosted/COM/ReportSection";
ret[0].Public = false;
ret[0].Script = "window.ReportSection = class {\r\n    constructor(year) {\r\n        this._year = year;\r\n        this._start = moment().year(this._year).startOf(\'year\');\r\n        this._end = moment().year(this._year).endOf(\'year\');\r\n    }\r\n\r\n    _dates() {\r\n        var ret = [];\r\n        for (var d = moment(this._start); d <= moment(this._end).add({\r\n                Month: 1\r\n            }).startOf(\'month\'); ret.push(moment(d).toDate()), d.add({\r\n                Month: 1\r\n            }));\r\n        return ret;\r\n    }\r\n\r\n    _inpatient(o) {\r\n        o = o || {};\r\n        o.pcf_PatType = {\r\n            Id: 730,\r\n            OPERATORS: {\r\n                Name: \'=\'\r\n            }\r\n        };\r\n        return o;\r\n    }\r\n\r\n    _outpatient(o) {\r\n        o = o || {};\r\n        o.pcf_PatType = {\r\n            Id: 938,\r\n            OPERATORS: {\r\n                Name: \'=\'\r\n            }\r\n        };\r\n        return o;\r\n    }\r\n\r\n    _referring(o) {\r\n        o = o || {};\r\n        o.RefDocCode = {\r\n            Id: -900\r\n        };\r\n        return o;\r\n    }\r\n\r\n    _attending(o) {\r\n        o = o || {};\r\n        o.TrDocCode = {\r\n            Id: -900\r\n        };\r\n        return o;\r\n    }\r\n\r\n    _pivot(total, format) {\r\n        var ret = [];\r\n        var times = groupBy(total, \'PARTITIONID\');\r\n        for (var i = 0; i < times.length; i++) {\r\n            var groups = groupBy(times[i].values, \'name\');\r\n            for (var j = 0; j < groups.length; j++) {\r\n                ret.push({\r\n                    Time: moment(times[i].key).format(format).toString(),\r\n                    Dimension: groups[j].key,\r\n                    Aggregation: groups[j].values[0].V0\r\n                });\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    _asZingOptions(data) {\r\n        var options = {\r\n            \"graphset\": []\r\n        };\r\n\r\n        for (var g = 0; g < data.labels.length; g++) {\r\n            var gset = {\r\n                type: data.type || \"bar\",\r\n                options: {},\r\n            };\r\n\r\n            if (data.type == \"grid\") {\r\n                gset.options.style = {\r\n                    \".th\": {\r\n                        \"y\": \"0px\",\r\n                        \"background-color\": \"#7ca82b\",\r\n                        \"font-color\": \"#fff\",\r\n                        \"font-size\": \"12\",\r\n                        \"font-weight\": \"none\",\r\n                        \"height\": \"20px\"\r\n                    }\r\n                };\r\n                gset.options[\"col-labels\"] = [];\r\n            }\r\n            gset[\"stacked\"] = data.labels.length > 0;\r\n            gset[\"plot\"] = {\r\n                \"value-box\": {\r\n                    value: \"%v\",\r\n                    placement: \"top-in\",\r\n                    \"font-color\": \"white\",\r\n                },\r\n                tooltip: {\r\n                    value: \"%v\"\r\n                }\r\n            };\r\n            if (data.type != \"grid\") {\r\n                gset[\"plotarea\"] = {\r\n                    \"margin-right\": \"25%\"\r\n                };\r\n                gset[\"legend\"] = {\r\n                    \"toggle-action\": \"hide\",\r\n                    \"item\": {\r\n                        \"cursor\": \"pointer\"\r\n                    },\r\n                    \"draggable\": true,\r\n                    \"drag-handler\": \"icon\"\r\n                };\r\n            }\r\n            gset[\"title\"] = {\r\n                \"text\": data.title,\r\n                \"font-family\": \"arial\",\r\n                \"x\": \"40px\",\r\n                \"y\": \"5px\",\r\n                \"align\": \"left\",\r\n                \"bold\": false,\r\n                \"font-size\": \"16px\",\r\n                \"font-color\": \"#000000\",\r\n                \"background-color\": \"none\"\r\n            };\r\n            gset[\"subtitle\"] = {\r\n                \"text\": \"<i>\" + \"Between \" + moment(data.startDate).format(\"DD/MM/YYYY\") + \" and \" + moment(data.endDate).format(\"DD/MM/YYYY\") + \"</i>\",\r\n                \"font-family\": \"arial\",\r\n                \"x\": \"40px\",\r\n                \"y\": \"25px\",\r\n                \"align\": \"left\",\r\n                \"bold\": false,\r\n                \"font-size\": \"16px\",\r\n                \"font-color\": \"#7E7E7E\",\r\n                \"background-color\": \"none\"\r\n            };\r\n\r\n            gset.labels = [];\r\n            for (var t = 0; t < gset.labels.length; t++) {\r\n                gset.labels[t] = {\r\n                    \"text\": gset.labels[t],\r\n                    \"hook\": \"node:plot=2;index=\" + t\r\n                };\r\n            }\r\n            gset[\"scaleX\"] = {\r\n                \"values\": [],\r\n            };\r\n            var labels = groupBy(data.data, data.dimensions[0]);\r\n            for (var i = 0; i < labels.length; i++) {\r\n                gset[\"scaleX\"].values.push(moment(labels[i].key).format(data.interval.Format).toString());\r\n            }\r\n\r\n            gset.series = [];\r\n            var gData = groupBy(data.data, data.labels[g]);\r\n            for (var i = 0; i < gData.length; i++) {\r\n                if (data.type == \"grid\") {\r\n                    gset.options[\"col-labels\"].push(gData[i].key);\r\n                }\r\n                var values = Array(labels.length);\r\n                for (var j = 0; j < gData[i].values.length; j++) {\r\n                    var v = gData[i].values[j];\r\n                    for (var l = 0; l < labels.length; l++) {\r\n                        if (labels[l].key == v[data.dimensions[0]]) {\r\n                            values[l] = parseInt(v[data.values[0]]);\r\n                        }\r\n                    }\r\n                }\r\n                gset.series.push({\r\n                    values: values,\r\n                    text: gData[i].key,\r\n                });\r\n            }\r\n\r\n            // for grid type, transpose the values\r\n            if (data.type == \"grid\") {\r\n                var s = gset.series;\r\n                // the series values need to be transposed\r\n                var series = [];\r\n                for (var _s = 0; _s < gset[\"scaleX\"].values.length; _s++) {\r\n                    series[_s] = {\r\n                        values: [gset[\"scaleX\"].values[_s]]\r\n                    };\r\n                    for (var c = 0; c < s.length; c++) {\r\n                        series[_s].values.push(s[c].values[_s]);\r\n                    }\r\n                }\r\n                gset.series = series;\r\n                gset.options[\"col-labels\"].unshift(\"\");\r\n\r\n                var maxColWidth = 20;\r\n                for (var _o = 0; _o < gset.options[\"col-labels\"].length; _o++) {\r\n                    var v = gset.options[\"col-labels\"][_o];\r\n                    if (v.length > maxColWidth - 1) {\r\n                        gset.options[\"col-labels\"][_o] = v.toString().substring(0, maxColWidth);\r\n                    }\r\n                }\r\n            }\r\n\r\n            options.graphset.push(gset);\r\n        }\r\n        //console.log(options);\r\n        return options;\r\n    }\r\n\r\n    _topData(ar, gField, vField, top) {\r\n        if (!top) {\r\n            return ar;\r\n        }\r\n\r\n        ret = [];\r\n        $.each(sr.groupBy(ar, gField), function(key, values) {\r\n            values.values.sort(function(a, b) {\r\n                if (parseFloat(a[vField]) < parseFloat(b[vField])) {\r\n                    return 1;\r\n                } else if (parseFloat(a[vField]) > parseFloat(b[vField])) {\r\n                    return -1;\r\n                } else {\r\n                    return 0;\r\n                }\r\n            });\r\n            $.each(values.values, function(i, v) {\r\n                if (i < top) {\r\n                    ret.push(v);\r\n                }\r\n            });\r\n        });\r\n        return ret;\r\n    }\r\n\r\n    _data(total, type, title) {\r\n        return {\r\n            type: type || \'bar\' /*grid*/ ,\r\n            data: this._topData(total, \"PARTITIONID\", \"V0\", 5),\r\n            labels: [\"name\"],\r\n            values: [\'V0\'],\r\n            dimensions: [\'PARTITIONID\'],\r\n            title: /*\"Top \" + top + \" \" + */ title || \"\",\r\n            startDate: this._start,\r\n            endDate: this._end,\r\n            interval: {\r\n                Month: 1,\r\n                Format: \'MMM/YY\'\r\n            },\r\n        };\r\n    }\r\n\r\n    \'Physicians by Gender\'() {\r\n        return sr._(\"CorporateMeasures.comGroupCounts\", null, new Doctor().StatusPhysicians({\r\n            Doc_Sex: {\r\n                Id: -900\r\n            }\r\n        }, this._start, this._end)._identity, [\r\n            new Gender()._identity\r\n        ], this._dates());\r\n    }\r\n\r\n    \'Physicians by Category\'() {\r\n        return sr._(\"CorporateMeasures.comGroupCounts\", null, new Doctor().StatusPhysicians({\r\n            Dos_Code: {\r\n                Id: -900\r\n            }\r\n        }, this._start, this._end)._identity, [\r\n            new DoctorSpeciality()._identity\r\n        ], this._dates());\r\n    }\r\n\r\n    \'Employees by Job Type\'() {\r\n        return sr._(\"CorporateMeasures.comGroupCounts\", null, new Employee().StatusEmployees({\r\n            Job_TypeCode: {\r\n                Id: -900\r\n            }\r\n        }, this._start, this._end)._identity, [\r\n            new JobType()._identity\r\n        ], this._dates());\r\n    }\r\n\r\n    \'Employees by Status\'() {\r\n        return sr._(\"CorporateMeasures.comGroupCounts\", null, new Employee().StatusEmployees({\r\n            Emp_Status: {\r\n                Id: -900\r\n            }\r\n        }, this._start, this._end)._identity, [\r\n            new EmployeeStatus()._identity\r\n        ], this._dates());\r\n    }\r\n\r\n    \'Employees by Department\'() {\r\n        return sr._(\"CorporateMeasures.comGroupCounts\", null, new Employee().StatusEmployees({\r\n            Dep_Code: {\r\n                Id: -900\r\n            }\r\n        }, this._start, this._end)._identity, [\r\n            new Department()._identity\r\n        ], this._dates());\r\n    }\r\n\r\n    \'Admissions by Type\'() {\r\n        return sr._(\"CorporateMeasures.comGroupCounts\", null, new Patient().StatusAdmissions({\r\n            pcf_PatType: {\r\n                Id: -900\r\n            }\r\n        }, this._start, this._end)._identity, [\r\n            new PatientType()._identity\r\n        ], this._dates());\r\n    }\r\n\r\n    \'Inpatients by Referrals\'() {\r\n        sr.bAsync = true;\r\n        return sr._(\"CorporateMeasures.comGroupCounts\", null, new Patient().StatusAdmissions(\r\n            this._referring(this._inpatient()), this._start, this._end)._identity, [\r\n            new Doctor().ReferringStatusAdmissions(this._inpatient(), this._start, this._end)._identity\r\n        ], this._dates());\r\n    }\r\n\r\n    \'Inpatients by Attending\'() {\r\n        sr.bAsync = true;\r\n        return sr._(\"CorporateMeasures.comGroupCounts\", null, new Patient().StatusAdmissions(\r\n            this._attending(this._inpatient()), this._start, this._end)._identity, [\r\n            new Doctor().TreatingStatusAdmissions(this._inpatient(), this._start, this._end)._identity\r\n        ], this._dates());\r\n    }\r\n\r\n    \'Outpatients by Referrals\'() {\r\n        sr.bAsync = true;\r\n        return sr._(\"CorporateMeasures.comGroupCounts\", null, new Patient().StatusAdmissions(\r\n            this._referring(this._outpatient()), this._start, this._end)._identity, [\r\n            new Doctor().ReferringStatusAdmissions(this._outpatient(), this._start, this._end)._identity\r\n        ], this._dates());\r\n    }\r\n\r\n    \'Outpatients by Attending\'() {\r\n        sr.bAsync = true;\r\n        return sr._(\"CorporateMeasures.comGroupCounts\", null, new Patient().StatusAdmissions(\r\n            this._attending(this._outpatient()), this._start, this._end)._identity, [\r\n            new Doctor().TreatingStatusAdmissions(this._outpatient(), this._start, this._end)._identity\r\n        ], this._dates());\r\n    }\r\n\r\n    \'Inpatients by Department\'() {\r\n        return sr._(\"CorporateMeasures.comGroupCounts\", null, new Patient().StatusAdmissions(\r\n            this._inpatient({\r\n                Dep_Code: {\r\n                    Id: -900\r\n                }\r\n            }), this._start, this._end)._identity, [\r\n            new Department()._identity\r\n        ], this._dates());\r\n    }\r\n\r\n    \'Outpatients by Department\'() {\r\n        return sr._(\"CorporateMeasures.comGroupCounts\", null, new Patient().StatusAdmissions(\r\n            this._outpatient({\r\n                Dep_Code: {\r\n                    Id: -900\r\n                }\r\n            }), this._start, this._end)._identity, [\r\n            new Department()._identity\r\n        ], this._dates());\r\n    }\r\n\r\n    \'Inpatients by Re-admission\'() {\r\n        return sr._(\"CorporateMeasures.comGroupCounts\", null, new Patient().StatusAdmissions(\r\n            this._inpatient({\r\n                pcf_AdmBefore: {\r\n                    Id: -900\r\n                }\r\n            }), this._start, this._end)._identity, [\r\n            new AdmittedBefore()._identity\r\n        ], this._dates());\r\n    }\r\n\r\n    \'AVG LOS by Division\'() {\r\n        return sr._(\"CorporateMeasures.comIdentityValues\", null, new Patient().StatusStay({\r\n            Mes_Code: {\r\n                Id: -900\r\n            }\r\n        }, this._start, this._end).TimeInBed(this._start, this._end), [\r\n            new MedicalService()._identity\r\n        ], this._dates(), \"(1.0/60)*AVG\");\r\n    }\r\n\r\n    \'Consultations by Division\'() {\r\n        return sr._(\"CorporateMeasures.comGroupCounts\", null, new Patient().Consulations({\r\n            Mes_Code: {\r\n                Id: -900\r\n            }\r\n        }, this._start, this._end)._identity, [\r\n            new MedicalService()._identity\r\n        ], this._dates());\r\n    }\r\n\r\n    \'Inpatients by Coverage\'() {\r\n        sr.bAsync = true;\r\n        return sr._(\"CorporateMeasures.comGroupCounts\", null, new Patient().StatusAdmissions(\r\n            this._inpatient({\r\n                Cov_Code: {\r\n                    Id: -900\r\n                }\r\n            }), this._start, this._end)._identity, [\r\n            new Coverage()._identity\r\n        ], this._dates());\r\n    }\r\n\r\n    \'Outpatients by Coverage\'() {\r\n        sr.bAsync = true;\r\n        return sr._(\"CorporateMeasures.comGroupCounts\", null, new Patient().StatusAdmissions(\r\n            this._outpatient({\r\n                Cov_Code: {\r\n                    Id: -900\r\n                }\r\n            }), this._start, this._end)._identity, [\r\n            new Coverage()._identity\r\n        ], this._dates());\r\n    }\r\n\r\n    \'Lab Exams by Patient Type\'() {\r\n        sr.bAsync = true;\r\n        return sr._(\"CorporateMeasures.comGroupCounts\", null, new LabRequestDetail().LabMap({\r\n            pcf_PatType: {\r\n                Id: -900\r\n            }\r\n        }, this._start, this._end)._identity, [\r\n            new PatientType()._identity\r\n        ], this._dates());\r\n    }\r\n\r\n    \'Operations by Patient Type\'() {\r\n        sr.bAsync = true;\r\n        return sr._(\"CorporateMeasures.comGroupCounts\", null, new OprRequestDetail().OperationsMap({\r\n            pcf_PatType: {\r\n                Id: -900\r\n            }\r\n        }, this._start, this._end)._identity, [\r\n            new PatientType()._identity\r\n        ], this._dates());\r\n    }\r\n\r\n    \'Operations by Medical Acts\'() {\r\n        sr.bAsync = true;\r\n        return sr._(\"CorporateMeasures.comGroupCounts\", null, new OprRequestDetail().OperationsMap({\r\n            Opx_MedAct: {\r\n                Id: -900\r\n            }\r\n        }, this._start, this._end)._identity, [\r\n            new MedicalAct()._identity\r\n        ], this._dates());\r\n    }\r\n\r\n    \'Operations Totals in $1K by Patient Type\'() {\r\n        sr.bAsync = true;\r\n        return sr._(\"CorporateMeasures.comIdentityValues\", null, new OprRequestDetail().OperationsMap({\r\n            pcf_PatType: {\r\n                Id: -900\r\n            }\r\n        }, this._start, this._end).GenTotalCC(this._start, this._end), [\r\n            new PatientType()._identity\r\n        ], this._dates(), \"1.0/1000*SUM\");\r\n    }\r\n};";
ret[0].Title = "Report Section";
ret[0].Id = 1595;
ret[0].Authorid = 0;
ret[0].SectionPages = new Array();
ret[0].PageMenus = new Array();
ret[0].RelatingPages = new Array();
ret[0].RelatedPages = new Array();
ret[0].PageAccessRules = new Array();
ret[0].BugReports = new Array();
ret[0].PageAccessRights = new Array();
ret[0].PageStatuses = new Array();
ret[0].ReferenceMenus = new Array();
ret[0].PageAccessRequests = new Array();
ret[0].FeedbackPages = new Array();
ret[0].PageHelps = new Array();