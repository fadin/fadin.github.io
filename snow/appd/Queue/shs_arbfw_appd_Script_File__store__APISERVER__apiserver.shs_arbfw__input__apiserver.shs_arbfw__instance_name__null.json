{
	"Id": "95a7f5425b3d8859e361ce1e706f7cec2a00af85",
	"code": "shs_arbfw_appd_Script_File",
	"date": "2025-06-29T16:27:35.891Z",
	"name": "store",
	"remark": "[{"active":true,"access":"package_private","__consumer":"\n    (function(s){\n\tgs.info(s.api_name + ': ' + s.sys_id);\n\tif(s.api_name.indexOf('_appd')<0) return;\n\n\tvar sgr = new GlideRecord('sys_script_include');\n\tsgr.addQuery('name', '=', s.name);\n\tsgr.query();\n\tif (!sgr.next()) sgr = new GlideRecord(sgr.getTableName());\n\tObject.keys(s).filter(function(k) {\n\t\treturn k.indexOf('__') < 0;\n\t}).forEach(function(k) {\n\t\tsgr.setValue(k, s[k]);\n\t});\n\tsgr.update();\n\t\n\tvar esgr = new GlideRecord('sys_es_latest_script');\n\tesgr.addQuery('id', sgr.sys_id);\n\tesgr.addQuery('table', 'sys_script_include');\n\tesgr.query();\n\tif(!esgr.next()) esgr = new GlideRecord(esgr.getTableName());\n\tesgr.setValue('id', sgr.sys_id);\n\tesgr.setValue('table', 'sys_script_include');\n\tesgr.setValue('use_es_latest', true);\n\tesgr.update();\n\t\n\tif(!s.description) return;\n\n    var oTable = JSON.parse(s.description);\n\n    var t = new GlideRecord('sys_db_object');\n    t.addQuery('name', oTable.name);\n    t.setLimit(1);\n    t.query();\n    if(t.next()){\n        oTable.Id = t.sys_id.toString();\n    }\n\n    var sc = new GlideRecord('sys_scope');\n    sc.get('scope', 'x_1790593_arboard');\n\n    if(t.sys_scope.scope=='x_1790593_arboard'){\n        var aclOps = {read: 'find', write: 'update', create: 'insert'/*, delete: '', execute: ''*/};\n        Object.keys(aclOps).forEach(function(ak){\n            var acl = new GlideRecord('sys_security_acl');\n            var oACL = {active: true, admin_overrides: false, advanced: true, name: oTable.name+'.*',\n                script: 'answer = new ' + s.name + '()._fromGlideRecord(current)._' + aclOps[ak] + 'Assert();',\n                decision_type: 'allow', type: 'record', operation: ak,\n                description: 'Allow ' + ak + ' for all fields in ' + oTable.label + '(' + oTable.name + '), if the ACL script answers true.'};\n            acl.addQuery('name', oACL.name);\n            acl.addQuery('operation', oACL.operation);\n            acl.addQuery('type', oACL.type);\n            acl.setLimit(1);\n            acl.query();\n            if(!acl.next()) acl = new GlideRecord(acl.getTableName());\n            Object.keys(oACL).forEach(function(k){acl.setValue(k, oACL[k]);});\n            acl.update();\n        });\n        \n        var br = new GlideRecord('sys_script');\n        br.addQuery('collection', oTable.name);\n        br.addQuery('sys_scope', sc.sys_id);\n        br.addQuery('when', 'before');\n        br.addQuery('name', oTable.label + ' assertion');\n        br.setLimit(1);\n        br.query();\n        //gs.info(\"br count: \" + br.getRowCount() + \", query: \" + br.getEncodedQuery());\n        if(!br.next()) br = new GlideRecord(br.getTableName());\n        br.setValue('active', true);\n        br.setValue('collection', oTable.name);\n        br.setValue('sys_scope', sc.sys_id);\n        br.setValue('when', 'before');\n        br.setValue('name', oTable.label + ' assertion');\n        br.setValue('description', 'Rule for ' + oTable.label + '(' + oTable.name + '), to assert operation validity.');\n        br.setValue('action_insert', true);\n        br.setValue('action_update', true);\n        br.setValue('action_delete', true);\n        br.setValue('action_query', true);\n        br.setValue('abort_action', false);\n        br.setValue('add_message', true);\n        br.setValue('message', 'Operation aborted: assertion failed');\n        br.setValue('script', 'current.setAbortAction(!new ' + s.name + '()._fromGlideRecord(current)[\"_\" + ({insert: \"insert\", update: \"update\", query: \"find\", delete: \"update\"})[current.operation() || \"insert\"] + \"Assert\"]());');\n        br.update();\n    }\n    \n    if(t.isValidRecord()) return;\n\n    t = new GlideRecord(t.getTableName());\n    t.setNewGuidValue(oTable.Id);\n    ['name', 'label', 'sys_name'].forEach(function(f){t.setValue(f, oTable[f]);});\n    t.sys_scope = sc.sys_id;\n    if(oTable.super_class) {\n        var super_class = new GlideRecord('sys_db_object');\n        super_class.get('name', oTable.super_class);\n        if(super_class.isValidRecord()) t.setValue('super_class', super_class.sys_id);\n    }\n    gs.info('creating table: ' + oTable.name + \" x_1790593_arboard - \" + s.sys_id);\n    \n    t.insert();\n    \n    oTable.columns.forEach(function(c){\n        var grc = new GlideRecord('sys_dictionary');\n        Object.keys(c).forEach(function(f){grc.setValue(f, c[f]);});\n        grc.insert();\n    });\n    \n\t})\n    ","caller_access":null,"scriptFile_Script_Compatibilitys":[{"active":true,"enabled":true}],"client_callable":true,"sys_name":"shs_arbfw_appd_Variable_Value","api_name":"x_1790593_arboard.shs_arbfw_appd_Variable_Value","name":"shs_arbfw_appd_Variable_Value","script":"class shs_arbfw_appd_Variable_Value extends global.AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"Application Designer\";\n\t\tthis.__type = \"shs_arbfw_appd_Variable_Value\";\n\t\tthis.__alias = \"shs_arbfw_appd\";\n\t\tthis.__scope = \"shs_arbfw\";\n\t}\n\n\t/************* Variable_Value.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Variable_Value.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Variable_Value.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Variable_Value.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Variable_Value.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//(typeof(window)!=='undefined'?alert:gs.info)(\"Variable_Value.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Variable_Value.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Variable_Value.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Variable_Value.value GETTERS AND SETTERS **********************/\n\tvalue(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._value = v;\n\t\t\tthis._value_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._value;\n\t\t}\n\t}\n\n\t/************* Variable_Value.instance GETTERS AND SETTERS **********************/\n\tinstance(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._instance = v;\n\t\t\tthis._instance_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._instance;\n\t\t}\n\t}\n\n\t/************* Variable_Value.action GETTERS AND SETTERS **********************/\n\taction(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._action = v;\n\t\t\tthis._action_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._action;\n\t\t}\n\t}\n\n\t/************* Variable_Value.actionInput GETTERS AND SETTERS **********************/\n\tactionInput(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._actionInput = v;\n\t\t\tthis._actionInput_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._actionInput;\n\t\t}\n\t}\n\n\t/************* Variable_Value.flowInput GETTERS AND SETTERS **********************/\n\tflowInput(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._flowInput = v;\n\t\t\tthis._flowInput_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._flowInput;\n\t\t}\n\t}\n\n\t/************* Variable_Value.mapping GETTERS AND SETTERS **********************/\n\tmapping(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._mapping = v;\n\t\t\tthis._mapping_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._mapping;\n\t\t}\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = undefined || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\tif (this._value) ret += '^' + sPath + 'value' + (this._value_coop || '=') + this.value();\n\n\t\tif (this._instance) ret += /*(this._instance_coop || '=') + */ this.instance()._toEQuery(sPath + 'instance.');\n\n\t\tif (this._action) ret += /*(this._action_coop || '=') + */ this.action()._toEQuery(sPath + 'action.');\n\n\t\tif (this._actionInput) ret += /*(this._actionInput_coop || '=') + */ this.actionInput()._toEQuery(sPath + 'actionInput.');\n\n\t\tif (this._flowInput) ret += /*(this._flowInput_coop || '=') + */ this.flowInput()._toEQuery(sPath + 'flowInput.');\n\n\t\tif (this._mapping) ret += /*(this._mapping_coop || '=') + */ this.mapping()._toEQuery(sPath + 'mapping.');\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Variable_Value._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn new shs_arbfw_appd_Variable_Value()._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Variable_Value._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Variable_Value._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromGlideRecord(obj) {\n\t\tif (!obj) return null;\n\t\tif (obj.isValidRecord()) {\n\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Variable_Value\" != 'ecc_queue' && obj.source == \"shs_arbfw_appd_Variable_Value\") {\n\t\t\t\tobj.state = \"processing\";\n\t\t\t\tobj.update();\n\n\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\tresp.queue = 'output';\n\t\t\t\tresp.agent = obj.agent;\n\t\t\t\tresp.topic = obj.topic;\n\t\t\t\tresp.name = obj.name;\n\t\t\t\tresp.source = obj.source;\n\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\tlet ret = new shs_arbfw_appd_Variable_Value()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t});\n\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t}\n\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\tresp.insert();\n\n\t\t\t\tobj.state = \"processed\";\n\t\t\t\tobj.update();\n\t\t\t\treturn resp;\n\t\t\t} else {\n\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\tvalue: obj.getValue(\"value\"),\n\n\t\t\t\t\tinstance: obj.getValue(\"instance\"),\n\n\t\t\t\t\taction: obj.getValue(\"action\"),\n\n\t\t\t\t\tactionInput: obj.getValue(\"actionInput\"),\n\n\t\t\t\t\tflowInput: obj.getValue(\"flowInput\"),\n\n\t\t\t\t\tmapping: obj.getValue(\"mapping\"),\n\n\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tobj.query();\n\t\t\tlet grRet = [];\n\t\t\twhile (obj.next()) grRet.push(this._fromGlideRecord(obj));\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Variable_Value._fromGlideRecord(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\treturn grRet;\n\t\t}\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\tundefined\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_appd_Variable_Value()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\tif (/((([A-Za-z]{3,9}:(?:/ / ) ? )( ? : [-;: &= +$, w] + @) ? [A - Za - z0 - 9. - ] + | ( ? : www. | [-;: &= +$, w] + @)[A - Za - z0 - 9. - ] + )(( ? : /[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)/g.test(obj)) {\n\t\t\tvar msg = new sn_ws.RESTMessageV2();\n\t\t\tmsg.setEndpoint(obj);\n\t\t\tmsg.setRequestHeader('Content-Type', 'application/json');\n\t\t\tmsg.setHttpMethod('get');\n\t\t\treturn this._fromDocument(msg.execute().getBody());\n\t\t}\n\n\t\ttry {\n\t\t\tobj = JSON.parse(obj);\n\t\t} catch (ex) {\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Variable_Value._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\tlet _obj = {\n\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))\n\t\t\t};\n\t\t\t_obj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(this))] = obj;\n\t\t\tobj = _obj;\n\t\t}\n\t\treturn this._fromDocument(obj);\n\t}\n\telse if (typeof(obj) === 'object') {\n\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\treturn this._fromGlideRecord(obj);\n\t\t} else if (obj._fromDocument) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Variable_Value._fromDocument(): \" + \"redundent call\");\n\t\t\treturn obj;\n\t\t} else if (Array.isArray(obj)) {\n\t\t\treturn obj.map(function(o) {\n\t\t\t\treturn new shs_arbfw_appd_Variable_Value()._fromDocument(o)\n\t\t\t});\n\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(obj))));\n\n\t\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Variable_Value._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.value) !== 'undefined') {\n\n\t\t\t\t\tthis.value(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.value)));\n\n\t\t\t\t\tthis.value(obj.value);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.instance) !== 'undefined') {\n\n\t\t\t\t\tthis.instance(new shs_arbfw_appd_Flow_Instance()._fromDocument(obj.instance));\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.action) !== 'undefined') {\n\n\t\t\t\t\tthis.action(new shs_arbfw_appd_Action_Instance()._fromDocument(obj.action));\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.actionInput) !== 'undefined') {\n\n\t\t\t\t\tthis.actionInput(new shs_arbfw_appd_Action_Input()._fromDocument(obj.actionInput));\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.flowInput) !== 'undefined') {\n\n\t\t\t\t\tthis.flowInput(new shs_arbfw_appd_Flow_Input()._fromDocument(obj.flowInput));\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.mapping) !== 'undefined') {\n\n\t\t\t\t\tthis.mapping(new shs_arbfw_appd_Element_Mapping()._fromDocument(obj.mapping));\n\t\t\t\t}\n\n\t\t\t} else { // if(obj.constructor.name==\"Variable_Value\"){\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Variable_Value._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t}\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Variable_Value._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\treturn null;\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Variable_Value._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Variable_Value._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Variable_Value._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\treturn this;\n}\n\n_insertAssert() {\n\treturn true;\n}\n\n_updateAssert() {\n\treturn true;\n}\n\n_storeAssert() {\n\treturn true;\n}\n\n_findAssert() {\n\treturn true;\n}\n\n_new(c) {\n\n\treturn new shs_arbfw_appd_Platform._new(c);\n\n}\n\n_toDocument(arFields) {\n\n\tlet ret = undefined || {};\n\n\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tret.active = this.active();\n\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tret.enabled = this.enabled();\n\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tret.code = this.code();\n\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tret.order = this.order();\n\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tret.date = this.date();\n\n\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tret.name = this.name();\n\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tret.remark = this.remark();\n\n\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t}\n\n\tif (typeof(this._value) !== 'undefined') {\n\t\tret.value = this.value();\n\n\t\tif (typeof(ret.value) === 'object') ret.value = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.value));\n\n\t}\n\n\tif (typeof(this._instance) !== 'undefined') {\n\t\tret.instance = this.instance();\n\n\t\tif (ret.instance) {\n\t\t\tret.instance = ret.instance._toDocument();\n\t\t\tif (typeof(ret.instance) === 'object' && !Object.keys(ret.instance).length) ret.instance = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this._action) !== 'undefined') {\n\t\tret.action = this.action();\n\n\t\tif (ret.action) {\n\t\t\tret.action = ret.action._toDocument();\n\t\t\tif (typeof(ret.action) === 'object' && !Object.keys(ret.action).length) ret.action = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this._actionInput) !== 'undefined') {\n\t\tret.actionInput = this.actionInput();\n\n\t\tif (ret.actionInput) {\n\t\t\tret.actionInput = ret.actionInput._toDocument();\n\t\t\tif (typeof(ret.actionInput) === 'object' && !Object.keys(ret.actionInput).length) ret.actionInput = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this._flowInput) !== 'undefined') {\n\t\tret.flowInput = this.flowInput();\n\n\t\tif (ret.flowInput) {\n\t\t\tret.flowInput = ret.flowInput._toDocument();\n\t\t\tif (typeof(ret.flowInput) === 'object' && !Object.keys(ret.flowInput).length) ret.flowInput = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this._mapping) !== 'undefined') {\n\t\tret.mapping = this.mapping();\n\n\t\tif (ret.mapping) {\n\t\t\tret.mapping = ret.mapping._toDocument();\n\t\t\tif (typeof(ret.mapping) === 'object' && !Object.keys(ret.mapping).length) ret.mapping = null;\n\t\t}\n\n\t}\n\n\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\treturn !arFields.find(function(_k) {\n\t\t\treturn _k == k;\n\t\t});\n\t}).forEach(function(k) {\n\t\tdelete ret[k];\n\t});\n\n\treturn ret;\n}\n\n_unique(keys, ret) {\n\tret = ret || new shs_arbfw_appd_Variable_Value();\n\n\tundefined\n\n\t// if(this.Id) ret.Id = this.Id;\n\tif (!keys) {\n\n\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t} else {\n\n\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t\tif (keys.indexOf(\"value\") >= 0 && typeof(this.value()) !== 'undefined') ret.value(this.value());\n\n\t\tif (keys.indexOf(\"instance\") >= 0 && typeof(this.instance()) !== 'undefined') ret.instance(this.instance()._unique());\n\n\t\tif (keys.indexOf(\"action\") >= 0 && typeof(this.action()) !== 'undefined') ret.action(this.action()._unique());\n\n\t\tif (keys.indexOf(\"actionInput\") >= 0 && typeof(this.actionInput()) !== 'undefined') ret.actionInput(this.actionInput()._unique());\n\n\t\tif (keys.indexOf(\"flowInput\") >= 0 && typeof(this.flowInput()) !== 'undefined') ret.flowInput(this.flowInput()._unique());\n\n\t\tif (keys.indexOf(\"mapping\") >= 0 && typeof(this.mapping()) !== 'undefined') ret.mapping(this.mapping()._unique());\n\n\t}\n\n\treturn ret;\n}\n\n_query(gq) {\n\tlet arFields = Object.keys(global.Schema.of('sys_variable_value', ['*'])['sys_variable_value']);\n\n\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('sys_variable_value');\n\n\tundefined\n\n\tlet idf = ((function(r) {\n\t\tlet ret = 'sys_id';\n\t\tif (typeof(r.__idField) === 'function') {\n\t\t\tret = r.__idField();\n\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\tret = r.__idField || this.__idField();\n\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\tret = 'Id';\n\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\tret = 'sys_id';\n\t\t}\n\t\treturn ret;\n\t})(this));\n\tif (idf == 'Id') idf = 'sys_id';\n\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tlet coop = this._active_coop || '=';\n\n\t\tlet v = this.active();\n\n\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Variable_Value._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tlet coop = this._enabled_coop || '=';\n\n\t\tlet v = this.enabled();\n\n\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Variable_Value._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tlet coop = this._code_coop || '=';\n\n\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.code();\n\n\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Variable_Value._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tlet coop = this._order_coop || '=';\n\n\t\tlet v = this.order();\n\n\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Variable_Value._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tlet coop = this._date_coop || '=';\n\n\t\tlet v = this.date();\n\n\t\tif (v) {\n\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t}\n\n\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Variable_Value._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tlet coop = this._name_coop || '=';\n\n\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.name();\n\n\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Variable_Value._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tlet coop = this._remark_coop || '=';\n\n\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.remark();\n\n\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Variable_Value._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._value) !== 'undefined') {\n\t\tlet coop = this._value_coop || '=';\n\n\t\tif (!this._value_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.value();\n\n\t\tif (arFields.indexOf('value') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Variable_Value._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('value');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('value');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('value', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._instance) !== 'undefined') {\n\t\tlet coop = this._instance_coop || '=';\n\n\t\tlet v = this.instance();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Variable Value\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Variable_Value._query(): \"+ \"instance \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Variable_Value._query(): \" + \"instance[instance] resuled in undefined: \" + JSON.stringify(this.instance()));\n\t\t}\n\n\t\tif (arFields.indexOf('instance') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Variable_Value._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('instance');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('instance');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('instance', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._action) !== 'undefined') {\n\t\tlet coop = this._action_coop || '=';\n\n\t\tlet v = this.action();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Variable Value\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Variable_Value._query(): \"+ \"action \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Variable_Value._query(): \" + \"action[action] resuled in undefined: \" + JSON.stringify(this.action()));\n\t\t}\n\n\t\tif (arFields.indexOf('action') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Variable_Value._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('action');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('action');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('action', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._actionInput) !== 'undefined') {\n\t\tlet coop = this._actionInput_coop || '=';\n\n\t\tlet v = this.actionInput();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Variable Value\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Variable_Value._query(): \"+ \"actionInput \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Variable_Value._query(): \" + \"actionInput[actionInput] resuled in undefined: \" + JSON.stringify(this.actionInput()));\n\t\t}\n\n\t\tif (arFields.indexOf('actioninput') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Variable_Value._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('actioninput');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('actioninput');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('actioninput', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._flowInput) !== 'undefined') {\n\t\tlet coop = this._flowInput_coop || '=';\n\n\t\tlet v = this.flowInput();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Variable Value\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Variable_Value._query(): \"+ \"flowInput \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Variable_Value._query(): \" + \"flowInput[flowInput] resuled in undefined: \" + JSON.stringify(this.flowInput()));\n\t\t}\n\n\t\tif (arFields.indexOf('flowinput') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Variable_Value._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('flowinput');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('flowinput');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('flowinput', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._mapping) !== 'undefined') {\n\t\tlet coop = this._mapping_coop || '=';\n\n\t\tlet v = this.mapping();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Variable Value\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Variable_Value._query(): \"+ \"mapping \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Variable_Value._query(): \" + \"mapping[mapping] resuled in undefined: \" + JSON.stringify(this.mapping()));\n\t\t}\n\n\t\tif (arFields.indexOf('mapping') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Variable_Value._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('mapping');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('mapping');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('mapping', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Variable_Value._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\treturn this._queryGQ;\n}\n\n_save(obj) {\n\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\treturn new shs_arbfw_appd_Variable_Value()._save(o)\n\t});\n\n\tlet _obj = {};\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Variable_Value._save(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\tObject.keys(obj).filter(function(k) {\n\t\treturn Object.keys(global.Schema.of('sys_variable_value', ['*'])['sys_variable_value']).filter(function(_k) {\n\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t}).indexOf(k.toLowerCase()) >= 0\n\t}).forEach(function(k) {\n\t\t_obj[k.toLowerCase()] = obj[k]\n\t});\n\n\tObject.keys(_obj).forEach(function(k) {\n\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Variable_Value._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tdelete _obj[k];\n\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Variable_Value._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t}\n\t});\n\n\tlet _this = null;\n\tif (obj.__keys) {\n\t\tlet kObj = {};\n\t\tkObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(_obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))));\n\t\tobj.__keys.forEach(function(k) {\n\t\t\tkObj[k] = _obj[k]\n\t\t});\n\t\t_this = new shs_arbfw_appd_Variable_Value()._fromDocument(kObj);\n\t} else {\n\t\t_this = new shs_arbfw_appd_Variable_Value()._fromDocument(_obj)._unique();\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Variable_Value._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\tdelete _obj.__idField;\n\n\ttry {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Variable_Value._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\tObject.keys(_obj).filter(function(k) {\n\t\t\treturn k.toLowerCase() != k;\n\t\t}).forEach(function(k) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Variable_Value._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tvar lk = k.toLowerCase();\n\t\t\t_obj[lk] = _obj[k];\n\t\t\tdelete _obj[k];\n\t\t});\n\n\t\tlet gq = new global.GlideQuery(obj.__type || 'sys_variable_value');\n\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Variable_Value._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\tif (_obj.sys_id) {\n\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t} else {\n\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\tgq = gq.insert(_obj);\n\t\t}\n\t\tlet _fObj = {};\n\t\t_fObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))));\n\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('sys_variable_value', ['*'])['sys_variable_value']))));\n\t} catch (ex) {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Variable_Value._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Variable_Value._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\treturn this;\n\t}\n\n\treturn this;\n}\n\n/************* Variable_Value.store() **********************/\nstore(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Variable_Value.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Variable_Value.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Variable_Value.store(): \" + \"executing locally \");\n\n\t\t// store locally\n\t\treturn this._save(this._toDocument());\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Variable_Value.findAll() **********************/\nfindAll(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Variable_Value.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Variable_Value.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Variable_Value.findAll(): \" + \"executing locally \");\n\n\t\t// findAll locally\n\t\tlet gr = new GlideRecord('sys_variable_value');\n\t\tgr.addEncodedQuery(this._toEQuery());\n\t\treturn this._fromDocument(gr);\n\n\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('sys_variable_value', ['*'])['sys_variable_value'])));\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Variable_Value.find() **********************/\nfind(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Variable_Value.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Variable_Value.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Variable_Value.find(): \" + \"executing locally \");\n\n\t\tlet ret = this.findAll();\n\t\treturn ret.length ? ret[0] : null;\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"scriptFile_Script_Compatibilitys":[{"active":true,"enabled":true}],"client_callable":true,"sys_name":"shs_arbfw_Agenda_Item","api_name":"x_1790593_arboard.shs_arbfw_Agenda_Item","name":"shs_arbfw_Agenda_Item","script":"class shs_arbfw_Agenda_Item extends global.AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"\";\n\t\tthis.__type = \"shs_arbfw_Agenda_Item\";\n\t\tthis.__alias = \"shs_arbfw\";\n\t\tthis.__scope = \"shs_arbfw\";\n\t}\n\n\t/************* Agenda_Item.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Agenda_Item.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Agenda_Item.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Agenda_Item.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Agenda_Item.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//(typeof(window)!=='undefined'?alert:gs.info)(\"Agenda_Item.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Agenda_Item.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Agenda_Item.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Agenda_Item.agenda GETTERS AND SETTERS **********************/\n\tagenda(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._agenda = v;\n\t\t\tthis._agenda_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._agenda;\n\t\t}\n\t}\n\n\t/************* Agenda_Item.requirement GETTERS AND SETTERS **********************/\n\trequirement(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._requirement = v;\n\t\t\tthis._requirement_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._requirement;\n\t\t}\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = undefined || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\tif (this._agenda) ret += /*(this._agenda_coop || '=') + */ this.agenda()._toEQuery(sPath + 'agenda.');\n\n\t\tif (this._requirement) ret += /*(this._requirement_coop || '=') + */ this.requirement()._toEQuery(sPath + 'requirement.');\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Agenda_Item._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn new shs_arbfw_Agenda_Item()._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Agenda_Item._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Agenda_Item._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromGlideRecord(obj) {\n\t\tif (!obj) return null;\n\t\tif (obj.isValidRecord()) {\n\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Agenda_Item\" != 'ecc_queue' && obj.source == \"shs_arbfw_Agenda_Item\") {\n\t\t\t\tobj.state = \"processing\";\n\t\t\t\tobj.update();\n\n\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\tresp.queue = 'output';\n\t\t\t\tresp.agent = obj.agent;\n\t\t\t\tresp.topic = obj.topic;\n\t\t\t\tresp.name = obj.name;\n\t\t\t\tresp.source = obj.source;\n\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\tlet ret = new shs_arbfw_Agenda_Item()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t});\n\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t}\n\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\tresp.insert();\n\n\t\t\t\tobj.state = \"processed\";\n\t\t\t\tobj.update();\n\t\t\t\treturn resp;\n\t\t\t} else {\n\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\tagenda: obj.getValue(\"agenda\"),\n\n\t\t\t\t\trequirement: obj.getValue(\"requirement\"),\n\n\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tobj.query();\n\t\t\tlet grRet = [];\n\t\t\twhile (obj.next()) grRet.push(this._fromGlideRecord(obj));\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Agenda_Item._fromGlideRecord(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\treturn grRet;\n\t\t}\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\tundefined\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_Agenda_Item()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\tif (/((([A-Za-z]{3,9}:(?:/ / ) ? )( ? : [-;: &= +$, w] + @) ? [A - Za - z0 - 9. - ] + | ( ? : www. | [-;: &= +$, w] + @)[A - Za - z0 - 9. - ] + )(( ? : /[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)/g.test(obj)) {\n\t\t\tvar msg = new sn_ws.RESTMessageV2();\n\t\t\tmsg.setEndpoint(obj);\n\t\t\tmsg.setRequestHeader('Content-Type', 'application/json');\n\t\t\tmsg.setHttpMethod('get');\n\t\t\treturn this._fromDocument(msg.execute().getBody());\n\t\t}\n\n\t\ttry {\n\t\t\tobj = JSON.parse(obj);\n\t\t} catch (ex) {\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Agenda_Item._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\tlet _obj = {\n\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))\n\t\t\t};\n\t\t\t_obj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(this))] = obj;\n\t\t\tobj = _obj;\n\t\t}\n\t\treturn this._fromDocument(obj);\n\t}\n\telse if (typeof(obj) === 'object') {\n\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\treturn this._fromGlideRecord(obj);\n\t\t} else if (obj._fromDocument) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Agenda_Item._fromDocument(): \" + \"redundent call\");\n\t\t\treturn obj;\n\t\t} else if (Array.isArray(obj)) {\n\t\t\treturn obj.map(function(o) {\n\t\t\t\treturn new shs_arbfw_Agenda_Item()._fromDocument(o)\n\t\t\t});\n\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(obj))));\n\n\t\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Agenda_Item._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.agenda) !== 'undefined') {\n\n\t\t\t\t\tthis.agenda(new shs_arbfw_Meeting_Agenda()._fromDocument(obj.agenda));\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.requirement) !== 'undefined') {\n\n\t\t\t\t\tthis.requirement(new shs_arbfw_Requirement()._fromDocument(obj.requirement));\n\t\t\t\t}\n\n\t\t\t} else { // if(obj.constructor.name==\"Agenda_Item\"){\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Agenda_Item._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t}\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Agenda_Item._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\treturn null;\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Agenda_Item._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Agenda_Item._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Agenda_Item._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\treturn this;\n}\n\n_insertAssert() {\n\treturn true\n\n\t\t&&\n\t\t((function() {\n\t\t\ttry {\n\n\t\t\t\treturn false;\n\n\t\t\t\treturn true;\n\t\t\t} catch (ex) {\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Agenda_Item._insertAssert(): \" + \"Exception in _insertAssert::(): \" + ex.getMessage());\n\t\t\t}\n\t\t})(this));\n}\n\n_updateAssert() {\n\treturn true;\n}\n\n_storeAssert() {\n\treturn true\n\n\t\t&&\n\t\t((function() {\n\t\t\ttry {\n\n\t\t\t\treturn false;\n\n\t\t\t\treturn true;\n\t\t\t} catch (ex) {\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Agenda_Item._storeAssert(): \" + \"Exception in _storeAssert::(): \" + ex.getMessage());\n\t\t\t}\n\t\t})(this));\n}\n\n_findAssert() {\n\treturn true;\n}\n\n_new(c) {\n\n\treturn new shs_arbfw_Platform._new(c);\n\n}\n\n_toDocument(arFields) {\n\n\tlet ret = undefined || {};\n\n\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tret.active = this.active();\n\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tret.enabled = this.enabled();\n\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tret.code = this.code();\n\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tret.order = this.order();\n\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tret.date = this.date();\n\n\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tret.name = this.name();\n\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tret.remark = this.remark();\n\n\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t}\n\n\tif (typeof(this._agenda) !== 'undefined') {\n\t\tret.agenda = this.agenda();\n\n\t\tif (ret.agenda) {\n\t\t\tret.agenda = ret.agenda._toDocument();\n\t\t\tif (typeof(ret.agenda) === 'object' && !Object.keys(ret.agenda).length) ret.agenda = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this._requirement) !== 'undefined') {\n\t\tret.requirement = this.requirement();\n\n\t\tif (ret.requirement) {\n\t\t\tret.requirement = ret.requirement._toDocument();\n\t\t\tif (typeof(ret.requirement) === 'object' && !Object.keys(ret.requirement).length) ret.requirement = null;\n\t\t}\n\n\t}\n\n\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\treturn !arFields.find(function(_k) {\n\t\t\treturn _k == k;\n\t\t});\n\t}).forEach(function(k) {\n\t\tdelete ret[k];\n\t});\n\n\treturn ret;\n}\n\n_unique(keys, ret) {\n\tret = ret || new shs_arbfw_Agenda_Item();\n\n\tundefined\n\n\t// if(this.Id) ret.Id = this.Id;\n\tif (!keys) {\n\n\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (typeof(this.agenda()) !== 'undefined') ret.agenda(this.agenda()._unique());\n\n\t} else {\n\n\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t\tif (keys.indexOf(\"agenda\") >= 0 && typeof(this.agenda()) !== 'undefined') ret.agenda(this.agenda()._unique());\n\n\t\tif (keys.indexOf(\"requirement\") >= 0 && typeof(this.requirement()) !== 'undefined') ret.requirement(this.requirement()._unique());\n\n\t}\n\n\treturn ret;\n}\n\n_query(gq) {\n\tlet arFields = Object.keys(global.Schema.of('x_1790593_arboard_agenda_item', ['*'])['x_1790593_arboard_agenda_item']);\n\n\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('x_1790593_arboard_agenda_item');\n\n\tundefined\n\n\tlet idf = ((function(r) {\n\t\tlet ret = 'sys_id';\n\t\tif (typeof(r.__idField) === 'function') {\n\t\t\tret = r.__idField();\n\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\tret = r.__idField || this.__idField();\n\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\tret = 'Id';\n\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\tret = 'sys_id';\n\t\t}\n\t\treturn ret;\n\t})(this));\n\tif (idf == 'Id') idf = 'sys_id';\n\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tlet coop = this._active_coop || '=';\n\n\t\tlet v = this.active();\n\n\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Agenda_Item._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tlet coop = this._enabled_coop || '=';\n\n\t\tlet v = this.enabled();\n\n\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Agenda_Item._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tlet coop = this._code_coop || '=';\n\n\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.code();\n\n\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Agenda_Item._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tlet coop = this._order_coop || '=';\n\n\t\tlet v = this.order();\n\n\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Agenda_Item._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tlet coop = this._date_coop || '=';\n\n\t\tlet v = this.date();\n\n\t\tif (v) {\n\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t}\n\n\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Agenda_Item._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tlet coop = this._name_coop || '=';\n\n\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.name();\n\n\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Agenda_Item._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tlet coop = this._remark_coop || '=';\n\n\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.remark();\n\n\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Agenda_Item._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._agenda) !== 'undefined') {\n\t\tlet coop = this._agenda_coop || '=';\n\n\t\tlet v = this.agenda();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Agenda Item\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Agenda_Item._query(): \"+ \"agenda \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Agenda_Item._query(): \" + \"agenda[agenda] resuled in undefined: \" + JSON.stringify(this.agenda()));\n\t\t}\n\n\t\tif (arFields.indexOf('agenda') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Agenda_Item._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('agenda');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('agenda');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('agenda', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._requirement) !== 'undefined') {\n\t\tlet coop = this._requirement_coop || '=';\n\n\t\tlet v = this.requirement();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Agenda Item\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Agenda_Item._query(): \"+ \"requirement \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Agenda_Item._query(): \" + \"requirement[requirement] resuled in undefined: \" + JSON.stringify(this.requirement()));\n\t\t}\n\n\t\tif (arFields.indexOf('requirement') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Agenda_Item._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('requirement');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('requirement');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('requirement', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Agenda_Item._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\treturn this._queryGQ;\n}\n\n_save(obj) {\n\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\treturn new shs_arbfw_Agenda_Item()._save(o)\n\t});\n\n\tlet _obj = {};\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Agenda_Item._save(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\tObject.keys(obj).filter(function(k) {\n\t\treturn Object.keys(global.Schema.of('x_1790593_arboard_agenda_item', ['*'])['x_1790593_arboard_agenda_item']).filter(function(_k) {\n\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t}).indexOf(k.toLowerCase()) >= 0\n\t}).forEach(function(k) {\n\t\t_obj[k.toLowerCase()] = obj[k]\n\t});\n\n\tObject.keys(_obj).forEach(function(k) {\n\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Agenda_Item._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tdelete _obj[k];\n\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Agenda_Item._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t}\n\t});\n\n\tlet _this = null;\n\tif (obj.__keys) {\n\t\tlet kObj = {};\n\t\tkObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(_obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))));\n\t\tobj.__keys.forEach(function(k) {\n\t\t\tkObj[k] = _obj[k]\n\t\t});\n\t\t_this = new shs_arbfw_Agenda_Item()._fromDocument(kObj);\n\t} else {\n\t\t_this = new shs_arbfw_Agenda_Item()._fromDocument(_obj)._unique();\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Agenda_Item._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\tdelete _obj.__idField;\n\n\ttry {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Agenda_Item._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\tObject.keys(_obj).filter(function(k) {\n\t\t\treturn k.toLowerCase() != k;\n\t\t}).forEach(function(k) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Agenda_Item._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tvar lk = k.toLowerCase();\n\t\t\t_obj[lk] = _obj[k];\n\t\t\tdelete _obj[k];\n\t\t});\n\n\t\tlet gq = new global.GlideQuery(obj.__type || 'x_1790593_arboard_agenda_item');\n\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Agenda_Item._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\tif (_obj.sys_id) {\n\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t} else {\n\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\tgq = gq.insert(_obj);\n\t\t}\n\t\tlet _fObj = {};\n\t\t_fObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))));\n\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('x_1790593_arboard_agenda_item', ['*'])['x_1790593_arboard_agenda_item']))));\n\t} catch (ex) {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Agenda_Item._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Agenda_Item._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\treturn this;\n\t}\n\n\treturn this;\n}\n\n/************* Agenda_Item.store() **********************/\nstore(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Agenda_Item.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Agenda_Item.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Agenda_Item.store(): \" + \"executing locally \");\n\n\t\t// store locally\n\t\treturn this._save(this._toDocument());\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Agenda_Item.findAll() **********************/\nfindAll(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Agenda_Item.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Agenda_Item.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Agenda_Item.findAll(): \" + \"executing locally \");\n\n\t\t// findAll locally\n\t\tlet gr = new GlideRecord('x_1790593_arboard_agenda_item');\n\t\tgr.addEncodedQuery(this._toEQuery());\n\t\treturn this._fromDocument(gr);\n\n\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('x_1790593_arboard_agenda_item', ['*'])['x_1790593_arboard_agenda_item'])));\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Agenda_Item.find() **********************/\nfind(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Agenda_Item.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Agenda_Item.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Agenda_Item.find(): \" + \"executing locally \");\n\n\t\tlet ret = this.findAll();\n\t\treturn ret.length ? ret[0] : null;\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"scriptFile_Script_Compatibilitys":[{"active":true,"enabled":true}],"client_callable":true,"sys_name":"shs_arbfw_appd_Flow_Instance","api_name":"x_1790593_arboard.shs_arbfw_appd_Flow_Instance","name":"shs_arbfw_appd_Flow_Instance","script":"class shs_arbfw_appd_Flow_Instance extends global.AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"Application Designer\";\n\t\tthis.__type = \"shs_arbfw_appd_Flow_Instance\";\n\t\tthis.__alias = \"shs_arbfw_appd\";\n\t\tthis.__scope = \"shs_arbfw\";\n\t}\n\n\t/************* Flow_Instance.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Flow_Instance.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Flow_Instance.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Flow_Instance.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Flow_Instance.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Instance.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Flow_Instance.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Flow_Instance.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Flow_Instance.parent GETTERS AND SETTERS **********************/\n\tparent(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._parent = v;\n\t\t\tthis._parent_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._parent;\n\t\t}\n\t}\n\n\t/************* Flow_Instance.application GETTERS AND SETTERS **********************/\n\tapplication(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._application = v;\n\t\t\tthis._application_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._application;\n\t\t}\n\t}\n\n\t/************* Flow_Instance.subflow GETTERS AND SETTERS **********************/\n\tsubflow(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._subflow = v;\n\t\t\tthis._subflow_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._subflow;\n\t\t}\n\t}\n\n\t/************* Flow_Instance.snapshot GETTERS AND SETTERS **********************/\n\tsnapshot(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._snapshot = v;\n\t\t\tthis._snapshot_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._snapshot;\n\t\t}\n\t}\n\n\t/************* Flow_Instance.instance_Flow_Instance_Inputs GETTERS AND SETTERS **********************/\n\tinstance_Flow_Instance_Inputs(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._instance_Flow_Instance_Inputs = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._instance_Flow_Instance_Inputs_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._instance_Flow_Instance_Inputs;\n\t\t}\n\t}\n\n\t/************* Flow_Instance.instance_Variable_Values GETTERS AND SETTERS **********************/\n\tinstance_Variable_Values(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._instance_Variable_Values = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._instance_Variable_Values_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._instance_Variable_Values;\n\t\t}\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = undefined || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\tif (this._parent) ret += /*(this._parent_coop || '=') + */ this.parent()._toEQuery(sPath + 'parent.');\n\n\t\tif (this._application) ret += /*(this._application_coop || '=') + */ this.application()._toEQuery(sPath + 'application.');\n\n\t\tif (this._subflow) ret += /*(this._subflow_coop || '=') + */ this.subflow()._toEQuery(sPath + 'subflow.');\n\n\t\tif (this._snapshot) ret += /*(this._snapshot_coop || '=') + */ this.snapshot()._toEQuery(sPath + 'snapshot.');\n\n\t\t(this.instance_Flow_Instance_Inputs() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYFlow_Instance_Input.instance,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(this.instance_Variable_Values() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYVariable_Value.instance,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Instance._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn new shs_arbfw_appd_Flow_Instance()._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Instance._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Instance._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromGlideRecord(obj) {\n\t\tif (!obj) return null;\n\t\tif (obj.isValidRecord()) {\n\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Flow_Instance\" != 'ecc_queue' && obj.source == \"shs_arbfw_appd_Flow_Instance\") {\n\t\t\t\tobj.state = \"processing\";\n\t\t\t\tobj.update();\n\n\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\tresp.queue = 'output';\n\t\t\t\tresp.agent = obj.agent;\n\t\t\t\tresp.topic = obj.topic;\n\t\t\t\tresp.name = obj.name;\n\t\t\t\tresp.source = obj.source;\n\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\tlet ret = new shs_arbfw_appd_Flow_Instance()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t});\n\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t}\n\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\tresp.insert();\n\n\t\t\t\tobj.state = \"processed\";\n\t\t\t\tobj.update();\n\t\t\t\treturn resp;\n\t\t\t} else {\n\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\tparent: obj.getValue(\"parent\"),\n\n\t\t\t\t\tapplication: obj.getValue(\"application\"),\n\n\t\t\t\t\tsubflow: obj.getValue(\"subflow\"),\n\n\t\t\t\t\tsnapshot: obj.getValue(\"snapshot\"),\n\n\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tobj.query();\n\t\t\tlet grRet = [];\n\t\t\twhile (obj.next()) grRet.push(this._fromGlideRecord(obj));\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Instance._fromGlideRecord(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\treturn grRet;\n\t\t}\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\tundefined\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_appd_Flow_Instance()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\tif (/((([A-Za-z]{3,9}:(?:/ / ) ? )( ? : [-;: &= +$, w] + @) ? [A - Za - z0 - 9. - ] + | ( ? : www. | [-;: &= +$, w] + @)[A - Za - z0 - 9. - ] + )(( ? : /[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)/g.test(obj)) {\n\t\t\tvar msg = new sn_ws.RESTMessageV2();\n\t\t\tmsg.setEndpoint(obj);\n\t\t\tmsg.setRequestHeader('Content-Type', 'application/json');\n\t\t\tmsg.setHttpMethod('get');\n\t\t\treturn this._fromDocument(msg.execute().getBody());\n\t\t}\n\n\t\ttry {\n\t\t\tobj = JSON.parse(obj);\n\t\t} catch (ex) {\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Instance._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\tlet _obj = {\n\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))\n\t\t\t};\n\t\t\t_obj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(this))] = obj;\n\t\t\tobj = _obj;\n\t\t}\n\t\treturn this._fromDocument(obj);\n\t}\n\telse if (typeof(obj) === 'object') {\n\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\treturn this._fromGlideRecord(obj);\n\t\t} else if (obj._fromDocument) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Instance._fromDocument(): \" + \"redundent call\");\n\t\t\treturn obj;\n\t\t} else if (Array.isArray(obj)) {\n\t\t\treturn obj.map(function(o) {\n\t\t\t\treturn new shs_arbfw_appd_Flow_Instance()._fromDocument(o)\n\t\t\t});\n\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(obj))));\n\n\t\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Instance._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.parent) !== 'undefined') {\n\n\t\t\t\t\tthis.parent(new shs_arbfw_appd_Flow_Logic()._fromDocument(obj.parent));\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.application) !== 'undefined') {\n\n\t\t\t\t\tthis.application(new shs_arbfw_appd_Application()._fromDocument(obj.application));\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.subflow) !== 'undefined') {\n\n\t\t\t\t\tthis.subflow(new shs_arbfw_appd_Flow()._fromDocument(obj.subflow));\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.snapshot) !== 'undefined') {\n\n\t\t\t\t\tthis.snapshot(new shs_arbfw_appd_Flow_Snapshot()._fromDocument(obj.snapshot));\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.instance_Flow_Instance_Inputs) !== 'undefined') this.instance_Flow_Instance_Inputs(new shs_arbfw_appd_Flow_Instance_Input()._fromDocument(obj.instance_Flow_Instance_Inputs));\n\n\t\t\t\tif (typeof(obj.instance_Variable_Values) !== 'undefined') this.instance_Variable_Values(new shs_arbfw_appd_Variable_Value()._fromDocument(obj.instance_Variable_Values));\n\n\t\t\t} else { // if(obj.constructor.name==\"Flow_Instance\"){\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Instance._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t}\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Instance._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\treturn null;\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Instance._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Instance._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Instance._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\treturn this;\n}\n\n_insertAssert() {\n\treturn true;\n}\n\n_updateAssert() {\n\treturn true;\n}\n\n_storeAssert() {\n\treturn true;\n}\n\n_findAssert() {\n\treturn true;\n}\n\n_new(c) {\n\n\treturn new shs_arbfw_appd_Platform._new(c);\n\n}\n\n_toDocument(arFields) {\n\n\tlet ret = undefined || {};\n\n\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tret.active = this.active();\n\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tret.enabled = this.enabled();\n\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tret.code = this.code();\n\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tret.order = this.order();\n\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tret.date = this.date();\n\n\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tret.name = this.name();\n\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tret.remark = this.remark();\n\n\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t}\n\n\tif (typeof(this._parent) !== 'undefined') {\n\t\tret.parent = this.parent();\n\n\t\tif (ret.parent) {\n\t\t\tret.parent = ret.parent._toDocument();\n\t\t\tif (typeof(ret.parent) === 'object' && !Object.keys(ret.parent).length) ret.parent = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this._application) !== 'undefined') {\n\t\tret.application = this.application();\n\n\t\tif (ret.application) {\n\t\t\tret.application = ret.application._toDocument();\n\t\t\tif (typeof(ret.application) === 'object' && !Object.keys(ret.application).length) ret.application = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this._subflow) !== 'undefined') {\n\t\tret.subflow = this.subflow();\n\n\t\tif (ret.subflow) {\n\t\t\tret.subflow = ret.subflow._toDocument();\n\t\t\tif (typeof(ret.subflow) === 'object' && !Object.keys(ret.subflow).length) ret.subflow = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this._snapshot) !== 'undefined') {\n\t\tret.snapshot = this.snapshot();\n\n\t\tif (ret.snapshot) {\n\t\t\tret.snapshot = ret.snapshot._toDocument();\n\t\t\tif (typeof(ret.snapshot) === 'object' && !Object.keys(ret.snapshot).length) ret.snapshot = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this.instance_Flow_Instance_Inputs()) !== 'undefined') ret.instance_Flow_Instance_Inputs = this.instance_Flow_Instance_Inputs().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (typeof(this.instance_Variable_Values()) !== 'undefined') ret.instance_Variable_Values = this.instance_Variable_Values().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\treturn !arFields.find(function(_k) {\n\t\t\treturn _k == k;\n\t\t});\n\t}).forEach(function(k) {\n\t\tdelete ret[k];\n\t});\n\n\treturn ret;\n}\n\n_unique(keys, ret) {\n\tret = ret || new shs_arbfw_appd_Flow_Instance();\n\n\tundefined\n\n\t// if(this.Id) ret.Id = this.Id;\n\tif (!keys) {\n\n\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (typeof(this.application()) !== 'undefined') ret.application(this.application()._unique());\n\n\t} else {\n\n\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t\tif (keys.indexOf(\"parent\") >= 0 && typeof(this.parent()) !== 'undefined') ret.parent(this.parent()._unique());\n\n\t\tif (keys.indexOf(\"application\") >= 0 && typeof(this.application()) !== 'undefined') ret.application(this.application()._unique());\n\n\t\tif (keys.indexOf(\"subflow\") >= 0 && typeof(this.subflow()) !== 'undefined') ret.subflow(this.subflow()._unique());\n\n\t\tif (keys.indexOf(\"snapshot\") >= 0 && typeof(this.snapshot()) !== 'undefined') ret.snapshot(this.snapshot()._unique());\n\n\t}\n\n\treturn ret;\n}\n\n_query(gq) {\n\tlet arFields = Object.keys(global.Schema.of('sys_hub_sub_flow_instance', ['*'])['sys_hub_sub_flow_instance']);\n\n\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('sys_hub_sub_flow_instance');\n\n\tundefined\n\n\tlet idf = ((function(r) {\n\t\tlet ret = 'sys_id';\n\t\tif (typeof(r.__idField) === 'function') {\n\t\t\tret = r.__idField();\n\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\tret = r.__idField || this.__idField();\n\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\tret = 'Id';\n\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\tret = 'sys_id';\n\t\t}\n\t\treturn ret;\n\t})(this));\n\tif (idf == 'Id') idf = 'sys_id';\n\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tlet coop = this._active_coop || '=';\n\n\t\tlet v = this.active();\n\n\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Instance._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tlet coop = this._enabled_coop || '=';\n\n\t\tlet v = this.enabled();\n\n\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Instance._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tlet coop = this._code_coop || '=';\n\n\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.code();\n\n\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Instance._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tlet coop = this._order_coop || '=';\n\n\t\tlet v = this.order();\n\n\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Instance._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tlet coop = this._date_coop || '=';\n\n\t\tlet v = this.date();\n\n\t\tif (v) {\n\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t}\n\n\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Instance._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tlet coop = this._name_coop || '=';\n\n\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.name();\n\n\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Instance._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tlet coop = this._remark_coop || '=';\n\n\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.remark();\n\n\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Instance._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._parent) !== 'undefined') {\n\t\tlet coop = this._parent_coop || '=';\n\n\t\tlet v = this.parent();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Flow Instance\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Instance._query(): \"+ \"parent \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Instance._query(): \" + \"parent[parent] resuled in undefined: \" + JSON.stringify(this.parent()));\n\t\t}\n\n\t\tif (arFields.indexOf('parent') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Instance._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('parent');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('parent');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('parent', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._application) !== 'undefined') {\n\t\tlet coop = this._application_coop || '=';\n\n\t\tlet v = this.application();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Flow Instance\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Instance._query(): \"+ \"application \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Instance._query(): \" + \"application[application] resuled in undefined: \" + JSON.stringify(this.application()));\n\t\t}\n\n\t\tif (arFields.indexOf('application') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Instance._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('application');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('application');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('application', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._subflow) !== 'undefined') {\n\t\tlet coop = this._subflow_coop || '=';\n\n\t\tlet v = this.subflow();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Flow Instance\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Instance._query(): \"+ \"subflow \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Instance._query(): \" + \"subflow[subflow] resuled in undefined: \" + JSON.stringify(this.subflow()));\n\t\t}\n\n\t\tif (arFields.indexOf('subflow') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Instance._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('subflow');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('subflow');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('subflow', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._snapshot) !== 'undefined') {\n\t\tlet coop = this._snapshot_coop || '=';\n\n\t\tlet v = this.snapshot();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Flow Instance\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Instance._query(): \"+ \"snapshot \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Instance._query(): \" + \"snapshot[snapshot] resuled in undefined: \" + JSON.stringify(this.snapshot()));\n\t\t}\n\n\t\tif (arFields.indexOf('snapshot') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Instance._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('snapshot');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('snapshot');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('snapshot', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Instance._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\treturn this._queryGQ;\n}\n\n_save(obj) {\n\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\treturn new shs_arbfw_appd_Flow_Instance()._save(o)\n\t});\n\n\tlet _obj = {};\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Instance._save(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\tObject.keys(obj).filter(function(k) {\n\t\treturn Object.keys(global.Schema.of('sys_hub_sub_flow_instance', ['*'])['sys_hub_sub_flow_instance']).filter(function(_k) {\n\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t}).indexOf(k.toLowerCase()) >= 0\n\t}).forEach(function(k) {\n\t\t_obj[k.toLowerCase()] = obj[k]\n\t});\n\n\tObject.keys(_obj).forEach(function(k) {\n\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Instance._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tdelete _obj[k];\n\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Instance._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t}\n\t});\n\n\tlet _this = null;\n\tif (obj.__keys) {\n\t\tlet kObj = {};\n\t\tkObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(_obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))));\n\t\tobj.__keys.forEach(function(k) {\n\t\t\tkObj[k] = _obj[k]\n\t\t});\n\t\t_this = new shs_arbfw_appd_Flow_Instance()._fromDocument(kObj);\n\t} else {\n\t\t_this = new shs_arbfw_appd_Flow_Instance()._fromDocument(_obj)._unique();\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Instance._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\tdelete _obj.__idField;\n\n\ttry {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Instance._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\tObject.keys(_obj).filter(function(k) {\n\t\t\treturn k.toLowerCase() != k;\n\t\t}).forEach(function(k) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Instance._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tvar lk = k.toLowerCase();\n\t\t\t_obj[lk] = _obj[k];\n\t\t\tdelete _obj[k];\n\t\t});\n\n\t\tlet gq = new global.GlideQuery(obj.__type || 'sys_hub_sub_flow_instance');\n\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Instance._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\tif (_obj.sys_id) {\n\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t} else {\n\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\tgq = gq.insert(_obj);\n\t\t}\n\t\tlet _fObj = {};\n\t\t_fObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))));\n\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('sys_hub_sub_flow_instance', ['*'])['sys_hub_sub_flow_instance']))));\n\t} catch (ex) {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Instance._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Instance._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\treturn this;\n\t}\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Instance._save(): \" + \"obj.instance_Flow_Instance_Inputs: \" + JSON.stringify(obj.instance_Flow_Instance_Inputs, null, 4));\n\tif (Array.isArray(obj.instance_Flow_Instance_Inputs)) this.instance_Flow_Instance_Inputs(obj.instance_Flow_Instance_Inputs.map(function(ta) {\n\t\treturn new shs_arbfw_appd_Flow_Instance_Input()._save(ta)\n\t}));\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Instance._save(): \" + \"obj.instance_Variable_Values: \" + JSON.stringify(obj.instance_Variable_Values, null, 4));\n\tif (Array.isArray(obj.instance_Variable_Values)) this.instance_Variable_Values(obj.instance_Variable_Values.map(function(ta) {\n\t\treturn new shs_arbfw_appd_Variable_Value()._save(ta)\n\t}));\n\n\treturn this;\n}\n\n/************* Flow_Instance.store() **********************/\nstore(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Instance.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Instance.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Instance.store(): \" + \"executing locally \");\n\n\t\t// store locally\n\t\treturn this._save(this._toDocument());\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Flow_Instance.findAll() **********************/\nfindAll(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Instance.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Instance.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Instance.findAll(): \" + \"executing locally \");\n\n\t\t// findAll locally\n\t\tlet gr = new GlideRecord('sys_hub_sub_flow_instance');\n\t\tgr.addEncodedQuery(this._toEQuery());\n\t\treturn this._fromDocument(gr);\n\n\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('sys_hub_sub_flow_instance', ['*'])['sys_hub_sub_flow_instance'])));\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Flow_Instance.find() **********************/\nfind(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Instance.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Instance.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Instance.find(): \" + \"executing locally \");\n\n\t\tlet ret = this.findAll();\n\t\treturn ret.length ? ret[0] : null;\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"scriptFile_Script_Compatibilitys":[{"active":true,"enabled":true}],"client_callable":true,"sys_name":"shs_arbfw_appd_Flow_Instance_Input","api_name":"x_1790593_arboard.shs_arbfw_appd_Flow_Instance_Input","name":"shs_arbfw_appd_Flow_Instance_Input","script":"class shs_arbfw_appd_Flow_Instance_Input extends global.AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"Application Designer\";\n\t\tthis.__type = \"shs_arbfw_appd_Flow_Instance_Input\";\n\t\tthis.__alias = \"shs_arbfw_appd\";\n\t\tthis.__scope = \"shs_arbfw\";\n\t}\n\n\t/************* Flow_Instance_Input.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Flow_Instance_Input.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Flow_Instance_Input.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Flow_Instance_Input.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Flow_Instance_Input.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Instance_Input.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Flow_Instance_Input.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Flow_Instance_Input.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Flow_Instance_Input.type GETTERS AND SETTERS **********************/\n\ttype(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._type = v;\n\t\t\tthis._type_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._type;\n\t\t}\n\t}\n\n\t/************* Flow_Instance_Input.mandatory GETTERS AND SETTERS **********************/\n\tmandatory(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._mandatory = v;\n\t\t\tthis._mandatory_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._mandatory;\n\t\t}\n\t}\n\n\t/************* Flow_Instance_Input.reference GETTERS AND SETTERS **********************/\n\treference(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._reference = v;\n\t\t\tthis._reference_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._reference;\n\t\t}\n\t}\n\n\t/************* Flow_Instance_Input.instance GETTERS AND SETTERS **********************/\n\tinstance(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._instance = v;\n\t\t\tthis._instance_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._instance;\n\t\t}\n\t}\n\n\t/************* Flow_Instance_Input.__keys EF: GETTERS AND SETTERS **********************/\n\t__keys() {\n\t\treturn /*this.ef___keys = */ ((\n\t\t\tfunction() {\n\t\t\t\ttry {\n\n\t\t\t\t\tlet __ret = undefined;\n\n\t\t\t\t\t__ret = [\"element\", \"model_id\"];\n\n\t\t\t\t\tif (typeof(__ret) === 'string' && __ret.startsWith(\"s(\") && __ret.endsWith(\")\")) {\n\t\t\t\t\t\t__ret = this.runScript(__ret.slice(2, -1));\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof(__ret) === \"function\") {\n\t\t\t\t\t\t__ret = __ret(this);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn __ret;\n\n\t\t\t\t} catch (_vOfEx) {\n\t\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Instance_Input.__keys(): \" + 'valueOf', _vOfEx, JSON.parse(((typeof(this) !== \"undefined\" && typeof(this._atob) !== \"undefined\") ? this._atob : (typeof(_FrEMD) !== \"undefined\" ? _FrEMD._atob : atob))(`eyJTZXJ2aWNlTm93IjpbImVsZW1lbnQiLCJtb2RlbF9pZCJdfQ==`), (key, value) => {\n\t\t\t\t\t\tif (typeof(value) === \"string\" && value.indexOf(\"=>\") > 0) return eval(\"(\" + value + \")\");\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t}\n\t\t)());\n\t}\n\n\t/************* Flow_Instance_Input.length EF: GETTERS AND SETTERS **********************/\n\tlength() {\n\t\treturn /*this.ef_length = */ ((\n\t\t\tfunction() {\n\t\t\t\ttry {\n\n\t\t\t\t\tlet __ret = undefined;\n\n\t\t\t\t\t__ret = () => ({\n\t\t\t\t\t\t\"String\": 255,\n\t\t\t\t\t\t\"Text\": 4000,\n\t\t\t\t\t})[this.type()];\n\n\t\t\t\t\tif (typeof(__ret) === 'string' && __ret.startsWith(\"s(\") && __ret.endsWith(\")\")) {\n\t\t\t\t\t\t__ret = this.runScript(__ret.slice(2, -1));\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof(__ret) === \"function\") {\n\t\t\t\t\t\t__ret = __ret(this);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn __ret;\n\n\t\t\t\t} catch (_vOfEx) {\n\t\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Instance_Input.length(): \" + 'valueOf', _vOfEx, JSON.parse(((typeof(this) !== \"undefined\" && typeof(this._atob) !== \"undefined\") ? this._atob : (typeof(_FrEMD) !== \"undefined\" ? _FrEMD._atob : atob))(`eyJTZXJ2aWNlTm93IjoiKCkgPT4gKHtcblx0XHRcdFx0XCJTdHJpbmdcIjogMjU1LFxuXHRcdFx0XHRcIlRleHRcIjogNDAwMCxcblx0XHRcdH0pW3RoaXMudHlwZSgpXSJ9`), (key, value) => {\n\t\t\t\t\t\tif (typeof(value) === \"string\" && value.indexOf(\"=>\") > 0) return eval(\"(\" + value + \")\");\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t}\n\t\t)());\n\t}\n\n\t/************* Flow_Instance_Input.Model_ID EF: GETTERS AND SETTERS **********************/\n\tModel_ID() {\n\t\treturn /*this.ef_Model_ID = */ ((\n\t\t\tfunction() {\n\t\t\t\ttry {\n\n\t\t\t\t\tlet __ret = undefined;\n\n\t\t\t\t\tif (typeof(__ret) === 'string' && __ret.startsWith(\"s(\") && __ret.endsWith(\")\")) {\n\t\t\t\t\t\t__ret = this.runScript(__ret.slice(2, -1));\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof(__ret) === \"function\") {\n\t\t\t\t\t\t__ret = __ret(this);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn __ret;\n\n\t\t\t\t} catch (_vOfEx) {\n\t\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Instance_Input.Model_ID(): \" + 'valueOf', _vOfEx, JSON.parse(((typeof(this) !== \"undefined\" && typeof(this._atob) !== \"undefined\") ? this._atob : (typeof(_FrEMD) !== \"undefined\" ? _FrEMD._atob : atob))(`eyJTZXJ2aWNlTm93IjoiPDxzKCh7e3BwYXRofX0uX190eXBlPT0nc3lzX3ZhcmlhYmxlX3ZhbHVlJyAmJiB7e19ffX0uc3ViZmxvdyk/e3tfX319LnN1YmZsb3cuSWQ6e3twcGF0aH19LklkKT4+IiwiX1NlcnZpY2VOb3ciOiI8PFsqKltmbG93X0Zsb3dfSW5wdXRzW21vZGVsX2lkPSd7e2lkfX0nXV0uSWQsICoqW2Zsb3dfRmxvd19PdXRwdXRzW21vZGVsX2lkPSd7e2lkfX0nXV0uSWQsICoqW2Zsb3dfRmxvd19WYXJpYWJsZXNbbW9kZWxfaWQ9J3t7aWR9fSddXS5JZCwgKipbc25hcHNob3RfRmxvd19JbnB1dHNbbW9kZWxfaWQ9J3t7aWR9fSddXS5JZCwgKipbc25hcHNob3RfRmxvd19PdXRwdXRzW21vZGVsX2lkPSd7e2lkfX0nXV0uSWQsICoqW3NuYXBzaG90X0Zsb3dfVmFyaWFibGVzW21vZGVsX2lkPSd7e2lkfX0nXV0uSWQsICoqW2luc3RhbmNlX0Zsb3dfSW5zdGFuY2VfSW5wdXRzW21vZGVsX2lkPSd7e2lkfX0nXV0uSWQsICoqW2luc3RhbmNlX1ZhcmlhYmxlX1ZhbHVlc1tmbG93SW5wdXRbbW9kZWxfaWQ9J3t7aWR9fSddXV0uc3ViZmxvdy5JZCwgKipbYWN0aW9uX1ZhcmlhYmxlX1ZhbHVlc1thY3Rpb25JbnB1dFttb2RlbF9pZD0ne3tpZH19J11dXS57XCJJZFwiOiBcIl9me2dzLmluZm8oX3RvU3RyaW5nICsgJzogRklKU09OOiAnICsgSlNPTi5zdHJpbmdpZnkocmVmcy5tYW55UmVmcykpfVwifS5JZF1bMF0+PiJ9`), (key, value) => {\n\t\t\t\t\t\tif (typeof(value) === \"string\" && value.indexOf(\"=>\") > 0) return eval(\"(\" + value + \")\");\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t}\n\t\t)());\n\t}\n\n\t/************* Flow_Instance_Input.Model_Table EF: GETTERS AND SETTERS **********************/\n\tModel_Table() {\n\t\treturn /*this.ef_Model_Table = */ ((\n\t\t\tfunction() {\n\t\t\t\ttry {\n\n\t\t\t\t\tlet __ret = undefined;\n\n\t\t\t\t\tif (typeof(__ret) === 'string' && __ret.startsWith(\"s(\") && __ret.endsWith(\")\")) {\n\t\t\t\t\t\t__ret = this.runScript(__ret.slice(2, -1));\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof(__ret) === \"function\") {\n\t\t\t\t\t\t__ret = __ret(this);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn __ret;\n\n\t\t\t\t} catch (_vOfEx) {\n\t\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Instance_Input.Model_Table(): \" + 'valueOf', _vOfEx, JSON.parse(((typeof(this) !== \"undefined\" && typeof(this._atob) !== \"undefined\") ? this._atob : (typeof(_FrEMD) !== \"undefined\" ? _FrEMD._atob : atob))(`eyJTZXJ2aWNlTm93IjoiPDxzKCh7c3lzX2h1Yl9mbG93OiAnc3lzX2h1Yl9mbG93Jywgc3lzX2h1Yl9mbG93X3NuYXBzaG90OiAnc3lzX2h1Yl9mbG93X3NuYXBzaG90Jywgc3lzX3ZhcmlhYmxlX3ZhbHVlOiAnc3lzX2h1Yl9mbG93Jywgc3lzX2h1Yl9zdWJfZmxvd19pbnN0YW5jZTogJ3N5c19odWJfZmxvd19sb2dpY19leHRfaW5wdXQnLCBzeXNfaHViX2FjdGlvbl9pbnN0YW5jZTogJ3N5c19odWJfZmxvdyd9KVt7e3BwYXRofX0uX190eXBlXSk+PiIsIl9TZXJ2aWNlTm93IjoiPDwkZXhpc3RzKCoqW2Zsb3dfRmxvd19JbnB1dHNbbW9kZWxfdGFibGU9J3t7aWR9fSddIG9yIGZsb3dfRmxvd19PdXRwdXRzW21vZGVsX3RhYmxlPSd7e2lkfX0nXSBvciBmbG93X0Zsb3dfVmFyaWFibGVzW21vZGVsX3RhYmxlPSd7e2lkfX0nXV0pPydzeXNfaHViX2Zsb3cnOigkZXhpc3RzKCoqW3NuYXBzaG90X0Zsb3dfSW5wdXRzW21vZGVsX3RhYmxlPSd7e2lkfX0nXSBvciBzbmFwc2hvdF9GbG93X091dHB1dHNbbW9kZWxfdGFibGU9J3t7aWR9fSddIG9yIHNuYXBzaG90X0Zsb3dfVmFyaWFibGVzW21vZGVsX3RhYmxlPSd7e2lkfX0nXV0pPydzeXNfaHViX2Zsb3dfc25hcHNob3QnOigkZXhpc3RzKCoqW2luc3RhbmNlX0Zsb3dfSW5zdGFuY2VfSW5wdXRzW21vZGVsX3RhYmxlPSd7e2lkfX0nXV0pPydzeXNfaHViX2Zsb3dfbG9naWNfZXh0X2lucHV0JzooJGV4aXN0cygqKlthY3Rpb25fVmFyaWFibGVfVmFsdWVzW2FjdGlvbklucHV0W21vZGVsX3RhYmxlPSd7e2lkfX0nXV1dIG9yICoqW2luc3RhbmNlX1ZhcmlhYmxlX1ZhbHVlc1tmbG93SW5wdXRbbW9kZWxfdGFibGU9J3t7aWR9fSddXV0pPydzeXNfaHViX2Zsb3cnOicnKSkpPj4ifQ==`), (key, value) => {\n\t\t\t\t\t\tif (typeof(value) === \"string\" && value.indexOf(\"=>\") > 0) return eval(\"(\" + value + \")\");\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t}\n\t\t)());\n\t}\n\n\t/************* Flow_Instance_Input.Attributes EF: GETTERS AND SETTERS **********************/\n\tAttributes() {\n\t\treturn /*this.ef_Attributes = */ ((\n\t\t\tfunction() {\n\t\t\t\ttry {\n\n\t\t\t\t\tlet __ret = undefined;\n\n\t\t\t\t\tif (typeof(__ret) === 'string' && __ret.startsWith(\"s(\") && __ret.endsWith(\")\")) {\n\t\t\t\t\t\t__ret = this.runScript(__ret.slice(2, -1));\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof(__ret) === \"function\") {\n\t\t\t\t\t\t__ret = __ret(this);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn __ret;\n\n\t\t\t\t} catch (_vOfEx) {\n\t\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Instance_Input.Attributes(): \" + 'valueOf', _vOfEx, JSON.parse(((typeof(this) !== \"undefined\" && typeof(this._atob) !== \"undefined\") ? this._atob : (typeof(_FrEMD) !== \"undefined\" ? _FrEMD._atob : atob))(`eyJTZXJ2aWNlTm93IjoiPDxzKCdlbGVtZW50X21hcHBpbmdfcHJvdmlkZXI9Y29tLmdsaWRlLmZsb3dfZGVzaWduLmFjdGlvbi5kYXRhLkZsb3dEZXNpZ25WYXJpYWJsZU1hcHBlcix1aVR5cGU9Jyt7e19ffX0uaW50ZXJuYWxfdHlwZSsnLHVpVW5pcXVlSWQ9Jyt7e19ffX0uSWQpPj4iLCJfU2VydmljZU5vdyI6Ijw8J2VsZW1lbnRfbWFwcGluZ19wcm92aWRlcj1jb20uZ2xpZGUuZmxvd19kZXNpZ24uYWN0aW9uLmRhdGEuRmxvd0Rlc2lnblZhcmlhYmxlTWFwcGVyLHVpVHlwZT0nJnt7X199fS5pbnRlcm5hbF90eXBlJicsdWlVbmlxdWVJZD0nJnt7X199fS5JZD4+In0=`), (key, value) => {\n\t\t\t\t\t\tif (typeof(value) === \"string\" && value.indexOf(\"=>\") > 0) return eval(\"(\" + value + \")\");\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t}\n\t\t)());\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = undefined || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\tif (this._type) ret += '^' + sPath + 'type' + (this._type_coop || '=') + this.type();\n\n\t\tif (this._mandatory) ret += '^' + sPath + 'mandatory' + (this._mandatory_coop || '=') + this.mandatory();\n\n\t\tif (this._reference) ret += /*(this._reference_coop || '=') + */ this.reference()._toEQuery(sPath + 'reference.');\n\n\t\tif (this._instance) ret += /*(this._instance_coop || '=') + */ this.instance()._toEQuery(sPath + 'instance.');\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Instance_Input._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn new shs_arbfw_appd_Flow_Instance_Input()._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Instance_Input._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Instance_Input._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromGlideRecord(obj) {\n\t\tif (!obj) return null;\n\t\tif (obj.isValidRecord()) {\n\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Flow_Instance_Input\" != 'ecc_queue' && obj.source == \"shs_arbfw_appd_Flow_Instance_Input\") {\n\t\t\t\tobj.state = \"processing\";\n\t\t\t\tobj.update();\n\n\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\tresp.queue = 'output';\n\t\t\t\tresp.agent = obj.agent;\n\t\t\t\tresp.topic = obj.topic;\n\t\t\t\tresp.name = obj.name;\n\t\t\t\tresp.source = obj.source;\n\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\tlet ret = new shs_arbfw_appd_Flow_Instance_Input()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t});\n\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t}\n\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\tresp.insert();\n\n\t\t\t\tobj.state = \"processed\";\n\t\t\t\tobj.update();\n\t\t\t\treturn resp;\n\t\t\t} else {\n\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\ttype: obj.getValue(\"type\"),\n\n\t\t\t\t\tmandatory: obj.getValue(\"mandatory\"),\n\n\t\t\t\t\treference: obj.getValue(\"reference\"),\n\n\t\t\t\t\tinstance: obj.getValue(\"instance\"),\n\n\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tobj.query();\n\t\t\tlet grRet = [];\n\t\t\twhile (obj.next()) grRet.push(this._fromGlideRecord(obj));\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Instance_Input._fromGlideRecord(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\treturn grRet;\n\t\t}\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\tundefined\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_appd_Flow_Instance_Input()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\tif (/((([A-Za-z]{3,9}:(?:/ / ) ? )( ? : [-;: &= +$, w] + @) ? [A - Za - z0 - 9. - ] + | ( ? : www. | [-;: &= +$, w] + @)[A - Za - z0 - 9. - ] + )(( ? : /[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)/g.test(obj)) {\n\t\t\tvar msg = new sn_ws.RESTMessageV2();\n\t\t\tmsg.setEndpoint(obj);\n\t\t\tmsg.setRequestHeader('Content-Type', 'application/json');\n\t\t\tmsg.setHttpMethod('get');\n\t\t\treturn this._fromDocument(msg.execute().getBody());\n\t\t}\n\n\t\ttry {\n\t\t\tobj = JSON.parse(obj);\n\t\t} catch (ex) {\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Instance_Input._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\tlet _obj = {\n\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))\n\t\t\t};\n\t\t\t_obj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(this))] = obj;\n\t\t\tobj = _obj;\n\t\t}\n\t\treturn this._fromDocument(obj);\n\t}\n\telse if (typeof(obj) === 'object') {\n\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\treturn this._fromGlideRecord(obj);\n\t\t} else if (obj._fromDocument) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Instance_Input._fromDocument(): \" + \"redundent call\");\n\t\t\treturn obj;\n\t\t} else if (Array.isArray(obj)) {\n\t\t\treturn obj.map(function(o) {\n\t\t\t\treturn new shs_arbfw_appd_Flow_Instance_Input()._fromDocument(o)\n\t\t\t});\n\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(obj))));\n\n\t\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Instance_Input._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.type) !== 'undefined') {\n\n\t\t\t\t\tthis.type(obj.type);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.mandatory) !== 'undefined') {\n\n\t\t\t\t\tthis.mandatory(obj.mandatory);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.reference) !== 'undefined') {\n\n\t\t\t\t\tthis.reference(new shs_arbfw_appd_Table()._fromDocument(obj.reference));\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.instance) !== 'undefined') {\n\n\t\t\t\t\tthis.instance(new shs_arbfw_appd_Flow_Instance()._fromDocument(obj.instance));\n\t\t\t\t}\n\n\t\t\t} else { // if(obj.constructor.name==\"Flow_Instance_Input\"){\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Instance_Input._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t}\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Instance_Input._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\treturn null;\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Instance_Input._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Instance_Input._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Instance_Input._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\treturn this;\n}\n\n_insertAssert() {\n\treturn true;\n}\n\n_updateAssert() {\n\treturn true;\n}\n\n_storeAssert() {\n\treturn true;\n}\n\n_findAssert() {\n\treturn true;\n}\n\n_new(c) {\n\n\treturn new shs_arbfw_appd_Platform._new(c);\n\n}\n\n_toDocument(arFields) {\n\n\tlet ret = undefined || {};\n\n\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tret.active = this.active();\n\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tret.enabled = this.enabled();\n\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tret.code = this.code();\n\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tret.order = this.order();\n\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tret.date = this.date();\n\n\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tret.name = this.name();\n\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tret.remark = this.remark();\n\n\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t}\n\n\tif (typeof(this._type) !== 'undefined') {\n\t\tret.type = this.type();\n\n\t}\n\n\tif (typeof(this._mandatory) !== 'undefined') {\n\t\tret.mandatory = this.mandatory();\n\n\t}\n\n\tif (typeof(this._reference) !== 'undefined') {\n\t\tret.reference = this.reference();\n\n\t\tif (ret.reference) {\n\t\t\tret.reference = ret.reference._toDocument();\n\t\t\tif (typeof(ret.reference) === 'object' && !Object.keys(ret.reference).length) ret.reference = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this._instance) !== 'undefined') {\n\t\tret.instance = this.instance();\n\n\t\tif (ret.instance) {\n\t\t\tret.instance = ret.instance._toDocument();\n\t\t\tif (typeof(ret.instance) === 'object' && !Object.keys(ret.instance).length) ret.instance = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this.__keys()) !== 'undefined') ret.__keys = this.__keys();\n\n\tif (typeof(this.length()) !== 'undefined') ret.length = this.length();\n\n\tif (typeof(this.Model_ID()) !== 'undefined') ret.Model_ID = this.Model_ID();\n\n\tif (typeof(this.Model_Table()) !== 'undefined') ret.Model_Table = this.Model_Table();\n\n\tif (typeof(this.Attributes()) !== 'undefined') ret.Attributes = this.Attributes();\n\n\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\treturn !arFields.find(function(_k) {\n\t\t\treturn _k == k;\n\t\t});\n\t}).forEach(function(k) {\n\t\tdelete ret[k];\n\t});\n\n\treturn ret;\n}\n\n_unique(keys, ret) {\n\tret = ret || new shs_arbfw_appd_Flow_Instance_Input();\n\n\tundefined\n\n\t// if(this.Id) ret.Id = this.Id;\n\tif (!keys) {\n\n\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (typeof(this.instance()) !== 'undefined') ret.instance(this.instance()._unique());\n\n\t} else {\n\n\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t\tif (keys.indexOf(\"type\") >= 0 && typeof(this.type()) !== 'undefined') ret.type(this.type());\n\n\t\tif (keys.indexOf(\"mandatory\") >= 0 && typeof(this.mandatory()) !== 'undefined') ret.mandatory(this.mandatory());\n\n\t\tif (keys.indexOf(\"reference\") >= 0 && typeof(this.reference()) !== 'undefined') ret.reference(this.reference()._unique());\n\n\t\tif (keys.indexOf(\"instance\") >= 0 && typeof(this.instance()) !== 'undefined') ret.instance(this.instance()._unique());\n\n\t}\n\n\treturn ret;\n}\n\n_query(gq) {\n\tlet arFields = Object.keys(global.Schema.of('sys_hub_sub_flow_instance_inputs', ['*'])['sys_hub_sub_flow_instance_inputs']);\n\n\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('sys_hub_sub_flow_instance_inputs');\n\n\tundefined\n\n\tlet idf = ((function(r) {\n\t\tlet ret = 'sys_id';\n\t\tif (typeof(r.__idField) === 'function') {\n\t\t\tret = r.__idField();\n\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\tret = r.__idField || this.__idField();\n\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\tret = 'Id';\n\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\tret = 'sys_id';\n\t\t}\n\t\treturn ret;\n\t})(this));\n\tif (idf == 'Id') idf = 'sys_id';\n\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tlet coop = this._active_coop || '=';\n\n\t\tlet v = this.active();\n\n\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Instance_Input._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tlet coop = this._enabled_coop || '=';\n\n\t\tlet v = this.enabled();\n\n\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Instance_Input._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tlet coop = this._code_coop || '=';\n\n\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.code();\n\n\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Instance_Input._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tlet coop = this._order_coop || '=';\n\n\t\tlet v = this.order();\n\n\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Instance_Input._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tlet coop = this._date_coop || '=';\n\n\t\tlet v = this.date();\n\n\t\tif (v) {\n\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t}\n\n\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Instance_Input._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tlet coop = this._name_coop || '=';\n\n\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.name();\n\n\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Instance_Input._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tlet coop = this._remark_coop || '=';\n\n\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.remark();\n\n\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Instance_Input._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._type) !== 'undefined') {\n\t\tlet coop = this._type_coop || '=';\n\n\t\tif (!this._type_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.type();\n\n\t\tif (arFields.indexOf('type') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Instance_Input._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('type');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('type');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('type', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._mandatory) !== 'undefined') {\n\t\tlet coop = this._mandatory_coop || '=';\n\n\t\tlet v = this.mandatory();\n\n\t\tif (arFields.indexOf('mandatory') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Instance_Input._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('mandatory');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('mandatory');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('mandatory', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._reference) !== 'undefined') {\n\t\tlet coop = this._reference_coop || '=';\n\n\t\tlet v = this.reference();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Flow Instance Input\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Instance_Input._query(): \"+ \"reference \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Instance_Input._query(): \" + \"reference[reference] resuled in undefined: \" + JSON.stringify(this.reference()));\n\t\t}\n\n\t\tif (arFields.indexOf('reference') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Instance_Input._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('reference');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('reference');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('reference', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._instance) !== 'undefined') {\n\t\tlet coop = this._instance_coop || '=';\n\n\t\tlet v = this.instance();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Flow Instance Input\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Instance_Input._query(): \"+ \"instance \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Instance_Input._query(): \" + \"instance[instance] resuled in undefined: \" + JSON.stringify(this.instance()));\n\t\t}\n\n\t\tif (arFields.indexOf('instance') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Instance_Input._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('instance');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('instance');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('instance', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Instance_Input._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\treturn this._queryGQ;\n}\n\n_save(obj) {\n\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\treturn new shs_arbfw_appd_Flow_Instance_Input()._save(o)\n\t});\n\n\tlet _obj = {};\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Instance_Input._save(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\tObject.keys(obj).filter(function(k) {\n\t\treturn Object.keys(global.Schema.of('sys_hub_sub_flow_instance_inputs', ['*'])['sys_hub_sub_flow_instance_inputs']).filter(function(_k) {\n\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t}).indexOf(k.toLowerCase()) >= 0\n\t}).forEach(function(k) {\n\t\t_obj[k.toLowerCase()] = obj[k]\n\t});\n\n\tObject.keys(_obj).forEach(function(k) {\n\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Instance_Input._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tdelete _obj[k];\n\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Instance_Input._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t}\n\t});\n\n\tlet _this = null;\n\tif (obj.__keys) {\n\t\tlet kObj = {};\n\t\tkObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(_obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))));\n\t\tobj.__keys.forEach(function(k) {\n\t\t\tkObj[k] = _obj[k]\n\t\t});\n\t\t_this = new shs_arbfw_appd_Flow_Instance_Input()._fromDocument(kObj);\n\t} else {\n\t\t_this = new shs_arbfw_appd_Flow_Instance_Input()._fromDocument(_obj)._unique();\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Instance_Input._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\tdelete _obj.__idField;\n\n\ttry {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Instance_Input._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\tObject.keys(_obj).filter(function(k) {\n\t\t\treturn k.toLowerCase() != k;\n\t\t}).forEach(function(k) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Instance_Input._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tvar lk = k.toLowerCase();\n\t\t\t_obj[lk] = _obj[k];\n\t\t\tdelete _obj[k];\n\t\t});\n\n\t\tlet gq = new global.GlideQuery(obj.__type || 'sys_hub_sub_flow_instance_inputs');\n\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Instance_Input._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\tif (_obj.sys_id) {\n\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t} else {\n\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\tgq = gq.insert(_obj);\n\t\t}\n\t\tlet _fObj = {};\n\t\t_fObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))));\n\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('sys_hub_sub_flow_instance_inputs', ['*'])['sys_hub_sub_flow_instance_inputs']))));\n\t} catch (ex) {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Instance_Input._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Instance_Input._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\treturn this;\n\t}\n\n\treturn this;\n}\n\n/************* Flow_Instance_Input.store() **********************/\nstore(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Instance_Input.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Instance_Input.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Instance_Input.store(): \" + \"executing locally \");\n\n\t\t// store locally\n\t\treturn this._save(this._toDocument());\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Flow_Instance_Input.findAll() **********************/\nfindAll(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Instance_Input.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Instance_Input.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Instance_Input.findAll(): \" + \"executing locally \");\n\n\t\t// findAll locally\n\t\tlet gr = new GlideRecord('sys_hub_sub_flow_instance_inputs');\n\t\tgr.addEncodedQuery(this._toEQuery());\n\t\treturn this._fromDocument(gr);\n\n\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('sys_hub_sub_flow_instance_inputs', ['*'])['sys_hub_sub_flow_instance_inputs'])));\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Flow_Instance_Input.find() **********************/\nfind(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Instance_Input.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Instance_Input.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Instance_Input.find(): \" + \"executing locally \");\n\n\t\tlet ret = this.findAll();\n\t\treturn ret.length ? ret[0] : null;\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"scriptFile_Script_Compatibilitys":[{"active":true,"enabled":true}],"client_callable":true,"sys_name":"shs_arbfw_appd_Action_Instance","api_name":"x_1790593_arboard.shs_arbfw_appd_Action_Instance","name":"shs_arbfw_appd_Action_Instance","script":"class shs_arbfw_appd_Action_Instance extends global.AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"Application Designer\";\n\t\tthis.__type = \"shs_arbfw_appd_Action_Instance\";\n\t\tthis.__alias = \"shs_arbfw_appd\";\n\t\tthis.__scope = \"shs_arbfw\";\n\t}\n\n\t/************* Action_Instance.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Action_Instance.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Action_Instance.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Action_Instance.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Action_Instance.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//(typeof(window)!=='undefined'?alert:gs.info)(\"Action_Instance.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Action_Instance.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Action_Instance.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Action_Instance.parent GETTERS AND SETTERS **********************/\n\tparent(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._parent = v;\n\t\t\tthis._parent_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._parent;\n\t\t}\n\t}\n\n\t/************* Action_Instance.application GETTERS AND SETTERS **********************/\n\tapplication(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._application = v;\n\t\t\tthis._application_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._application;\n\t\t}\n\t}\n\n\t/************* Action_Instance.action GETTERS AND SETTERS **********************/\n\taction(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._action = v;\n\t\t\tthis._action_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._action;\n\t\t}\n\t}\n\n\t/************* Action_Instance.action_Variable_Values GETTERS AND SETTERS **********************/\n\taction_Variable_Values(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._action_Variable_Values = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._action_Variable_Values_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._action_Variable_Values;\n\t\t}\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = undefined || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\tif (this._parent) ret += /*(this._parent_coop || '=') + */ this.parent()._toEQuery(sPath + 'parent.');\n\n\t\tif (this._application) ret += /*(this._application_coop || '=') + */ this.application()._toEQuery(sPath + 'application.');\n\n\t\tif (this._action) ret += /*(this._action_coop || '=') + */ this.action()._toEQuery(sPath + 'action.');\n\n\t\t(this.action_Variable_Values() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYVariable_Value.action,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Instance._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn new shs_arbfw_appd_Action_Instance()._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Instance._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Instance._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromGlideRecord(obj) {\n\t\tif (!obj) return null;\n\t\tif (obj.isValidRecord()) {\n\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Action_Instance\" != 'ecc_queue' && obj.source == \"shs_arbfw_appd_Action_Instance\") {\n\t\t\t\tobj.state = \"processing\";\n\t\t\t\tobj.update();\n\n\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\tresp.queue = 'output';\n\t\t\t\tresp.agent = obj.agent;\n\t\t\t\tresp.topic = obj.topic;\n\t\t\t\tresp.name = obj.name;\n\t\t\t\tresp.source = obj.source;\n\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\tlet ret = new shs_arbfw_appd_Action_Instance()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t});\n\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t}\n\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\tresp.insert();\n\n\t\t\t\tobj.state = \"processed\";\n\t\t\t\tobj.update();\n\t\t\t\treturn resp;\n\t\t\t} else {\n\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\tparent: obj.getValue(\"parent\"),\n\n\t\t\t\t\tapplication: obj.getValue(\"application\"),\n\n\t\t\t\t\taction: obj.getValue(\"action\"),\n\n\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tobj.query();\n\t\t\tlet grRet = [];\n\t\t\twhile (obj.next()) grRet.push(this._fromGlideRecord(obj));\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Action_Instance._fromGlideRecord(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\treturn grRet;\n\t\t}\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\tundefined\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_appd_Action_Instance()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\tif (/((([A-Za-z]{3,9}:(?:/ / ) ? )( ? : [-;: &= +$, w] + @) ? [A - Za - z0 - 9. - ] + | ( ? : www. | [-;: &= +$, w] + @)[A - Za - z0 - 9. - ] + )(( ? : /[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)/g.test(obj)) {\n\t\t\tvar msg = new sn_ws.RESTMessageV2();\n\t\t\tmsg.setEndpoint(obj);\n\t\t\tmsg.setRequestHeader('Content-Type', 'application/json');\n\t\t\tmsg.setHttpMethod('get');\n\t\t\treturn this._fromDocument(msg.execute().getBody());\n\t\t}\n\n\t\ttry {\n\t\t\tobj = JSON.parse(obj);\n\t\t} catch (ex) {\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Action_Instance._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\tlet _obj = {\n\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))\n\t\t\t};\n\t\t\t_obj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(this))] = obj;\n\t\t\tobj = _obj;\n\t\t}\n\t\treturn this._fromDocument(obj);\n\t}\n\telse if (typeof(obj) === 'object') {\n\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\treturn this._fromGlideRecord(obj);\n\t\t} else if (obj._fromDocument) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Instance._fromDocument(): \" + \"redundent call\");\n\t\t\treturn obj;\n\t\t} else if (Array.isArray(obj)) {\n\t\t\treturn obj.map(function(o) {\n\t\t\t\treturn new shs_arbfw_appd_Action_Instance()._fromDocument(o)\n\t\t\t});\n\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(obj))));\n\n\t\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Action_Instance._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.parent) !== 'undefined') {\n\n\t\t\t\t\tthis.parent(new shs_arbfw_appd_Flow_Logic()._fromDocument(obj.parent));\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.application) !== 'undefined') {\n\n\t\t\t\t\tthis.application(new shs_arbfw_appd_Application()._fromDocument(obj.application));\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.action) !== 'undefined') {\n\n\t\t\t\t\tthis.action(new shs_arbfw_appd_Action_Type()._fromDocument(obj.action));\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.action_Variable_Values) !== 'undefined') this.action_Variable_Values(new shs_arbfw_appd_Variable_Value()._fromDocument(obj.action_Variable_Values));\n\n\t\t\t} else { // if(obj.constructor.name==\"Action_Instance\"){\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Instance._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t}\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Instance._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\treturn null;\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Instance._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Action_Instance._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Action_Instance._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\treturn this;\n}\n\n_insertAssert() {\n\treturn true;\n}\n\n_updateAssert() {\n\treturn true;\n}\n\n_storeAssert() {\n\treturn true;\n}\n\n_findAssert() {\n\treturn true;\n}\n\n_new(c) {\n\n\treturn new shs_arbfw_appd_Platform._new(c);\n\n}\n\n_toDocument(arFields) {\n\n\tlet ret = undefined || {};\n\n\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tret.active = this.active();\n\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tret.enabled = this.enabled();\n\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tret.code = this.code();\n\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tret.order = this.order();\n\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tret.date = this.date();\n\n\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tret.name = this.name();\n\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tret.remark = this.remark();\n\n\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t}\n\n\tif (typeof(this._parent) !== 'undefined') {\n\t\tret.parent = this.parent();\n\n\t\tif (ret.parent) {\n\t\t\tret.parent = ret.parent._toDocument();\n\t\t\tif (typeof(ret.parent) === 'object' && !Object.keys(ret.parent).length) ret.parent = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this._application) !== 'undefined') {\n\t\tret.application = this.application();\n\n\t\tif (ret.application) {\n\t\t\tret.application = ret.application._toDocument();\n\t\t\tif (typeof(ret.application) === 'object' && !Object.keys(ret.application).length) ret.application = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this._action) !== 'undefined') {\n\t\tret.action = this.action();\n\n\t\tif (ret.action) {\n\t\t\tret.action = ret.action._toDocument();\n\t\t\tif (typeof(ret.action) === 'object' && !Object.keys(ret.action).length) ret.action = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this.action_Variable_Values()) !== 'undefined') ret.action_Variable_Values = this.action_Variable_Values().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\treturn !arFields.find(function(_k) {\n\t\t\treturn _k == k;\n\t\t});\n\t}).forEach(function(k) {\n\t\tdelete ret[k];\n\t});\n\n\treturn ret;\n}\n\n_unique(keys, ret) {\n\tret = ret || new shs_arbfw_appd_Action_Instance();\n\n\tundefined\n\n\t// if(this.Id) ret.Id = this.Id;\n\tif (!keys) {\n\n\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (typeof(this.application()) !== 'undefined') ret.application(this.application()._unique());\n\n\t} else {\n\n\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t\tif (keys.indexOf(\"parent\") >= 0 && typeof(this.parent()) !== 'undefined') ret.parent(this.parent()._unique());\n\n\t\tif (keys.indexOf(\"application\") >= 0 && typeof(this.application()) !== 'undefined') ret.application(this.application()._unique());\n\n\t\tif (keys.indexOf(\"action\") >= 0 && typeof(this.action()) !== 'undefined') ret.action(this.action()._unique());\n\n\t}\n\n\treturn ret;\n}\n\n_query(gq) {\n\tlet arFields = Object.keys(global.Schema.of('sys_hub_action_instance', ['*'])['sys_hub_action_instance']);\n\n\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('sys_hub_action_instance');\n\n\tundefined\n\n\tlet idf = ((function(r) {\n\t\tlet ret = 'sys_id';\n\t\tif (typeof(r.__idField) === 'function') {\n\t\t\tret = r.__idField();\n\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\tret = r.__idField || this.__idField();\n\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\tret = 'Id';\n\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\tret = 'sys_id';\n\t\t}\n\t\treturn ret;\n\t})(this));\n\tif (idf == 'Id') idf = 'sys_id';\n\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tlet coop = this._active_coop || '=';\n\n\t\tlet v = this.active();\n\n\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Action_Instance._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tlet coop = this._enabled_coop || '=';\n\n\t\tlet v = this.enabled();\n\n\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Action_Instance._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tlet coop = this._code_coop || '=';\n\n\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.code();\n\n\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Action_Instance._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tlet coop = this._order_coop || '=';\n\n\t\tlet v = this.order();\n\n\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Action_Instance._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tlet coop = this._date_coop || '=';\n\n\t\tlet v = this.date();\n\n\t\tif (v) {\n\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t}\n\n\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Action_Instance._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tlet coop = this._name_coop || '=';\n\n\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.name();\n\n\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Action_Instance._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tlet coop = this._remark_coop || '=';\n\n\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.remark();\n\n\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Action_Instance._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._parent) !== 'undefined') {\n\t\tlet coop = this._parent_coop || '=';\n\n\t\tlet v = this.parent();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Action Instance\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Action_Instance._query(): \"+ \"parent \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Instance._query(): \" + \"parent[parent] resuled in undefined: \" + JSON.stringify(this.parent()));\n\t\t}\n\n\t\tif (arFields.indexOf('parent') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Action_Instance._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('parent');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('parent');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('parent', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._application) !== 'undefined') {\n\t\tlet coop = this._application_coop || '=';\n\n\t\tlet v = this.application();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Action Instance\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Action_Instance._query(): \"+ \"application \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Instance._query(): \" + \"application[application] resuled in undefined: \" + JSON.stringify(this.application()));\n\t\t}\n\n\t\tif (arFields.indexOf('application') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Action_Instance._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('application');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('application');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('application', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._action) !== 'undefined') {\n\t\tlet coop = this._action_coop || '=';\n\n\t\tlet v = this.action();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Action Instance\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Action_Instance._query(): \"+ \"action \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Instance._query(): \" + \"action[action] resuled in undefined: \" + JSON.stringify(this.action()));\n\t\t}\n\n\t\tif (arFields.indexOf('action') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Action_Instance._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('action');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('action');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('action', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Action_Instance._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\treturn this._queryGQ;\n}\n\n_save(obj) {\n\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\treturn new shs_arbfw_appd_Action_Instance()._save(o)\n\t});\n\n\tlet _obj = {};\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Action_Instance._save(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\tObject.keys(obj).filter(function(k) {\n\t\treturn Object.keys(global.Schema.of('sys_hub_action_instance', ['*'])['sys_hub_action_instance']).filter(function(_k) {\n\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t}).indexOf(k.toLowerCase()) >= 0\n\t}).forEach(function(k) {\n\t\t_obj[k.toLowerCase()] = obj[k]\n\t});\n\n\tObject.keys(_obj).forEach(function(k) {\n\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Instance._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tdelete _obj[k];\n\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Instance._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t}\n\t});\n\n\tlet _this = null;\n\tif (obj.__keys) {\n\t\tlet kObj = {};\n\t\tkObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(_obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))));\n\t\tobj.__keys.forEach(function(k) {\n\t\t\tkObj[k] = _obj[k]\n\t\t});\n\t\t_this = new shs_arbfw_appd_Action_Instance()._fromDocument(kObj);\n\t} else {\n\t\t_this = new shs_arbfw_appd_Action_Instance()._fromDocument(_obj)._unique();\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Action_Instance._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\tdelete _obj.__idField;\n\n\ttry {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Instance._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\tObject.keys(_obj).filter(function(k) {\n\t\t\treturn k.toLowerCase() != k;\n\t\t}).forEach(function(k) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Instance._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tvar lk = k.toLowerCase();\n\t\t\t_obj[lk] = _obj[k];\n\t\t\tdelete _obj[k];\n\t\t});\n\n\t\tlet gq = new global.GlideQuery(obj.__type || 'sys_hub_action_instance');\n\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Action_Instance._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\tif (_obj.sys_id) {\n\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t} else {\n\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\tgq = gq.insert(_obj);\n\t\t}\n\t\tlet _fObj = {};\n\t\t_fObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))));\n\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('sys_hub_action_instance', ['*'])['sys_hub_action_instance']))));\n\t} catch (ex) {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Instance._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Instance._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\treturn this;\n\t}\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Instance._save(): \" + \"obj.action_Variable_Values: \" + JSON.stringify(obj.action_Variable_Values, null, 4));\n\tif (Array.isArray(obj.action_Variable_Values)) this.action_Variable_Values(obj.action_Variable_Values.map(function(ta) {\n\t\treturn new shs_arbfw_appd_Variable_Value()._save(ta)\n\t}));\n\n\treturn this;\n}\n\n/************* Action_Instance.store() **********************/\nstore(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Instance.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Instance.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Instance.store(): \" + \"executing locally \");\n\n\t\t// store locally\n\t\treturn this._save(this._toDocument());\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Action_Instance.findAll() **********************/\nfindAll(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Instance.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Instance.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Instance.findAll(): \" + \"executing locally \");\n\n\t\t// findAll locally\n\t\tlet gr = new GlideRecord('sys_hub_action_instance');\n\t\tgr.addEncodedQuery(this._toEQuery());\n\t\treturn this._fromDocument(gr);\n\n\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('sys_hub_action_instance', ['*'])['sys_hub_action_instance'])));\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Action_Instance.find() **********************/\nfind(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Instance.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Instance.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Instance.find(): \" + \"executing locally \");\n\n\t\tlet ret = this.findAll();\n\t\treturn ret.length ? ret[0] : null;\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"scriptFile_Script_Compatibilitys":[{"active":true,"enabled":true}],"client_callable":true,"sys_name":"shs_arbfw_appd_Field_Label","api_name":"x_1790593_arboard.shs_arbfw_appd_Field_Label","name":"shs_arbfw_appd_Field_Label","script":"class shs_arbfw_appd_Field_Label extends global.AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"Application Designer\";\n\t\tthis.__type = \"shs_arbfw_appd_Field_Label\";\n\t\tthis.__alias = \"shs_arbfw_appd\";\n\t\tthis.__scope = \"shs_arbfw\";\n\t}\n\n\t/************* Field_Label.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Field_Label.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Field_Label.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Field_Label.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Field_Label.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//(typeof(window)!=='undefined'?alert:gs.info)(\"Field_Label.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Field_Label.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Field_Label.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Field_Label.plural GETTERS AND SETTERS **********************/\n\tplural(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._plural = v;\n\t\t\tthis._plural_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._plural;\n\t\t}\n\t}\n\n\t/************* Field_Label.language GETTERS AND SETTERS **********************/\n\tlanguage(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._language = v;\n\t\t\tthis._language_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._language;\n\t\t}\n\t}\n\n\t/************* Field_Label.application GETTERS AND SETTERS **********************/\n\tapplication(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._application = v;\n\t\t\tthis._application_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._application;\n\t\t}\n\t}\n\n\t/************* Field_Label.input GETTERS AND SETTERS **********************/\n\tinput(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._input = v;\n\t\t\tthis._input_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._input;\n\t\t}\n\t}\n\n\t/************* Field_Label.output GETTERS AND SETTERS **********************/\n\toutput(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._output = v;\n\t\t\tthis._output_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._output;\n\t\t}\n\t}\n\n\t/************* Field_Label.variable GETTERS AND SETTERS **********************/\n\tvariable(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._variable = v;\n\t\t\tthis._variable_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._variable;\n\t\t}\n\t}\n\n\t/************* Field_Label.column GETTERS AND SETTERS **********************/\n\tcolumn(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._column = v;\n\t\t\tthis._column_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._column;\n\t\t}\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = undefined || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\tif (this._plural) ret += '^' + sPath + 'plural' + (this._plural_coop || '=') + this.plural();\n\n\t\tif (this._language) ret += '^' + sPath + 'language' + (this._language_coop || '=') + this.language();\n\n\t\tif (this._application) ret += /*(this._application_coop || '=') + */ this.application()._toEQuery(sPath + 'application.');\n\n\t\tif (this._input) ret += /*(this._input_coop || '=') + */ this.input()._toEQuery(sPath + 'input.');\n\n\t\tif (this._output) ret += /*(this._output_coop || '=') + */ this.output()._toEQuery(sPath + 'output.');\n\n\t\tif (this._variable) ret += /*(this._variable_coop || '=') + */ this.variable()._toEQuery(sPath + 'variable.');\n\n\t\tif (this._column) ret += /*(this._column_coop || '=') + */ this.column()._toEQuery(sPath + 'column.');\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Field_Label._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn new shs_arbfw_appd_Field_Label()._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Field_Label._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Field_Label._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromGlideRecord(obj) {\n\t\tif (!obj) return null;\n\t\tif (obj.isValidRecord()) {\n\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Field_Label\" != 'ecc_queue' && obj.source == \"shs_arbfw_appd_Field_Label\") {\n\t\t\t\tobj.state = \"processing\";\n\t\t\t\tobj.update();\n\n\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\tresp.queue = 'output';\n\t\t\t\tresp.agent = obj.agent;\n\t\t\t\tresp.topic = obj.topic;\n\t\t\t\tresp.name = obj.name;\n\t\t\t\tresp.source = obj.source;\n\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\tlet ret = new shs_arbfw_appd_Field_Label()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t});\n\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t}\n\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\tresp.insert();\n\n\t\t\t\tobj.state = \"processed\";\n\t\t\t\tobj.update();\n\t\t\t\treturn resp;\n\t\t\t} else {\n\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\tplural: obj.getValue(\"plural\"),\n\n\t\t\t\t\tlanguage: obj.getValue(\"language\"),\n\n\t\t\t\t\tapplication: obj.getValue(\"application\"),\n\n\t\t\t\t\tinput: obj.getValue(\"input\"),\n\n\t\t\t\t\toutput: obj.getValue(\"output\"),\n\n\t\t\t\t\tvariable: obj.getValue(\"variable\"),\n\n\t\t\t\t\tcolumn: obj.getValue(\"column\"),\n\n\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tobj.query();\n\t\t\tlet grRet = [];\n\t\t\twhile (obj.next()) grRet.push(this._fromGlideRecord(obj));\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Field_Label._fromGlideRecord(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\treturn grRet;\n\t\t}\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\tundefined\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_appd_Field_Label()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\tif (/((([A-Za-z]{3,9}:(?:/ / ) ? )( ? : [-;: &= +$, w] + @) ? [A - Za - z0 - 9. - ] + | ( ? : www. | [-;: &= +$, w] + @)[A - Za - z0 - 9. - ] + )(( ? : /[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)/g.test(obj)) {\n\t\t\tvar msg = new sn_ws.RESTMessageV2();\n\t\t\tmsg.setEndpoint(obj);\n\t\t\tmsg.setRequestHeader('Content-Type', 'application/json');\n\t\t\tmsg.setHttpMethod('get');\n\t\t\treturn this._fromDocument(msg.execute().getBody());\n\t\t}\n\n\t\ttry {\n\t\t\tobj = JSON.parse(obj);\n\t\t} catch (ex) {\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Field_Label._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\tlet _obj = {\n\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))\n\t\t\t};\n\t\t\t_obj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(this))] = obj;\n\t\t\tobj = _obj;\n\t\t}\n\t\treturn this._fromDocument(obj);\n\t}\n\telse if (typeof(obj) === 'object') {\n\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\treturn this._fromGlideRecord(obj);\n\t\t} else if (obj._fromDocument) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Field_Label._fromDocument(): \" + \"redundent call\");\n\t\t\treturn obj;\n\t\t} else if (Array.isArray(obj)) {\n\t\t\treturn obj.map(function(o) {\n\t\t\t\treturn new shs_arbfw_appd_Field_Label()._fromDocument(o)\n\t\t\t});\n\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(obj))));\n\n\t\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Field_Label._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.plural) !== 'undefined') {\n\n\t\t\t\t\tthis.plural(obj.plural);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.language) !== 'undefined') {\n\n\t\t\t\t\tthis.language(obj.language);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.application) !== 'undefined') {\n\n\t\t\t\t\tthis.application(new shs_arbfw_appd_Application()._fromDocument(obj.application));\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.input) !== 'undefined') {\n\n\t\t\t\t\tthis.input(new shs_arbfw_appd_Flow_Input()._fromDocument(obj.input));\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.output) !== 'undefined') {\n\n\t\t\t\t\tthis.output(new shs_arbfw_appd_Flow_Output()._fromDocument(obj.output));\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.variable) !== 'undefined') {\n\n\t\t\t\t\tthis.variable(new shs_arbfw_appd_Flow_Variable()._fromDocument(obj.variable));\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.column) !== 'undefined') {\n\n\t\t\t\t\tthis.column(new shs_arbfw_appd_Column()._fromDocument(obj.column));\n\t\t\t\t}\n\n\t\t\t} else { // if(obj.constructor.name==\"Field_Label\"){\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Field_Label._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t}\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Field_Label._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\treturn null;\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Field_Label._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Field_Label._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Field_Label._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\treturn this;\n}\n\n_insertAssert() {\n\treturn true;\n}\n\n_updateAssert() {\n\treturn true;\n}\n\n_storeAssert() {\n\treturn true;\n}\n\n_findAssert() {\n\treturn true;\n}\n\n_new(c) {\n\n\treturn new shs_arbfw_appd_Platform._new(c);\n\n}\n\n_toDocument(arFields) {\n\n\tlet ret = undefined || {};\n\n\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tret.active = this.active();\n\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tret.enabled = this.enabled();\n\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tret.code = this.code();\n\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tret.order = this.order();\n\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tret.date = this.date();\n\n\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tret.name = this.name();\n\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tret.remark = this.remark();\n\n\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t}\n\n\tif (typeof(this._plural) !== 'undefined') {\n\t\tret.plural = this.plural();\n\n\t}\n\n\tif (typeof(this._language) !== 'undefined') {\n\t\tret.language = this.language();\n\n\t}\n\n\tif (typeof(this._application) !== 'undefined') {\n\t\tret.application = this.application();\n\n\t\tif (ret.application) {\n\t\t\tret.application = ret.application._toDocument();\n\t\t\tif (typeof(ret.application) === 'object' && !Object.keys(ret.application).length) ret.application = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this._input) !== 'undefined') {\n\t\tret.input = this.input();\n\n\t\tif (ret.input) {\n\t\t\tret.input = ret.input._toDocument();\n\t\t\tif (typeof(ret.input) === 'object' && !Object.keys(ret.input).length) ret.input = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this._output) !== 'undefined') {\n\t\tret.output = this.output();\n\n\t\tif (ret.output) {\n\t\t\tret.output = ret.output._toDocument();\n\t\t\tif (typeof(ret.output) === 'object' && !Object.keys(ret.output).length) ret.output = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this._variable) !== 'undefined') {\n\t\tret.variable = this.variable();\n\n\t\tif (ret.variable) {\n\t\t\tret.variable = ret.variable._toDocument();\n\t\t\tif (typeof(ret.variable) === 'object' && !Object.keys(ret.variable).length) ret.variable = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this._column) !== 'undefined') {\n\t\tret.column = this.column();\n\n\t\tif (ret.column) {\n\t\t\tret.column = ret.column._toDocument();\n\t\t\tif (typeof(ret.column) === 'object' && !Object.keys(ret.column).length) ret.column = null;\n\t\t}\n\n\t}\n\n\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\treturn !arFields.find(function(_k) {\n\t\t\treturn _k == k;\n\t\t});\n\t}).forEach(function(k) {\n\t\tdelete ret[k];\n\t});\n\n\treturn ret;\n}\n\n_unique(keys, ret) {\n\tret = ret || new shs_arbfw_appd_Field_Label();\n\n\tundefined\n\n\t// if(this.Id) ret.Id = this.Id;\n\tif (!keys) {\n\n\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\tif (typeof(this.language()) !== 'undefined') ret.language(this.language());\n\n\t\tif (typeof(this.application()) !== 'undefined') ret.application(this.application()._unique());\n\n\t} else {\n\n\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t\tif (keys.indexOf(\"plural\") >= 0 && typeof(this.plural()) !== 'undefined') ret.plural(this.plural());\n\n\t\tif (keys.indexOf(\"language\") >= 0 && typeof(this.language()) !== 'undefined') ret.language(this.language());\n\n\t\tif (keys.indexOf(\"application\") >= 0 && typeof(this.application()) !== 'undefined') ret.application(this.application()._unique());\n\n\t\tif (keys.indexOf(\"input\") >= 0 && typeof(this.input()) !== 'undefined') ret.input(this.input()._unique());\n\n\t\tif (keys.indexOf(\"output\") >= 0 && typeof(this.output()) !== 'undefined') ret.output(this.output()._unique());\n\n\t\tif (keys.indexOf(\"variable\") >= 0 && typeof(this.variable()) !== 'undefined') ret.variable(this.variable()._unique());\n\n\t\tif (keys.indexOf(\"column\") >= 0 && typeof(this.column()) !== 'undefined') ret.column(this.column()._unique());\n\n\t}\n\n\treturn ret;\n}\n\n_query(gq) {\n\tlet arFields = Object.keys(global.Schema.of('sys_documentation', ['*'])['sys_documentation']);\n\n\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('sys_documentation');\n\n\tundefined\n\n\tlet idf = ((function(r) {\n\t\tlet ret = 'sys_id';\n\t\tif (typeof(r.__idField) === 'function') {\n\t\t\tret = r.__idField();\n\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\tret = r.__idField || this.__idField();\n\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\tret = 'Id';\n\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\tret = 'sys_id';\n\t\t}\n\t\treturn ret;\n\t})(this));\n\tif (idf == 'Id') idf = 'sys_id';\n\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tlet coop = this._active_coop || '=';\n\n\t\tlet v = this.active();\n\n\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Field_Label._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tlet coop = this._enabled_coop || '=';\n\n\t\tlet v = this.enabled();\n\n\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Field_Label._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tlet coop = this._code_coop || '=';\n\n\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.code();\n\n\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Field_Label._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tlet coop = this._order_coop || '=';\n\n\t\tlet v = this.order();\n\n\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Field_Label._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tlet coop = this._date_coop || '=';\n\n\t\tlet v = this.date();\n\n\t\tif (v) {\n\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t}\n\n\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Field_Label._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tlet coop = this._name_coop || '=';\n\n\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.name();\n\n\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Field_Label._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tlet coop = this._remark_coop || '=';\n\n\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.remark();\n\n\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Field_Label._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._plural) !== 'undefined') {\n\t\tlet coop = this._plural_coop || '=';\n\n\t\tif (!this._plural_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.plural();\n\n\t\tif (arFields.indexOf('plural') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Field_Label._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('plural');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('plural');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('plural', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._language) !== 'undefined') {\n\t\tlet coop = this._language_coop || '=';\n\n\t\tif (!this._language_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.language();\n\n\t\tif (arFields.indexOf('language') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Field_Label._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('language');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('language');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('language', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._application) !== 'undefined') {\n\t\tlet coop = this._application_coop || '=';\n\n\t\tlet v = this.application();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Field Label\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Field_Label._query(): \"+ \"application \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Field_Label._query(): \" + \"application[application] resuled in undefined: \" + JSON.stringify(this.application()));\n\t\t}\n\n\t\tif (arFields.indexOf('application') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Field_Label._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('application');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('application');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('application', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._input) !== 'undefined') {\n\t\tlet coop = this._input_coop || '=';\n\n\t\tlet v = this.input();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Field Label\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Field_Label._query(): \"+ \"input \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Field_Label._query(): \" + \"input[input] resuled in undefined: \" + JSON.stringify(this.input()));\n\t\t}\n\n\t\tif (arFields.indexOf('input') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Field_Label._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('input');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('input');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('input', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._output) !== 'undefined') {\n\t\tlet coop = this._output_coop || '=';\n\n\t\tlet v = this.output();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Field Label\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Field_Label._query(): \"+ \"output \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Field_Label._query(): \" + \"output[output] resuled in undefined: \" + JSON.stringify(this.output()));\n\t\t}\n\n\t\tif (arFields.indexOf('output') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Field_Label._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('output');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('output');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('output', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._variable) !== 'undefined') {\n\t\tlet coop = this._variable_coop || '=';\n\n\t\tlet v = this.variable();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Field Label\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Field_Label._query(): \"+ \"variable \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Field_Label._query(): \" + \"variable[variable] resuled in undefined: \" + JSON.stringify(this.variable()));\n\t\t}\n\n\t\tif (arFields.indexOf('variable') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Field_Label._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('variable');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('variable');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('variable', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._column) !== 'undefined') {\n\t\tlet coop = this._column_coop || '=';\n\n\t\tlet v = this.column();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Field Label\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Field_Label._query(): \"+ \"column \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Field_Label._query(): \" + \"column[column] resuled in undefined: \" + JSON.stringify(this.column()));\n\t\t}\n\n\t\tif (arFields.indexOf('column') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Field_Label._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('column');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('column');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('column', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Field_Label._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\treturn this._queryGQ;\n}\n\n_save(obj) {\n\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\treturn new shs_arbfw_appd_Field_Label()._save(o)\n\t});\n\n\tlet _obj = {};\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Field_Label._save(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\tObject.keys(obj).filter(function(k) {\n\t\treturn Object.keys(global.Schema.of('sys_documentation', ['*'])['sys_documentation']).filter(function(_k) {\n\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t}).indexOf(k.toLowerCase()) >= 0\n\t}).forEach(function(k) {\n\t\t_obj[k.toLowerCase()] = obj[k]\n\t});\n\n\tObject.keys(_obj).forEach(function(k) {\n\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Field_Label._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tdelete _obj[k];\n\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Field_Label._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t}\n\t});\n\n\tlet _this = null;\n\tif (obj.__keys) {\n\t\tlet kObj = {};\n\t\tkObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(_obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))));\n\t\tobj.__keys.forEach(function(k) {\n\t\t\tkObj[k] = _obj[k]\n\t\t});\n\t\t_this = new shs_arbfw_appd_Field_Label()._fromDocument(kObj);\n\t} else {\n\t\t_this = new shs_arbfw_appd_Field_Label()._fromDocument(_obj)._unique();\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Field_Label._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\tdelete _obj.__idField;\n\n\ttry {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Field_Label._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\tObject.keys(_obj).filter(function(k) {\n\t\t\treturn k.toLowerCase() != k;\n\t\t}).forEach(function(k) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Field_Label._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tvar lk = k.toLowerCase();\n\t\t\t_obj[lk] = _obj[k];\n\t\t\tdelete _obj[k];\n\t\t});\n\n\t\tlet gq = new global.GlideQuery(obj.__type || 'sys_documentation');\n\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Field_Label._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\tif (_obj.sys_id) {\n\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t} else {\n\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\tgq = gq.insert(_obj);\n\t\t}\n\t\tlet _fObj = {};\n\t\t_fObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))));\n\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('sys_documentation', ['*'])['sys_documentation']))));\n\t} catch (ex) {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Field_Label._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Field_Label._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\treturn this;\n\t}\n\n\treturn this;\n}\n\n/************* Field_Label.store() **********************/\nstore(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Field_Label.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Field_Label.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Field_Label.store(): \" + \"executing locally \");\n\n\t\t// store locally\n\t\treturn this._save(this._toDocument());\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Field_Label.findAll() **********************/\nfindAll(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Field_Label.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Field_Label.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Field_Label.findAll(): \" + \"executing locally \");\n\n\t\t// findAll locally\n\t\tlet gr = new GlideRecord('sys_documentation');\n\t\tgr.addEncodedQuery(this._toEQuery());\n\t\treturn this._fromDocument(gr);\n\n\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('sys_documentation', ['*'])['sys_documentation'])));\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Field_Label.find() **********************/\nfind(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Field_Label.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Field_Label.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Field_Label.find(): \" + \"executing locally \");\n\n\t\tlet ret = this.findAll();\n\t\treturn ret.length ? ret[0] : null;\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"scriptFile_Script_Compatibilitys":[{"active":true,"enabled":true}],"client_callable":true,"sys_name":"shs_arbfw_appd_Flow_Input_Script","api_name":"x_1790593_arboard.shs_arbfw_appd_Flow_Input_Script","name":"shs_arbfw_appd_Flow_Input_Script","script":"class shs_arbfw_appd_Flow_Input_Script extends global.AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"Application Designer\";\n\t\tthis.__type = \"shs_arbfw_appd_Flow_Input_Script\";\n\t\tthis.__alias = \"shs_arbfw_appd\";\n\t\tthis.__scope = \"shs_arbfw\";\n\t}\n\n\t/************* Flow_Input_Script.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Flow_Input_Script.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Flow_Input_Script.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Flow_Input_Script.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Flow_Input_Script.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Input_Script.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Flow_Input_Script.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Flow_Input_Script.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Flow_Input_Script.logic GETTERS AND SETTERS **********************/\n\tlogic(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._logic = v;\n\t\t\tthis._logic_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._logic;\n\t\t}\n\t}\n\n\t/************* Flow_Input_Script.referencedTable EF: GETTERS AND SETTERS **********************/\n\treferencedTable() {\n\t\treturn /*this.ef_referencedTable = */ ((\n\t\t\tfunction() {\n\t\t\t\ttry {\n\n\t\t\t\t\tlet __ret = undefined;\n\n\t\t\t\t\tif (typeof(__ret) === 'string' && __ret.startsWith(\"s(\") && __ret.endsWith(\")\")) {\n\t\t\t\t\t\t__ret = this.runScript(__ret.slice(2, -1));\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof(__ret) === \"function\") {\n\t\t\t\t\t\t__ret = __ret(this);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn __ret;\n\n\t\t\t\t} catch (_vOfEx) {\n\t\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Input_Script.referencedTable(): \" + 'valueOf', _vOfEx, JSON.parse(((typeof(this) !== \"undefined\" && typeof(this._atob) !== \"undefined\") ? this._atob : (typeof(_FrEMD) !== \"undefined\" ? _FrEMD._atob : atob))(`eyJTZXJ2aWNlTm93IjoiPDwkZXhpc3RzKCoqW2xvZ2ljX0Zsb3dfSW5wdXRfU2NyaXB0c1tyZWZlcmVuY2VkX3RhYmxlPVwie3tpZH19XCJdXS5wYXJlbnRfQWN0aW9uX0luc3RhbmNlcyk/J3N5c19odWJfYWN0aW9uX2luc3RhbmNlJzonc3lzX2h1Yl9mbG93X2xvZ2ljJz4+In0=`), (key, value) => {\n\t\t\t\t\t\tif (typeof(value) === \"string\" && value.indexOf(\"=>\") > 0) return eval(\"(\" + value + \")\");\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t}\n\t\t)());\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = undefined || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\tif (this._logic) ret += /*(this._logic_coop || '=') + */ this.logic()._toEQuery(sPath + 'logic.');\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Input_Script._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn new shs_arbfw_appd_Flow_Input_Script()._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Input_Script._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Input_Script._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromGlideRecord(obj) {\n\t\tif (!obj) return null;\n\t\tif (obj.isValidRecord()) {\n\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Flow_Input_Script\" != 'ecc_queue' && obj.source == \"shs_arbfw_appd_Flow_Input_Script\") {\n\t\t\t\tobj.state = \"processing\";\n\t\t\t\tobj.update();\n\n\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\tresp.queue = 'output';\n\t\t\t\tresp.agent = obj.agent;\n\t\t\t\tresp.topic = obj.topic;\n\t\t\t\tresp.name = obj.name;\n\t\t\t\tresp.source = obj.source;\n\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\tlet ret = new shs_arbfw_appd_Flow_Input_Script()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t});\n\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t}\n\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\tresp.insert();\n\n\t\t\t\tobj.state = \"processed\";\n\t\t\t\tobj.update();\n\t\t\t\treturn resp;\n\t\t\t} else {\n\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\tlogic: obj.getValue(\"logic\"),\n\n\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tobj.query();\n\t\t\tlet grRet = [];\n\t\t\twhile (obj.next()) grRet.push(this._fromGlideRecord(obj));\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Input_Script._fromGlideRecord(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\treturn grRet;\n\t\t}\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\tundefined\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_appd_Flow_Input_Script()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\tif (/((([A-Za-z]{3,9}:(?:/ / ) ? )( ? : [-;: &= +$, w] + @) ? [A - Za - z0 - 9. - ] + | ( ? : www. | [-;: &= +$, w] + @)[A - Za - z0 - 9. - ] + )(( ? : /[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)/g.test(obj)) {\n\t\t\tvar msg = new sn_ws.RESTMessageV2();\n\t\t\tmsg.setEndpoint(obj);\n\t\t\tmsg.setRequestHeader('Content-Type', 'application/json');\n\t\t\tmsg.setHttpMethod('get');\n\t\t\treturn this._fromDocument(msg.execute().getBody());\n\t\t}\n\n\t\ttry {\n\t\t\tobj = JSON.parse(obj);\n\t\t} catch (ex) {\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Input_Script._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\tlet _obj = {\n\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))\n\t\t\t};\n\t\t\t_obj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(this))] = obj;\n\t\t\tobj = _obj;\n\t\t}\n\t\treturn this._fromDocument(obj);\n\t}\n\telse if (typeof(obj) === 'object') {\n\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\treturn this._fromGlideRecord(obj);\n\t\t} else if (obj._fromDocument) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Input_Script._fromDocument(): \" + \"redundent call\");\n\t\t\treturn obj;\n\t\t} else if (Array.isArray(obj)) {\n\t\t\treturn obj.map(function(o) {\n\t\t\t\treturn new shs_arbfw_appd_Flow_Input_Script()._fromDocument(o)\n\t\t\t});\n\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(obj))));\n\n\t\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Input_Script._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.logic) !== 'undefined') {\n\n\t\t\t\t\tthis.logic(new shs_arbfw_appd_Flow_Logic()._fromDocument(obj.logic));\n\t\t\t\t}\n\n\t\t\t} else { // if(obj.constructor.name==\"Flow_Input_Script\"){\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Input_Script._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t}\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Input_Script._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\treturn null;\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Input_Script._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Input_Script._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Input_Script._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\treturn this;\n}\n\n_insertAssert() {\n\treturn true;\n}\n\n_updateAssert() {\n\treturn true;\n}\n\n_storeAssert() {\n\treturn true;\n}\n\n_findAssert() {\n\treturn true;\n}\n\n_new(c) {\n\n\treturn new shs_arbfw_appd_Platform._new(c);\n\n}\n\n_toDocument(arFields) {\n\n\tlet ret = undefined || {};\n\n\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tret.active = this.active();\n\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tret.enabled = this.enabled();\n\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tret.code = this.code();\n\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tret.order = this.order();\n\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tret.date = this.date();\n\n\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tret.name = this.name();\n\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tret.remark = this.remark();\n\n\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t}\n\n\tif (typeof(this._logic) !== 'undefined') {\n\t\tret.logic = this.logic();\n\n\t\tif (ret.logic) {\n\t\t\tret.logic = ret.logic._toDocument();\n\t\t\tif (typeof(ret.logic) === 'object' && !Object.keys(ret.logic).length) ret.logic = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this.referencedTable()) !== 'undefined') ret.referencedTable = this.referencedTable();\n\n\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\treturn !arFields.find(function(_k) {\n\t\t\treturn _k == k;\n\t\t});\n\t}).forEach(function(k) {\n\t\tdelete ret[k];\n\t});\n\n\treturn ret;\n}\n\n_unique(keys, ret) {\n\tret = ret || new shs_arbfw_appd_Flow_Input_Script();\n\n\tundefined\n\n\t// if(this.Id) ret.Id = this.Id;\n\tif (!keys) {\n\n\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (typeof(this.logic()) !== 'undefined') ret.logic(this.logic()._unique());\n\n\t} else {\n\n\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t\tif (keys.indexOf(\"logic\") >= 0 && typeof(this.logic()) !== 'undefined') ret.logic(this.logic()._unique());\n\n\t}\n\n\treturn ret;\n}\n\n_query(gq) {\n\tlet arFields = Object.keys(global.Schema.of('sys_hub_input_scripts', ['*'])['sys_hub_input_scripts']);\n\n\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('sys_hub_input_scripts');\n\n\tundefined\n\n\tlet idf = ((function(r) {\n\t\tlet ret = 'sys_id';\n\t\tif (typeof(r.__idField) === 'function') {\n\t\t\tret = r.__idField();\n\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\tret = r.__idField || this.__idField();\n\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\tret = 'Id';\n\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\tret = 'sys_id';\n\t\t}\n\t\treturn ret;\n\t})(this));\n\tif (idf == 'Id') idf = 'sys_id';\n\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tlet coop = this._active_coop || '=';\n\n\t\tlet v = this.active();\n\n\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Input_Script._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tlet coop = this._enabled_coop || '=';\n\n\t\tlet v = this.enabled();\n\n\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Input_Script._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tlet coop = this._code_coop || '=';\n\n\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.code();\n\n\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Input_Script._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tlet coop = this._order_coop || '=';\n\n\t\tlet v = this.order();\n\n\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Input_Script._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tlet coop = this._date_coop || '=';\n\n\t\tlet v = this.date();\n\n\t\tif (v) {\n\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t}\n\n\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Input_Script._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tlet coop = this._name_coop || '=';\n\n\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.name();\n\n\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Input_Script._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tlet coop = this._remark_coop || '=';\n\n\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.remark();\n\n\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Input_Script._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._logic) !== 'undefined') {\n\t\tlet coop = this._logic_coop || '=';\n\n\t\tlet v = this.logic();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Flow Input Script\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Input_Script._query(): \"+ \"logic \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Input_Script._query(): \" + \"logic[logic] resuled in undefined: \" + JSON.stringify(this.logic()));\n\t\t}\n\n\t\tif (arFields.indexOf('logic') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Input_Script._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('logic');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('logic');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('logic', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Input_Script._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\treturn this._queryGQ;\n}\n\n_save(obj) {\n\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\treturn new shs_arbfw_appd_Flow_Input_Script()._save(o)\n\t});\n\n\tlet _obj = {};\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Input_Script._save(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\tObject.keys(obj).filter(function(k) {\n\t\treturn Object.keys(global.Schema.of('sys_hub_input_scripts', ['*'])['sys_hub_input_scripts']).filter(function(_k) {\n\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t}).indexOf(k.toLowerCase()) >= 0\n\t}).forEach(function(k) {\n\t\t_obj[k.toLowerCase()] = obj[k]\n\t});\n\n\tObject.keys(_obj).forEach(function(k) {\n\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Input_Script._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tdelete _obj[k];\n\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Input_Script._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t}\n\t});\n\n\tlet _this = null;\n\tif (obj.__keys) {\n\t\tlet kObj = {};\n\t\tkObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(_obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))));\n\t\tobj.__keys.forEach(function(k) {\n\t\t\tkObj[k] = _obj[k]\n\t\t});\n\t\t_this = new shs_arbfw_appd_Flow_Input_Script()._fromDocument(kObj);\n\t} else {\n\t\t_this = new shs_arbfw_appd_Flow_Input_Script()._fromDocument(_obj)._unique();\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Input_Script._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\tdelete _obj.__idField;\n\n\ttry {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Input_Script._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\tObject.keys(_obj).filter(function(k) {\n\t\t\treturn k.toLowerCase() != k;\n\t\t}).forEach(function(k) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Input_Script._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tvar lk = k.toLowerCase();\n\t\t\t_obj[lk] = _obj[k];\n\t\t\tdelete _obj[k];\n\t\t});\n\n\t\tlet gq = new global.GlideQuery(obj.__type || 'sys_hub_input_scripts');\n\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Input_Script._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\tif (_obj.sys_id) {\n\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t} else {\n\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\tgq = gq.insert(_obj);\n\t\t}\n\t\tlet _fObj = {};\n\t\t_fObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))));\n\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('sys_hub_input_scripts', ['*'])['sys_hub_input_scripts']))));\n\t} catch (ex) {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Input_Script._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Input_Script._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\treturn this;\n\t}\n\n\treturn this;\n}\n\n/************* Flow_Input_Script.store() **********************/\nstore(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Input_Script.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Input_Script.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Input_Script.store(): \" + \"executing locally \");\n\n\t\t// store locally\n\t\treturn this._save(this._toDocument());\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Flow_Input_Script.findAll() **********************/\nfindAll(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Input_Script.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Input_Script.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Input_Script.findAll(): \" + \"executing locally \");\n\n\t\t// findAll locally\n\t\tlet gr = new GlideRecord('sys_hub_input_scripts');\n\t\tgr.addEncodedQuery(this._toEQuery());\n\t\treturn this._fromDocument(gr);\n\n\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('sys_hub_input_scripts', ['*'])['sys_hub_input_scripts'])));\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Flow_Input_Script.find() **********************/\nfind(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Input_Script.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Input_Script.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Input_Script.find(): \" + \"executing locally \");\n\n\t\tlet ret = this.findAll();\n\t\treturn ret.length ? ret[0] : null;\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"scriptFile_Script_Compatibilitys":[{"active":true,"enabled":true}],"client_callable":true,"sys_name":"shs_arbfw_Meeting_Agenda","api_name":"x_1790593_arboard.shs_arbfw_Meeting_Agenda","name":"shs_arbfw_Meeting_Agenda","script":"class shs_arbfw_Meeting_Agenda extends global.AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"\";\n\t\tthis.__type = \"shs_arbfw_Meeting_Agenda\";\n\t\tthis.__alias = \"shs_arbfw\";\n\t\tthis.__scope = \"shs_arbfw\";\n\t}\n\n\t/************* Meeting_Agenda.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Meeting_Agenda.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Meeting_Agenda.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Meeting_Agenda.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Meeting_Agenda.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//(typeof(window)!=='undefined'?alert:gs.info)(\"Meeting_Agenda.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Meeting_Agenda.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Meeting_Agenda.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Meeting_Agenda.meeting GETTERS AND SETTERS **********************/\n\tmeeting(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._meeting = v;\n\t\t\tthis._meeting_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._meeting;\n\t\t}\n\t}\n\n\t/************* Meeting_Agenda.agenda_Agenda_Items GETTERS AND SETTERS **********************/\n\tagenda_Agenda_Items(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._agenda_Agenda_Items = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._agenda_Agenda_Items_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._agenda_Agenda_Items;\n\t\t}\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = undefined || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\tif (this._meeting) ret += /*(this._meeting_coop || '=') + */ this.meeting()._toEQuery(sPath + 'meeting.');\n\n\t\t(this.agenda_Agenda_Items() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYAgenda_Item.agenda,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting_Agenda._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn new shs_arbfw_Meeting_Agenda()._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting_Agenda._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting_Agenda._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromGlideRecord(obj) {\n\t\tif (!obj) return null;\n\t\tif (obj.isValidRecord()) {\n\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Meeting_Agenda\" != 'ecc_queue' && obj.source == \"shs_arbfw_Meeting_Agenda\") {\n\t\t\t\tobj.state = \"processing\";\n\t\t\t\tobj.update();\n\n\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\tresp.queue = 'output';\n\t\t\t\tresp.agent = obj.agent;\n\t\t\t\tresp.topic = obj.topic;\n\t\t\t\tresp.name = obj.name;\n\t\t\t\tresp.source = obj.source;\n\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\tlet ret = new shs_arbfw_Meeting_Agenda()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t});\n\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t}\n\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\tresp.insert();\n\n\t\t\t\tobj.state = \"processed\";\n\t\t\t\tobj.update();\n\t\t\t\treturn resp;\n\t\t\t} else {\n\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\tmeeting: obj.getValue(\"meeting\"),\n\n\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tobj.query();\n\t\t\tlet grRet = [];\n\t\t\twhile (obj.next()) grRet.push(this._fromGlideRecord(obj));\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Meeting_Agenda._fromGlideRecord(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\treturn grRet;\n\t\t}\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\tundefined\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_Meeting_Agenda()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\tif (/((([A-Za-z]{3,9}:(?:/ / ) ? )( ? : [-;: &= +$, w] + @) ? [A - Za - z0 - 9. - ] + | ( ? : www. | [-;: &= +$, w] + @)[A - Za - z0 - 9. - ] + )(( ? : /[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)/g.test(obj)) {\n\t\t\tvar msg = new sn_ws.RESTMessageV2();\n\t\t\tmsg.setEndpoint(obj);\n\t\t\tmsg.setRequestHeader('Content-Type', 'application/json');\n\t\t\tmsg.setHttpMethod('get');\n\t\t\treturn this._fromDocument(msg.execute().getBody());\n\t\t}\n\n\t\ttry {\n\t\t\tobj = JSON.parse(obj);\n\t\t} catch (ex) {\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Meeting_Agenda._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\tlet _obj = {\n\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))\n\t\t\t};\n\t\t\t_obj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(this))] = obj;\n\t\t\tobj = _obj;\n\t\t}\n\t\treturn this._fromDocument(obj);\n\t}\n\telse if (typeof(obj) === 'object') {\n\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\treturn this._fromGlideRecord(obj);\n\t\t} else if (obj._fromDocument) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting_Agenda._fromDocument(): \" + \"redundent call\");\n\t\t\treturn obj;\n\t\t} else if (Array.isArray(obj)) {\n\t\t\treturn obj.map(function(o) {\n\t\t\t\treturn new shs_arbfw_Meeting_Agenda()._fromDocument(o)\n\t\t\t});\n\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(obj))));\n\n\t\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Meeting_Agenda._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.meeting) !== 'undefined') {\n\n\t\t\t\t\tthis.meeting(new shs_arbfw_Meeting()._fromDocument(obj.meeting));\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.agenda_Agenda_Items) !== 'undefined') this.agenda_Agenda_Items(new shs_arbfw_Agenda_Item()._fromDocument(obj.agenda_Agenda_Items));\n\n\t\t\t} else { // if(obj.constructor.name==\"Meeting_Agenda\"){\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting_Agenda._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t}\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting_Agenda._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\treturn null;\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting_Agenda._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Meeting_Agenda._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Meeting_Agenda._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\treturn this;\n}\n\n_insertAssert() {\n\treturn true;\n}\n\n_updateAssert() {\n\treturn true;\n}\n\n_storeAssert() {\n\treturn true;\n}\n\n_findAssert() {\n\treturn true;\n}\n\n_new(c) {\n\n\treturn new shs_arbfw_Platform._new(c);\n\n}\n\n_toDocument(arFields) {\n\n\tlet ret = undefined || {};\n\n\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tret.active = this.active();\n\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tret.enabled = this.enabled();\n\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tret.code = this.code();\n\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tret.order = this.order();\n\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tret.date = this.date();\n\n\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tret.name = this.name();\n\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tret.remark = this.remark();\n\n\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t}\n\n\tif (typeof(this._meeting) !== 'undefined') {\n\t\tret.meeting = this.meeting();\n\n\t\tif (ret.meeting) {\n\t\t\tret.meeting = ret.meeting._toDocument();\n\t\t\tif (typeof(ret.meeting) === 'object' && !Object.keys(ret.meeting).length) ret.meeting = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this.agenda_Agenda_Items()) !== 'undefined') ret.agenda_Agenda_Items = this.agenda_Agenda_Items().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\treturn !arFields.find(function(_k) {\n\t\t\treturn _k == k;\n\t\t});\n\t}).forEach(function(k) {\n\t\tdelete ret[k];\n\t});\n\n\treturn ret;\n}\n\n_unique(keys, ret) {\n\tret = ret || new shs_arbfw_Meeting_Agenda();\n\n\tundefined\n\n\t// if(this.Id) ret.Id = this.Id;\n\tif (!keys) {\n\n\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (typeof(this.meeting()) !== 'undefined') ret.meeting(this.meeting()._unique());\n\n\t} else {\n\n\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t\tif (keys.indexOf(\"meeting\") >= 0 && typeof(this.meeting()) !== 'undefined') ret.meeting(this.meeting()._unique());\n\n\t}\n\n\treturn ret;\n}\n\n_query(gq) {\n\tlet arFields = Object.keys(global.Schema.of('x_1790593_arboard_meeting_agenda', ['*'])['x_1790593_arboard_meeting_agenda']);\n\n\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('x_1790593_arboard_meeting_agenda');\n\n\tundefined\n\n\tlet idf = ((function(r) {\n\t\tlet ret = 'sys_id';\n\t\tif (typeof(r.__idField) === 'function') {\n\t\t\tret = r.__idField();\n\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\tret = r.__idField || this.__idField();\n\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\tret = 'Id';\n\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\tret = 'sys_id';\n\t\t}\n\t\treturn ret;\n\t})(this));\n\tif (idf == 'Id') idf = 'sys_id';\n\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tlet coop = this._active_coop || '=';\n\n\t\tlet v = this.active();\n\n\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Meeting_Agenda._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tlet coop = this._enabled_coop || '=';\n\n\t\tlet v = this.enabled();\n\n\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Meeting_Agenda._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tlet coop = this._code_coop || '=';\n\n\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.code();\n\n\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Meeting_Agenda._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tlet coop = this._order_coop || '=';\n\n\t\tlet v = this.order();\n\n\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Meeting_Agenda._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tlet coop = this._date_coop || '=';\n\n\t\tlet v = this.date();\n\n\t\tif (v) {\n\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t}\n\n\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Meeting_Agenda._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tlet coop = this._name_coop || '=';\n\n\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.name();\n\n\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Meeting_Agenda._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tlet coop = this._remark_coop || '=';\n\n\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.remark();\n\n\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Meeting_Agenda._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._meeting) !== 'undefined') {\n\t\tlet coop = this._meeting_coop || '=';\n\n\t\tlet v = this.meeting();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Meeting Agenda\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Meeting_Agenda._query(): \"+ \"meeting \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting_Agenda._query(): \" + \"meeting[meeting] resuled in undefined: \" + JSON.stringify(this.meeting()));\n\t\t}\n\n\t\tif (arFields.indexOf('meeting') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Meeting_Agenda._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('meeting');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('meeting');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('meeting', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Meeting_Agenda._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\treturn this._queryGQ;\n}\n\n_save(obj) {\n\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\treturn new shs_arbfw_Meeting_Agenda()._save(o)\n\t});\n\n\tlet _obj = {};\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Meeting_Agenda._save(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\tObject.keys(obj).filter(function(k) {\n\t\treturn Object.keys(global.Schema.of('x_1790593_arboard_meeting_agenda', ['*'])['x_1790593_arboard_meeting_agenda']).filter(function(_k) {\n\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t}).indexOf(k.toLowerCase()) >= 0\n\t}).forEach(function(k) {\n\t\t_obj[k.toLowerCase()] = obj[k]\n\t});\n\n\tObject.keys(_obj).forEach(function(k) {\n\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting_Agenda._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tdelete _obj[k];\n\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting_Agenda._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t}\n\t});\n\n\tlet _this = null;\n\tif (obj.__keys) {\n\t\tlet kObj = {};\n\t\tkObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(_obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))));\n\t\tobj.__keys.forEach(function(k) {\n\t\t\tkObj[k] = _obj[k]\n\t\t});\n\t\t_this = new shs_arbfw_Meeting_Agenda()._fromDocument(kObj);\n\t} else {\n\t\t_this = new shs_arbfw_Meeting_Agenda()._fromDocument(_obj)._unique();\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Meeting_Agenda._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\tdelete _obj.__idField;\n\n\ttry {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting_Agenda._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\tObject.keys(_obj).filter(function(k) {\n\t\t\treturn k.toLowerCase() != k;\n\t\t}).forEach(function(k) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting_Agenda._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tvar lk = k.toLowerCase();\n\t\t\t_obj[lk] = _obj[k];\n\t\t\tdelete _obj[k];\n\t\t});\n\n\t\tlet gq = new global.GlideQuery(obj.__type || 'x_1790593_arboard_meeting_agenda');\n\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Meeting_Agenda._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\tif (_obj.sys_id) {\n\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t} else {\n\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\tgq = gq.insert(_obj);\n\t\t}\n\t\tlet _fObj = {};\n\t\t_fObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))));\n\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('x_1790593_arboard_meeting_agenda', ['*'])['x_1790593_arboard_meeting_agenda']))));\n\t} catch (ex) {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting_Agenda._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting_Agenda._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\treturn this;\n\t}\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting_Agenda._save(): \" + \"obj.agenda_Agenda_Items: \" + JSON.stringify(obj.agenda_Agenda_Items, null, 4));\n\tif (Array.isArray(obj.agenda_Agenda_Items)) this.agenda_Agenda_Items(obj.agenda_Agenda_Items.map(function(ta) {\n\t\treturn new shs_arbfw_Agenda_Item()._save(ta)\n\t}));\n\n\treturn this;\n}\n\n/************* Meeting_Agenda.store() **********************/\nstore(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting_Agenda.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting_Agenda.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting_Agenda.store(): \" + \"executing locally \");\n\n\t\t// store locally\n\t\treturn this._save(this._toDocument());\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Meeting_Agenda.findAll() **********************/\nfindAll(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting_Agenda.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting_Agenda.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting_Agenda.findAll(): \" + \"executing locally \");\n\n\t\t// findAll locally\n\t\tlet gr = new GlideRecord('x_1790593_arboard_meeting_agenda');\n\t\tgr.addEncodedQuery(this._toEQuery());\n\t\treturn this._fromDocument(gr);\n\n\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('x_1790593_arboard_meeting_agenda', ['*'])['x_1790593_arboard_meeting_agenda'])));\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Meeting_Agenda.find() **********************/\nfind(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting_Agenda.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting_Agenda.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting_Agenda.find(): \" + \"executing locally \");\n\n\t\tlet ret = this.findAll();\n\t\treturn ret.length ? ret[0] : null;\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"scriptFile_Script_Compatibilitys":[{"active":true,"enabled":true}],"client_callable":true,"sys_name":"shs_arbfw_Meeting_Minute","api_name":"x_1790593_arboard.shs_arbfw_Meeting_Minute","name":"shs_arbfw_Meeting_Minute","script":"class shs_arbfw_Meeting_Minute extends global.AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"\";\n\t\tthis.__type = \"shs_arbfw_Meeting_Minute\";\n\t\tthis.__alias = \"shs_arbfw\";\n\t\tthis.__scope = \"shs_arbfw\";\n\t}\n\n\t/************* Meeting_Minute.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Meeting_Minute.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Meeting_Minute.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Meeting_Minute.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Meeting_Minute.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//(typeof(window)!=='undefined'?alert:gs.info)(\"Meeting_Minute.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Meeting_Minute.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Meeting_Minute.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Meeting_Minute.meeting GETTERS AND SETTERS **********************/\n\tmeeting(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._meeting = v;\n\t\t\tthis._meeting_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._meeting;\n\t\t}\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = undefined || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\tif (this._meeting) ret += /*(this._meeting_coop || '=') + */ this.meeting()._toEQuery(sPath + 'meeting.');\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting_Minute._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn new shs_arbfw_Meeting_Minute()._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting_Minute._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting_Minute._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromGlideRecord(obj) {\n\t\tif (!obj) return null;\n\t\tif (obj.isValidRecord()) {\n\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Meeting_Minute\" != 'ecc_queue' && obj.source == \"shs_arbfw_Meeting_Minute\") {\n\t\t\t\tobj.state = \"processing\";\n\t\t\t\tobj.update();\n\n\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\tresp.queue = 'output';\n\t\t\t\tresp.agent = obj.agent;\n\t\t\t\tresp.topic = obj.topic;\n\t\t\t\tresp.name = obj.name;\n\t\t\t\tresp.source = obj.source;\n\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\tlet ret = new shs_arbfw_Meeting_Minute()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t});\n\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t}\n\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\tresp.insert();\n\n\t\t\t\tobj.state = \"processed\";\n\t\t\t\tobj.update();\n\t\t\t\treturn resp;\n\t\t\t} else {\n\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\tmeeting: obj.getValue(\"meeting\"),\n\n\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tobj.query();\n\t\t\tlet grRet = [];\n\t\t\twhile (obj.next()) grRet.push(this._fromGlideRecord(obj));\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Meeting_Minute._fromGlideRecord(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\treturn grRet;\n\t\t}\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\tundefined\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_Meeting_Minute()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\tif (/((([A-Za-z]{3,9}:(?:/ / ) ? )( ? : [-;: &= +$, w] + @) ? [A - Za - z0 - 9. - ] + | ( ? : www. | [-;: &= +$, w] + @)[A - Za - z0 - 9. - ] + )(( ? : /[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)/g.test(obj)) {\n\t\t\tvar msg = new sn_ws.RESTMessageV2();\n\t\t\tmsg.setEndpoint(obj);\n\t\t\tmsg.setRequestHeader('Content-Type', 'application/json');\n\t\t\tmsg.setHttpMethod('get');\n\t\t\treturn this._fromDocument(msg.execute().getBody());\n\t\t}\n\n\t\ttry {\n\t\t\tobj = JSON.parse(obj);\n\t\t} catch (ex) {\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Meeting_Minute._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\tlet _obj = {\n\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))\n\t\t\t};\n\t\t\t_obj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(this))] = obj;\n\t\t\tobj = _obj;\n\t\t}\n\t\treturn this._fromDocument(obj);\n\t}\n\telse if (typeof(obj) === 'object') {\n\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\treturn this._fromGlideRecord(obj);\n\t\t} else if (obj._fromDocument) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting_Minute._fromDocument(): \" + \"redundent call\");\n\t\t\treturn obj;\n\t\t} else if (Array.isArray(obj)) {\n\t\t\treturn obj.map(function(o) {\n\t\t\t\treturn new shs_arbfw_Meeting_Minute()._fromDocument(o)\n\t\t\t});\n\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(obj))));\n\n\t\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Meeting_Minute._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.meeting) !== 'undefined') {\n\n\t\t\t\t\tthis.meeting(new shs_arbfw_Meeting()._fromDocument(obj.meeting));\n\t\t\t\t}\n\n\t\t\t} else { // if(obj.constructor.name==\"Meeting_Minute\"){\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting_Minute._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t}\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting_Minute._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\treturn null;\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting_Minute._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Meeting_Minute._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Meeting_Minute._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\treturn this;\n}\n\n_insertAssert() {\n\treturn true;\n}\n\n_updateAssert() {\n\treturn true;\n}\n\n_storeAssert() {\n\treturn true;\n}\n\n_findAssert() {\n\treturn true;\n}\n\n_new(c) {\n\n\treturn new shs_arbfw_Platform._new(c);\n\n}\n\n_toDocument(arFields) {\n\n\tlet ret = undefined || {};\n\n\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tret.active = this.active();\n\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tret.enabled = this.enabled();\n\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tret.code = this.code();\n\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tret.order = this.order();\n\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tret.date = this.date();\n\n\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tret.name = this.name();\n\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tret.remark = this.remark();\n\n\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t}\n\n\tif (typeof(this._meeting) !== 'undefined') {\n\t\tret.meeting = this.meeting();\n\n\t\tif (ret.meeting) {\n\t\t\tret.meeting = ret.meeting._toDocument();\n\t\t\tif (typeof(ret.meeting) === 'object' && !Object.keys(ret.meeting).length) ret.meeting = null;\n\t\t}\n\n\t}\n\n\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\treturn !arFields.find(function(_k) {\n\t\t\treturn _k == k;\n\t\t});\n\t}).forEach(function(k) {\n\t\tdelete ret[k];\n\t});\n\n\treturn ret;\n}\n\n_unique(keys, ret) {\n\tret = ret || new shs_arbfw_Meeting_Minute();\n\n\tundefined\n\n\t// if(this.Id) ret.Id = this.Id;\n\tif (!keys) {\n\n\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (typeof(this.meeting()) !== 'undefined') ret.meeting(this.meeting()._unique());\n\n\t} else {\n\n\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t\tif (keys.indexOf(\"meeting\") >= 0 && typeof(this.meeting()) !== 'undefined') ret.meeting(this.meeting()._unique());\n\n\t}\n\n\treturn ret;\n}\n\n_query(gq) {\n\tlet arFields = Object.keys(global.Schema.of('x_1790593_arboard_meeting_minute', ['*'])['x_1790593_arboard_meeting_minute']);\n\n\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('x_1790593_arboard_meeting_minute');\n\n\tundefined\n\n\tlet idf = ((function(r) {\n\t\tlet ret = 'sys_id';\n\t\tif (typeof(r.__idField) === 'function') {\n\t\t\tret = r.__idField();\n\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\tret = r.__idField || this.__idField();\n\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\tret = 'Id';\n\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\tret = 'sys_id';\n\t\t}\n\t\treturn ret;\n\t})(this));\n\tif (idf == 'Id') idf = 'sys_id';\n\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tlet coop = this._active_coop || '=';\n\n\t\tlet v = this.active();\n\n\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Meeting_Minute._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tlet coop = this._enabled_coop || '=';\n\n\t\tlet v = this.enabled();\n\n\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Meeting_Minute._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tlet coop = this._code_coop || '=';\n\n\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.code();\n\n\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Meeting_Minute._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tlet coop = this._order_coop || '=';\n\n\t\tlet v = this.order();\n\n\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Meeting_Minute._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tlet coop = this._date_coop || '=';\n\n\t\tlet v = this.date();\n\n\t\tif (v) {\n\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t}\n\n\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Meeting_Minute._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tlet coop = this._name_coop || '=';\n\n\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.name();\n\n\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Meeting_Minute._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tlet coop = this._remark_coop || '=';\n\n\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.remark();\n\n\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Meeting_Minute._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._meeting) !== 'undefined') {\n\t\tlet coop = this._meeting_coop || '=';\n\n\t\tlet v = this.meeting();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Meeting Minute\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Meeting_Minute._query(): \"+ \"meeting \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting_Minute._query(): \" + \"meeting[meeting] resuled in undefined: \" + JSON.stringify(this.meeting()));\n\t\t}\n\n\t\tif (arFields.indexOf('meeting') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Meeting_Minute._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('meeting');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('meeting');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('meeting', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Meeting_Minute._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\treturn this._queryGQ;\n}\n\n_save(obj) {\n\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\treturn new shs_arbfw_Meeting_Minute()._save(o)\n\t});\n\n\tlet _obj = {};\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Meeting_Minute._save(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\tObject.keys(obj).filter(function(k) {\n\t\treturn Object.keys(global.Schema.of('x_1790593_arboard_meeting_minute', ['*'])['x_1790593_arboard_meeting_minute']).filter(function(_k) {\n\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t}).indexOf(k.toLowerCase()) >= 0\n\t}).forEach(function(k) {\n\t\t_obj[k.toLowerCase()] = obj[k]\n\t});\n\n\tObject.keys(_obj).forEach(function(k) {\n\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting_Minute._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tdelete _obj[k];\n\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting_Minute._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t}\n\t});\n\n\tlet _this = null;\n\tif (obj.__keys) {\n\t\tlet kObj = {};\n\t\tkObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(_obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))));\n\t\tobj.__keys.forEach(function(k) {\n\t\t\tkObj[k] = _obj[k]\n\t\t});\n\t\t_this = new shs_arbfw_Meeting_Minute()._fromDocument(kObj);\n\t} else {\n\t\t_this = new shs_arbfw_Meeting_Minute()._fromDocument(_obj)._unique();\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Meeting_Minute._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\tdelete _obj.__idField;\n\n\ttry {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting_Minute._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\tObject.keys(_obj).filter(function(k) {\n\t\t\treturn k.toLowerCase() != k;\n\t\t}).forEach(function(k) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting_Minute._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tvar lk = k.toLowerCase();\n\t\t\t_obj[lk] = _obj[k];\n\t\t\tdelete _obj[k];\n\t\t});\n\n\t\tlet gq = new global.GlideQuery(obj.__type || 'x_1790593_arboard_meeting_minute');\n\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Meeting_Minute._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\tif (_obj.sys_id) {\n\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t} else {\n\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\tgq = gq.insert(_obj);\n\t\t}\n\t\tlet _fObj = {};\n\t\t_fObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))));\n\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('x_1790593_arboard_meeting_minute', ['*'])['x_1790593_arboard_meeting_minute']))));\n\t} catch (ex) {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting_Minute._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting_Minute._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\treturn this;\n\t}\n\n\treturn this;\n}\n\n/************* Meeting_Minute.store() **********************/\nstore(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting_Minute.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting_Minute.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting_Minute.store(): \" + \"executing locally \");\n\n\t\t// store locally\n\t\treturn this._save(this._toDocument());\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Meeting_Minute.findAll() **********************/\nfindAll(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting_Minute.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting_Minute.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting_Minute.findAll(): \" + \"executing locally \");\n\n\t\t// findAll locally\n\t\tlet gr = new GlideRecord('x_1790593_arboard_meeting_minute');\n\t\tgr.addEncodedQuery(this._toEQuery());\n\t\treturn this._fromDocument(gr);\n\n\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('x_1790593_arboard_meeting_minute', ['*'])['x_1790593_arboard_meeting_minute'])));\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Meeting_Minute.find() **********************/\nfind(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting_Minute.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting_Minute.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting_Minute.find(): \" + \"executing locally \");\n\n\t\tlet ret = this.findAll();\n\t\treturn ret.length ? ret[0] : null;\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"scriptFile_Script_Compatibilitys":[{"active":true,"enabled":true}],"client_callable":true,"sys_name":"shs_arbfw_appd_Flow_Logic","api_name":"x_1790593_arboard.shs_arbfw_appd_Flow_Logic","name":"shs_arbfw_appd_Flow_Logic","script":"class shs_arbfw_appd_Flow_Logic extends global.AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"Application Designer\";\n\t\tthis.__type = \"shs_arbfw_appd_Flow_Logic\";\n\t\tthis.__alias = \"shs_arbfw_appd\";\n\t\tthis.__scope = \"shs_arbfw\";\n\t}\n\n\t/************* Flow_Logic.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Flow_Logic.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Flow_Logic.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Flow_Logic.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Flow_Logic.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Logic.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Flow_Logic.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Flow_Logic.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Flow_Logic.parent GETTERS AND SETTERS **********************/\n\tparent(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._parent = v;\n\t\t\tthis._parent_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._parent;\n\t\t}\n\t}\n\n\t/************* Flow_Logic.flow GETTERS AND SETTERS **********************/\n\tflow(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._flow = v;\n\t\t\tthis._flow_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._flow;\n\t\t}\n\t}\n\n\t/************* Flow_Logic.snapshot GETTERS AND SETTERS **********************/\n\tsnapshot(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._snapshot = v;\n\t\t\tthis._snapshot_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._snapshot;\n\t\t}\n\t}\n\n\t/************* Flow_Logic.definition GETTERS AND SETTERS **********************/\n\tdefinition(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._definition = v;\n\t\t\tthis._definition_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._definition;\n\t\t}\n\t}\n\n\t/************* Flow_Logic.block GETTERS AND SETTERS **********************/\n\tblock(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._block = v;\n\t\t\tthis._block_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._block;\n\t\t}\n\t}\n\n\t/************* Flow_Logic.application GETTERS AND SETTERS **********************/\n\tapplication(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._application = v;\n\t\t\tthis._application_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._application;\n\t\t}\n\t}\n\n\t/************* Flow_Logic.parent_Flow_Logics GETTERS AND SETTERS **********************/\n\tparent_Flow_Logics(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._parent_Flow_Logics = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._parent_Flow_Logics_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._parent_Flow_Logics;\n\t\t}\n\t}\n\n\t/************* Flow_Logic.parent_Flow_Instances GETTERS AND SETTERS **********************/\n\tparent_Flow_Instances(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._parent_Flow_Instances = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._parent_Flow_Instances_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._parent_Flow_Instances;\n\t\t}\n\t}\n\n\t/************* Flow_Logic.parent_Action_Instances GETTERS AND SETTERS **********************/\n\tparent_Action_Instances(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._parent_Action_Instances = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._parent_Action_Instances_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._parent_Action_Instances;\n\t\t}\n\t}\n\n\t/************* Flow_Logic.logic_Flow_Input_Scripts GETTERS AND SETTERS **********************/\n\tlogic_Flow_Input_Scripts(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._logic_Flow_Input_Scripts = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._logic_Flow_Input_Scripts_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._logic_Flow_Input_Scripts;\n\t\t}\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = undefined || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\tif (this._parent) ret += /*(this._parent_coop || '=') + */ this.parent()._toEQuery(sPath + 'parent.');\n\n\t\tif (this._flow) ret += /*(this._flow_coop || '=') + */ this.flow()._toEQuery(sPath + 'flow.');\n\n\t\tif (this._snapshot) ret += /*(this._snapshot_coop || '=') + */ this.snapshot()._toEQuery(sPath + 'snapshot.');\n\n\t\tif (this._definition) ret += /*(this._definition_coop || '=') + */ this.definition()._toEQuery(sPath + 'definition.');\n\n\t\tif (this._block) ret += /*(this._block_coop || '=') + */ this.block()._toEQuery(sPath + 'block.');\n\n\t\tif (this._application) ret += /*(this._application_coop || '=') + */ this.application()._toEQuery(sPath + 'application.');\n\n\t\t(this.parent_Flow_Logics() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYFlow_Logic.parent,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(this.parent_Flow_Instances() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYFlow_Instance.parent,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(this.parent_Action_Instances() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYAction_Instance.parent,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(this.logic_Flow_Input_Scripts() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYFlow_Input_Script.logic,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Logic._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn new shs_arbfw_appd_Flow_Logic()._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Logic._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Logic._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromGlideRecord(obj) {\n\t\tif (!obj) return null;\n\t\tif (obj.isValidRecord()) {\n\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Flow_Logic\" != 'ecc_queue' && obj.source == \"shs_arbfw_appd_Flow_Logic\") {\n\t\t\t\tobj.state = \"processing\";\n\t\t\t\tobj.update();\n\n\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\tresp.queue = 'output';\n\t\t\t\tresp.agent = obj.agent;\n\t\t\t\tresp.topic = obj.topic;\n\t\t\t\tresp.name = obj.name;\n\t\t\t\tresp.source = obj.source;\n\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\tlet ret = new shs_arbfw_appd_Flow_Logic()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t});\n\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t}\n\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\tresp.insert();\n\n\t\t\t\tobj.state = \"processed\";\n\t\t\t\tobj.update();\n\t\t\t\treturn resp;\n\t\t\t} else {\n\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\tparent: obj.getValue(\"parent\"),\n\n\t\t\t\t\tflow: obj.getValue(\"flow\"),\n\n\t\t\t\t\tsnapshot: obj.getValue(\"snapshot\"),\n\n\t\t\t\t\tdefinition: obj.getValue(\"definition\"),\n\n\t\t\t\t\tblock: obj.getValue(\"block\"),\n\n\t\t\t\t\tapplication: obj.getValue(\"application\"),\n\n\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tobj.query();\n\t\t\tlet grRet = [];\n\t\t\twhile (obj.next()) grRet.push(this._fromGlideRecord(obj));\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Logic._fromGlideRecord(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\treturn grRet;\n\t\t}\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\tundefined\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_appd_Flow_Logic()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\tif (/((([A-Za-z]{3,9}:(?:/ / ) ? )( ? : [-;: &= +$, w] + @) ? [A - Za - z0 - 9. - ] + | ( ? : www. | [-;: &= +$, w] + @)[A - Za - z0 - 9. - ] + )(( ? : /[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)/g.test(obj)) {\n\t\t\tvar msg = new sn_ws.RESTMessageV2();\n\t\t\tmsg.setEndpoint(obj);\n\t\t\tmsg.setRequestHeader('Content-Type', 'application/json');\n\t\t\tmsg.setHttpMethod('get');\n\t\t\treturn this._fromDocument(msg.execute().getBody());\n\t\t}\n\n\t\ttry {\n\t\t\tobj = JSON.parse(obj);\n\t\t} catch (ex) {\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Logic._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\tlet _obj = {\n\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))\n\t\t\t};\n\t\t\t_obj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(this))] = obj;\n\t\t\tobj = _obj;\n\t\t}\n\t\treturn this._fromDocument(obj);\n\t}\n\telse if (typeof(obj) === 'object') {\n\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\treturn this._fromGlideRecord(obj);\n\t\t} else if (obj._fromDocument) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Logic._fromDocument(): \" + \"redundent call\");\n\t\t\treturn obj;\n\t\t} else if (Array.isArray(obj)) {\n\t\t\treturn obj.map(function(o) {\n\t\t\t\treturn new shs_arbfw_appd_Flow_Logic()._fromDocument(o)\n\t\t\t});\n\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(obj))));\n\n\t\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Logic._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.parent) !== 'undefined') {\n\n\t\t\t\t\tthis.parent(new shs_arbfw_appd_Flow_Logic()._fromDocument(obj.parent));\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.flow) !== 'undefined') {\n\n\t\t\t\t\tthis.flow(new shs_arbfw_appd_Flow()._fromDocument(obj.flow));\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.snapshot) !== 'undefined') {\n\n\t\t\t\t\tthis.snapshot(new shs_arbfw_appd_Flow_Snapshot()._fromDocument(obj.snapshot));\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.definition) !== 'undefined') {\n\n\t\t\t\t\tthis.definition(new shs_arbfw_appd_Logic_Definition()._fromDocument(obj.definition));\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.block) !== 'undefined') {\n\n\t\t\t\t\tthis.block(new shs_arbfw_appd_Flow_Block()._fromDocument(obj.block));\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.application) !== 'undefined') {\n\n\t\t\t\t\tthis.application(new shs_arbfw_appd_Application()._fromDocument(obj.application));\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.parent_Flow_Logics) !== 'undefined') this.parent_Flow_Logics(new shs_arbfw_appd_Flow_Logic()._fromDocument(obj.parent_Flow_Logics));\n\n\t\t\t\tif (typeof(obj.parent_Flow_Instances) !== 'undefined') this.parent_Flow_Instances(new shs_arbfw_appd_Flow_Instance()._fromDocument(obj.parent_Flow_Instances));\n\n\t\t\t\tif (typeof(obj.parent_Action_Instances) !== 'undefined') this.parent_Action_Instances(new shs_arbfw_appd_Action_Instance()._fromDocument(obj.parent_Action_Instances));\n\n\t\t\t\tif (typeof(obj.logic_Flow_Input_Scripts) !== 'undefined') this.logic_Flow_Input_Scripts(new shs_arbfw_appd_Flow_Input_Script()._fromDocument(obj.logic_Flow_Input_Scripts));\n\n\t\t\t} else { // if(obj.constructor.name==\"Flow_Logic\"){\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Logic._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t}\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Logic._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\treturn null;\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Logic._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Logic._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Logic._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\treturn this;\n}\n\n_insertAssert() {\n\treturn true;\n}\n\n_updateAssert() {\n\treturn true;\n}\n\n_storeAssert() {\n\treturn true;\n}\n\n_findAssert() {\n\treturn true;\n}\n\n_new(c) {\n\n\treturn new shs_arbfw_appd_Platform._new(c);\n\n}\n\n_toDocument(arFields) {\n\n\tlet ret = undefined || {};\n\n\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tret.active = this.active();\n\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tret.enabled = this.enabled();\n\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tret.code = this.code();\n\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tret.order = this.order();\n\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tret.date = this.date();\n\n\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tret.name = this.name();\n\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tret.remark = this.remark();\n\n\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t}\n\n\tif (typeof(this._parent) !== 'undefined') {\n\t\tret.parent = this.parent();\n\n\t\tif (ret.parent) {\n\t\t\tret.parent = ret.parent._toDocument();\n\t\t\tif (typeof(ret.parent) === 'object' && !Object.keys(ret.parent).length) ret.parent = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this._flow) !== 'undefined') {\n\t\tret.flow = this.flow();\n\n\t\tif (ret.flow) {\n\t\t\tret.flow = ret.flow._toDocument();\n\t\t\tif (typeof(ret.flow) === 'object' && !Object.keys(ret.flow).length) ret.flow = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this._snapshot) !== 'undefined') {\n\t\tret.snapshot = this.snapshot();\n\n\t\tif (ret.snapshot) {\n\t\t\tret.snapshot = ret.snapshot._toDocument();\n\t\t\tif (typeof(ret.snapshot) === 'object' && !Object.keys(ret.snapshot).length) ret.snapshot = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this._definition) !== 'undefined') {\n\t\tret.definition = this.definition();\n\n\t\tif (ret.definition) {\n\t\t\tret.definition = ret.definition._toDocument();\n\t\t\tif (typeof(ret.definition) === 'object' && !Object.keys(ret.definition).length) ret.definition = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this._block) !== 'undefined') {\n\t\tret.block = this.block();\n\n\t\tif (ret.block) {\n\t\t\tret.block = ret.block._toDocument();\n\t\t\tif (typeof(ret.block) === 'object' && !Object.keys(ret.block).length) ret.block = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this._application) !== 'undefined') {\n\t\tret.application = this.application();\n\n\t\tif (ret.application) {\n\t\t\tret.application = ret.application._toDocument();\n\t\t\tif (typeof(ret.application) === 'object' && !Object.keys(ret.application).length) ret.application = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this.parent_Flow_Logics()) !== 'undefined') ret.parent_Flow_Logics = this.parent_Flow_Logics().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (typeof(this.parent_Flow_Instances()) !== 'undefined') ret.parent_Flow_Instances = this.parent_Flow_Instances().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (typeof(this.parent_Action_Instances()) !== 'undefined') ret.parent_Action_Instances = this.parent_Action_Instances().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (typeof(this.logic_Flow_Input_Scripts()) !== 'undefined') ret.logic_Flow_Input_Scripts = this.logic_Flow_Input_Scripts().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\treturn !arFields.find(function(_k) {\n\t\t\treturn _k == k;\n\t\t});\n\t}).forEach(function(k) {\n\t\tdelete ret[k];\n\t});\n\n\treturn ret;\n}\n\n_unique(keys, ret) {\n\tret = ret || new shs_arbfw_appd_Flow_Logic();\n\n\tundefined\n\n\t// if(this.Id) ret.Id = this.Id;\n\tif (!keys) {\n\n\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (typeof(this.flow()) !== 'undefined') ret.flow(this.flow()._unique());\n\n\t\tif (typeof(this.snapshot()) !== 'undefined') ret.snapshot(this.snapshot()._unique());\n\n\t\tif (typeof(this.application()) !== 'undefined') ret.application(this.application()._unique());\n\n\t} else {\n\n\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t\tif (keys.indexOf(\"parent\") >= 0 && typeof(this.parent()) !== 'undefined') ret.parent(this.parent()._unique());\n\n\t\tif (keys.indexOf(\"flow\") >= 0 && typeof(this.flow()) !== 'undefined') ret.flow(this.flow()._unique());\n\n\t\tif (keys.indexOf(\"snapshot\") >= 0 && typeof(this.snapshot()) !== 'undefined') ret.snapshot(this.snapshot()._unique());\n\n\t\tif (keys.indexOf(\"definition\") >= 0 && typeof(this.definition()) !== 'undefined') ret.definition(this.definition()._unique());\n\n\t\tif (keys.indexOf(\"block\") >= 0 && typeof(this.block()) !== 'undefined') ret.block(this.block()._unique());\n\n\t\tif (keys.indexOf(\"application\") >= 0 && typeof(this.application()) !== 'undefined') ret.application(this.application()._unique());\n\n\t}\n\n\treturn ret;\n}\n\n_query(gq) {\n\tlet arFields = Object.keys(global.Schema.of('sys_hub_flow_logic', ['*'])['sys_hub_flow_logic']);\n\n\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('sys_hub_flow_logic');\n\n\tundefined\n\n\tlet idf = ((function(r) {\n\t\tlet ret = 'sys_id';\n\t\tif (typeof(r.__idField) === 'function') {\n\t\t\tret = r.__idField();\n\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\tret = r.__idField || this.__idField();\n\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\tret = 'Id';\n\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\tret = 'sys_id';\n\t\t}\n\t\treturn ret;\n\t})(this));\n\tif (idf == 'Id') idf = 'sys_id';\n\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tlet coop = this._active_coop || '=';\n\n\t\tlet v = this.active();\n\n\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Logic._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tlet coop = this._enabled_coop || '=';\n\n\t\tlet v = this.enabled();\n\n\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Logic._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tlet coop = this._code_coop || '=';\n\n\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.code();\n\n\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Logic._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tlet coop = this._order_coop || '=';\n\n\t\tlet v = this.order();\n\n\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Logic._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tlet coop = this._date_coop || '=';\n\n\t\tlet v = this.date();\n\n\t\tif (v) {\n\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t}\n\n\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Logic._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tlet coop = this._name_coop || '=';\n\n\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.name();\n\n\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Logic._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tlet coop = this._remark_coop || '=';\n\n\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.remark();\n\n\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Logic._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._parent) !== 'undefined') {\n\t\tlet coop = this._parent_coop || '=';\n\n\t\tlet v = this.parent();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Flow Logic\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Logic._query(): \"+ \"parent \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Logic._query(): \" + \"parent[parent] resuled in undefined: \" + JSON.stringify(this.parent()));\n\t\t}\n\n\t\tif (arFields.indexOf('parent') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Logic._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('parent');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('parent');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('parent', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._flow) !== 'undefined') {\n\t\tlet coop = this._flow_coop || '=';\n\n\t\tlet v = this.flow();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Flow Logic\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Logic._query(): \"+ \"flow \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Logic._query(): \" + \"flow[flow] resuled in undefined: \" + JSON.stringify(this.flow()));\n\t\t}\n\n\t\tif (arFields.indexOf('flow') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Logic._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('flow');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('flow');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('flow', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._snapshot) !== 'undefined') {\n\t\tlet coop = this._snapshot_coop || '=';\n\n\t\tlet v = this.snapshot();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Flow Logic\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Logic._query(): \"+ \"snapshot \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Logic._query(): \" + \"snapshot[snapshot] resuled in undefined: \" + JSON.stringify(this.snapshot()));\n\t\t}\n\n\t\tif (arFields.indexOf('snapshot') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Logic._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('snapshot');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('snapshot');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('snapshot', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._definition) !== 'undefined') {\n\t\tlet coop = this._definition_coop || '=';\n\n\t\tlet v = this.definition();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Flow Logic\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Logic._query(): \"+ \"definition \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Logic._query(): \" + \"definition[definition] resuled in undefined: \" + JSON.stringify(this.definition()));\n\t\t}\n\n\t\tif (arFields.indexOf('definition') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Logic._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('definition');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('definition');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('definition', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._block) !== 'undefined') {\n\t\tlet coop = this._block_coop || '=';\n\n\t\tlet v = this.block();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Flow Logic\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Logic._query(): \"+ \"block \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Logic._query(): \" + \"block[block] resuled in undefined: \" + JSON.stringify(this.block()));\n\t\t}\n\n\t\tif (arFields.indexOf('block') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Logic._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('block');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('block');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('block', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._application) !== 'undefined') {\n\t\tlet coop = this._application_coop || '=';\n\n\t\tlet v = this.application();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Flow Logic\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Logic._query(): \"+ \"application \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Logic._query(): \" + \"application[application] resuled in undefined: \" + JSON.stringify(this.application()));\n\t\t}\n\n\t\tif (arFields.indexOf('application') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Logic._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('application');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('application');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('application', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Logic._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\treturn this._queryGQ;\n}\n\n_save(obj) {\n\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\treturn new shs_arbfw_appd_Flow_Logic()._save(o)\n\t});\n\n\tlet _obj = {};\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Logic._save(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\tObject.keys(obj).filter(function(k) {\n\t\treturn Object.keys(global.Schema.of('sys_hub_flow_logic', ['*'])['sys_hub_flow_logic']).filter(function(_k) {\n\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t}).indexOf(k.toLowerCase()) >= 0\n\t}).forEach(function(k) {\n\t\t_obj[k.toLowerCase()] = obj[k]\n\t});\n\n\tObject.keys(_obj).forEach(function(k) {\n\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Logic._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tdelete _obj[k];\n\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Logic._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t}\n\t});\n\n\tlet _this = null;\n\tif (obj.__keys) {\n\t\tlet kObj = {};\n\t\tkObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(_obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))));\n\t\tobj.__keys.forEach(function(k) {\n\t\t\tkObj[k] = _obj[k]\n\t\t});\n\t\t_this = new shs_arbfw_appd_Flow_Logic()._fromDocument(kObj);\n\t} else {\n\t\t_this = new shs_arbfw_appd_Flow_Logic()._fromDocument(_obj)._unique();\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Logic._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\tdelete _obj.__idField;\n\n\ttry {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Logic._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\tObject.keys(_obj).filter(function(k) {\n\t\t\treturn k.toLowerCase() != k;\n\t\t}).forEach(function(k) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Logic._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tvar lk = k.toLowerCase();\n\t\t\t_obj[lk] = _obj[k];\n\t\t\tdelete _obj[k];\n\t\t});\n\n\t\tlet gq = new global.GlideQuery(obj.__type || 'sys_hub_flow_logic');\n\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Logic._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\tif (_obj.sys_id) {\n\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t} else {\n\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\tgq = gq.insert(_obj);\n\t\t}\n\t\tlet _fObj = {};\n\t\t_fObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))));\n\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('sys_hub_flow_logic', ['*'])['sys_hub_flow_logic']))));\n\t} catch (ex) {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Logic._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Logic._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\treturn this;\n\t}\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Logic._save(): \" + \"obj.parent_Flow_Logics: \" + JSON.stringify(obj.parent_Flow_Logics, null, 4));\n\tif (Array.isArray(obj.parent_Flow_Logics)) this.parent_Flow_Logics(obj.parent_Flow_Logics.map(function(ta) {\n\t\treturn new shs_arbfw_appd_Flow_Logic()._save(ta)\n\t}));\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Logic._save(): \" + \"obj.parent_Flow_Instances: \" + JSON.stringify(obj.parent_Flow_Instances, null, 4));\n\tif (Array.isArray(obj.parent_Flow_Instances)) this.parent_Flow_Instances(obj.parent_Flow_Instances.map(function(ta) {\n\t\treturn new shs_arbfw_appd_Flow_Instance()._save(ta)\n\t}));\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Logic._save(): \" + \"obj.parent_Action_Instances: \" + JSON.stringify(obj.parent_Action_Instances, null, 4));\n\tif (Array.isArray(obj.parent_Action_Instances)) this.parent_Action_Instances(obj.parent_Action_Instances.map(function(ta) {\n\t\treturn new shs_arbfw_appd_Action_Instance()._save(ta)\n\t}));\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Logic._save(): \" + \"obj.logic_Flow_Input_Scripts: \" + JSON.stringify(obj.logic_Flow_Input_Scripts, null, 4));\n\tif (Array.isArray(obj.logic_Flow_Input_Scripts)) this.logic_Flow_Input_Scripts(obj.logic_Flow_Input_Scripts.map(function(ta) {\n\t\treturn new shs_arbfw_appd_Flow_Input_Script()._save(ta)\n\t}));\n\n\treturn this;\n}\n\n/************* Flow_Logic.store() **********************/\nstore(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Logic.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Logic.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Logic.store(): \" + \"executing locally \");\n\n\t\t// store locally\n\t\treturn this._save(this._toDocument());\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Flow_Logic.findAll() **********************/\nfindAll(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Logic.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Logic.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Logic.findAll(): \" + \"executing locally \");\n\n\t\t// findAll locally\n\t\tlet gr = new GlideRecord('sys_hub_flow_logic');\n\t\tgr.addEncodedQuery(this._toEQuery());\n\t\treturn this._fromDocument(gr);\n\n\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('sys_hub_flow_logic', ['*'])['sys_hub_flow_logic'])));\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Flow_Logic.find() **********************/\nfind(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Logic.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Logic.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Logic.find(): \" + \"executing locally \");\n\n\t\tlet ret = this.findAll();\n\t\treturn ret.length ? ret[0] : null;\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"scriptFile_Script_Compatibilitys":[{"active":true,"enabled":true}],"client_callable":true,"sys_name":"shs_arbfw_appd_Flow_Plan","api_name":"x_1790593_arboard.shs_arbfw_appd_Flow_Plan","name":"shs_arbfw_appd_Flow_Plan","script":"class shs_arbfw_appd_Flow_Plan extends global.AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"Application Designer\";\n\t\tthis.__type = \"shs_arbfw_appd_Flow_Plan\";\n\t\tthis.__alias = \"shs_arbfw_appd\";\n\t\tthis.__scope = \"shs_arbfw\";\n\t}\n\n\t/************* Flow_Plan.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Flow_Plan.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Flow_Plan.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Flow_Plan.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Flow_Plan.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Plan.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Flow_Plan.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Flow_Plan.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Flow_Plan.snapshot GETTERS AND SETTERS **********************/\n\tsnapshot(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._snapshot = v;\n\t\t\tthis._snapshot_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._snapshot;\n\t\t}\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = undefined || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\tif (this._snapshot) ret += /*(this._snapshot_coop || '=') + */ this.snapshot()._toEQuery(sPath + 'snapshot.');\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Plan._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn new shs_arbfw_appd_Flow_Plan()._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Plan._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Plan._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromGlideRecord(obj) {\n\t\tif (!obj) return null;\n\t\tif (obj.isValidRecord()) {\n\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Flow_Plan\" != 'ecc_queue' && obj.source == \"shs_arbfw_appd_Flow_Plan\") {\n\t\t\t\tobj.state = \"processing\";\n\t\t\t\tobj.update();\n\n\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\tresp.queue = 'output';\n\t\t\t\tresp.agent = obj.agent;\n\t\t\t\tresp.topic = obj.topic;\n\t\t\t\tresp.name = obj.name;\n\t\t\t\tresp.source = obj.source;\n\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\tlet ret = new shs_arbfw_appd_Flow_Plan()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t});\n\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t}\n\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\tresp.insert();\n\n\t\t\t\tobj.state = \"processed\";\n\t\t\t\tobj.update();\n\t\t\t\treturn resp;\n\t\t\t} else {\n\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\tsnapshot: obj.getValue(\"snapshot\"),\n\n\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tobj.query();\n\t\t\tlet grRet = [];\n\t\t\twhile (obj.next()) grRet.push(this._fromGlideRecord(obj));\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Plan._fromGlideRecord(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\treturn grRet;\n\t\t}\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\tundefined\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_appd_Flow_Plan()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\tif (/((([A-Za-z]{3,9}:(?:/ / ) ? )( ? : [-;: &= +$, w] + @) ? [A - Za - z0 - 9. - ] + | ( ? : www. | [-;: &= +$, w] + @)[A - Za - z0 - 9. - ] + )(( ? : /[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)/g.test(obj)) {\n\t\t\tvar msg = new sn_ws.RESTMessageV2();\n\t\t\tmsg.setEndpoint(obj);\n\t\t\tmsg.setRequestHeader('Content-Type', 'application/json');\n\t\t\tmsg.setHttpMethod('get');\n\t\t\treturn this._fromDocument(msg.execute().getBody());\n\t\t}\n\n\t\ttry {\n\t\t\tobj = JSON.parse(obj);\n\t\t} catch (ex) {\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Plan._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\tlet _obj = {\n\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))\n\t\t\t};\n\t\t\t_obj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(this))] = obj;\n\t\t\tobj = _obj;\n\t\t}\n\t\treturn this._fromDocument(obj);\n\t}\n\telse if (typeof(obj) === 'object') {\n\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\treturn this._fromGlideRecord(obj);\n\t\t} else if (obj._fromDocument) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Plan._fromDocument(): \" + \"redundent call\");\n\t\t\treturn obj;\n\t\t} else if (Array.isArray(obj)) {\n\t\t\treturn obj.map(function(o) {\n\t\t\t\treturn new shs_arbfw_appd_Flow_Plan()._fromDocument(o)\n\t\t\t});\n\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(obj))));\n\n\t\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Plan._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.snapshot) !== 'undefined') {\n\n\t\t\t\t\tthis.snapshot(new shs_arbfw_appd_Flow_Snapshot()._fromDocument(obj.snapshot));\n\t\t\t\t}\n\n\t\t\t} else { // if(obj.constructor.name==\"Flow_Plan\"){\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Plan._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t}\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Plan._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\treturn null;\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Plan._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Plan._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Plan._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\treturn this;\n}\n\n_insertAssert() {\n\treturn true;\n}\n\n_updateAssert() {\n\treturn true;\n}\n\n_storeAssert() {\n\treturn true;\n}\n\n_findAssert() {\n\treturn true;\n}\n\n_new(c) {\n\n\treturn new shs_arbfw_appd_Platform._new(c);\n\n}\n\n_toDocument(arFields) {\n\n\tlet ret = undefined || {};\n\n\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tret.active = this.active();\n\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tret.enabled = this.enabled();\n\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tret.code = this.code();\n\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tret.order = this.order();\n\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tret.date = this.date();\n\n\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tret.name = this.name();\n\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tret.remark = this.remark();\n\n\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t}\n\n\tif (typeof(this._snapshot) !== 'undefined') {\n\t\tret.snapshot = this.snapshot();\n\n\t\tif (ret.snapshot) {\n\t\t\tret.snapshot = ret.snapshot._toDocument();\n\t\t\tif (typeof(ret.snapshot) === 'object' && !Object.keys(ret.snapshot).length) ret.snapshot = null;\n\t\t}\n\n\t}\n\n\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\treturn !arFields.find(function(_k) {\n\t\t\treturn _k == k;\n\t\t});\n\t}).forEach(function(k) {\n\t\tdelete ret[k];\n\t});\n\n\treturn ret;\n}\n\n_unique(keys, ret) {\n\tret = ret || new shs_arbfw_appd_Flow_Plan();\n\n\tundefined\n\n\t// if(this.Id) ret.Id = this.Id;\n\tif (!keys) {\n\n\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t} else {\n\n\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t\tif (keys.indexOf(\"snapshot\") >= 0 && typeof(this.snapshot()) !== 'undefined') ret.snapshot(this.snapshot()._unique());\n\n\t}\n\n\treturn ret;\n}\n\n_query(gq) {\n\tlet arFields = Object.keys(global.Schema.of('sys_flow_subflow_plan', ['*'])['sys_flow_subflow_plan']);\n\n\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('sys_flow_subflow_plan');\n\n\tundefined\n\n\tlet idf = ((function(r) {\n\t\tlet ret = 'sys_id';\n\t\tif (typeof(r.__idField) === 'function') {\n\t\t\tret = r.__idField();\n\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\tret = r.__idField || this.__idField();\n\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\tret = 'Id';\n\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\tret = 'sys_id';\n\t\t}\n\t\treturn ret;\n\t})(this));\n\tif (idf == 'Id') idf = 'sys_id';\n\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tlet coop = this._active_coop || '=';\n\n\t\tlet v = this.active();\n\n\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Plan._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tlet coop = this._enabled_coop || '=';\n\n\t\tlet v = this.enabled();\n\n\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Plan._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tlet coop = this._code_coop || '=';\n\n\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.code();\n\n\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Plan._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tlet coop = this._order_coop || '=';\n\n\t\tlet v = this.order();\n\n\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Plan._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tlet coop = this._date_coop || '=';\n\n\t\tlet v = this.date();\n\n\t\tif (v) {\n\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t}\n\n\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Plan._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tlet coop = this._name_coop || '=';\n\n\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.name();\n\n\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Plan._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tlet coop = this._remark_coop || '=';\n\n\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.remark();\n\n\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Plan._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._snapshot) !== 'undefined') {\n\t\tlet coop = this._snapshot_coop || '=';\n\n\t\tlet v = this.snapshot();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Flow Plan\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Plan._query(): \"+ \"snapshot \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Plan._query(): \" + \"snapshot[snapshot] resuled in undefined: \" + JSON.stringify(this.snapshot()));\n\t\t}\n\n\t\tif (arFields.indexOf('snapshot') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Plan._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('snapshot');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('snapshot');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('snapshot', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Plan._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\treturn this._queryGQ;\n}\n\n_save(obj) {\n\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\treturn new shs_arbfw_appd_Flow_Plan()._save(o)\n\t});\n\n\tlet _obj = {};\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Plan._save(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\tObject.keys(obj).filter(function(k) {\n\t\treturn Object.keys(global.Schema.of('sys_flow_subflow_plan', ['*'])['sys_flow_subflow_plan']).filter(function(_k) {\n\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t}).indexOf(k.toLowerCase()) >= 0\n\t}).forEach(function(k) {\n\t\t_obj[k.toLowerCase()] = obj[k]\n\t});\n\n\tObject.keys(_obj).forEach(function(k) {\n\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Plan._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tdelete _obj[k];\n\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Plan._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t}\n\t});\n\n\tlet _this = null;\n\tif (obj.__keys) {\n\t\tlet kObj = {};\n\t\tkObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(_obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))));\n\t\tobj.__keys.forEach(function(k) {\n\t\t\tkObj[k] = _obj[k]\n\t\t});\n\t\t_this = new shs_arbfw_appd_Flow_Plan()._fromDocument(kObj);\n\t} else {\n\t\t_this = new shs_arbfw_appd_Flow_Plan()._fromDocument(_obj)._unique();\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Plan._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\tdelete _obj.__idField;\n\n\ttry {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Plan._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\tObject.keys(_obj).filter(function(k) {\n\t\t\treturn k.toLowerCase() != k;\n\t\t}).forEach(function(k) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Plan._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tvar lk = k.toLowerCase();\n\t\t\t_obj[lk] = _obj[k];\n\t\t\tdelete _obj[k];\n\t\t});\n\n\t\tlet gq = new global.GlideQuery(obj.__type || 'sys_flow_subflow_plan');\n\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Plan._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\tif (_obj.sys_id) {\n\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t} else {\n\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\tgq = gq.insert(_obj);\n\t\t}\n\t\tlet _fObj = {};\n\t\t_fObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))));\n\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('sys_flow_subflow_plan', ['*'])['sys_flow_subflow_plan']))));\n\t} catch (ex) {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Plan._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Plan._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\treturn this;\n\t}\n\n\treturn this;\n}\n\n/************* Flow_Plan.store() **********************/\nstore(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Plan.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Plan.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Plan.store(): \" + \"executing locally \");\n\n\t\t// store locally\n\t\treturn this._save(this._toDocument());\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Flow_Plan.findAll() **********************/\nfindAll(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Plan.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Plan.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Plan.findAll(): \" + \"executing locally \");\n\n\t\t// findAll locally\n\t\tlet gr = new GlideRecord('sys_flow_subflow_plan');\n\t\tgr.addEncodedQuery(this._toEQuery());\n\t\treturn this._fromDocument(gr);\n\n\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('sys_flow_subflow_plan', ['*'])['sys_flow_subflow_plan'])));\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Flow_Plan.find() **********************/\nfind(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Plan.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Plan.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Plan.find(): \" + \"executing locally \");\n\n\t\tlet ret = this.findAll();\n\t\treturn ret.length ? ret[0] : null;\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"scriptFile_Script_Compatibilitys":[{"active":true,"enabled":true}],"client_callable":true,"sys_name":"shs_arbfw_Effort_Estimate","api_name":"x_1790593_arboard.shs_arbfw_Effort_Estimate","name":"shs_arbfw_Effort_Estimate","script":"class shs_arbfw_Effort_Estimate extends global.AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"\";\n\t\tthis.__type = \"shs_arbfw_Effort_Estimate\";\n\t\tthis.__alias = \"shs_arbfw\";\n\t\tthis.__scope = \"shs_arbfw\";\n\t}\n\n\t/************* Effort_Estimate.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Effort_Estimate.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Effort_Estimate.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Effort_Estimate.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Effort_Estimate.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//(typeof(window)!=='undefined'?alert:gs.info)(\"Effort_Estimate.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Effort_Estimate.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Effort_Estimate.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Effort_Estimate.personDay GETTERS AND SETTERS **********************/\n\tpersonDay(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._personDay = v;\n\t\t\tthis._personDay_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._personDay;\n\t\t}\n\t}\n\n\t/************* Effort_Estimate.effort GETTERS AND SETTERS **********************/\n\teffort(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._effort = v;\n\t\t\tthis._effort_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._effort;\n\t\t}\n\t}\n\n\t/************* Effort_Estimate.requirement GETTERS AND SETTERS **********************/\n\trequirement(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._requirement = v;\n\t\t\tthis._requirement_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._requirement;\n\t\t}\n\t}\n\n\t/************* Effort_Estimate.role GETTERS AND SETTERS **********************/\n\trole(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._role = v;\n\t\t\tthis._role_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._role;\n\t\t}\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = undefined || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\tif (this._personDay) ret += '^' + sPath + 'personDay' + (this._personDay_coop || '=') + this.personDay();\n\n\t\tif (this._effort) ret += /*(this._effort_coop || '=') + */ this.effort()._toEQuery(sPath + 'effort.');\n\n\t\tif (this._requirement) ret += /*(this._requirement_coop || '=') + */ this.requirement()._toEQuery(sPath + 'requirement.');\n\n\t\tif (this._role) ret += /*(this._role_coop || '=') + */ this.role()._toEQuery(sPath + 'role.');\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Effort_Estimate._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn new shs_arbfw_Effort_Estimate()._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Effort_Estimate._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Effort_Estimate._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromGlideRecord(obj) {\n\t\tif (!obj) return null;\n\t\tif (obj.isValidRecord()) {\n\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Effort_Estimate\" != 'ecc_queue' && obj.source == \"shs_arbfw_Effort_Estimate\") {\n\t\t\t\tobj.state = \"processing\";\n\t\t\t\tobj.update();\n\n\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\tresp.queue = 'output';\n\t\t\t\tresp.agent = obj.agent;\n\t\t\t\tresp.topic = obj.topic;\n\t\t\t\tresp.name = obj.name;\n\t\t\t\tresp.source = obj.source;\n\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\tlet ret = new shs_arbfw_Effort_Estimate()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t});\n\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t}\n\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\tresp.insert();\n\n\t\t\t\tobj.state = \"processed\";\n\t\t\t\tobj.update();\n\t\t\t\treturn resp;\n\t\t\t} else {\n\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\tpersonDay: obj.getValue(\"personDay\"),\n\n\t\t\t\t\teffort: obj.getValue(\"effort\"),\n\n\t\t\t\t\trequirement: obj.getValue(\"requirement\"),\n\n\t\t\t\t\trole: obj.getValue(\"role\"),\n\n\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tobj.query();\n\t\t\tlet grRet = [];\n\t\t\twhile (obj.next()) grRet.push(this._fromGlideRecord(obj));\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Effort_Estimate._fromGlideRecord(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\treturn grRet;\n\t\t}\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\tundefined\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_Effort_Estimate()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\tif (/((([A-Za-z]{3,9}:(?:/ / ) ? )( ? : [-;: &= +$, w] + @) ? [A - Za - z0 - 9. - ] + | ( ? : www. | [-;: &= +$, w] + @)[A - Za - z0 - 9. - ] + )(( ? : /[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)/g.test(obj)) {\n\t\t\tvar msg = new sn_ws.RESTMessageV2();\n\t\t\tmsg.setEndpoint(obj);\n\t\t\tmsg.setRequestHeader('Content-Type', 'application/json');\n\t\t\tmsg.setHttpMethod('get');\n\t\t\treturn this._fromDocument(msg.execute().getBody());\n\t\t}\n\n\t\ttry {\n\t\t\tobj = JSON.parse(obj);\n\t\t} catch (ex) {\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Effort_Estimate._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\tlet _obj = {\n\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))\n\t\t\t};\n\t\t\t_obj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(this))] = obj;\n\t\t\tobj = _obj;\n\t\t}\n\t\treturn this._fromDocument(obj);\n\t}\n\telse if (typeof(obj) === 'object') {\n\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\treturn this._fromGlideRecord(obj);\n\t\t} else if (obj._fromDocument) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Effort_Estimate._fromDocument(): \" + \"redundent call\");\n\t\t\treturn obj;\n\t\t} else if (Array.isArray(obj)) {\n\t\t\treturn obj.map(function(o) {\n\t\t\t\treturn new shs_arbfw_Effort_Estimate()._fromDocument(o)\n\t\t\t});\n\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(obj))));\n\n\t\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Effort_Estimate._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.personDay) !== 'undefined') {\n\n\t\t\t\t\tthis.personDay(obj.personDay);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.effort) !== 'undefined') {\n\n\t\t\t\t\tthis.effort(new shs_arbfw_Effort()._fromDocument(obj.effort));\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.requirement) !== 'undefined') {\n\n\t\t\t\t\tthis.requirement(new shs_arbfw_Requirement()._fromDocument(obj.requirement));\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.role) !== 'undefined') {\n\n\t\t\t\t\tthis.role(new shs_arbfw_Role()._fromDocument(obj.role));\n\t\t\t\t}\n\n\t\t\t} else { // if(obj.constructor.name==\"Effort_Estimate\"){\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Effort_Estimate._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t}\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Effort_Estimate._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\treturn null;\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Effort_Estimate._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Effort_Estimate._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Effort_Estimate._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\treturn this;\n}\n\n_insertAssert() {\n\treturn true;\n}\n\n_updateAssert() {\n\treturn true;\n}\n\n_storeAssert() {\n\treturn true;\n}\n\n_findAssert() {\n\treturn true;\n}\n\n_new(c) {\n\n\treturn new shs_arbfw_Platform._new(c);\n\n}\n\n_toDocument(arFields) {\n\n\tlet ret = undefined || {};\n\n\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tret.active = this.active();\n\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tret.enabled = this.enabled();\n\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tret.code = this.code();\n\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tret.order = this.order();\n\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tret.date = this.date();\n\n\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tret.name = this.name();\n\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tret.remark = this.remark();\n\n\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t}\n\n\tif (typeof(this._personDay) !== 'undefined') {\n\t\tret.personDay = this.personDay();\n\n\t}\n\n\tif (typeof(this._effort) !== 'undefined') {\n\t\tret.effort = this.effort();\n\n\t\tif (ret.effort) {\n\t\t\tret.effort = ret.effort._toDocument();\n\t\t\tif (typeof(ret.effort) === 'object' && !Object.keys(ret.effort).length) ret.effort = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this._requirement) !== 'undefined') {\n\t\tret.requirement = this.requirement();\n\n\t\tif (ret.requirement) {\n\t\t\tret.requirement = ret.requirement._toDocument();\n\t\t\tif (typeof(ret.requirement) === 'object' && !Object.keys(ret.requirement).length) ret.requirement = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this._role) !== 'undefined') {\n\t\tret.role = this.role();\n\n\t\tif (ret.role) {\n\t\t\tret.role = ret.role._toDocument();\n\t\t\tif (typeof(ret.role) === 'object' && !Object.keys(ret.role).length) ret.role = null;\n\t\t}\n\n\t}\n\n\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\treturn !arFields.find(function(_k) {\n\t\t\treturn _k == k;\n\t\t});\n\t}).forEach(function(k) {\n\t\tdelete ret[k];\n\t});\n\n\treturn ret;\n}\n\n_unique(keys, ret) {\n\tret = ret || new shs_arbfw_Effort_Estimate();\n\n\tundefined\n\n\t// if(this.Id) ret.Id = this.Id;\n\tif (!keys) {\n\n\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t} else {\n\n\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t\tif (keys.indexOf(\"personDay\") >= 0 && typeof(this.personDay()) !== 'undefined') ret.personDay(this.personDay());\n\n\t\tif (keys.indexOf(\"effort\") >= 0 && typeof(this.effort()) !== 'undefined') ret.effort(this.effort()._unique());\n\n\t\tif (keys.indexOf(\"requirement\") >= 0 && typeof(this.requirement()) !== 'undefined') ret.requirement(this.requirement()._unique());\n\n\t\tif (keys.indexOf(\"role\") >= 0 && typeof(this.role()) !== 'undefined') ret.role(this.role()._unique());\n\n\t}\n\n\treturn ret;\n}\n\n_query(gq) {\n\tlet arFields = Object.keys(global.Schema.of('x_1790593_arboard_effort_estimate', ['*'])['x_1790593_arboard_effort_estimate']);\n\n\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('x_1790593_arboard_effort_estimate');\n\n\tundefined\n\n\tlet idf = ((function(r) {\n\t\tlet ret = 'sys_id';\n\t\tif (typeof(r.__idField) === 'function') {\n\t\t\tret = r.__idField();\n\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\tret = r.__idField || this.__idField();\n\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\tret = 'Id';\n\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\tret = 'sys_id';\n\t\t}\n\t\treturn ret;\n\t})(this));\n\tif (idf == 'Id') idf = 'sys_id';\n\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tlet coop = this._active_coop || '=';\n\n\t\tlet v = this.active();\n\n\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Effort_Estimate._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tlet coop = this._enabled_coop || '=';\n\n\t\tlet v = this.enabled();\n\n\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Effort_Estimate._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tlet coop = this._code_coop || '=';\n\n\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.code();\n\n\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Effort_Estimate._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tlet coop = this._order_coop || '=';\n\n\t\tlet v = this.order();\n\n\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Effort_Estimate._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tlet coop = this._date_coop || '=';\n\n\t\tlet v = this.date();\n\n\t\tif (v) {\n\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t}\n\n\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Effort_Estimate._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tlet coop = this._name_coop || '=';\n\n\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.name();\n\n\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Effort_Estimate._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tlet coop = this._remark_coop || '=';\n\n\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.remark();\n\n\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Effort_Estimate._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._personDay) !== 'undefined') {\n\t\tlet coop = this._personDay_coop || '=';\n\n\t\tlet v = this.personDay();\n\n\t\tif (arFields.indexOf('personday') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Effort_Estimate._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('personday');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('personday');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('personday', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._effort) !== 'undefined') {\n\t\tlet coop = this._effort_coop || '=';\n\n\t\tlet v = this.effort();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Effort Estimate\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Effort_Estimate._query(): \"+ \"effort \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Effort_Estimate._query(): \" + \"effort[effort] resuled in undefined: \" + JSON.stringify(this.effort()));\n\t\t}\n\n\t\tif (arFields.indexOf('effort') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Effort_Estimate._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('effort');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('effort');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('effort', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._requirement) !== 'undefined') {\n\t\tlet coop = this._requirement_coop || '=';\n\n\t\tlet v = this.requirement();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Effort Estimate\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Effort_Estimate._query(): \"+ \"requirement \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Effort_Estimate._query(): \" + \"requirement[requirement] resuled in undefined: \" + JSON.stringify(this.requirement()));\n\t\t}\n\n\t\tif (arFields.indexOf('requirement') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Effort_Estimate._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('requirement');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('requirement');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('requirement', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._role) !== 'undefined') {\n\t\tlet coop = this._role_coop || '=';\n\n\t\tlet v = this.role();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Effort Estimate\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Effort_Estimate._query(): \"+ \"role \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Effort_Estimate._query(): \" + \"role[role] resuled in undefined: \" + JSON.stringify(this.role()));\n\t\t}\n\n\t\tif (arFields.indexOf('role') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Effort_Estimate._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('role');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('role');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('role', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Effort_Estimate._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\treturn this._queryGQ;\n}\n\n_save(obj) {\n\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\treturn new shs_arbfw_Effort_Estimate()._save(o)\n\t});\n\n\tlet _obj = {};\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Effort_Estimate._save(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\tObject.keys(obj).filter(function(k) {\n\t\treturn Object.keys(global.Schema.of('x_1790593_arboard_effort_estimate', ['*'])['x_1790593_arboard_effort_estimate']).filter(function(_k) {\n\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t}).indexOf(k.toLowerCase()) >= 0\n\t}).forEach(function(k) {\n\t\t_obj[k.toLowerCase()] = obj[k]\n\t});\n\n\tObject.keys(_obj).forEach(function(k) {\n\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Effort_Estimate._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tdelete _obj[k];\n\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Effort_Estimate._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t}\n\t});\n\n\tlet _this = null;\n\tif (obj.__keys) {\n\t\tlet kObj = {};\n\t\tkObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(_obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))));\n\t\tobj.__keys.forEach(function(k) {\n\t\t\tkObj[k] = _obj[k]\n\t\t});\n\t\t_this = new shs_arbfw_Effort_Estimate()._fromDocument(kObj);\n\t} else {\n\t\t_this = new shs_arbfw_Effort_Estimate()._fromDocument(_obj)._unique();\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Effort_Estimate._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\tdelete _obj.__idField;\n\n\ttry {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Effort_Estimate._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\tObject.keys(_obj).filter(function(k) {\n\t\t\treturn k.toLowerCase() != k;\n\t\t}).forEach(function(k) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Effort_Estimate._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tvar lk = k.toLowerCase();\n\t\t\t_obj[lk] = _obj[k];\n\t\t\tdelete _obj[k];\n\t\t});\n\n\t\tlet gq = new global.GlideQuery(obj.__type || 'x_1790593_arboard_effort_estimate');\n\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Effort_Estimate._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\tif (_obj.sys_id) {\n\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t} else {\n\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\tgq = gq.insert(_obj);\n\t\t}\n\t\tlet _fObj = {};\n\t\t_fObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))));\n\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('x_1790593_arboard_effort_estimate', ['*'])['x_1790593_arboard_effort_estimate']))));\n\t} catch (ex) {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Effort_Estimate._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Effort_Estimate._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\treturn this;\n\t}\n\n\treturn this;\n}\n\n/************* Effort_Estimate.store() **********************/\nstore(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Effort_Estimate.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Effort_Estimate.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Effort_Estimate.store(): \" + \"executing locally \");\n\n\t\t// store locally\n\t\treturn this._save(this._toDocument());\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Effort_Estimate.findAll() **********************/\nfindAll(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Effort_Estimate.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Effort_Estimate.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Effort_Estimate.findAll(): \" + \"executing locally \");\n\n\t\t// findAll locally\n\t\tlet gr = new GlideRecord('x_1790593_arboard_effort_estimate');\n\t\tgr.addEncodedQuery(this._toEQuery());\n\t\treturn this._fromDocument(gr);\n\n\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('x_1790593_arboard_effort_estimate', ['*'])['x_1790593_arboard_effort_estimate'])));\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Effort_Estimate.find() **********************/\nfind(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Effort_Estimate.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Effort_Estimate.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Effort_Estimate.find(): \" + \"executing locally \");\n\n\t\tlet ret = this.findAll();\n\t\treturn ret.length ? ret[0] : null;\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"scriptFile_Script_Compatibilitys":[{"active":true,"enabled":true}],"client_callable":true,"sys_name":"shs_arbfw_Meeting","api_name":"x_1790593_arboard.shs_arbfw_Meeting","name":"shs_arbfw_Meeting","script":"class shs_arbfw_Meeting extends global.AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"\";\n\t\tthis.__type = \"shs_arbfw_Meeting\";\n\t\tthis.__alias = \"shs_arbfw\";\n\t\tthis.__scope = \"shs_arbfw\";\n\t}\n\n\t/************* Meeting.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Meeting.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Meeting.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Meeting.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Meeting.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//(typeof(window)!=='undefined'?alert:gs.info)(\"Meeting.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Meeting.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Meeting.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Meeting.start GETTERS AND SETTERS **********************/\n\tstart(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//(typeof(window)!=='undefined'?alert:gs.info)(\"Meeting.start(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._start = v;\n\t\t\tthis._start_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._start;\n\t\t}\n\t}\n\n\t/************* Meeting.end GETTERS AND SETTERS **********************/\n\tend(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//(typeof(window)!=='undefined'?alert:gs.info)(\"Meeting.end(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._end = v;\n\t\t\tthis._end_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._end;\n\t\t}\n\t}\n\n\t/************* Meeting.started GETTERS AND SETTERS **********************/\n\tstarted(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//(typeof(window)!=='undefined'?alert:gs.info)(\"Meeting.started(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._started = v;\n\t\t\tthis._started_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._started;\n\t\t}\n\t}\n\n\t/************* Meeting.ended GETTERS AND SETTERS **********************/\n\tended(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//(typeof(window)!=='undefined'?alert:gs.info)(\"Meeting.ended(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._ended = v;\n\t\t\tthis._ended_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._ended;\n\t\t}\n\t}\n\n\t/************* Meeting.series GETTERS AND SETTERS **********************/\n\tseries(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._series = v;\n\t\t\tthis._series_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._series;\n\t\t}\n\t}\n\n\t/************* Meeting.organizer GETTERS AND SETTERS **********************/\n\torganizer(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._organizer = v;\n\t\t\tthis._organizer_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._organizer;\n\t\t}\n\t}\n\n\t/************* Meeting.moderator GETTERS AND SETTERS **********************/\n\tmoderator(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._moderator = v;\n\t\t\tthis._moderator_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._moderator;\n\t\t}\n\t}\n\n\t/************* Meeting.project GETTERS AND SETTERS **********************/\n\tproject(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._project = v;\n\t\t\tthis._project_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._project;\n\t\t}\n\t}\n\n\t/************* Meeting.board GETTERS AND SETTERS **********************/\n\tboard(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._board = v;\n\t\t\tthis._board_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._board;\n\t\t}\n\t}\n\n\t/************* Meeting.decision GETTERS AND SETTERS **********************/\n\tdecision(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._decision = v;\n\t\t\tthis._decision_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._decision;\n\t\t}\n\t}\n\n\t/************* Meeting.meeting_Meeting_Agendas GETTERS AND SETTERS **********************/\n\tmeeting_Meeting_Agendas(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._meeting_Meeting_Agendas = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._meeting_Meeting_Agendas_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._meeting_Meeting_Agendas;\n\t\t}\n\t}\n\n\t/************* Meeting.meeting_Meeting_Minutes GETTERS AND SETTERS **********************/\n\tmeeting_Meeting_Minutes(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._meeting_Meeting_Minutes = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._meeting_Meeting_Minutes_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._meeting_Meeting_Minutes;\n\t\t}\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = undefined || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\tif (this._start) ret += '^' + sPath + 'start' + (this._start_coop || '=') + this.start();\n\n\t\tif (this._end) ret += '^' + sPath + 'end' + (this._end_coop || '=') + this.end();\n\n\t\tif (this._started) ret += '^' + sPath + 'started' + (this._started_coop || '=') + this.started();\n\n\t\tif (this._ended) ret += '^' + sPath + 'ended' + (this._ended_coop || '=') + this.ended();\n\n\t\tif (this._series) ret += /*(this._series_coop || '=') + */ this.series()._toEQuery(sPath + 'series.');\n\n\t\tif (this._organizer) ret += /*(this._organizer_coop || '=') + */ this.organizer()._toEQuery(sPath + 'organizer.');\n\n\t\tif (this._moderator) ret += /*(this._moderator_coop || '=') + */ this.moderator()._toEQuery(sPath + 'moderator.');\n\n\t\tif (this._project) ret += /*(this._project_coop || '=') + */ this.project()._toEQuery(sPath + 'project.');\n\n\t\tif (this._board) ret += /*(this._board_coop || '=') + */ this.board()._toEQuery(sPath + 'board.');\n\n\t\tif (this._decision) ret += /*(this._decision_coop || '=') + */ this.decision()._toEQuery(sPath + 'decision.');\n\n\t\t(this.meeting_Meeting_Agendas() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYMeeting_Agenda.meeting,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(this.meeting_Meeting_Minutes() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYMeeting_Minute.meeting,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn new shs_arbfw_Meeting()._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromGlideRecord(obj) {\n\t\tif (!obj) return null;\n\t\tif (obj.isValidRecord()) {\n\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Meeting\" != 'ecc_queue' && obj.source == \"shs_arbfw_Meeting\") {\n\t\t\t\tobj.state = \"processing\";\n\t\t\t\tobj.update();\n\n\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\tresp.queue = 'output';\n\t\t\t\tresp.agent = obj.agent;\n\t\t\t\tresp.topic = obj.topic;\n\t\t\t\tresp.name = obj.name;\n\t\t\t\tresp.source = obj.source;\n\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\tlet ret = new shs_arbfw_Meeting()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t});\n\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t}\n\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\tresp.insert();\n\n\t\t\t\tobj.state = \"processed\";\n\t\t\t\tobj.update();\n\t\t\t\treturn resp;\n\t\t\t} else {\n\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\tstart: obj.getValue(\"start\"),\n\n\t\t\t\t\tend: obj.getValue(\"end\"),\n\n\t\t\t\t\tstarted: obj.getValue(\"started\"),\n\n\t\t\t\t\tended: obj.getValue(\"ended\"),\n\n\t\t\t\t\tseries: obj.getValue(\"series\"),\n\n\t\t\t\t\torganizer: obj.getValue(\"organizer\"),\n\n\t\t\t\t\tmoderator: obj.getValue(\"moderator\"),\n\n\t\t\t\t\tproject: obj.getValue(\"project\"),\n\n\t\t\t\t\tboard: obj.getValue(\"board\"),\n\n\t\t\t\t\tdecision: obj.getValue(\"decision\"),\n\n\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tobj.query();\n\t\t\tlet grRet = [];\n\t\t\twhile (obj.next()) grRet.push(this._fromGlideRecord(obj));\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Meeting._fromGlideRecord(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\treturn grRet;\n\t\t}\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\tundefined\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_Meeting()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\tif (/((([A-Za-z]{3,9}:(?:/ / ) ? )( ? : [-;: &= +$, w] + @) ? [A - Za - z0 - 9. - ] + | ( ? : www. | [-;: &= +$, w] + @)[A - Za - z0 - 9. - ] + )(( ? : /[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)/g.test(obj)) {\n\t\t\tvar msg = new sn_ws.RESTMessageV2();\n\t\t\tmsg.setEndpoint(obj);\n\t\t\tmsg.setRequestHeader('Content-Type', 'application/json');\n\t\t\tmsg.setHttpMethod('get');\n\t\t\treturn this._fromDocument(msg.execute().getBody());\n\t\t}\n\n\t\ttry {\n\t\t\tobj = JSON.parse(obj);\n\t\t} catch (ex) {\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Meeting._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\tlet _obj = {\n\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))\n\t\t\t};\n\t\t\t_obj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(this))] = obj;\n\t\t\tobj = _obj;\n\t\t}\n\t\treturn this._fromDocument(obj);\n\t}\n\telse if (typeof(obj) === 'object') {\n\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\treturn this._fromGlideRecord(obj);\n\t\t} else if (obj._fromDocument) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting._fromDocument(): \" + \"redundent call\");\n\t\t\treturn obj;\n\t\t} else if (Array.isArray(obj)) {\n\t\t\treturn obj.map(function(o) {\n\t\t\t\treturn new shs_arbfw_Meeting()._fromDocument(o)\n\t\t\t});\n\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(obj))));\n\n\t\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Meeting._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.start) !== 'undefined') {\n\n\t\t\t\t\tthis.start(obj.start);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.end) !== 'undefined') {\n\n\t\t\t\t\tthis.end(obj.end);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.started) !== 'undefined') {\n\n\t\t\t\t\tthis.started(obj.started);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.ended) !== 'undefined') {\n\n\t\t\t\t\tthis.ended(obj.ended);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.series) !== 'undefined') {\n\n\t\t\t\t\tthis.series(new shs_arbfw_Meeting_Series()._fromDocument(obj.series));\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.organizer) !== 'undefined') {\n\n\t\t\t\t\tthis.organizer(new shs_arbfw_User()._fromDocument(obj.organizer));\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.moderator) !== 'undefined') {\n\n\t\t\t\t\tthis.moderator(new shs_arbfw_User()._fromDocument(obj.moderator));\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.project) !== 'undefined') {\n\n\t\t\t\t\tthis.project(new shs_arbfw_Project()._fromDocument(obj.project));\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.board) !== 'undefined') {\n\n\t\t\t\t\tthis.board(new shs_arbfw_Board()._fromDocument(obj.board));\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.decision) !== 'undefined') {\n\n\t\t\t\t\tthis.decision(new shs_arbfw_Decision()._fromDocument(obj.decision));\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.meeting_Meeting_Agendas) !== 'undefined') this.meeting_Meeting_Agendas(new shs_arbfw_Meeting_Agenda()._fromDocument(obj.meeting_Meeting_Agendas));\n\n\t\t\t\tif (typeof(obj.meeting_Meeting_Minutes) !== 'undefined') this.meeting_Meeting_Minutes(new shs_arbfw_Meeting_Minute()._fromDocument(obj.meeting_Meeting_Minutes));\n\n\t\t\t} else { // if(obj.constructor.name==\"Meeting\"){\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t}\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\treturn null;\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Meeting._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Meeting._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\treturn this;\n}\n\n_insertAssert() {\n\treturn true;\n}\n\n_updateAssert() {\n\treturn true;\n}\n\n_storeAssert() {\n\treturn true;\n}\n\n_findAssert() {\n\treturn true;\n}\n\n_new(c) {\n\n\treturn new shs_arbfw_Platform._new(c);\n\n}\n\n_toDocument(arFields) {\n\n\tlet ret = undefined || {};\n\n\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tret.active = this.active();\n\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tret.enabled = this.enabled();\n\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tret.code = this.code();\n\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tret.order = this.order();\n\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tret.date = this.date();\n\n\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tret.name = this.name();\n\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tret.remark = this.remark();\n\n\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t}\n\n\tif (typeof(this._start) !== 'undefined') {\n\t\tret.start = this.start();\n\n\t\tif (ret.start && typeof(ret.start.toISOString) === 'function') ret.start = ret.start.toISOString().replace('.000Z', 'Z');\n\n\t}\n\n\tif (typeof(this._end) !== 'undefined') {\n\t\tret.end = this.end();\n\n\t\tif (ret.end && typeof(ret.end.toISOString) === 'function') ret.end = ret.end.toISOString().replace('.000Z', 'Z');\n\n\t}\n\n\tif (typeof(this._started) !== 'undefined') {\n\t\tret.started = this.started();\n\n\t\tif (ret.started && typeof(ret.started.toISOString) === 'function') ret.started = ret.started.toISOString().replace('.000Z', 'Z');\n\n\t}\n\n\tif (typeof(this._ended) !== 'undefined') {\n\t\tret.ended = this.ended();\n\n\t\tif (ret.ended && typeof(ret.ended.toISOString) === 'function') ret.ended = ret.ended.toISOString().replace('.000Z', 'Z');\n\n\t}\n\n\tif (typeof(this._series) !== 'undefined') {\n\t\tret.series = this.series();\n\n\t\tif (ret.series) {\n\t\t\tret.series = ret.series._toDocument();\n\t\t\tif (typeof(ret.series) === 'object' && !Object.keys(ret.series).length) ret.series = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this._organizer) !== 'undefined') {\n\t\tret.organizer = this.organizer();\n\n\t\tif (ret.organizer) {\n\t\t\tret.organizer = ret.organizer._toDocument();\n\t\t\tif (typeof(ret.organizer) === 'object' && !Object.keys(ret.organizer).length) ret.organizer = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this._moderator) !== 'undefined') {\n\t\tret.moderator = this.moderator();\n\n\t\tif (ret.moderator) {\n\t\t\tret.moderator = ret.moderator._toDocument();\n\t\t\tif (typeof(ret.moderator) === 'object' && !Object.keys(ret.moderator).length) ret.moderator = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this._project) !== 'undefined') {\n\t\tret.project = this.project();\n\n\t\tif (ret.project) {\n\t\t\tret.project = ret.project._toDocument();\n\t\t\tif (typeof(ret.project) === 'object' && !Object.keys(ret.project).length) ret.project = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this._board) !== 'undefined') {\n\t\tret.board = this.board();\n\n\t\tif (ret.board) {\n\t\t\tret.board = ret.board._toDocument();\n\t\t\tif (typeof(ret.board) === 'object' && !Object.keys(ret.board).length) ret.board = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this._decision) !== 'undefined') {\n\t\tret.decision = this.decision();\n\n\t\tif (ret.decision) {\n\t\t\tret.decision = ret.decision._toDocument();\n\t\t\tif (typeof(ret.decision) === 'object' && !Object.keys(ret.decision).length) ret.decision = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this.meeting_Meeting_Agendas()) !== 'undefined') ret.meeting_Meeting_Agendas = this.meeting_Meeting_Agendas().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (typeof(this.meeting_Meeting_Minutes()) !== 'undefined') ret.meeting_Meeting_Minutes = this.meeting_Meeting_Minutes().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\treturn !arFields.find(function(_k) {\n\t\t\treturn _k == k;\n\t\t});\n\t}).forEach(function(k) {\n\t\tdelete ret[k];\n\t});\n\n\treturn ret;\n}\n\n_unique(keys, ret) {\n\tret = ret || new shs_arbfw_Meeting();\n\n\tundefined\n\n\t// if(this.Id) ret.Id = this.Id;\n\tif (!keys) {\n\n\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t} else {\n\n\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t\tif (keys.indexOf(\"start\") >= 0 && typeof(this.start()) !== 'undefined') ret.start(this.start());\n\n\t\tif (keys.indexOf(\"end\") >= 0 && typeof(this.end()) !== 'undefined') ret.end(this.end());\n\n\t\tif (keys.indexOf(\"started\") >= 0 && typeof(this.started()) !== 'undefined') ret.started(this.started());\n\n\t\tif (keys.indexOf(\"ended\") >= 0 && typeof(this.ended()) !== 'undefined') ret.ended(this.ended());\n\n\t\tif (keys.indexOf(\"series\") >= 0 && typeof(this.series()) !== 'undefined') ret.series(this.series()._unique());\n\n\t\tif (keys.indexOf(\"organizer\") >= 0 && typeof(this.organizer()) !== 'undefined') ret.organizer(this.organizer()._unique());\n\n\t\tif (keys.indexOf(\"moderator\") >= 0 && typeof(this.moderator()) !== 'undefined') ret.moderator(this.moderator()._unique());\n\n\t\tif (keys.indexOf(\"project\") >= 0 && typeof(this.project()) !== 'undefined') ret.project(this.project()._unique());\n\n\t\tif (keys.indexOf(\"board\") >= 0 && typeof(this.board()) !== 'undefined') ret.board(this.board()._unique());\n\n\t\tif (keys.indexOf(\"decision\") >= 0 && typeof(this.decision()) !== 'undefined') ret.decision(this.decision()._unique());\n\n\t}\n\n\treturn ret;\n}\n\n_query(gq) {\n\tlet arFields = Object.keys(global.Schema.of('x_1790593_arboard_meeting', ['*'])['x_1790593_arboard_meeting']);\n\n\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('x_1790593_arboard_meeting');\n\n\tundefined\n\n\tlet idf = ((function(r) {\n\t\tlet ret = 'sys_id';\n\t\tif (typeof(r.__idField) === 'function') {\n\t\t\tret = r.__idField();\n\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\tret = r.__idField || this.__idField();\n\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\tret = 'Id';\n\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\tret = 'sys_id';\n\t\t}\n\t\treturn ret;\n\t})(this));\n\tif (idf == 'Id') idf = 'sys_id';\n\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tlet coop = this._active_coop || '=';\n\n\t\tlet v = this.active();\n\n\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Meeting._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tlet coop = this._enabled_coop || '=';\n\n\t\tlet v = this.enabled();\n\n\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Meeting._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tlet coop = this._code_coop || '=';\n\n\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.code();\n\n\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Meeting._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tlet coop = this._order_coop || '=';\n\n\t\tlet v = this.order();\n\n\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Meeting._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tlet coop = this._date_coop || '=';\n\n\t\tlet v = this.date();\n\n\t\tif (v) {\n\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t}\n\n\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Meeting._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tlet coop = this._name_coop || '=';\n\n\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.name();\n\n\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Meeting._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tlet coop = this._remark_coop || '=';\n\n\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.remark();\n\n\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Meeting._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._start) !== 'undefined') {\n\t\tlet coop = this._start_coop || '=';\n\n\t\tlet v = this.start();\n\n\t\tif (v) {\n\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t}\n\n\t\tif (arFields.indexOf('start') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Meeting._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('start');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('start');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('start', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._end) !== 'undefined') {\n\t\tlet coop = this._end_coop || '=';\n\n\t\tlet v = this.end();\n\n\t\tif (v) {\n\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t}\n\n\t\tif (arFields.indexOf('end') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Meeting._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('end');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('end');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('end', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._started) !== 'undefined') {\n\t\tlet coop = this._started_coop || '=';\n\n\t\tlet v = this.started();\n\n\t\tif (v) {\n\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t}\n\n\t\tif (arFields.indexOf('started') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Meeting._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('started');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('started');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('started', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._ended) !== 'undefined') {\n\t\tlet coop = this._ended_coop || '=';\n\n\t\tlet v = this.ended();\n\n\t\tif (v) {\n\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t}\n\n\t\tif (arFields.indexOf('ended') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Meeting._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('ended');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('ended');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('ended', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._series) !== 'undefined') {\n\t\tlet coop = this._series_coop || '=';\n\n\t\tlet v = this.series();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Meeting\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Meeting._query(): \"+ \"series \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting._query(): \" + \"series[series] resuled in undefined: \" + JSON.stringify(this.series()));\n\t\t}\n\n\t\tif (arFields.indexOf('series') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Meeting._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('series');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('series');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('series', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._organizer) !== 'undefined') {\n\t\tlet coop = this._organizer_coop || '=';\n\n\t\tlet v = this.organizer();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Meeting\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Meeting._query(): \"+ \"organizer \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting._query(): \" + \"organizer[organizer] resuled in undefined: \" + JSON.stringify(this.organizer()));\n\t\t}\n\n\t\tif (arFields.indexOf('organizer') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Meeting._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('organizer');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('organizer');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('organizer', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._moderator) !== 'undefined') {\n\t\tlet coop = this._moderator_coop || '=';\n\n\t\tlet v = this.moderator();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Meeting\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Meeting._query(): \"+ \"moderator \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting._query(): \" + \"moderator[moderator] resuled in undefined: \" + JSON.stringify(this.moderator()));\n\t\t}\n\n\t\tif (arFields.indexOf('moderator') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Meeting._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('moderator');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('moderator');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('moderator', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._project) !== 'undefined') {\n\t\tlet coop = this._project_coop || '=';\n\n\t\tlet v = this.project();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Meeting\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Meeting._query(): \"+ \"project \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting._query(): \" + \"project[project] resuled in undefined: \" + JSON.stringify(this.project()));\n\t\t}\n\n\t\tif (arFields.indexOf('project') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Meeting._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('project');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('project');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('project', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._board) !== 'undefined') {\n\t\tlet coop = this._board_coop || '=';\n\n\t\tlet v = this.board();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Meeting\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Meeting._query(): \"+ \"board \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting._query(): \" + \"board[board] resuled in undefined: \" + JSON.stringify(this.board()));\n\t\t}\n\n\t\tif (arFields.indexOf('board') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Meeting._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('board');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('board');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('board', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._decision) !== 'undefined') {\n\t\tlet coop = this._decision_coop || '=';\n\n\t\tlet v = this.decision();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Meeting\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Meeting._query(): \"+ \"decision \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting._query(): \" + \"decision[decision] resuled in undefined: \" + JSON.stringify(this.decision()));\n\t\t}\n\n\t\tif (arFields.indexOf('decision') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Meeting._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('decision');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('decision');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('decision', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Meeting._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\treturn this._queryGQ;\n}\n\n_save(obj) {\n\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\treturn new shs_arbfw_Meeting()._save(o)\n\t});\n\n\tlet _obj = {};\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Meeting._save(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\tObject.keys(obj).filter(function(k) {\n\t\treturn Object.keys(global.Schema.of('x_1790593_arboard_meeting', ['*'])['x_1790593_arboard_meeting']).filter(function(_k) {\n\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t}).indexOf(k.toLowerCase()) >= 0\n\t}).forEach(function(k) {\n\t\t_obj[k.toLowerCase()] = obj[k]\n\t});\n\n\tObject.keys(_obj).forEach(function(k) {\n\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tdelete _obj[k];\n\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t}\n\t});\n\n\tlet _this = null;\n\tif (obj.__keys) {\n\t\tlet kObj = {};\n\t\tkObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(_obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))));\n\t\tobj.__keys.forEach(function(k) {\n\t\t\tkObj[k] = _obj[k]\n\t\t});\n\t\t_this = new shs_arbfw_Meeting()._fromDocument(kObj);\n\t} else {\n\t\t_this = new shs_arbfw_Meeting()._fromDocument(_obj)._unique();\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Meeting._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\tdelete _obj.__idField;\n\n\ttry {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\tObject.keys(_obj).filter(function(k) {\n\t\t\treturn k.toLowerCase() != k;\n\t\t}).forEach(function(k) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tvar lk = k.toLowerCase();\n\t\t\t_obj[lk] = _obj[k];\n\t\t\tdelete _obj[k];\n\t\t});\n\n\t\tlet gq = new global.GlideQuery(obj.__type || 'x_1790593_arboard_meeting');\n\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Meeting._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\tif (_obj.sys_id) {\n\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t} else {\n\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\tgq = gq.insert(_obj);\n\t\t}\n\t\tlet _fObj = {};\n\t\t_fObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))));\n\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('x_1790593_arboard_meeting', ['*'])['x_1790593_arboard_meeting']))));\n\t} catch (ex) {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\treturn this;\n\t}\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting._save(): \" + \"obj.meeting_Meeting_Agendas: \" + JSON.stringify(obj.meeting_Meeting_Agendas, null, 4));\n\tif (Array.isArray(obj.meeting_Meeting_Agendas)) this.meeting_Meeting_Agendas(obj.meeting_Meeting_Agendas.map(function(ta) {\n\t\treturn new shs_arbfw_Meeting_Agenda()._save(ta)\n\t}));\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting._save(): \" + \"obj.meeting_Meeting_Minutes: \" + JSON.stringify(obj.meeting_Meeting_Minutes, null, 4));\n\tif (Array.isArray(obj.meeting_Meeting_Minutes)) this.meeting_Meeting_Minutes(obj.meeting_Meeting_Minutes.map(function(ta) {\n\t\treturn new shs_arbfw_Meeting_Minute()._save(ta)\n\t}));\n\n\treturn this;\n}\n\n/************* Meeting.store() **********************/\nstore(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting.store(): \" + \"executing locally \");\n\n\t\t// store locally\n\t\treturn this._save(this._toDocument());\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Meeting.findAll() **********************/\nfindAll(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting.findAll(): \" + \"executing locally \");\n\n\t\t// findAll locally\n\t\tlet gr = new GlideRecord('x_1790593_arboard_meeting');\n\t\tgr.addEncodedQuery(this._toEQuery());\n\t\treturn this._fromDocument(gr);\n\n\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('x_1790593_arboard_meeting', ['*'])['x_1790593_arboard_meeting'])));\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Meeting.find() **********************/\nfind(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting.find(): \" + \"executing locally \");\n\n\t\tlet ret = this.findAll();\n\t\treturn ret.length ? ret[0] : null;\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"scriptFile_Script_Compatibilitys":[{"active":true,"enabled":true}],"client_callable":true,"sys_name":"shs_arbfw_appd_Action_Input","api_name":"x_1790593_arboard.shs_arbfw_appd_Action_Input","name":"shs_arbfw_appd_Action_Input","script":"class shs_arbfw_appd_Action_Input extends global.AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"Application Designer\";\n\t\tthis.__type = \"shs_arbfw_appd_Action_Input\";\n\t\tthis.__alias = \"shs_arbfw_appd\";\n\t\tthis.__scope = \"shs_arbfw\";\n\t}\n\n\t/************* Action_Input.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Action_Input.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Action_Input.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Action_Input.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Action_Input.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//(typeof(window)!=='undefined'?alert:gs.info)(\"Action_Input.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Action_Input.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Action_Input.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Action_Input.type GETTERS AND SETTERS **********************/\n\ttype(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._type = v;\n\t\t\tthis._type_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._type;\n\t\t}\n\t}\n\n\t/************* Action_Input.mandatory GETTERS AND SETTERS **********************/\n\tmandatory(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._mandatory = v;\n\t\t\tthis._mandatory_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._mandatory;\n\t\t}\n\t}\n\n\t/************* Action_Input.reference GETTERS AND SETTERS **********************/\n\treference(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._reference = v;\n\t\t\tthis._reference_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._reference;\n\t\t}\n\t}\n\n\t/************* Action_Input.flow GETTERS AND SETTERS **********************/\n\tflow(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._flow = v;\n\t\t\tthis._flow_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._flow;\n\t\t}\n\t}\n\n\t/************* Action_Input.snapshot GETTERS AND SETTERS **********************/\n\tsnapshot(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._snapshot = v;\n\t\t\tthis._snapshot_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._snapshot;\n\t\t}\n\t}\n\n\t/************* Action_Input.action GETTERS AND SETTERS **********************/\n\taction(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._action = v;\n\t\t\tthis._action_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._action;\n\t\t}\n\t}\n\n\t/************* Action_Input.actionInput_Variable_Values GETTERS AND SETTERS **********************/\n\tactionInput_Variable_Values(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._actionInput_Variable_Values = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._actionInput_Variable_Values_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._actionInput_Variable_Values;\n\t\t}\n\t}\n\n\t/************* Action_Input.__keys EF: GETTERS AND SETTERS **********************/\n\t__keys() {\n\t\treturn /*this.ef___keys = */ ((\n\t\t\tfunction() {\n\t\t\t\ttry {\n\n\t\t\t\t\tlet __ret = undefined;\n\n\t\t\t\t\t__ret = [\"element\", \"model_id\"];\n\n\t\t\t\t\tif (typeof(__ret) === 'string' && __ret.startsWith(\"s(\") && __ret.endsWith(\")\")) {\n\t\t\t\t\t\t__ret = this.runScript(__ret.slice(2, -1));\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof(__ret) === \"function\") {\n\t\t\t\t\t\t__ret = __ret(this);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn __ret;\n\n\t\t\t\t} catch (_vOfEx) {\n\t\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Input.__keys(): \" + 'valueOf', _vOfEx, JSON.parse(((typeof(this) !== \"undefined\" && typeof(this._atob) !== \"undefined\") ? this._atob : (typeof(_FrEMD) !== \"undefined\" ? _FrEMD._atob : atob))(`eyJTZXJ2aWNlTm93IjpbImVsZW1lbnQiLCJtb2RlbF9pZCJdfQ==`), (key, value) => {\n\t\t\t\t\t\tif (typeof(value) === \"string\" && value.indexOf(\"=>\") > 0) return eval(\"(\" + value + \")\");\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t}\n\t\t)());\n\t}\n\n\t/************* Action_Input.length EF: GETTERS AND SETTERS **********************/\n\tlength() {\n\t\treturn /*this.ef_length = */ ((\n\t\t\tfunction() {\n\t\t\t\ttry {\n\n\t\t\t\t\tlet __ret = undefined;\n\n\t\t\t\t\t__ret = () => ({\n\t\t\t\t\t\t\"String\": 255,\n\t\t\t\t\t\t\"Text\": 4000,\n\t\t\t\t\t})[this.type()];\n\n\t\t\t\t\tif (typeof(__ret) === 'string' && __ret.startsWith(\"s(\") && __ret.endsWith(\")\")) {\n\t\t\t\t\t\t__ret = this.runScript(__ret.slice(2, -1));\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof(__ret) === \"function\") {\n\t\t\t\t\t\t__ret = __ret(this);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn __ret;\n\n\t\t\t\t} catch (_vOfEx) {\n\t\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Input.length(): \" + 'valueOf', _vOfEx, JSON.parse(((typeof(this) !== \"undefined\" && typeof(this._atob) !== \"undefined\") ? this._atob : (typeof(_FrEMD) !== \"undefined\" ? _FrEMD._atob : atob))(`eyJTZXJ2aWNlTm93IjoiKCkgPT4gKHtcblx0XHRcdFx0XCJTdHJpbmdcIjogMjU1LFxuXHRcdFx0XHRcIlRleHRcIjogNDAwMCxcblx0XHRcdH0pW3RoaXMudHlwZSgpXSJ9`), (key, value) => {\n\t\t\t\t\t\tif (typeof(value) === \"string\" && value.indexOf(\"=>\") > 0) return eval(\"(\" + value + \")\");\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t}\n\t\t)());\n\t}\n\n\t/************* Action_Input.Model_ID EF: GETTERS AND SETTERS **********************/\n\tModel_ID() {\n\t\treturn /*this.ef_Model_ID = */ ((\n\t\t\tfunction() {\n\t\t\t\ttry {\n\n\t\t\t\t\tlet __ret = undefined;\n\n\t\t\t\t\tif (typeof(__ret) === 'string' && __ret.startsWith(\"s(\") && __ret.endsWith(\")\")) {\n\t\t\t\t\t\t__ret = this.runScript(__ret.slice(2, -1));\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof(__ret) === \"function\") {\n\t\t\t\t\t\t__ret = __ret(this);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn __ret;\n\n\t\t\t\t} catch (_vOfEx) {\n\t\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Input.Model_ID(): \" + 'valueOf', _vOfEx, JSON.parse(((typeof(this) !== \"undefined\" && typeof(this._atob) !== \"undefined\") ? this._atob : (typeof(_FrEMD) !== \"undefined\" ? _FrEMD._atob : atob))(`eyJTZXJ2aWNlTm93IjoiPDxzKCh7e3BwYXRofX0uX190eXBlPT0nc3lzX3ZhcmlhYmxlX3ZhbHVlJyAmJiB7e19ffX0uc3ViZmxvdyk/e3tfX319LnN1YmZsb3cuSWQ6e3twcGF0aH19LklkKT4+IiwiX1NlcnZpY2VOb3ciOiI8PFsqKltmbG93X0Zsb3dfSW5wdXRzW21vZGVsX2lkPSd7e2lkfX0nXV0uSWQsICoqW2Zsb3dfRmxvd19PdXRwdXRzW21vZGVsX2lkPSd7e2lkfX0nXV0uSWQsICoqW2Zsb3dfRmxvd19WYXJpYWJsZXNbbW9kZWxfaWQ9J3t7aWR9fSddXS5JZCwgKipbc25hcHNob3RfRmxvd19JbnB1dHNbbW9kZWxfaWQ9J3t7aWR9fSddXS5JZCwgKipbc25hcHNob3RfRmxvd19PdXRwdXRzW21vZGVsX2lkPSd7e2lkfX0nXV0uSWQsICoqW3NuYXBzaG90X0Zsb3dfVmFyaWFibGVzW21vZGVsX2lkPSd7e2lkfX0nXV0uSWQsICoqW2luc3RhbmNlX0Zsb3dfSW5zdGFuY2VfSW5wdXRzW21vZGVsX2lkPSd7e2lkfX0nXV0uSWQsICoqW2luc3RhbmNlX1ZhcmlhYmxlX1ZhbHVlc1tmbG93SW5wdXRbbW9kZWxfaWQ9J3t7aWR9fSddXV0uc3ViZmxvdy5JZCwgKipbYWN0aW9uX1ZhcmlhYmxlX1ZhbHVlc1thY3Rpb25JbnB1dFttb2RlbF9pZD0ne3tpZH19J11dXS57XCJJZFwiOiBcIl9me2dzLmluZm8oX3RvU3RyaW5nICsgJzogRklKU09OOiAnICsgSlNPTi5zdHJpbmdpZnkocmVmcy5tYW55UmVmcykpfVwifS5JZF1bMF0+PiJ9`), (key, value) => {\n\t\t\t\t\t\tif (typeof(value) === \"string\" && value.indexOf(\"=>\") > 0) return eval(\"(\" + value + \")\");\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t}\n\t\t)());\n\t}\n\n\t/************* Action_Input.Model_Table EF: GETTERS AND SETTERS **********************/\n\tModel_Table() {\n\t\treturn /*this.ef_Model_Table = */ ((\n\t\t\tfunction() {\n\t\t\t\ttry {\n\n\t\t\t\t\tlet __ret = undefined;\n\n\t\t\t\t\tif (typeof(__ret) === 'string' && __ret.startsWith(\"s(\") && __ret.endsWith(\")\")) {\n\t\t\t\t\t\t__ret = this.runScript(__ret.slice(2, -1));\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof(__ret) === \"function\") {\n\t\t\t\t\t\t__ret = __ret(this);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn __ret;\n\n\t\t\t\t} catch (_vOfEx) {\n\t\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Input.Model_Table(): \" + 'valueOf', _vOfEx, JSON.parse(((typeof(this) !== \"undefined\" && typeof(this._atob) !== \"undefined\") ? this._atob : (typeof(_FrEMD) !== \"undefined\" ? _FrEMD._atob : atob))(`eyJTZXJ2aWNlTm93IjoiPDxzKCh7c3lzX2h1Yl9mbG93OiAnc3lzX2h1Yl9mbG93Jywgc3lzX2h1Yl9mbG93X3NuYXBzaG90OiAnc3lzX2h1Yl9mbG93X3NuYXBzaG90Jywgc3lzX3ZhcmlhYmxlX3ZhbHVlOiAnc3lzX2h1Yl9mbG93Jywgc3lzX2h1Yl9zdWJfZmxvd19pbnN0YW5jZTogJ3N5c19odWJfZmxvd19sb2dpY19leHRfaW5wdXQnLCBzeXNfaHViX2FjdGlvbl9pbnN0YW5jZTogJ3N5c19odWJfZmxvdyd9KVt7e3BwYXRofX0uX190eXBlXSk+PiIsIl9TZXJ2aWNlTm93IjoiPDwkZXhpc3RzKCoqW2Zsb3dfRmxvd19JbnB1dHNbbW9kZWxfdGFibGU9J3t7aWR9fSddIG9yIGZsb3dfRmxvd19PdXRwdXRzW21vZGVsX3RhYmxlPSd7e2lkfX0nXSBvciBmbG93X0Zsb3dfVmFyaWFibGVzW21vZGVsX3RhYmxlPSd7e2lkfX0nXV0pPydzeXNfaHViX2Zsb3cnOigkZXhpc3RzKCoqW3NuYXBzaG90X0Zsb3dfSW5wdXRzW21vZGVsX3RhYmxlPSd7e2lkfX0nXSBvciBzbmFwc2hvdF9GbG93X091dHB1dHNbbW9kZWxfdGFibGU9J3t7aWR9fSddIG9yIHNuYXBzaG90X0Zsb3dfVmFyaWFibGVzW21vZGVsX3RhYmxlPSd7e2lkfX0nXV0pPydzeXNfaHViX2Zsb3dfc25hcHNob3QnOigkZXhpc3RzKCoqW2luc3RhbmNlX0Zsb3dfSW5zdGFuY2VfSW5wdXRzW21vZGVsX3RhYmxlPSd7e2lkfX0nXV0pPydzeXNfaHViX2Zsb3dfbG9naWNfZXh0X2lucHV0JzooJGV4aXN0cygqKlthY3Rpb25fVmFyaWFibGVfVmFsdWVzW2FjdGlvbklucHV0W21vZGVsX3RhYmxlPSd7e2lkfX0nXV1dIG9yICoqW2luc3RhbmNlX1ZhcmlhYmxlX1ZhbHVlc1tmbG93SW5wdXRbbW9kZWxfdGFibGU9J3t7aWR9fSddXV0pPydzeXNfaHViX2Zsb3cnOicnKSkpPj4ifQ==`), (key, value) => {\n\t\t\t\t\t\tif (typeof(value) === \"string\" && value.indexOf(\"=>\") > 0) return eval(\"(\" + value + \")\");\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t}\n\t\t)());\n\t}\n\n\t/************* Action_Input.Attributes EF: GETTERS AND SETTERS **********************/\n\tAttributes() {\n\t\treturn /*this.ef_Attributes = */ ((\n\t\t\tfunction() {\n\t\t\t\ttry {\n\n\t\t\t\t\tlet __ret = undefined;\n\n\t\t\t\t\tif (typeof(__ret) === 'string' && __ret.startsWith(\"s(\") && __ret.endsWith(\")\")) {\n\t\t\t\t\t\t__ret = this.runScript(__ret.slice(2, -1));\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof(__ret) === \"function\") {\n\t\t\t\t\t\t__ret = __ret(this);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn __ret;\n\n\t\t\t\t} catch (_vOfEx) {\n\t\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Input.Attributes(): \" + 'valueOf', _vOfEx, JSON.parse(((typeof(this) !== \"undefined\" && typeof(this._atob) !== \"undefined\") ? this._atob : (typeof(_FrEMD) !== \"undefined\" ? _FrEMD._atob : atob))(`eyJTZXJ2aWNlTm93IjoiPDxzKCdlbGVtZW50X21hcHBpbmdfcHJvdmlkZXI9Y29tLmdsaWRlLmZsb3dfZGVzaWduLmFjdGlvbi5kYXRhLkZsb3dEZXNpZ25WYXJpYWJsZU1hcHBlcix1aVR5cGU9Jyt7e19ffX0uaW50ZXJuYWxfdHlwZSsnLHVpVW5pcXVlSWQ9Jyt7e19ffX0uSWQpPj4iLCJfU2VydmljZU5vdyI6Ijw8J2VsZW1lbnRfbWFwcGluZ19wcm92aWRlcj1jb20uZ2xpZGUuZmxvd19kZXNpZ24uYWN0aW9uLmRhdGEuRmxvd0Rlc2lnblZhcmlhYmxlTWFwcGVyLHVpVHlwZT0nJnt7X199fS5pbnRlcm5hbF90eXBlJicsdWlVbmlxdWVJZD0nJnt7X199fS5JZD4+In0=`), (key, value) => {\n\t\t\t\t\t\tif (typeof(value) === \"string\" && value.indexOf(\"=>\") > 0) return eval(\"(\" + value + \")\");\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t}\n\t\t)());\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = undefined || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\tif (this._type) ret += '^' + sPath + 'type' + (this._type_coop || '=') + this.type();\n\n\t\tif (this._mandatory) ret += '^' + sPath + 'mandatory' + (this._mandatory_coop || '=') + this.mandatory();\n\n\t\tif (this._reference) ret += /*(this._reference_coop || '=') + */ this.reference()._toEQuery(sPath + 'reference.');\n\n\t\tif (this._flow) ret += /*(this._flow_coop || '=') + */ this.flow()._toEQuery(sPath + 'flow.');\n\n\t\tif (this._snapshot) ret += /*(this._snapshot_coop || '=') + */ this.snapshot()._toEQuery(sPath + 'snapshot.');\n\n\t\tif (this._action) ret += /*(this._action_coop || '=') + */ this.action()._toEQuery(sPath + 'action.');\n\n\t\t(this.actionInput_Variable_Values() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYVariable_Value.actionInput,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Input._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn new shs_arbfw_appd_Action_Input()._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Input._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Input._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromGlideRecord(obj) {\n\t\tif (!obj) return null;\n\t\tif (obj.isValidRecord()) {\n\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Action_Input\" != 'ecc_queue' && obj.source == \"shs_arbfw_appd_Action_Input\") {\n\t\t\t\tobj.state = \"processing\";\n\t\t\t\tobj.update();\n\n\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\tresp.queue = 'output';\n\t\t\t\tresp.agent = obj.agent;\n\t\t\t\tresp.topic = obj.topic;\n\t\t\t\tresp.name = obj.name;\n\t\t\t\tresp.source = obj.source;\n\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\tlet ret = new shs_arbfw_appd_Action_Input()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t});\n\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t}\n\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\tresp.insert();\n\n\t\t\t\tobj.state = \"processed\";\n\t\t\t\tobj.update();\n\t\t\t\treturn resp;\n\t\t\t} else {\n\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\ttype: obj.getValue(\"type\"),\n\n\t\t\t\t\tmandatory: obj.getValue(\"mandatory\"),\n\n\t\t\t\t\treference: obj.getValue(\"reference\"),\n\n\t\t\t\t\tflow: obj.getValue(\"flow\"),\n\n\t\t\t\t\tsnapshot: obj.getValue(\"snapshot\"),\n\n\t\t\t\t\taction: obj.getValue(\"action\"),\n\n\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tobj.query();\n\t\t\tlet grRet = [];\n\t\t\twhile (obj.next()) grRet.push(this._fromGlideRecord(obj));\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Action_Input._fromGlideRecord(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\treturn grRet;\n\t\t}\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\tundefined\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_appd_Action_Input()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\tif (/((([A-Za-z]{3,9}:(?:/ / ) ? )( ? : [-;: &= +$, w] + @) ? [A - Za - z0 - 9. - ] + | ( ? : www. | [-;: &= +$, w] + @)[A - Za - z0 - 9. - ] + )(( ? : /[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)/g.test(obj)) {\n\t\t\tvar msg = new sn_ws.RESTMessageV2();\n\t\t\tmsg.setEndpoint(obj);\n\t\t\tmsg.setRequestHeader('Content-Type', 'application/json');\n\t\t\tmsg.setHttpMethod('get');\n\t\t\treturn this._fromDocument(msg.execute().getBody());\n\t\t}\n\n\t\ttry {\n\t\t\tobj = JSON.parse(obj);\n\t\t} catch (ex) {\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Action_Input._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\tlet _obj = {\n\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))\n\t\t\t};\n\t\t\t_obj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(this))] = obj;\n\t\t\tobj = _obj;\n\t\t}\n\t\treturn this._fromDocument(obj);\n\t}\n\telse if (typeof(obj) === 'object') {\n\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\treturn this._fromGlideRecord(obj);\n\t\t} else if (obj._fromDocument) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Input._fromDocument(): \" + \"redundent call\");\n\t\t\treturn obj;\n\t\t} else if (Array.isArray(obj)) {\n\t\t\treturn obj.map(function(o) {\n\t\t\t\treturn new shs_arbfw_appd_Action_Input()._fromDocument(o)\n\t\t\t});\n\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(obj))));\n\n\t\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Action_Input._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.type) !== 'undefined') {\n\n\t\t\t\t\tthis.type(obj.type);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.mandatory) !== 'undefined') {\n\n\t\t\t\t\tthis.mandatory(obj.mandatory);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.reference) !== 'undefined') {\n\n\t\t\t\t\tthis.reference(new shs_arbfw_appd_Table()._fromDocument(obj.reference));\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.flow) !== 'undefined') {\n\n\t\t\t\t\tthis.flow(new shs_arbfw_appd_Flow()._fromDocument(obj.flow));\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.snapshot) !== 'undefined') {\n\n\t\t\t\t\tthis.snapshot(new shs_arbfw_appd_Flow_Snapshot()._fromDocument(obj.snapshot));\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.action) !== 'undefined') {\n\n\t\t\t\t\tthis.action(new shs_arbfw_appd_Action_Type()._fromDocument(obj.action));\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.actionInput_Variable_Values) !== 'undefined') this.actionInput_Variable_Values(new shs_arbfw_appd_Variable_Value()._fromDocument(obj.actionInput_Variable_Values));\n\n\t\t\t} else { // if(obj.constructor.name==\"Action_Input\"){\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Input._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t}\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Input._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\treturn null;\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Input._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Action_Input._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Action_Input._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\treturn this;\n}\n\n_insertAssert() {\n\treturn true;\n}\n\n_updateAssert() {\n\treturn true;\n}\n\n_storeAssert() {\n\treturn true;\n}\n\n_findAssert() {\n\treturn true;\n}\n\n_new(c) {\n\n\treturn new shs_arbfw_appd_Platform._new(c);\n\n}\n\n_toDocument(arFields) {\n\n\tlet ret = undefined || {};\n\n\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tret.active = this.active();\n\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tret.enabled = this.enabled();\n\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tret.code = this.code();\n\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tret.order = this.order();\n\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tret.date = this.date();\n\n\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tret.name = this.name();\n\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tret.remark = this.remark();\n\n\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t}\n\n\tif (typeof(this._type) !== 'undefined') {\n\t\tret.type = this.type();\n\n\t}\n\n\tif (typeof(this._mandatory) !== 'undefined') {\n\t\tret.mandatory = this.mandatory();\n\n\t}\n\n\tif (typeof(this._reference) !== 'undefined') {\n\t\tret.reference = this.reference();\n\n\t\tif (ret.reference) {\n\t\t\tret.reference = ret.reference._toDocument();\n\t\t\tif (typeof(ret.reference) === 'object' && !Object.keys(ret.reference).length) ret.reference = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this._flow) !== 'undefined') {\n\t\tret.flow = this.flow();\n\n\t\tif (ret.flow) {\n\t\t\tret.flow = ret.flow._toDocument();\n\t\t\tif (typeof(ret.flow) === 'object' && !Object.keys(ret.flow).length) ret.flow = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this._snapshot) !== 'undefined') {\n\t\tret.snapshot = this.snapshot();\n\n\t\tif (ret.snapshot) {\n\t\t\tret.snapshot = ret.snapshot._toDocument();\n\t\t\tif (typeof(ret.snapshot) === 'object' && !Object.keys(ret.snapshot).length) ret.snapshot = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this._action) !== 'undefined') {\n\t\tret.action = this.action();\n\n\t\tif (ret.action) {\n\t\t\tret.action = ret.action._toDocument();\n\t\t\tif (typeof(ret.action) === 'object' && !Object.keys(ret.action).length) ret.action = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this.actionInput_Variable_Values()) !== 'undefined') ret.actionInput_Variable_Values = this.actionInput_Variable_Values().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (typeof(this.__keys()) !== 'undefined') ret.__keys = this.__keys();\n\n\tif (typeof(this.length()) !== 'undefined') ret.length = this.length();\n\n\tif (typeof(this.Model_ID()) !== 'undefined') ret.Model_ID = this.Model_ID();\n\n\tif (typeof(this.Model_Table()) !== 'undefined') ret.Model_Table = this.Model_Table();\n\n\tif (typeof(this.Attributes()) !== 'undefined') ret.Attributes = this.Attributes();\n\n\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\treturn !arFields.find(function(_k) {\n\t\t\treturn _k == k;\n\t\t});\n\t}).forEach(function(k) {\n\t\tdelete ret[k];\n\t});\n\n\treturn ret;\n}\n\n_unique(keys, ret) {\n\tret = ret || new shs_arbfw_appd_Action_Input();\n\n\tundefined\n\n\t// if(this.Id) ret.Id = this.Id;\n\tif (!keys) {\n\n\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (typeof(this.flow()) !== 'undefined') ret.flow(this.flow()._unique());\n\n\t\tif (typeof(this.snapshot()) !== 'undefined') ret.snapshot(this.snapshot()._unique());\n\n\t\tif (typeof(this.action()) !== 'undefined') ret.action(this.action()._unique());\n\n\t} else {\n\n\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t\tif (keys.indexOf(\"type\") >= 0 && typeof(this.type()) !== 'undefined') ret.type(this.type());\n\n\t\tif (keys.indexOf(\"mandatory\") >= 0 && typeof(this.mandatory()) !== 'undefined') ret.mandatory(this.mandatory());\n\n\t\tif (keys.indexOf(\"reference\") >= 0 && typeof(this.reference()) !== 'undefined') ret.reference(this.reference()._unique());\n\n\t\tif (keys.indexOf(\"flow\") >= 0 && typeof(this.flow()) !== 'undefined') ret.flow(this.flow()._unique());\n\n\t\tif (keys.indexOf(\"snapshot\") >= 0 && typeof(this.snapshot()) !== 'undefined') ret.snapshot(this.snapshot()._unique());\n\n\t\tif (keys.indexOf(\"action\") >= 0 && typeof(this.action()) !== 'undefined') ret.action(this.action()._unique());\n\n\t}\n\n\treturn ret;\n}\n\n_query(gq) {\n\tlet arFields = Object.keys(global.Schema.of('sys_hub_action_input', ['*'])['sys_hub_action_input']);\n\n\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('sys_hub_action_input');\n\n\tundefined\n\n\tlet idf = ((function(r) {\n\t\tlet ret = 'sys_id';\n\t\tif (typeof(r.__idField) === 'function') {\n\t\t\tret = r.__idField();\n\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\tret = r.__idField || this.__idField();\n\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\tret = 'Id';\n\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\tret = 'sys_id';\n\t\t}\n\t\treturn ret;\n\t})(this));\n\tif (idf == 'Id') idf = 'sys_id';\n\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tlet coop = this._active_coop || '=';\n\n\t\tlet v = this.active();\n\n\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Action_Input._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tlet coop = this._enabled_coop || '=';\n\n\t\tlet v = this.enabled();\n\n\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Action_Input._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tlet coop = this._code_coop || '=';\n\n\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.code();\n\n\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Action_Input._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tlet coop = this._order_coop || '=';\n\n\t\tlet v = this.order();\n\n\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Action_Input._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tlet coop = this._date_coop || '=';\n\n\t\tlet v = this.date();\n\n\t\tif (v) {\n\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t}\n\n\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Action_Input._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tlet coop = this._name_coop || '=';\n\n\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.name();\n\n\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Action_Input._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tlet coop = this._remark_coop || '=';\n\n\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.remark();\n\n\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Action_Input._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._type) !== 'undefined') {\n\t\tlet coop = this._type_coop || '=';\n\n\t\tif (!this._type_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.type();\n\n\t\tif (arFields.indexOf('type') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Action_Input._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('type');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('type');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('type', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._mandatory) !== 'undefined') {\n\t\tlet coop = this._mandatory_coop || '=';\n\n\t\tlet v = this.mandatory();\n\n\t\tif (arFields.indexOf('mandatory') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Action_Input._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('mandatory');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('mandatory');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('mandatory', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._reference) !== 'undefined') {\n\t\tlet coop = this._reference_coop || '=';\n\n\t\tlet v = this.reference();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Action Input\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Action_Input._query(): \"+ \"reference \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Input._query(): \" + \"reference[reference] resuled in undefined: \" + JSON.stringify(this.reference()));\n\t\t}\n\n\t\tif (arFields.indexOf('reference') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Action_Input._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('reference');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('reference');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('reference', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._flow) !== 'undefined') {\n\t\tlet coop = this._flow_coop || '=';\n\n\t\tlet v = this.flow();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Action Input\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Action_Input._query(): \"+ \"flow \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Input._query(): \" + \"flow[flow] resuled in undefined: \" + JSON.stringify(this.flow()));\n\t\t}\n\n\t\tif (arFields.indexOf('flow') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Action_Input._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('flow');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('flow');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('flow', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._snapshot) !== 'undefined') {\n\t\tlet coop = this._snapshot_coop || '=';\n\n\t\tlet v = this.snapshot();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Action Input\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Action_Input._query(): \"+ \"snapshot \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Input._query(): \" + \"snapshot[snapshot] resuled in undefined: \" + JSON.stringify(this.snapshot()));\n\t\t}\n\n\t\tif (arFields.indexOf('snapshot') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Action_Input._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('snapshot');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('snapshot');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('snapshot', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._action) !== 'undefined') {\n\t\tlet coop = this._action_coop || '=';\n\n\t\tlet v = this.action();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Action Input\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Action_Input._query(): \"+ \"action \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Input._query(): \" + \"action[action] resuled in undefined: \" + JSON.stringify(this.action()));\n\t\t}\n\n\t\tif (arFields.indexOf('action') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Action_Input._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('action');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('action');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('action', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Action_Input._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\treturn this._queryGQ;\n}\n\n_save(obj) {\n\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\treturn new shs_arbfw_appd_Action_Input()._save(o)\n\t});\n\n\tlet _obj = {};\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Action_Input._save(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\tObject.keys(obj).filter(function(k) {\n\t\treturn Object.keys(global.Schema.of('sys_hub_action_input', ['*'])['sys_hub_action_input']).filter(function(_k) {\n\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t}).indexOf(k.toLowerCase()) >= 0\n\t}).forEach(function(k) {\n\t\t_obj[k.toLowerCase()] = obj[k]\n\t});\n\n\tObject.keys(_obj).forEach(function(k) {\n\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Input._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tdelete _obj[k];\n\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Input._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t}\n\t});\n\n\tlet _this = null;\n\tif (obj.__keys) {\n\t\tlet kObj = {};\n\t\tkObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(_obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))));\n\t\tobj.__keys.forEach(function(k) {\n\t\t\tkObj[k] = _obj[k]\n\t\t});\n\t\t_this = new shs_arbfw_appd_Action_Input()._fromDocument(kObj);\n\t} else {\n\t\t_this = new shs_arbfw_appd_Action_Input()._fromDocument(_obj)._unique();\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Action_Input._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\tdelete _obj.__idField;\n\n\ttry {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Input._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\tObject.keys(_obj).filter(function(k) {\n\t\t\treturn k.toLowerCase() != k;\n\t\t}).forEach(function(k) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Input._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tvar lk = k.toLowerCase();\n\t\t\t_obj[lk] = _obj[k];\n\t\t\tdelete _obj[k];\n\t\t});\n\n\t\tlet gq = new global.GlideQuery(obj.__type || 'sys_hub_action_input');\n\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Action_Input._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\tif (_obj.sys_id) {\n\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t} else {\n\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\tgq = gq.insert(_obj);\n\t\t}\n\t\tlet _fObj = {};\n\t\t_fObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))));\n\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('sys_hub_action_input', ['*'])['sys_hub_action_input']))));\n\t} catch (ex) {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Input._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Input._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\treturn this;\n\t}\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Input._save(): \" + \"obj.actionInput_Variable_Values: \" + JSON.stringify(obj.actionInput_Variable_Values, null, 4));\n\tif (Array.isArray(obj.actionInput_Variable_Values)) this.actionInput_Variable_Values(obj.actionInput_Variable_Values.map(function(ta) {\n\t\treturn new shs_arbfw_appd_Variable_Value()._save(ta)\n\t}));\n\n\treturn this;\n}\n\n/************* Action_Input.store() **********************/\nstore(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Input.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Input.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Input.store(): \" + \"executing locally \");\n\n\t\t// store locally\n\t\treturn this._save(this._toDocument());\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Action_Input.findAll() **********************/\nfindAll(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Input.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Input.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Input.findAll(): \" + \"executing locally \");\n\n\t\t// findAll locally\n\t\tlet gr = new GlideRecord('sys_hub_action_input');\n\t\tgr.addEncodedQuery(this._toEQuery());\n\t\treturn this._fromDocument(gr);\n\n\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('sys_hub_action_input', ['*'])['sys_hub_action_input'])));\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Action_Input.find() **********************/\nfind(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Input.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Input.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Input.find(): \" + \"executing locally \");\n\n\t\tlet ret = this.findAll();\n\t\treturn ret.length ? ret[0] : null;\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"scriptFile_Script_Compatibilitys":[{"active":true,"enabled":true}],"client_callable":true,"sys_name":"shs_arbfw_appd_Flow_Snapshot","api_name":"x_1790593_arboard.shs_arbfw_appd_Flow_Snapshot","name":"shs_arbfw_appd_Flow_Snapshot","script":"class shs_arbfw_appd_Flow_Snapshot extends global.AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"Application Designer\";\n\t\tthis.__type = \"shs_arbfw_appd_Flow_Snapshot\";\n\t\tthis.__alias = \"shs_arbfw_appd\";\n\t\tthis.__scope = \"shs_arbfw\";\n\t}\n\n\t/************* Flow_Snapshot.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Flow_Snapshot.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Flow_Snapshot.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Flow_Snapshot.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Flow_Snapshot.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Snapshot.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Flow_Snapshot.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Flow_Snapshot.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Flow_Snapshot.flow GETTERS AND SETTERS **********************/\n\tflow(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._flow = v;\n\t\t\tthis._flow_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._flow;\n\t\t}\n\t}\n\n\t/************* Flow_Snapshot.block GETTERS AND SETTERS **********************/\n\tblock(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._block = v;\n\t\t\tthis._block_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._block;\n\t\t}\n\t}\n\n\t/************* Flow_Snapshot.application GETTERS AND SETTERS **********************/\n\tapplication(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._application = v;\n\t\t\tthis._application_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._application;\n\t\t}\n\t}\n\n\t/************* Flow_Snapshot.snapshot_Flow_Inputs GETTERS AND SETTERS **********************/\n\tsnapshot_Flow_Inputs(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._snapshot_Flow_Inputs = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._snapshot_Flow_Inputs_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._snapshot_Flow_Inputs;\n\t\t}\n\t}\n\n\t/************* Flow_Snapshot.snapshot_Flow_Outputs GETTERS AND SETTERS **********************/\n\tsnapshot_Flow_Outputs(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._snapshot_Flow_Outputs = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._snapshot_Flow_Outputs_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._snapshot_Flow_Outputs;\n\t\t}\n\t}\n\n\t/************* Flow_Snapshot.snapshot_Flow_Variables GETTERS AND SETTERS **********************/\n\tsnapshot_Flow_Variables(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._snapshot_Flow_Variables = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._snapshot_Flow_Variables_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._snapshot_Flow_Variables;\n\t\t}\n\t}\n\n\t/************* Flow_Snapshot.snapshot_Flow_Logics GETTERS AND SETTERS **********************/\n\tsnapshot_Flow_Logics(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._snapshot_Flow_Logics = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._snapshot_Flow_Logics_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._snapshot_Flow_Logics;\n\t\t}\n\t}\n\n\t/************* Flow_Snapshot.snapshot_Flow_Instances GETTERS AND SETTERS **********************/\n\tsnapshot_Flow_Instances(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._snapshot_Flow_Instances = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._snapshot_Flow_Instances_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._snapshot_Flow_Instances;\n\t\t}\n\t}\n\n\t/************* Flow_Snapshot.snapshot_Action_Inputs GETTERS AND SETTERS **********************/\n\tsnapshot_Action_Inputs(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._snapshot_Action_Inputs = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._snapshot_Action_Inputs_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._snapshot_Action_Inputs;\n\t\t}\n\t}\n\n\t/************* Flow_Snapshot.snapshot_Flow_Plans GETTERS AND SETTERS **********************/\n\tsnapshot_Flow_Plans(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._snapshot_Flow_Plans = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._snapshot_Flow_Plans_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._snapshot_Flow_Plans;\n\t\t}\n\t}\n\n\t/************* Flow_Snapshot.snapshot_Flow_Data_Variables GETTERS AND SETTERS **********************/\n\tsnapshot_Flow_Data_Variables(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._snapshot_Flow_Data_Variables = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._snapshot_Flow_Data_Variables_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._snapshot_Flow_Data_Variables;\n\t\t}\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = undefined || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\tif (this._flow) ret += /*(this._flow_coop || '=') + */ this.flow()._toEQuery(sPath + 'flow.');\n\n\t\tif (this._block) ret += /*(this._block_coop || '=') + */ this.block()._toEQuery(sPath + 'block.');\n\n\t\tif (this._application) ret += /*(this._application_coop || '=') + */ this.application()._toEQuery(sPath + 'application.');\n\n\t\t(this.snapshot_Flow_Inputs() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYFlow_Input.snapshot,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(this.snapshot_Flow_Outputs() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYFlow_Output.snapshot,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(this.snapshot_Flow_Variables() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYFlow_Variable.snapshot,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(this.snapshot_Flow_Logics() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYFlow_Logic.snapshot,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(this.snapshot_Flow_Instances() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYFlow_Instance.snapshot,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(this.snapshot_Action_Inputs() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYAction_Input.snapshot,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(this.snapshot_Flow_Plans() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYFlow_Plan.snapshot,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(this.snapshot_Flow_Data_Variables() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYFlow_Data_Variable.snapshot,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Snapshot._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn new shs_arbfw_appd_Flow_Snapshot()._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Snapshot._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tcase \"fromFlow\": {\n\t\t\t\treturn this.fromFlow(payload[\"flow\"], );\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Snapshot._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromGlideRecord(obj) {\n\t\tif (!obj) return null;\n\t\tif (obj.isValidRecord()) {\n\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Flow_Snapshot\" != 'ecc_queue' && obj.source == \"shs_arbfw_appd_Flow_Snapshot\") {\n\t\t\t\tobj.state = \"processing\";\n\t\t\t\tobj.update();\n\n\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\tresp.queue = 'output';\n\t\t\t\tresp.agent = obj.agent;\n\t\t\t\tresp.topic = obj.topic;\n\t\t\t\tresp.name = obj.name;\n\t\t\t\tresp.source = obj.source;\n\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\tlet ret = new shs_arbfw_appd_Flow_Snapshot()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t});\n\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t}\n\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\tresp.insert();\n\n\t\t\t\tobj.state = \"processed\";\n\t\t\t\tobj.update();\n\t\t\t\treturn resp;\n\t\t\t} else {\n\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\tflow: obj.getValue(\"flow\"),\n\n\t\t\t\t\tblock: obj.getValue(\"block\"),\n\n\t\t\t\t\tapplication: obj.getValue(\"application\"),\n\n\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tobj.query();\n\t\t\tlet grRet = [];\n\t\t\twhile (obj.next()) grRet.push(this._fromGlideRecord(obj));\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Snapshot._fromGlideRecord(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\treturn grRet;\n\t\t}\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\tundefined\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_appd_Flow_Snapshot()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\tif (/((([A-Za-z]{3,9}:(?:/ / ) ? )( ? : [-;: &= +$, w] + @) ? [A - Za - z0 - 9. - ] + | ( ? : www. | [-;: &= +$, w] + @)[A - Za - z0 - 9. - ] + )(( ? : /[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)/g.test(obj)) {\n\t\t\tvar msg = new sn_ws.RESTMessageV2();\n\t\t\tmsg.setEndpoint(obj);\n\t\t\tmsg.setRequestHeader('Content-Type', 'application/json');\n\t\t\tmsg.setHttpMethod('get');\n\t\t\treturn this._fromDocument(msg.execute().getBody());\n\t\t}\n\n\t\ttry {\n\t\t\tobj = JSON.parse(obj);\n\t\t} catch (ex) {\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Snapshot._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\tlet _obj = {\n\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))\n\t\t\t};\n\t\t\t_obj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(this))] = obj;\n\t\t\tobj = _obj;\n\t\t}\n\t\treturn this._fromDocument(obj);\n\t}\n\telse if (typeof(obj) === 'object') {\n\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\treturn this._fromGlideRecord(obj);\n\t\t} else if (obj._fromDocument) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Snapshot._fromDocument(): \" + \"redundent call\");\n\t\t\treturn obj;\n\t\t} else if (Array.isArray(obj)) {\n\t\t\treturn obj.map(function(o) {\n\t\t\t\treturn new shs_arbfw_appd_Flow_Snapshot()._fromDocument(o)\n\t\t\t});\n\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(obj))));\n\n\t\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Snapshot._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.flow) !== 'undefined') {\n\n\t\t\t\t\tthis.flow(new shs_arbfw_appd_Flow()._fromDocument(obj.flow));\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.block) !== 'undefined') {\n\n\t\t\t\t\tthis.block(new shs_arbfw_appd_Flow_Block()._fromDocument(obj.block));\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.application) !== 'undefined') {\n\n\t\t\t\t\tthis.application(new shs_arbfw_appd_Application()._fromDocument(obj.application));\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.snapshot_Flow_Inputs) !== 'undefined') this.snapshot_Flow_Inputs(new shs_arbfw_appd_Flow_Input()._fromDocument(obj.snapshot_Flow_Inputs));\n\n\t\t\t\tif (typeof(obj.snapshot_Flow_Outputs) !== 'undefined') this.snapshot_Flow_Outputs(new shs_arbfw_appd_Flow_Output()._fromDocument(obj.snapshot_Flow_Outputs));\n\n\t\t\t\tif (typeof(obj.snapshot_Flow_Variables) !== 'undefined') this.snapshot_Flow_Variables(new shs_arbfw_appd_Flow_Variable()._fromDocument(obj.snapshot_Flow_Variables));\n\n\t\t\t\tif (typeof(obj.snapshot_Flow_Logics) !== 'undefined') this.snapshot_Flow_Logics(new shs_arbfw_appd_Flow_Logic()._fromDocument(obj.snapshot_Flow_Logics));\n\n\t\t\t\tif (typeof(obj.snapshot_Flow_Instances) !== 'undefined') this.snapshot_Flow_Instances(new shs_arbfw_appd_Flow_Instance()._fromDocument(obj.snapshot_Flow_Instances));\n\n\t\t\t\tif (typeof(obj.snapshot_Action_Inputs) !== 'undefined') this.snapshot_Action_Inputs(new shs_arbfw_appd_Action_Input()._fromDocument(obj.snapshot_Action_Inputs));\n\n\t\t\t\tif (typeof(obj.snapshot_Flow_Plans) !== 'undefined') this.snapshot_Flow_Plans(new shs_arbfw_appd_Flow_Plan()._fromDocument(obj.snapshot_Flow_Plans));\n\n\t\t\t\tif (typeof(obj.snapshot_Flow_Data_Variables) !== 'undefined') this.snapshot_Flow_Data_Variables(new shs_arbfw_appd_Flow_Data_Variable()._fromDocument(obj.snapshot_Flow_Data_Variables));\n\n\t\t\t} else { // if(obj.constructor.name==\"Flow_Snapshot\"){\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Snapshot._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t}\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Snapshot._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\treturn null;\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Snapshot._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Snapshot._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Snapshot._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\treturn this;\n}\n\n_insertAssert() {\n\treturn true;\n}\n\n_updateAssert() {\n\treturn true;\n}\n\n_storeAssert() {\n\treturn true;\n}\n\n_findAssert() {\n\treturn true;\n}\n\n_new(c) {\n\n\treturn new shs_arbfw_appd_Platform._new(c);\n\n}\n\n_toDocument(arFields) {\n\n\tlet ret = undefined || {};\n\n\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tret.active = this.active();\n\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tret.enabled = this.enabled();\n\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tret.code = this.code();\n\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tret.order = this.order();\n\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tret.date = this.date();\n\n\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tret.name = this.name();\n\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tret.remark = this.remark();\n\n\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t}\n\n\tif (typeof(this._flow) !== 'undefined') {\n\t\tret.flow = this.flow();\n\n\t\tif (ret.flow) {\n\t\t\tret.flow = ret.flow._toDocument();\n\t\t\tif (typeof(ret.flow) === 'object' && !Object.keys(ret.flow).length) ret.flow = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this._block) !== 'undefined') {\n\t\tret.block = this.block();\n\n\t\tif (ret.block) {\n\t\t\tret.block = ret.block._toDocument();\n\t\t\tif (typeof(ret.block) === 'object' && !Object.keys(ret.block).length) ret.block = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this._application) !== 'undefined') {\n\t\tret.application = this.application();\n\n\t\tif (ret.application) {\n\t\t\tret.application = ret.application._toDocument();\n\t\t\tif (typeof(ret.application) === 'object' && !Object.keys(ret.application).length) ret.application = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this.snapshot_Flow_Inputs()) !== 'undefined') ret.snapshot_Flow_Inputs = this.snapshot_Flow_Inputs().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (typeof(this.snapshot_Flow_Outputs()) !== 'undefined') ret.snapshot_Flow_Outputs = this.snapshot_Flow_Outputs().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (typeof(this.snapshot_Flow_Variables()) !== 'undefined') ret.snapshot_Flow_Variables = this.snapshot_Flow_Variables().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (typeof(this.snapshot_Flow_Logics()) !== 'undefined') ret.snapshot_Flow_Logics = this.snapshot_Flow_Logics().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (typeof(this.snapshot_Flow_Instances()) !== 'undefined') ret.snapshot_Flow_Instances = this.snapshot_Flow_Instances().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (typeof(this.snapshot_Action_Inputs()) !== 'undefined') ret.snapshot_Action_Inputs = this.snapshot_Action_Inputs().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (typeof(this.snapshot_Flow_Plans()) !== 'undefined') ret.snapshot_Flow_Plans = this.snapshot_Flow_Plans().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (typeof(this.snapshot_Flow_Data_Variables()) !== 'undefined') ret.snapshot_Flow_Data_Variables = this.snapshot_Flow_Data_Variables().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\treturn !arFields.find(function(_k) {\n\t\t\treturn _k == k;\n\t\t});\n\t}).forEach(function(k) {\n\t\tdelete ret[k];\n\t});\n\n\treturn ret;\n}\n\n_unique(keys, ret) {\n\tret = ret || new shs_arbfw_appd_Flow_Snapshot();\n\n\tundefined\n\n\t// if(this.Id) ret.Id = this.Id;\n\tif (!keys) {\n\n\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (typeof(this.application()) !== 'undefined') ret.application(this.application()._unique());\n\n\t} else {\n\n\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t\tif (keys.indexOf(\"flow\") >= 0 && typeof(this.flow()) !== 'undefined') ret.flow(this.flow()._unique());\n\n\t\tif (keys.indexOf(\"block\") >= 0 && typeof(this.block()) !== 'undefined') ret.block(this.block()._unique());\n\n\t\tif (keys.indexOf(\"application\") >= 0 && typeof(this.application()) !== 'undefined') ret.application(this.application()._unique());\n\n\t}\n\n\treturn ret;\n}\n\n_query(gq) {\n\tlet arFields = Object.keys(global.Schema.of('sys_hub_flow_snapshot', ['*'])['sys_hub_flow_snapshot']);\n\n\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('sys_hub_flow_snapshot');\n\n\tundefined\n\n\tlet idf = ((function(r) {\n\t\tlet ret = 'sys_id';\n\t\tif (typeof(r.__idField) === 'function') {\n\t\t\tret = r.__idField();\n\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\tret = r.__idField || this.__idField();\n\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\tret = 'Id';\n\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\tret = 'sys_id';\n\t\t}\n\t\treturn ret;\n\t})(this));\n\tif (idf == 'Id') idf = 'sys_id';\n\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tlet coop = this._active_coop || '=';\n\n\t\tlet v = this.active();\n\n\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Snapshot._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tlet coop = this._enabled_coop || '=';\n\n\t\tlet v = this.enabled();\n\n\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Snapshot._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tlet coop = this._code_coop || '=';\n\n\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.code();\n\n\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Snapshot._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tlet coop = this._order_coop || '=';\n\n\t\tlet v = this.order();\n\n\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Snapshot._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tlet coop = this._date_coop || '=';\n\n\t\tlet v = this.date();\n\n\t\tif (v) {\n\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t}\n\n\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Snapshot._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tlet coop = this._name_coop || '=';\n\n\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.name();\n\n\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Snapshot._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tlet coop = this._remark_coop || '=';\n\n\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.remark();\n\n\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Snapshot._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._flow) !== 'undefined') {\n\t\tlet coop = this._flow_coop || '=';\n\n\t\tlet v = this.flow();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Flow Snapshot\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Snapshot._query(): \"+ \"flow \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Snapshot._query(): \" + \"flow[flow] resuled in undefined: \" + JSON.stringify(this.flow()));\n\t\t}\n\n\t\tif (arFields.indexOf('flow') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Snapshot._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('flow');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('flow');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('flow', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._block) !== 'undefined') {\n\t\tlet coop = this._block_coop || '=';\n\n\t\tlet v = this.block();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Flow Snapshot\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Snapshot._query(): \"+ \"block \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Snapshot._query(): \" + \"block[block] resuled in undefined: \" + JSON.stringify(this.block()));\n\t\t}\n\n\t\tif (arFields.indexOf('block') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Snapshot._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('block');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('block');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('block', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._application) !== 'undefined') {\n\t\tlet coop = this._application_coop || '=';\n\n\t\tlet v = this.application();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Flow Snapshot\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Snapshot._query(): \"+ \"application \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Snapshot._query(): \" + \"application[application] resuled in undefined: \" + JSON.stringify(this.application()));\n\t\t}\n\n\t\tif (arFields.indexOf('application') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Snapshot._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('application');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('application');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('application', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Snapshot._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\treturn this._queryGQ;\n}\n\n_save(obj) {\n\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\treturn new shs_arbfw_appd_Flow_Snapshot()._save(o)\n\t});\n\n\tlet _obj = {};\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Snapshot._save(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\tObject.keys(obj).filter(function(k) {\n\t\treturn Object.keys(global.Schema.of('sys_hub_flow_snapshot', ['*'])['sys_hub_flow_snapshot']).filter(function(_k) {\n\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t}).indexOf(k.toLowerCase()) >= 0\n\t}).forEach(function(k) {\n\t\t_obj[k.toLowerCase()] = obj[k]\n\t});\n\n\tObject.keys(_obj).forEach(function(k) {\n\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Snapshot._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tdelete _obj[k];\n\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Snapshot._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t}\n\t});\n\n\tlet _this = null;\n\tif (obj.__keys) {\n\t\tlet kObj = {};\n\t\tkObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(_obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))));\n\t\tobj.__keys.forEach(function(k) {\n\t\t\tkObj[k] = _obj[k]\n\t\t});\n\t\t_this = new shs_arbfw_appd_Flow_Snapshot()._fromDocument(kObj);\n\t} else {\n\t\t_this = new shs_arbfw_appd_Flow_Snapshot()._fromDocument(_obj)._unique();\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Snapshot._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\tdelete _obj.__idField;\n\n\ttry {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Snapshot._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\tObject.keys(_obj).filter(function(k) {\n\t\t\treturn k.toLowerCase() != k;\n\t\t}).forEach(function(k) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Snapshot._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tvar lk = k.toLowerCase();\n\t\t\t_obj[lk] = _obj[k];\n\t\t\tdelete _obj[k];\n\t\t});\n\n\t\tlet gq = new global.GlideQuery(obj.__type || 'sys_hub_flow_snapshot');\n\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Snapshot._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\tif (_obj.sys_id) {\n\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t} else {\n\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\tgq = gq.insert(_obj);\n\t\t}\n\t\tlet _fObj = {};\n\t\t_fObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))));\n\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('sys_hub_flow_snapshot', ['*'])['sys_hub_flow_snapshot']))));\n\t} catch (ex) {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Snapshot._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Snapshot._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\treturn this;\n\t}\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Snapshot._save(): \" + \"obj.snapshot_Flow_Inputs: \" + JSON.stringify(obj.snapshot_Flow_Inputs, null, 4));\n\tif (Array.isArray(obj.snapshot_Flow_Inputs)) this.snapshot_Flow_Inputs(obj.snapshot_Flow_Inputs.map(function(ta) {\n\t\treturn new shs_arbfw_appd_Flow_Input()._save(ta)\n\t}));\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Snapshot._save(): \" + \"obj.snapshot_Flow_Outputs: \" + JSON.stringify(obj.snapshot_Flow_Outputs, null, 4));\n\tif (Array.isArray(obj.snapshot_Flow_Outputs)) this.snapshot_Flow_Outputs(obj.snapshot_Flow_Outputs.map(function(ta) {\n\t\treturn new shs_arbfw_appd_Flow_Output()._save(ta)\n\t}));\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Snapshot._save(): \" + \"obj.snapshot_Flow_Variables: \" + JSON.stringify(obj.snapshot_Flow_Variables, null, 4));\n\tif (Array.isArray(obj.snapshot_Flow_Variables)) this.snapshot_Flow_Variables(obj.snapshot_Flow_Variables.map(function(ta) {\n\t\treturn new shs_arbfw_appd_Flow_Variable()._save(ta)\n\t}));\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Snapshot._save(): \" + \"obj.snapshot_Flow_Logics: \" + JSON.stringify(obj.snapshot_Flow_Logics, null, 4));\n\tif (Array.isArray(obj.snapshot_Flow_Logics)) this.snapshot_Flow_Logics(obj.snapshot_Flow_Logics.map(function(ta) {\n\t\treturn new shs_arbfw_appd_Flow_Logic()._save(ta)\n\t}));\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Snapshot._save(): \" + \"obj.snapshot_Flow_Instances: \" + JSON.stringify(obj.snapshot_Flow_Instances, null, 4));\n\tif (Array.isArray(obj.snapshot_Flow_Instances)) this.snapshot_Flow_Instances(obj.snapshot_Flow_Instances.map(function(ta) {\n\t\treturn new shs_arbfw_appd_Flow_Instance()._save(ta)\n\t}));\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Snapshot._save(): \" + \"obj.snapshot_Action_Inputs: \" + JSON.stringify(obj.snapshot_Action_Inputs, null, 4));\n\tif (Array.isArray(obj.snapshot_Action_Inputs)) this.snapshot_Action_Inputs(obj.snapshot_Action_Inputs.map(function(ta) {\n\t\treturn new shs_arbfw_appd_Action_Input()._save(ta)\n\t}));\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Snapshot._save(): \" + \"obj.snapshot_Flow_Plans: \" + JSON.stringify(obj.snapshot_Flow_Plans, null, 4));\n\tif (Array.isArray(obj.snapshot_Flow_Plans)) this.snapshot_Flow_Plans(obj.snapshot_Flow_Plans.map(function(ta) {\n\t\treturn new shs_arbfw_appd_Flow_Plan()._save(ta)\n\t}));\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Snapshot._save(): \" + \"obj.snapshot_Flow_Data_Variables: \" + JSON.stringify(obj.snapshot_Flow_Data_Variables, null, 4));\n\tif (Array.isArray(obj.snapshot_Flow_Data_Variables)) this.snapshot_Flow_Data_Variables(obj.snapshot_Flow_Data_Variables.map(function(ta) {\n\t\treturn new shs_arbfw_appd_Flow_Data_Variable()._save(ta)\n\t}));\n\n\treturn this;\n}\n\n/************* Flow_Snapshot.store() **********************/\nstore(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Snapshot.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Snapshot.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Snapshot.store(): \" + \"executing locally \");\n\n\t\t// store locally\n\t\treturn this._save(this._toDocument());\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Flow_Snapshot.findAll() **********************/\nfindAll(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Snapshot.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Snapshot.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Snapshot.findAll(): \" + \"executing locally \");\n\n\t\t// findAll locally\n\t\tlet gr = new GlideRecord('sys_hub_flow_snapshot');\n\t\tgr.addEncodedQuery(this._toEQuery());\n\t\treturn this._fromDocument(gr);\n\n\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('sys_hub_flow_snapshot', ['*'])['sys_hub_flow_snapshot'])));\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Flow_Snapshot.find() **********************/\nfind(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Snapshot.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Snapshot.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Snapshot.find(): \" + \"executing locally \");\n\n\t\tlet ret = this.findAll();\n\t\treturn ret.length ? ret[0] : null;\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Flow_Snapshot.fromFlow() **********************/\nfromFlow(__event, flow) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (typeof(evJSON.flow) !== 'undefined') {\n\t\t\tflow = evJSON.flow;\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Snapshot.fromFlow(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Snapshot.fromFlow(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = evJSON;\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Snapshot.fromFlow(): \" + \"executing locally \");\n\n\t\tif (typeof(this.getParameter) === 'function' && typeof(flow) === 'undefined' && typeof(this.getParameter('flow')) !== 'undefined') {\n\t\t\tflow = this.getParameter('flow');\n\t\t}\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(str(answer));\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"scriptFile_Script_Compatibilitys":[{"active":true,"enabled":true}],"client_callable":true,"sys_name":"shs_arbfw_appd_Flow_Input","api_name":"x_1790593_arboard.shs_arbfw_appd_Flow_Input","name":"shs_arbfw_appd_Flow_Input","script":"class shs_arbfw_appd_Flow_Input extends global.AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"Application Designer\";\n\t\tthis.__type = \"shs_arbfw_appd_Flow_Input\";\n\t\tthis.__alias = \"shs_arbfw_appd\";\n\t\tthis.__scope = \"shs_arbfw\";\n\t}\n\n\t/************* Flow_Input.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Flow_Input.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Flow_Input.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Flow_Input.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Flow_Input.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Input.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Flow_Input.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Flow_Input.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Flow_Input.type GETTERS AND SETTERS **********************/\n\ttype(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._type = v;\n\t\t\tthis._type_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._type;\n\t\t}\n\t}\n\n\t/************* Flow_Input.mandatory GETTERS AND SETTERS **********************/\n\tmandatory(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._mandatory = v;\n\t\t\tthis._mandatory_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._mandatory;\n\t\t}\n\t}\n\n\t/************* Flow_Input.reference GETTERS AND SETTERS **********************/\n\treference(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._reference = v;\n\t\t\tthis._reference_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._reference;\n\t\t}\n\t}\n\n\t/************* Flow_Input.flow GETTERS AND SETTERS **********************/\n\tflow(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._flow = v;\n\t\t\tthis._flow_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._flow;\n\t\t}\n\t}\n\n\t/************* Flow_Input.snapshot GETTERS AND SETTERS **********************/\n\tsnapshot(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._snapshot = v;\n\t\t\tthis._snapshot_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._snapshot;\n\t\t}\n\t}\n\n\t/************* Flow_Input.input_Field_Labels GETTERS AND SETTERS **********************/\n\tinput_Field_Labels(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._input_Field_Labels = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._input_Field_Labels_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._input_Field_Labels;\n\t\t}\n\t}\n\n\t/************* Flow_Input.flowInput_Variable_Values GETTERS AND SETTERS **********************/\n\tflowInput_Variable_Values(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._flowInput_Variable_Values = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._flowInput_Variable_Values_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._flowInput_Variable_Values;\n\t\t}\n\t}\n\n\t/************* Flow_Input.__keys EF: GETTERS AND SETTERS **********************/\n\t__keys() {\n\t\treturn /*this.ef___keys = */ ((\n\t\t\tfunction() {\n\t\t\t\ttry {\n\n\t\t\t\t\tlet __ret = undefined;\n\n\t\t\t\t\t__ret = [\"element\", \"model_id\"];\n\n\t\t\t\t\tif (typeof(__ret) === 'string' && __ret.startsWith(\"s(\") && __ret.endsWith(\")\")) {\n\t\t\t\t\t\t__ret = this.runScript(__ret.slice(2, -1));\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof(__ret) === \"function\") {\n\t\t\t\t\t\t__ret = __ret(this);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn __ret;\n\n\t\t\t\t} catch (_vOfEx) {\n\t\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Input.__keys(): \" + 'valueOf', _vOfEx, JSON.parse(((typeof(this) !== \"undefined\" && typeof(this._atob) !== \"undefined\") ? this._atob : (typeof(_FrEMD) !== \"undefined\" ? _FrEMD._atob : atob))(`eyJTZXJ2aWNlTm93IjpbImVsZW1lbnQiLCJtb2RlbF9pZCJdfQ==`), (key, value) => {\n\t\t\t\t\t\tif (typeof(value) === \"string\" && value.indexOf(\"=>\") > 0) return eval(\"(\" + value + \")\");\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t}\n\t\t)());\n\t}\n\n\t/************* Flow_Input.length EF: GETTERS AND SETTERS **********************/\n\tlength() {\n\t\treturn /*this.ef_length = */ ((\n\t\t\tfunction() {\n\t\t\t\ttry {\n\n\t\t\t\t\tlet __ret = undefined;\n\n\t\t\t\t\t__ret = () => ({\n\t\t\t\t\t\t\"String\": 255,\n\t\t\t\t\t\t\"Text\": 4000,\n\t\t\t\t\t})[this.type()];\n\n\t\t\t\t\tif (typeof(__ret) === 'string' && __ret.startsWith(\"s(\") && __ret.endsWith(\")\")) {\n\t\t\t\t\t\t__ret = this.runScript(__ret.slice(2, -1));\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof(__ret) === \"function\") {\n\t\t\t\t\t\t__ret = __ret(this);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn __ret;\n\n\t\t\t\t} catch (_vOfEx) {\n\t\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Input.length(): \" + 'valueOf', _vOfEx, JSON.parse(((typeof(this) !== \"undefined\" && typeof(this._atob) !== \"undefined\") ? this._atob : (typeof(_FrEMD) !== \"undefined\" ? _FrEMD._atob : atob))(`eyJTZXJ2aWNlTm93IjoiKCkgPT4gKHtcblx0XHRcdFx0XCJTdHJpbmdcIjogMjU1LFxuXHRcdFx0XHRcIlRleHRcIjogNDAwMCxcblx0XHRcdH0pW3RoaXMudHlwZSgpXSJ9`), (key, value) => {\n\t\t\t\t\t\tif (typeof(value) === \"string\" && value.indexOf(\"=>\") > 0) return eval(\"(\" + value + \")\");\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t}\n\t\t)());\n\t}\n\n\t/************* Flow_Input.Model_Table EF: GETTERS AND SETTERS **********************/\n\tModel_Table() {\n\t\treturn /*this.ef_Model_Table = */ ((\n\t\t\tfunction() {\n\t\t\t\ttry {\n\n\t\t\t\t\tlet __ret = undefined;\n\n\t\t\t\t\tif (typeof(__ret) === 'string' && __ret.startsWith(\"s(\") && __ret.endsWith(\")\")) {\n\t\t\t\t\t\t__ret = this.runScript(__ret.slice(2, -1));\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof(__ret) === \"function\") {\n\t\t\t\t\t\t__ret = __ret(this);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn __ret;\n\n\t\t\t\t} catch (_vOfEx) {\n\t\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Input.Model_Table(): \" + 'valueOf', _vOfEx, JSON.parse(((typeof(this) !== \"undefined\" && typeof(this._atob) !== \"undefined\") ? this._atob : (typeof(_FrEMD) !== \"undefined\" ? _FrEMD._atob : atob))(`eyJTZXJ2aWNlTm93IjoiPDxzKCh7c3lzX2h1Yl9mbG93OiAnc3lzX2h1Yl9mbG93Jywgc3lzX2h1Yl9mbG93X3NuYXBzaG90OiAnc3lzX2h1Yl9mbG93X3NuYXBzaG90Jywgc3lzX3ZhcmlhYmxlX3ZhbHVlOiAnc3lzX2h1Yl9mbG93Jywgc3lzX2h1Yl9zdWJfZmxvd19pbnN0YW5jZTogJ3N5c19odWJfZmxvd19sb2dpY19leHRfaW5wdXQnLCBzeXNfaHViX2FjdGlvbl9pbnN0YW5jZTogJ3N5c19odWJfZmxvdyd9KVt7e3BwYXRofX0uX190eXBlXSk+PiIsIl9TZXJ2aWNlTm93IjoiPDwkZXhpc3RzKCoqW2Zsb3dfRmxvd19JbnB1dHNbbW9kZWxfdGFibGU9J3t7aWR9fSddIG9yIGZsb3dfRmxvd19PdXRwdXRzW21vZGVsX3RhYmxlPSd7e2lkfX0nXSBvciBmbG93X0Zsb3dfVmFyaWFibGVzW21vZGVsX3RhYmxlPSd7e2lkfX0nXV0pPydzeXNfaHViX2Zsb3cnOigkZXhpc3RzKCoqW3NuYXBzaG90X0Zsb3dfSW5wdXRzW21vZGVsX3RhYmxlPSd7e2lkfX0nXSBvciBzbmFwc2hvdF9GbG93X091dHB1dHNbbW9kZWxfdGFibGU9J3t7aWR9fSddIG9yIHNuYXBzaG90X0Zsb3dfVmFyaWFibGVzW21vZGVsX3RhYmxlPSd7e2lkfX0nXV0pPydzeXNfaHViX2Zsb3dfc25hcHNob3QnOigkZXhpc3RzKCoqW2luc3RhbmNlX0Zsb3dfSW5zdGFuY2VfSW5wdXRzW21vZGVsX3RhYmxlPSd7e2lkfX0nXV0pPydzeXNfaHViX2Zsb3dfbG9naWNfZXh0X2lucHV0JzooJGV4aXN0cygqKlthY3Rpb25fVmFyaWFibGVfVmFsdWVzW2FjdGlvbklucHV0W21vZGVsX3RhYmxlPSd7e2lkfX0nXV1dIG9yICoqW2luc3RhbmNlX1ZhcmlhYmxlX1ZhbHVlc1tmbG93SW5wdXRbbW9kZWxfdGFibGU9J3t7aWR9fSddXV0pPydzeXNfaHViX2Zsb3cnOicnKSkpPj4ifQ==`), (key, value) => {\n\t\t\t\t\t\tif (typeof(value) === \"string\" && value.indexOf(\"=>\") > 0) return eval(\"(\" + value + \")\");\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t}\n\t\t)());\n\t}\n\n\t/************* Flow_Input.Model_ID EF: GETTERS AND SETTERS **********************/\n\tModel_ID() {\n\t\treturn /*this.ef_Model_ID = */ ((\n\t\t\tfunction() {\n\t\t\t\ttry {\n\n\t\t\t\t\tlet __ret = undefined;\n\n\t\t\t\t\tif (typeof(__ret) === 'string' && __ret.startsWith(\"s(\") && __ret.endsWith(\")\")) {\n\t\t\t\t\t\t__ret = this.runScript(__ret.slice(2, -1));\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof(__ret) === \"function\") {\n\t\t\t\t\t\t__ret = __ret(this);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn __ret;\n\n\t\t\t\t} catch (_vOfEx) {\n\t\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Input.Model_ID(): \" + 'valueOf', _vOfEx, JSON.parse(((typeof(this) !== \"undefined\" && typeof(this._atob) !== \"undefined\") ? this._atob : (typeof(_FrEMD) !== \"undefined\" ? _FrEMD._atob : atob))(`eyJTZXJ2aWNlTm93IjoiPDxzKCh7e3BwYXRofX0uX190eXBlPT0nc3lzX3ZhcmlhYmxlX3ZhbHVlJyAmJiB7e19ffX0uc3ViZmxvdyk/e3tfX319LnN1YmZsb3cuSWQ6e3twcGF0aH19LklkKT4+IiwiX1NlcnZpY2VOb3ciOiI8PFsqKltmbG93X0Zsb3dfSW5wdXRzW21vZGVsX2lkPSd7e2lkfX0nXV0uSWQsICoqW2Zsb3dfRmxvd19PdXRwdXRzW21vZGVsX2lkPSd7e2lkfX0nXV0uSWQsICoqW2Zsb3dfRmxvd19WYXJpYWJsZXNbbW9kZWxfaWQ9J3t7aWR9fSddXS5JZCwgKipbc25hcHNob3RfRmxvd19JbnB1dHNbbW9kZWxfaWQ9J3t7aWR9fSddXS5JZCwgKipbc25hcHNob3RfRmxvd19PdXRwdXRzW21vZGVsX2lkPSd7e2lkfX0nXV0uSWQsICoqW3NuYXBzaG90X0Zsb3dfVmFyaWFibGVzW21vZGVsX2lkPSd7e2lkfX0nXV0uSWQsICoqW2luc3RhbmNlX0Zsb3dfSW5zdGFuY2VfSW5wdXRzW21vZGVsX2lkPSd7e2lkfX0nXV0uSWQsICoqW2luc3RhbmNlX1ZhcmlhYmxlX1ZhbHVlc1tmbG93SW5wdXRbbW9kZWxfaWQ9J3t7aWR9fSddXV0uc3ViZmxvdy5JZCwgKipbYWN0aW9uX1ZhcmlhYmxlX1ZhbHVlc1thY3Rpb25JbnB1dFttb2RlbF9pZD0ne3tpZH19J11dXS57XCJJZFwiOiBcIl9me2dzLmluZm8oX3RvU3RyaW5nICsgJzogRklKU09OOiAnICsgSlNPTi5zdHJpbmdpZnkocmVmcy5tYW55UmVmcykpfVwifS5JZF1bMF0+PiJ9`), (key, value) => {\n\t\t\t\t\t\tif (typeof(value) === \"string\" && value.indexOf(\"=>\") > 0) return eval(\"(\" + value + \")\");\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t}\n\t\t)());\n\t}\n\n\t/************* Flow_Input.Attributes EF: GETTERS AND SETTERS **********************/\n\tAttributes() {\n\t\treturn /*this.ef_Attributes = */ ((\n\t\t\tfunction() {\n\t\t\t\ttry {\n\n\t\t\t\t\tlet __ret = undefined;\n\n\t\t\t\t\tif (typeof(__ret) === 'string' && __ret.startsWith(\"s(\") && __ret.endsWith(\")\")) {\n\t\t\t\t\t\t__ret = this.runScript(__ret.slice(2, -1));\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof(__ret) === \"function\") {\n\t\t\t\t\t\t__ret = __ret(this);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn __ret;\n\n\t\t\t\t} catch (_vOfEx) {\n\t\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Input.Attributes(): \" + 'valueOf', _vOfEx, JSON.parse(((typeof(this) !== \"undefined\" && typeof(this._atob) !== \"undefined\") ? this._atob : (typeof(_FrEMD) !== \"undefined\" ? _FrEMD._atob : atob))(`eyJTZXJ2aWNlTm93IjoiPDxzKCdlbGVtZW50X21hcHBpbmdfcHJvdmlkZXI9Y29tLmdsaWRlLmZsb3dfZGVzaWduLmFjdGlvbi5kYXRhLkZsb3dEZXNpZ25WYXJpYWJsZU1hcHBlcix1aVR5cGU9Jyt7e19ffX0uaW50ZXJuYWxfdHlwZSsnLHVpVW5pcXVlSWQ9Jyt7e19ffX0uSWQpPj4iLCJfU2VydmljZU5vdyI6Ijw8J2VsZW1lbnRfbWFwcGluZ19wcm92aWRlcj1jb20uZ2xpZGUuZmxvd19kZXNpZ24uYWN0aW9uLmRhdGEuRmxvd0Rlc2lnblZhcmlhYmxlTWFwcGVyLHVpVHlwZT0nJnt7X199fS5pbnRlcm5hbF90eXBlJicsdWlVbmlxdWVJZD0nJnt7X199fS5JZD4+In0=`), (key, value) => {\n\t\t\t\t\t\tif (typeof(value) === \"string\" && value.indexOf(\"=>\") > 0) return eval(\"(\" + value + \")\");\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t}\n\t\t)());\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = undefined || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\tif (this._type) ret += '^' + sPath + 'type' + (this._type_coop || '=') + this.type();\n\n\t\tif (this._mandatory) ret += '^' + sPath + 'mandatory' + (this._mandatory_coop || '=') + this.mandatory();\n\n\t\tif (this._reference) ret += /*(this._reference_coop || '=') + */ this.reference()._toEQuery(sPath + 'reference.');\n\n\t\tif (this._flow) ret += /*(this._flow_coop || '=') + */ this.flow()._toEQuery(sPath + 'flow.');\n\n\t\tif (this._snapshot) ret += /*(this._snapshot_coop || '=') + */ this.snapshot()._toEQuery(sPath + 'snapshot.');\n\n\t\t(this.input_Field_Labels() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYField_Label.input,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(this.flowInput_Variable_Values() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYVariable_Value.flowInput,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Input._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn new shs_arbfw_appd_Flow_Input()._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Input._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Input._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromGlideRecord(obj) {\n\t\tif (!obj) return null;\n\t\tif (obj.isValidRecord()) {\n\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Flow_Input\" != 'ecc_queue' && obj.source == \"shs_arbfw_appd_Flow_Input\") {\n\t\t\t\tobj.state = \"processing\";\n\t\t\t\tobj.update();\n\n\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\tresp.queue = 'output';\n\t\t\t\tresp.agent = obj.agent;\n\t\t\t\tresp.topic = obj.topic;\n\t\t\t\tresp.name = obj.name;\n\t\t\t\tresp.source = obj.source;\n\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\tlet ret = new shs_arbfw_appd_Flow_Input()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t});\n\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t}\n\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\tresp.insert();\n\n\t\t\t\tobj.state = \"processed\";\n\t\t\t\tobj.update();\n\t\t\t\treturn resp;\n\t\t\t} else {\n\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\ttype: obj.getValue(\"type\"),\n\n\t\t\t\t\tmandatory: obj.getValue(\"mandatory\"),\n\n\t\t\t\t\treference: obj.getValue(\"reference\"),\n\n\t\t\t\t\tflow: obj.getValue(\"flow\"),\n\n\t\t\t\t\tsnapshot: obj.getValue(\"snapshot\"),\n\n\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tobj.query();\n\t\t\tlet grRet = [];\n\t\t\twhile (obj.next()) grRet.push(this._fromGlideRecord(obj));\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Input._fromGlideRecord(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\treturn grRet;\n\t\t}\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\tundefined\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_appd_Flow_Input()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\tif (/((([A-Za-z]{3,9}:(?:/ / ) ? )( ? : [-;: &= +$, w] + @) ? [A - Za - z0 - 9. - ] + | ( ? : www. | [-;: &= +$, w] + @)[A - Za - z0 - 9. - ] + )(( ? : /[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)/g.test(obj)) {\n\t\t\tvar msg = new sn_ws.RESTMessageV2();\n\t\t\tmsg.setEndpoint(obj);\n\t\t\tmsg.setRequestHeader('Content-Type', 'application/json');\n\t\t\tmsg.setHttpMethod('get');\n\t\t\treturn this._fromDocument(msg.execute().getBody());\n\t\t}\n\n\t\ttry {\n\t\t\tobj = JSON.parse(obj);\n\t\t} catch (ex) {\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Input._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\tlet _obj = {\n\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))\n\t\t\t};\n\t\t\t_obj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(this))] = obj;\n\t\t\tobj = _obj;\n\t\t}\n\t\treturn this._fromDocument(obj);\n\t}\n\telse if (typeof(obj) === 'object') {\n\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\treturn this._fromGlideRecord(obj);\n\t\t} else if (obj._fromDocument) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Input._fromDocument(): \" + \"redundent call\");\n\t\t\treturn obj;\n\t\t} else if (Array.isArray(obj)) {\n\t\t\treturn obj.map(function(o) {\n\t\t\t\treturn new shs_arbfw_appd_Flow_Input()._fromDocument(o)\n\t\t\t});\n\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(obj))));\n\n\t\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Input._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.type) !== 'undefined') {\n\n\t\t\t\t\tthis.type(obj.type);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.mandatory) !== 'undefined') {\n\n\t\t\t\t\tthis.mandatory(obj.mandatory);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.reference) !== 'undefined') {\n\n\t\t\t\t\tthis.reference(new shs_arbfw_appd_Table()._fromDocument(obj.reference));\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.flow) !== 'undefined') {\n\n\t\t\t\t\tthis.flow(new shs_arbfw_appd_Flow()._fromDocument(obj.flow));\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.snapshot) !== 'undefined') {\n\n\t\t\t\t\tthis.snapshot(new shs_arbfw_appd_Flow_Snapshot()._fromDocument(obj.snapshot));\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.input_Field_Labels) !== 'undefined') this.input_Field_Labels(new shs_arbfw_appd_Field_Label()._fromDocument(obj.input_Field_Labels));\n\n\t\t\t\tif (typeof(obj.flowInput_Variable_Values) !== 'undefined') this.flowInput_Variable_Values(new shs_arbfw_appd_Variable_Value()._fromDocument(obj.flowInput_Variable_Values));\n\n\t\t\t} else { // if(obj.constructor.name==\"Flow_Input\"){\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Input._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t}\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Input._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\treturn null;\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Input._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Input._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Input._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\treturn this;\n}\n\n_insertAssert() {\n\treturn true;\n}\n\n_updateAssert() {\n\treturn true;\n}\n\n_storeAssert() {\n\treturn true;\n}\n\n_findAssert() {\n\treturn true;\n}\n\n_new(c) {\n\n\treturn new shs_arbfw_appd_Platform._new(c);\n\n}\n\n_toDocument(arFields) {\n\n\tlet ret = undefined || {};\n\n\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tret.active = this.active();\n\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tret.enabled = this.enabled();\n\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tret.code = this.code();\n\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tret.order = this.order();\n\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tret.date = this.date();\n\n\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tret.name = this.name();\n\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tret.remark = this.remark();\n\n\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t}\n\n\tif (typeof(this._type) !== 'undefined') {\n\t\tret.type = this.type();\n\n\t}\n\n\tif (typeof(this._mandatory) !== 'undefined') {\n\t\tret.mandatory = this.mandatory();\n\n\t}\n\n\tif (typeof(this._reference) !== 'undefined') {\n\t\tret.reference = this.reference();\n\n\t\tif (ret.reference) {\n\t\t\tret.reference = ret.reference._toDocument();\n\t\t\tif (typeof(ret.reference) === 'object' && !Object.keys(ret.reference).length) ret.reference = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this._flow) !== 'undefined') {\n\t\tret.flow = this.flow();\n\n\t\tif (ret.flow) {\n\t\t\tret.flow = ret.flow._toDocument();\n\t\t\tif (typeof(ret.flow) === 'object' && !Object.keys(ret.flow).length) ret.flow = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this._snapshot) !== 'undefined') {\n\t\tret.snapshot = this.snapshot();\n\n\t\tif (ret.snapshot) {\n\t\t\tret.snapshot = ret.snapshot._toDocument();\n\t\t\tif (typeof(ret.snapshot) === 'object' && !Object.keys(ret.snapshot).length) ret.snapshot = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this.input_Field_Labels()) !== 'undefined') ret.input_Field_Labels = this.input_Field_Labels().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (typeof(this.flowInput_Variable_Values()) !== 'undefined') ret.flowInput_Variable_Values = this.flowInput_Variable_Values().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (typeof(this.__keys()) !== 'undefined') ret.__keys = this.__keys();\n\n\tif (typeof(this.length()) !== 'undefined') ret.length = this.length();\n\n\tif (typeof(this.Model_Table()) !== 'undefined') ret.Model_Table = this.Model_Table();\n\n\tif (typeof(this.Model_ID()) !== 'undefined') ret.Model_ID = this.Model_ID();\n\n\tif (typeof(this.Attributes()) !== 'undefined') ret.Attributes = this.Attributes();\n\n\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\treturn !arFields.find(function(_k) {\n\t\t\treturn _k == k;\n\t\t});\n\t}).forEach(function(k) {\n\t\tdelete ret[k];\n\t});\n\n\treturn ret;\n}\n\n_unique(keys, ret) {\n\tret = ret || new shs_arbfw_appd_Flow_Input();\n\n\tundefined\n\n\t// if(this.Id) ret.Id = this.Id;\n\tif (!keys) {\n\n\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (typeof(this.flow()) !== 'undefined') ret.flow(this.flow()._unique());\n\n\t\tif (typeof(this.snapshot()) !== 'undefined') ret.snapshot(this.snapshot()._unique());\n\n\t} else {\n\n\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t\tif (keys.indexOf(\"type\") >= 0 && typeof(this.type()) !== 'undefined') ret.type(this.type());\n\n\t\tif (keys.indexOf(\"mandatory\") >= 0 && typeof(this.mandatory()) !== 'undefined') ret.mandatory(this.mandatory());\n\n\t\tif (keys.indexOf(\"reference\") >= 0 && typeof(this.reference()) !== 'undefined') ret.reference(this.reference()._unique());\n\n\t\tif (keys.indexOf(\"flow\") >= 0 && typeof(this.flow()) !== 'undefined') ret.flow(this.flow()._unique());\n\n\t\tif (keys.indexOf(\"snapshot\") >= 0 && typeof(this.snapshot()) !== 'undefined') ret.snapshot(this.snapshot()._unique());\n\n\t}\n\n\treturn ret;\n}\n\n_query(gq) {\n\tlet arFields = Object.keys(global.Schema.of('sys_hub_flow_input', ['*'])['sys_hub_flow_input']);\n\n\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('sys_hub_flow_input');\n\n\tundefined\n\n\tlet idf = ((function(r) {\n\t\tlet ret = 'sys_id';\n\t\tif (typeof(r.__idField) === 'function') {\n\t\t\tret = r.__idField();\n\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\tret = r.__idField || this.__idField();\n\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\tret = 'Id';\n\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\tret = 'sys_id';\n\t\t}\n\t\treturn ret;\n\t})(this));\n\tif (idf == 'Id') idf = 'sys_id';\n\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tlet coop = this._active_coop || '=';\n\n\t\tlet v = this.active();\n\n\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Input._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tlet coop = this._enabled_coop || '=';\n\n\t\tlet v = this.enabled();\n\n\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Input._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tlet coop = this._code_coop || '=';\n\n\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.code();\n\n\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Input._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tlet coop = this._order_coop || '=';\n\n\t\tlet v = this.order();\n\n\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Input._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tlet coop = this._date_coop || '=';\n\n\t\tlet v = this.date();\n\n\t\tif (v) {\n\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t}\n\n\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Input._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tlet coop = this._name_coop || '=';\n\n\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.name();\n\n\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Input._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tlet coop = this._remark_coop || '=';\n\n\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.remark();\n\n\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Input._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._type) !== 'undefined') {\n\t\tlet coop = this._type_coop || '=';\n\n\t\tif (!this._type_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.type();\n\n\t\tif (arFields.indexOf('type') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Input._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('type');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('type');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('type', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._mandatory) !== 'undefined') {\n\t\tlet coop = this._mandatory_coop || '=';\n\n\t\tlet v = this.mandatory();\n\n\t\tif (arFields.indexOf('mandatory') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Input._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('mandatory');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('mandatory');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('mandatory', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._reference) !== 'undefined') {\n\t\tlet coop = this._reference_coop || '=';\n\n\t\tlet v = this.reference();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Flow Input\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Input._query(): \"+ \"reference \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Input._query(): \" + \"reference[reference] resuled in undefined: \" + JSON.stringify(this.reference()));\n\t\t}\n\n\t\tif (arFields.indexOf('reference') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Input._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('reference');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('reference');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('reference', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._flow) !== 'undefined') {\n\t\tlet coop = this._flow_coop || '=';\n\n\t\tlet v = this.flow();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Flow Input\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Input._query(): \"+ \"flow \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Input._query(): \" + \"flow[flow] resuled in undefined: \" + JSON.stringify(this.flow()));\n\t\t}\n\n\t\tif (arFields.indexOf('flow') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Input._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('flow');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('flow');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('flow', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._snapshot) !== 'undefined') {\n\t\tlet coop = this._snapshot_coop || '=';\n\n\t\tlet v = this.snapshot();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Flow Input\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Input._query(): \"+ \"snapshot \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Input._query(): \" + \"snapshot[snapshot] resuled in undefined: \" + JSON.stringify(this.snapshot()));\n\t\t}\n\n\t\tif (arFields.indexOf('snapshot') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Input._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('snapshot');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('snapshot');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('snapshot', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Input._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\treturn this._queryGQ;\n}\n\n_save(obj) {\n\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\treturn new shs_arbfw_appd_Flow_Input()._save(o)\n\t});\n\n\tlet _obj = {};\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Input._save(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\tObject.keys(obj).filter(function(k) {\n\t\treturn Object.keys(global.Schema.of('sys_hub_flow_input', ['*'])['sys_hub_flow_input']).filter(function(_k) {\n\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t}).indexOf(k.toLowerCase()) >= 0\n\t}).forEach(function(k) {\n\t\t_obj[k.toLowerCase()] = obj[k]\n\t});\n\n\tObject.keys(_obj).forEach(function(k) {\n\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Input._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tdelete _obj[k];\n\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Input._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t}\n\t});\n\n\tlet _this = null;\n\tif (obj.__keys) {\n\t\tlet kObj = {};\n\t\tkObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(_obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))));\n\t\tobj.__keys.forEach(function(k) {\n\t\t\tkObj[k] = _obj[k]\n\t\t});\n\t\t_this = new shs_arbfw_appd_Flow_Input()._fromDocument(kObj);\n\t} else {\n\t\t_this = new shs_arbfw_appd_Flow_Input()._fromDocument(_obj)._unique();\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Input._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\tdelete _obj.__idField;\n\n\ttry {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Input._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\tObject.keys(_obj).filter(function(k) {\n\t\t\treturn k.toLowerCase() != k;\n\t\t}).forEach(function(k) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Input._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tvar lk = k.toLowerCase();\n\t\t\t_obj[lk] = _obj[k];\n\t\t\tdelete _obj[k];\n\t\t});\n\n\t\tlet gq = new global.GlideQuery(obj.__type || 'sys_hub_flow_input');\n\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Input._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\tif (_obj.sys_id) {\n\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t} else {\n\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\tgq = gq.insert(_obj);\n\t\t}\n\t\tlet _fObj = {};\n\t\t_fObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))));\n\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('sys_hub_flow_input', ['*'])['sys_hub_flow_input']))));\n\t} catch (ex) {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Input._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Input._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\treturn this;\n\t}\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Input._save(): \" + \"obj.input_Field_Labels: \" + JSON.stringify(obj.input_Field_Labels, null, 4));\n\tif (Array.isArray(obj.input_Field_Labels)) this.input_Field_Labels(obj.input_Field_Labels.map(function(ta) {\n\t\treturn new shs_arbfw_appd_Field_Label()._save(ta)\n\t}));\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Input._save(): \" + \"obj.flowInput_Variable_Values: \" + JSON.stringify(obj.flowInput_Variable_Values, null, 4));\n\tif (Array.isArray(obj.flowInput_Variable_Values)) this.flowInput_Variable_Values(obj.flowInput_Variable_Values.map(function(ta) {\n\t\treturn new shs_arbfw_appd_Variable_Value()._save(ta)\n\t}));\n\n\treturn this;\n}\n\n/************* Flow_Input.store() **********************/\nstore(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Input.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Input.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Input.store(): \" + \"executing locally \");\n\n\t\t// store locally\n\t\treturn this._save(this._toDocument());\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Flow_Input.findAll() **********************/\nfindAll(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Input.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Input.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Input.findAll(): \" + \"executing locally \");\n\n\t\t// findAll locally\n\t\tlet gr = new GlideRecord('sys_hub_flow_input');\n\t\tgr.addEncodedQuery(this._toEQuery());\n\t\treturn this._fromDocument(gr);\n\n\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('sys_hub_flow_input', ['*'])['sys_hub_flow_input'])));\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Flow_Input.find() **********************/\nfind(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Input.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Input.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Input.find(): \" + \"executing locally \");\n\n\t\tlet ret = this.findAll();\n\t\treturn ret.length ? ret[0] : null;\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"scriptFile_Script_Compatibilitys":[{"active":true,"enabled":true}],"client_callable":true,"sys_name":"shs_arbfw_appd_Flow_Output","api_name":"x_1790593_arboard.shs_arbfw_appd_Flow_Output","name":"shs_arbfw_appd_Flow_Output","script":"class shs_arbfw_appd_Flow_Output extends global.AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"Application Designer\";\n\t\tthis.__type = \"shs_arbfw_appd_Flow_Output\";\n\t\tthis.__alias = \"shs_arbfw_appd\";\n\t\tthis.__scope = \"shs_arbfw\";\n\t}\n\n\t/************* Flow_Output.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Flow_Output.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Flow_Output.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Flow_Output.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Flow_Output.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Output.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Flow_Output.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Flow_Output.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Flow_Output.type GETTERS AND SETTERS **********************/\n\ttype(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._type = v;\n\t\t\tthis._type_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._type;\n\t\t}\n\t}\n\n\t/************* Flow_Output.mandatory GETTERS AND SETTERS **********************/\n\tmandatory(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._mandatory = v;\n\t\t\tthis._mandatory_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._mandatory;\n\t\t}\n\t}\n\n\t/************* Flow_Output.reference GETTERS AND SETTERS **********************/\n\treference(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._reference = v;\n\t\t\tthis._reference_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._reference;\n\t\t}\n\t}\n\n\t/************* Flow_Output.flow GETTERS AND SETTERS **********************/\n\tflow(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._flow = v;\n\t\t\tthis._flow_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._flow;\n\t\t}\n\t}\n\n\t/************* Flow_Output.snapshot GETTERS AND SETTERS **********************/\n\tsnapshot(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._snapshot = v;\n\t\t\tthis._snapshot_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._snapshot;\n\t\t}\n\t}\n\n\t/************* Flow_Output.output_Field_Labels GETTERS AND SETTERS **********************/\n\toutput_Field_Labels(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._output_Field_Labels = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._output_Field_Labels_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._output_Field_Labels;\n\t\t}\n\t}\n\n\t/************* Flow_Output.__keys EF: GETTERS AND SETTERS **********************/\n\t__keys() {\n\t\treturn /*this.ef___keys = */ ((\n\t\t\tfunction() {\n\t\t\t\ttry {\n\n\t\t\t\t\tlet __ret = undefined;\n\n\t\t\t\t\t__ret = [\"element\", \"model_id\"];\n\n\t\t\t\t\tif (typeof(__ret) === 'string' && __ret.startsWith(\"s(\") && __ret.endsWith(\")\")) {\n\t\t\t\t\t\t__ret = this.runScript(__ret.slice(2, -1));\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof(__ret) === \"function\") {\n\t\t\t\t\t\t__ret = __ret(this);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn __ret;\n\n\t\t\t\t} catch (_vOfEx) {\n\t\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Output.__keys(): \" + 'valueOf', _vOfEx, JSON.parse(((typeof(this) !== \"undefined\" && typeof(this._atob) !== \"undefined\") ? this._atob : (typeof(_FrEMD) !== \"undefined\" ? _FrEMD._atob : atob))(`eyJTZXJ2aWNlTm93IjpbImVsZW1lbnQiLCJtb2RlbF9pZCJdfQ==`), (key, value) => {\n\t\t\t\t\t\tif (typeof(value) === \"string\" && value.indexOf(\"=>\") > 0) return eval(\"(\" + value + \")\");\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t}\n\t\t)());\n\t}\n\n\t/************* Flow_Output.length EF: GETTERS AND SETTERS **********************/\n\tlength() {\n\t\treturn /*this.ef_length = */ ((\n\t\t\tfunction() {\n\t\t\t\ttry {\n\n\t\t\t\t\tlet __ret = undefined;\n\n\t\t\t\t\t__ret = () => ({\n\t\t\t\t\t\t\"String\": 255,\n\t\t\t\t\t\t\"Text\": 4000,\n\t\t\t\t\t})[this.type()];\n\n\t\t\t\t\tif (typeof(__ret) === 'string' && __ret.startsWith(\"s(\") && __ret.endsWith(\")\")) {\n\t\t\t\t\t\t__ret = this.runScript(__ret.slice(2, -1));\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof(__ret) === \"function\") {\n\t\t\t\t\t\t__ret = __ret(this);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn __ret;\n\n\t\t\t\t} catch (_vOfEx) {\n\t\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Output.length(): \" + 'valueOf', _vOfEx, JSON.parse(((typeof(this) !== \"undefined\" && typeof(this._atob) !== \"undefined\") ? this._atob : (typeof(_FrEMD) !== \"undefined\" ? _FrEMD._atob : atob))(`eyJTZXJ2aWNlTm93IjoiKCkgPT4gKHtcblx0XHRcdFx0XCJTdHJpbmdcIjogMjU1LFxuXHRcdFx0XHRcIlRleHRcIjogNDAwMCxcblx0XHRcdH0pW3RoaXMudHlwZSgpXSJ9`), (key, value) => {\n\t\t\t\t\t\tif (typeof(value) === \"string\" && value.indexOf(\"=>\") > 0) return eval(\"(\" + value + \")\");\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t}\n\t\t)());\n\t}\n\n\t/************* Flow_Output.Model_ID EF: GETTERS AND SETTERS **********************/\n\tModel_ID() {\n\t\treturn /*this.ef_Model_ID = */ ((\n\t\t\tfunction() {\n\t\t\t\ttry {\n\n\t\t\t\t\tlet __ret = undefined;\n\n\t\t\t\t\tif (typeof(__ret) === 'string' && __ret.startsWith(\"s(\") && __ret.endsWith(\")\")) {\n\t\t\t\t\t\t__ret = this.runScript(__ret.slice(2, -1));\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof(__ret) === \"function\") {\n\t\t\t\t\t\t__ret = __ret(this);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn __ret;\n\n\t\t\t\t} catch (_vOfEx) {\n\t\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Output.Model_ID(): \" + 'valueOf', _vOfEx, JSON.parse(((typeof(this) !== \"undefined\" && typeof(this._atob) !== \"undefined\") ? this._atob : (typeof(_FrEMD) !== \"undefined\" ? _FrEMD._atob : atob))(`eyJTZXJ2aWNlTm93IjoiPDxzKCh7e3BwYXRofX0uX190eXBlPT0nc3lzX3ZhcmlhYmxlX3ZhbHVlJyAmJiB7e19ffX0uc3ViZmxvdyk/e3tfX319LnN1YmZsb3cuSWQ6e3twcGF0aH19LklkKT4+IiwiX1NlcnZpY2VOb3ciOiI8PFsqKltmbG93X0Zsb3dfSW5wdXRzW21vZGVsX2lkPSd7e2lkfX0nXV0uSWQsICoqW2Zsb3dfRmxvd19PdXRwdXRzW21vZGVsX2lkPSd7e2lkfX0nXV0uSWQsICoqW2Zsb3dfRmxvd19WYXJpYWJsZXNbbW9kZWxfaWQ9J3t7aWR9fSddXS5JZCwgKipbc25hcHNob3RfRmxvd19JbnB1dHNbbW9kZWxfaWQ9J3t7aWR9fSddXS5JZCwgKipbc25hcHNob3RfRmxvd19PdXRwdXRzW21vZGVsX2lkPSd7e2lkfX0nXV0uSWQsICoqW3NuYXBzaG90X0Zsb3dfVmFyaWFibGVzW21vZGVsX2lkPSd7e2lkfX0nXV0uSWQsICoqW2luc3RhbmNlX0Zsb3dfSW5zdGFuY2VfSW5wdXRzW21vZGVsX2lkPSd7e2lkfX0nXV0uSWQsICoqW2luc3RhbmNlX1ZhcmlhYmxlX1ZhbHVlc1tmbG93SW5wdXRbbW9kZWxfaWQ9J3t7aWR9fSddXV0uc3ViZmxvdy5JZCwgKipbYWN0aW9uX1ZhcmlhYmxlX1ZhbHVlc1thY3Rpb25JbnB1dFttb2RlbF9pZD0ne3tpZH19J11dXS57XCJJZFwiOiBcIl9me2dzLmluZm8oX3RvU3RyaW5nICsgJzogRklKU09OOiAnICsgSlNPTi5zdHJpbmdpZnkocmVmcy5tYW55UmVmcykpfVwifS5JZF1bMF0+PiJ9`), (key, value) => {\n\t\t\t\t\t\tif (typeof(value) === \"string\" && value.indexOf(\"=>\") > 0) return eval(\"(\" + value + \")\");\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t}\n\t\t)());\n\t}\n\n\t/************* Flow_Output.Model_Table EF: GETTERS AND SETTERS **********************/\n\tModel_Table() {\n\t\treturn /*this.ef_Model_Table = */ ((\n\t\t\tfunction() {\n\t\t\t\ttry {\n\n\t\t\t\t\tlet __ret = undefined;\n\n\t\t\t\t\tif (typeof(__ret) === 'string' && __ret.startsWith(\"s(\") && __ret.endsWith(\")\")) {\n\t\t\t\t\t\t__ret = this.runScript(__ret.slice(2, -1));\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof(__ret) === \"function\") {\n\t\t\t\t\t\t__ret = __ret(this);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn __ret;\n\n\t\t\t\t} catch (_vOfEx) {\n\t\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Output.Model_Table(): \" + 'valueOf', _vOfEx, JSON.parse(((typeof(this) !== \"undefined\" && typeof(this._atob) !== \"undefined\") ? this._atob : (typeof(_FrEMD) !== \"undefined\" ? _FrEMD._atob : atob))(`eyJTZXJ2aWNlTm93IjoiPDxzKCh7c3lzX2h1Yl9mbG93OiAnc3lzX2h1Yl9mbG93Jywgc3lzX2h1Yl9mbG93X3NuYXBzaG90OiAnc3lzX2h1Yl9mbG93X3NuYXBzaG90Jywgc3lzX3ZhcmlhYmxlX3ZhbHVlOiAnc3lzX2h1Yl9mbG93Jywgc3lzX2h1Yl9zdWJfZmxvd19pbnN0YW5jZTogJ3N5c19odWJfZmxvd19sb2dpY19leHRfaW5wdXQnLCBzeXNfaHViX2FjdGlvbl9pbnN0YW5jZTogJ3N5c19odWJfZmxvdyd9KVt7e3BwYXRofX0uX190eXBlXSk+PiIsIl9TZXJ2aWNlTm93IjoiPDwkZXhpc3RzKCoqW2Zsb3dfRmxvd19JbnB1dHNbbW9kZWxfdGFibGU9J3t7aWR9fSddIG9yIGZsb3dfRmxvd19PdXRwdXRzW21vZGVsX3RhYmxlPSd7e2lkfX0nXSBvciBmbG93X0Zsb3dfVmFyaWFibGVzW21vZGVsX3RhYmxlPSd7e2lkfX0nXV0pPydzeXNfaHViX2Zsb3cnOigkZXhpc3RzKCoqW3NuYXBzaG90X0Zsb3dfSW5wdXRzW21vZGVsX3RhYmxlPSd7e2lkfX0nXSBvciBzbmFwc2hvdF9GbG93X091dHB1dHNbbW9kZWxfdGFibGU9J3t7aWR9fSddIG9yIHNuYXBzaG90X0Zsb3dfVmFyaWFibGVzW21vZGVsX3RhYmxlPSd7e2lkfX0nXV0pPydzeXNfaHViX2Zsb3dfc25hcHNob3QnOigkZXhpc3RzKCoqW2luc3RhbmNlX0Zsb3dfSW5zdGFuY2VfSW5wdXRzW21vZGVsX3RhYmxlPSd7e2lkfX0nXV0pPydzeXNfaHViX2Zsb3dfbG9naWNfZXh0X2lucHV0JzooJGV4aXN0cygqKlthY3Rpb25fVmFyaWFibGVfVmFsdWVzW2FjdGlvbklucHV0W21vZGVsX3RhYmxlPSd7e2lkfX0nXV1dIG9yICoqW2luc3RhbmNlX1ZhcmlhYmxlX1ZhbHVlc1tmbG93SW5wdXRbbW9kZWxfdGFibGU9J3t7aWR9fSddXV0pPydzeXNfaHViX2Zsb3cnOicnKSkpPj4ifQ==`), (key, value) => {\n\t\t\t\t\t\tif (typeof(value) === \"string\" && value.indexOf(\"=>\") > 0) return eval(\"(\" + value + \")\");\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t}\n\t\t)());\n\t}\n\n\t/************* Flow_Output.Attributes EF: GETTERS AND SETTERS **********************/\n\tAttributes() {\n\t\treturn /*this.ef_Attributes = */ ((\n\t\t\tfunction() {\n\t\t\t\ttry {\n\n\t\t\t\t\tlet __ret = undefined;\n\n\t\t\t\t\tif (typeof(__ret) === 'string' && __ret.startsWith(\"s(\") && __ret.endsWith(\")\")) {\n\t\t\t\t\t\t__ret = this.runScript(__ret.slice(2, -1));\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof(__ret) === \"function\") {\n\t\t\t\t\t\t__ret = __ret(this);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn __ret;\n\n\t\t\t\t} catch (_vOfEx) {\n\t\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Output.Attributes(): \" + 'valueOf', _vOfEx, JSON.parse(((typeof(this) !== \"undefined\" && typeof(this._atob) !== \"undefined\") ? this._atob : (typeof(_FrEMD) !== \"undefined\" ? _FrEMD._atob : atob))(`eyJTZXJ2aWNlTm93IjoiPDxzKCdlbGVtZW50X21hcHBpbmdfcHJvdmlkZXI9Y29tLmdsaWRlLmZsb3dfZGVzaWduLmFjdGlvbi5kYXRhLkZsb3dEZXNpZ25WYXJpYWJsZU1hcHBlcix1aVR5cGU9Jyt7e19ffX0uaW50ZXJuYWxfdHlwZSsnLHVpVW5pcXVlSWQ9Jyt7e19ffX0uSWQpPj4iLCJfU2VydmljZU5vdyI6Ijw8J2VsZW1lbnRfbWFwcGluZ19wcm92aWRlcj1jb20uZ2xpZGUuZmxvd19kZXNpZ24uYWN0aW9uLmRhdGEuRmxvd0Rlc2lnblZhcmlhYmxlTWFwcGVyLHVpVHlwZT0nJnt7X199fS5pbnRlcm5hbF90eXBlJicsdWlVbmlxdWVJZD0nJnt7X199fS5JZD4+In0=`), (key, value) => {\n\t\t\t\t\t\tif (typeof(value) === \"string\" && value.indexOf(\"=>\") > 0) return eval(\"(\" + value + \")\");\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t}\n\t\t)());\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = undefined || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\tif (this._type) ret += '^' + sPath + 'type' + (this._type_coop || '=') + this.type();\n\n\t\tif (this._mandatory) ret += '^' + sPath + 'mandatory' + (this._mandatory_coop || '=') + this.mandatory();\n\n\t\tif (this._reference) ret += /*(this._reference_coop || '=') + */ this.reference()._toEQuery(sPath + 'reference.');\n\n\t\tif (this._flow) ret += /*(this._flow_coop || '=') + */ this.flow()._toEQuery(sPath + 'flow.');\n\n\t\tif (this._snapshot) ret += /*(this._snapshot_coop || '=') + */ this.snapshot()._toEQuery(sPath + 'snapshot.');\n\n\t\t(this.output_Field_Labels() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYField_Label.output,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Output._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn new shs_arbfw_appd_Flow_Output()._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Output._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Output._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromGlideRecord(obj) {\n\t\tif (!obj) return null;\n\t\tif (obj.isValidRecord()) {\n\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Flow_Output\" != 'ecc_queue' && obj.source == \"shs_arbfw_appd_Flow_Output\") {\n\t\t\t\tobj.state = \"processing\";\n\t\t\t\tobj.update();\n\n\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\tresp.queue = 'output';\n\t\t\t\tresp.agent = obj.agent;\n\t\t\t\tresp.topic = obj.topic;\n\t\t\t\tresp.name = obj.name;\n\t\t\t\tresp.source = obj.source;\n\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\tlet ret = new shs_arbfw_appd_Flow_Output()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t});\n\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t}\n\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\tresp.insert();\n\n\t\t\t\tobj.state = \"processed\";\n\t\t\t\tobj.update();\n\t\t\t\treturn resp;\n\t\t\t} else {\n\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\ttype: obj.getValue(\"type\"),\n\n\t\t\t\t\tmandatory: obj.getValue(\"mandatory\"),\n\n\t\t\t\t\treference: obj.getValue(\"reference\"),\n\n\t\t\t\t\tflow: obj.getValue(\"flow\"),\n\n\t\t\t\t\tsnapshot: obj.getValue(\"snapshot\"),\n\n\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tobj.query();\n\t\t\tlet grRet = [];\n\t\t\twhile (obj.next()) grRet.push(this._fromGlideRecord(obj));\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Output._fromGlideRecord(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\treturn grRet;\n\t\t}\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\tundefined\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_appd_Flow_Output()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\tif (/((([A-Za-z]{3,9}:(?:/ / ) ? )( ? : [-;: &= +$, w] + @) ? [A - Za - z0 - 9. - ] + | ( ? : www. | [-;: &= +$, w] + @)[A - Za - z0 - 9. - ] + )(( ? : /[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)/g.test(obj)) {\n\t\t\tvar msg = new sn_ws.RESTMessageV2();\n\t\t\tmsg.setEndpoint(obj);\n\t\t\tmsg.setRequestHeader('Content-Type', 'application/json');\n\t\t\tmsg.setHttpMethod('get');\n\t\t\treturn this._fromDocument(msg.execute().getBody());\n\t\t}\n\n\t\ttry {\n\t\t\tobj = JSON.parse(obj);\n\t\t} catch (ex) {\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Output._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\tlet _obj = {\n\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))\n\t\t\t};\n\t\t\t_obj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(this))] = obj;\n\t\t\tobj = _obj;\n\t\t}\n\t\treturn this._fromDocument(obj);\n\t}\n\telse if (typeof(obj) === 'object') {\n\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\treturn this._fromGlideRecord(obj);\n\t\t} else if (obj._fromDocument) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Output._fromDocument(): \" + \"redundent call\");\n\t\t\treturn obj;\n\t\t} else if (Array.isArray(obj)) {\n\t\t\treturn obj.map(function(o) {\n\t\t\t\treturn new shs_arbfw_appd_Flow_Output()._fromDocument(o)\n\t\t\t});\n\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(obj))));\n\n\t\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Output._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.type) !== 'undefined') {\n\n\t\t\t\t\tthis.type(obj.type);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.mandatory) !== 'undefined') {\n\n\t\t\t\t\tthis.mandatory(obj.mandatory);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.reference) !== 'undefined') {\n\n\t\t\t\t\tthis.reference(new shs_arbfw_appd_Table()._fromDocument(obj.reference));\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.flow) !== 'undefined') {\n\n\t\t\t\t\tthis.flow(new shs_arbfw_appd_Flow()._fromDocument(obj.flow));\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.snapshot) !== 'undefined') {\n\n\t\t\t\t\tthis.snapshot(new shs_arbfw_appd_Flow_Snapshot()._fromDocument(obj.snapshot));\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.output_Field_Labels) !== 'undefined') this.output_Field_Labels(new shs_arbfw_appd_Field_Label()._fromDocument(obj.output_Field_Labels));\n\n\t\t\t} else { // if(obj.constructor.name==\"Flow_Output\"){\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Output._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t}\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Output._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\treturn null;\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Output._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Output._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Output._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\treturn this;\n}\n\n_insertAssert() {\n\treturn true;\n}\n\n_updateAssert() {\n\treturn true;\n}\n\n_storeAssert() {\n\treturn true;\n}\n\n_findAssert() {\n\treturn true;\n}\n\n_new(c) {\n\n\treturn new shs_arbfw_appd_Platform._new(c);\n\n}\n\n_toDocument(arFields) {\n\n\tlet ret = undefined || {};\n\n\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tret.active = this.active();\n\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tret.enabled = this.enabled();\n\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tret.code = this.code();\n\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tret.order = this.order();\n\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tret.date = this.date();\n\n\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tret.name = this.name();\n\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tret.remark = this.remark();\n\n\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t}\n\n\tif (typeof(this._type) !== 'undefined') {\n\t\tret.type = this.type();\n\n\t}\n\n\tif (typeof(this._mandatory) !== 'undefined') {\n\t\tret.mandatory = this.mandatory();\n\n\t}\n\n\tif (typeof(this._reference) !== 'undefined') {\n\t\tret.reference = this.reference();\n\n\t\tif (ret.reference) {\n\t\t\tret.reference = ret.reference._toDocument();\n\t\t\tif (typeof(ret.reference) === 'object' && !Object.keys(ret.reference).length) ret.reference = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this._flow) !== 'undefined') {\n\t\tret.flow = this.flow();\n\n\t\tif (ret.flow) {\n\t\t\tret.flow = ret.flow._toDocument();\n\t\t\tif (typeof(ret.flow) === 'object' && !Object.keys(ret.flow).length) ret.flow = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this._snapshot) !== 'undefined') {\n\t\tret.snapshot = this.snapshot();\n\n\t\tif (ret.snapshot) {\n\t\t\tret.snapshot = ret.snapshot._toDocument();\n\t\t\tif (typeof(ret.snapshot) === 'object' && !Object.keys(ret.snapshot).length) ret.snapshot = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this.output_Field_Labels()) !== 'undefined') ret.output_Field_Labels = this.output_Field_Labels().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (typeof(this.__keys()) !== 'undefined') ret.__keys = this.__keys();\n\n\tif (typeof(this.length()) !== 'undefined') ret.length = this.length();\n\n\tif (typeof(this.Model_ID()) !== 'undefined') ret.Model_ID = this.Model_ID();\n\n\tif (typeof(this.Model_Table()) !== 'undefined') ret.Model_Table = this.Model_Table();\n\n\tif (typeof(this.Attributes()) !== 'undefined') ret.Attributes = this.Attributes();\n\n\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\treturn !arFields.find(function(_k) {\n\t\t\treturn _k == k;\n\t\t});\n\t}).forEach(function(k) {\n\t\tdelete ret[k];\n\t});\n\n\treturn ret;\n}\n\n_unique(keys, ret) {\n\tret = ret || new shs_arbfw_appd_Flow_Output();\n\n\tundefined\n\n\t// if(this.Id) ret.Id = this.Id;\n\tif (!keys) {\n\n\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (typeof(this.flow()) !== 'undefined') ret.flow(this.flow()._unique());\n\n\t\tif (typeof(this.snapshot()) !== 'undefined') ret.snapshot(this.snapshot()._unique());\n\n\t} else {\n\n\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t\tif (keys.indexOf(\"type\") >= 0 && typeof(this.type()) !== 'undefined') ret.type(this.type());\n\n\t\tif (keys.indexOf(\"mandatory\") >= 0 && typeof(this.mandatory()) !== 'undefined') ret.mandatory(this.mandatory());\n\n\t\tif (keys.indexOf(\"reference\") >= 0 && typeof(this.reference()) !== 'undefined') ret.reference(this.reference()._unique());\n\n\t\tif (keys.indexOf(\"flow\") >= 0 && typeof(this.flow()) !== 'undefined') ret.flow(this.flow()._unique());\n\n\t\tif (keys.indexOf(\"snapshot\") >= 0 && typeof(this.snapshot()) !== 'undefined') ret.snapshot(this.snapshot()._unique());\n\n\t}\n\n\treturn ret;\n}\n\n_query(gq) {\n\tlet arFields = Object.keys(global.Schema.of('sys_hub_flow_output', ['*'])['sys_hub_flow_output']);\n\n\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('sys_hub_flow_output');\n\n\tundefined\n\n\tlet idf = ((function(r) {\n\t\tlet ret = 'sys_id';\n\t\tif (typeof(r.__idField) === 'function') {\n\t\t\tret = r.__idField();\n\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\tret = r.__idField || this.__idField();\n\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\tret = 'Id';\n\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\tret = 'sys_id';\n\t\t}\n\t\treturn ret;\n\t})(this));\n\tif (idf == 'Id') idf = 'sys_id';\n\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tlet coop = this._active_coop || '=';\n\n\t\tlet v = this.active();\n\n\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Output._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tlet coop = this._enabled_coop || '=';\n\n\t\tlet v = this.enabled();\n\n\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Output._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tlet coop = this._code_coop || '=';\n\n\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.code();\n\n\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Output._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tlet coop = this._order_coop || '=';\n\n\t\tlet v = this.order();\n\n\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Output._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tlet coop = this._date_coop || '=';\n\n\t\tlet v = this.date();\n\n\t\tif (v) {\n\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t}\n\n\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Output._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tlet coop = this._name_coop || '=';\n\n\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.name();\n\n\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Output._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tlet coop = this._remark_coop || '=';\n\n\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.remark();\n\n\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Output._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._type) !== 'undefined') {\n\t\tlet coop = this._type_coop || '=';\n\n\t\tif (!this._type_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.type();\n\n\t\tif (arFields.indexOf('type') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Output._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('type');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('type');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('type', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._mandatory) !== 'undefined') {\n\t\tlet coop = this._mandatory_coop || '=';\n\n\t\tlet v = this.mandatory();\n\n\t\tif (arFields.indexOf('mandatory') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Output._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('mandatory');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('mandatory');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('mandatory', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._reference) !== 'undefined') {\n\t\tlet coop = this._reference_coop || '=';\n\n\t\tlet v = this.reference();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Flow Output\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Output._query(): \"+ \"reference \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Output._query(): \" + \"reference[reference] resuled in undefined: \" + JSON.stringify(this.reference()));\n\t\t}\n\n\t\tif (arFields.indexOf('reference') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Output._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('reference');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('reference');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('reference', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._flow) !== 'undefined') {\n\t\tlet coop = this._flow_coop || '=';\n\n\t\tlet v = this.flow();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Flow Output\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Output._query(): \"+ \"flow \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Output._query(): \" + \"flow[flow] resuled in undefined: \" + JSON.stringify(this.flow()));\n\t\t}\n\n\t\tif (arFields.indexOf('flow') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Output._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('flow');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('flow');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('flow', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._snapshot) !== 'undefined') {\n\t\tlet coop = this._snapshot_coop || '=';\n\n\t\tlet v = this.snapshot();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Flow Output\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Output._query(): \"+ \"snapshot \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Output._query(): \" + \"snapshot[snapshot] resuled in undefined: \" + JSON.stringify(this.snapshot()));\n\t\t}\n\n\t\tif (arFields.indexOf('snapshot') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Output._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('snapshot');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('snapshot');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('snapshot', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Output._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\treturn this._queryGQ;\n}\n\n_save(obj) {\n\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\treturn new shs_arbfw_appd_Flow_Output()._save(o)\n\t});\n\n\tlet _obj = {};\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Output._save(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\tObject.keys(obj).filter(function(k) {\n\t\treturn Object.keys(global.Schema.of('sys_hub_flow_output', ['*'])['sys_hub_flow_output']).filter(function(_k) {\n\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t}).indexOf(k.toLowerCase()) >= 0\n\t}).forEach(function(k) {\n\t\t_obj[k.toLowerCase()] = obj[k]\n\t});\n\n\tObject.keys(_obj).forEach(function(k) {\n\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Output._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tdelete _obj[k];\n\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Output._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t}\n\t});\n\n\tlet _this = null;\n\tif (obj.__keys) {\n\t\tlet kObj = {};\n\t\tkObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(_obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))));\n\t\tobj.__keys.forEach(function(k) {\n\t\t\tkObj[k] = _obj[k]\n\t\t});\n\t\t_this = new shs_arbfw_appd_Flow_Output()._fromDocument(kObj);\n\t} else {\n\t\t_this = new shs_arbfw_appd_Flow_Output()._fromDocument(_obj)._unique();\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Output._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\tdelete _obj.__idField;\n\n\ttry {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Output._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\tObject.keys(_obj).filter(function(k) {\n\t\t\treturn k.toLowerCase() != k;\n\t\t}).forEach(function(k) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Output._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tvar lk = k.toLowerCase();\n\t\t\t_obj[lk] = _obj[k];\n\t\t\tdelete _obj[k];\n\t\t});\n\n\t\tlet gq = new global.GlideQuery(obj.__type || 'sys_hub_flow_output');\n\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Output._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\tif (_obj.sys_id) {\n\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t} else {\n\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\tgq = gq.insert(_obj);\n\t\t}\n\t\tlet _fObj = {};\n\t\t_fObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))));\n\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('sys_hub_flow_output', ['*'])['sys_hub_flow_output']))));\n\t} catch (ex) {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Output._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Output._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\treturn this;\n\t}\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Output._save(): \" + \"obj.output_Field_Labels: \" + JSON.stringify(obj.output_Field_Labels, null, 4));\n\tif (Array.isArray(obj.output_Field_Labels)) this.output_Field_Labels(obj.output_Field_Labels.map(function(ta) {\n\t\treturn new shs_arbfw_appd_Field_Label()._save(ta)\n\t}));\n\n\treturn this;\n}\n\n/************* Flow_Output.store() **********************/\nstore(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Output.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Output.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Output.store(): \" + \"executing locally \");\n\n\t\t// store locally\n\t\treturn this._save(this._toDocument());\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Flow_Output.findAll() **********************/\nfindAll(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Output.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Output.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Output.findAll(): \" + \"executing locally \");\n\n\t\t// findAll locally\n\t\tlet gr = new GlideRecord('sys_hub_flow_output');\n\t\tgr.addEncodedQuery(this._toEQuery());\n\t\treturn this._fromDocument(gr);\n\n\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('sys_hub_flow_output', ['*'])['sys_hub_flow_output'])));\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Flow_Output.find() **********************/\nfind(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Output.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Output.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Output.find(): \" + \"executing locally \");\n\n\t\tlet ret = this.findAll();\n\t\treturn ret.length ? ret[0] : null;\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"scriptFile_Script_Compatibilitys":[{"active":true,"enabled":true}],"client_callable":true,"sys_name":"shs_arbfw_appd_Flow_Variable","api_name":"x_1790593_arboard.shs_arbfw_appd_Flow_Variable","name":"shs_arbfw_appd_Flow_Variable","script":"class shs_arbfw_appd_Flow_Variable extends global.AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"Application Designer\";\n\t\tthis.__type = \"shs_arbfw_appd_Flow_Variable\";\n\t\tthis.__alias = \"shs_arbfw_appd\";\n\t\tthis.__scope = \"shs_arbfw\";\n\t}\n\n\t/************* Flow_Variable.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Flow_Variable.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Flow_Variable.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Flow_Variable.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Flow_Variable.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Variable.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Flow_Variable.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Flow_Variable.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Flow_Variable.type GETTERS AND SETTERS **********************/\n\ttype(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._type = v;\n\t\t\tthis._type_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._type;\n\t\t}\n\t}\n\n\t/************* Flow_Variable.mandatory GETTERS AND SETTERS **********************/\n\tmandatory(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._mandatory = v;\n\t\t\tthis._mandatory_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._mandatory;\n\t\t}\n\t}\n\n\t/************* Flow_Variable.reference GETTERS AND SETTERS **********************/\n\treference(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._reference = v;\n\t\t\tthis._reference_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._reference;\n\t\t}\n\t}\n\n\t/************* Flow_Variable.flow GETTERS AND SETTERS **********************/\n\tflow(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._flow = v;\n\t\t\tthis._flow_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._flow;\n\t\t}\n\t}\n\n\t/************* Flow_Variable.snapshot GETTERS AND SETTERS **********************/\n\tsnapshot(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._snapshot = v;\n\t\t\tthis._snapshot_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._snapshot;\n\t\t}\n\t}\n\n\t/************* Flow_Variable.variable_Field_Labels GETTERS AND SETTERS **********************/\n\tvariable_Field_Labels(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._variable_Field_Labels = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._variable_Field_Labels_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._variable_Field_Labels;\n\t\t}\n\t}\n\n\t/************* Flow_Variable.__keys EF: GETTERS AND SETTERS **********************/\n\t__keys() {\n\t\treturn /*this.ef___keys = */ ((\n\t\t\tfunction() {\n\t\t\t\ttry {\n\n\t\t\t\t\tlet __ret = undefined;\n\n\t\t\t\t\t__ret = [\"element\", \"model_id\"];\n\n\t\t\t\t\tif (typeof(__ret) === 'string' && __ret.startsWith(\"s(\") && __ret.endsWith(\")\")) {\n\t\t\t\t\t\t__ret = this.runScript(__ret.slice(2, -1));\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof(__ret) === \"function\") {\n\t\t\t\t\t\t__ret = __ret(this);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn __ret;\n\n\t\t\t\t} catch (_vOfEx) {\n\t\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Variable.__keys(): \" + 'valueOf', _vOfEx, JSON.parse(((typeof(this) !== \"undefined\" && typeof(this._atob) !== \"undefined\") ? this._atob : (typeof(_FrEMD) !== \"undefined\" ? _FrEMD._atob : atob))(`eyJTZXJ2aWNlTm93IjpbImVsZW1lbnQiLCJtb2RlbF9pZCJdfQ==`), (key, value) => {\n\t\t\t\t\t\tif (typeof(value) === \"string\" && value.indexOf(\"=>\") > 0) return eval(\"(\" + value + \")\");\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t}\n\t\t)());\n\t}\n\n\t/************* Flow_Variable.length EF: GETTERS AND SETTERS **********************/\n\tlength() {\n\t\treturn /*this.ef_length = */ ((\n\t\t\tfunction() {\n\t\t\t\ttry {\n\n\t\t\t\t\tlet __ret = undefined;\n\n\t\t\t\t\t__ret = () => ({\n\t\t\t\t\t\t\"String\": 255,\n\t\t\t\t\t\t\"Text\": 4000,\n\t\t\t\t\t})[this.type()];\n\n\t\t\t\t\tif (typeof(__ret) === 'string' && __ret.startsWith(\"s(\") && __ret.endsWith(\")\")) {\n\t\t\t\t\t\t__ret = this.runScript(__ret.slice(2, -1));\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof(__ret) === \"function\") {\n\t\t\t\t\t\t__ret = __ret(this);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn __ret;\n\n\t\t\t\t} catch (_vOfEx) {\n\t\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Variable.length(): \" + 'valueOf', _vOfEx, JSON.parse(((typeof(this) !== \"undefined\" && typeof(this._atob) !== \"undefined\") ? this._atob : (typeof(_FrEMD) !== \"undefined\" ? _FrEMD._atob : atob))(`eyJTZXJ2aWNlTm93IjoiKCkgPT4gKHtcblx0XHRcdFx0XCJTdHJpbmdcIjogMjU1LFxuXHRcdFx0XHRcIlRleHRcIjogNDAwMCxcblx0XHRcdH0pW3RoaXMudHlwZSgpXSJ9`), (key, value) => {\n\t\t\t\t\t\tif (typeof(value) === \"string\" && value.indexOf(\"=>\") > 0) return eval(\"(\" + value + \")\");\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t}\n\t\t)());\n\t}\n\n\t/************* Flow_Variable.Model_ID EF: GETTERS AND SETTERS **********************/\n\tModel_ID() {\n\t\treturn /*this.ef_Model_ID = */ ((\n\t\t\tfunction() {\n\t\t\t\ttry {\n\n\t\t\t\t\tlet __ret = undefined;\n\n\t\t\t\t\tif (typeof(__ret) === 'string' && __ret.startsWith(\"s(\") && __ret.endsWith(\")\")) {\n\t\t\t\t\t\t__ret = this.runScript(__ret.slice(2, -1));\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof(__ret) === \"function\") {\n\t\t\t\t\t\t__ret = __ret(this);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn __ret;\n\n\t\t\t\t} catch (_vOfEx) {\n\t\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Variable.Model_ID(): \" + 'valueOf', _vOfEx, JSON.parse(((typeof(this) !== \"undefined\" && typeof(this._atob) !== \"undefined\") ? this._atob : (typeof(_FrEMD) !== \"undefined\" ? _FrEMD._atob : atob))(`eyJTZXJ2aWNlTm93IjoiPDxzKCh7e3BwYXRofX0uX190eXBlPT0nc3lzX3ZhcmlhYmxlX3ZhbHVlJyAmJiB7e19ffX0uc3ViZmxvdyk/e3tfX319LnN1YmZsb3cuSWQ6e3twcGF0aH19LklkKT4+IiwiX1NlcnZpY2VOb3ciOiI8PFsqKltmbG93X0Zsb3dfSW5wdXRzW21vZGVsX2lkPSd7e2lkfX0nXV0uSWQsICoqW2Zsb3dfRmxvd19PdXRwdXRzW21vZGVsX2lkPSd7e2lkfX0nXV0uSWQsICoqW2Zsb3dfRmxvd19WYXJpYWJsZXNbbW9kZWxfaWQ9J3t7aWR9fSddXS5JZCwgKipbc25hcHNob3RfRmxvd19JbnB1dHNbbW9kZWxfaWQ9J3t7aWR9fSddXS5JZCwgKipbc25hcHNob3RfRmxvd19PdXRwdXRzW21vZGVsX2lkPSd7e2lkfX0nXV0uSWQsICoqW3NuYXBzaG90X0Zsb3dfVmFyaWFibGVzW21vZGVsX2lkPSd7e2lkfX0nXV0uSWQsICoqW2luc3RhbmNlX0Zsb3dfSW5zdGFuY2VfSW5wdXRzW21vZGVsX2lkPSd7e2lkfX0nXV0uSWQsICoqW2luc3RhbmNlX1ZhcmlhYmxlX1ZhbHVlc1tmbG93SW5wdXRbbW9kZWxfaWQ9J3t7aWR9fSddXV0uc3ViZmxvdy5JZCwgKipbYWN0aW9uX1ZhcmlhYmxlX1ZhbHVlc1thY3Rpb25JbnB1dFttb2RlbF9pZD0ne3tpZH19J11dXS57XCJJZFwiOiBcIl9me2dzLmluZm8oX3RvU3RyaW5nICsgJzogRklKU09OOiAnICsgSlNPTi5zdHJpbmdpZnkocmVmcy5tYW55UmVmcykpfVwifS5JZF1bMF0+PiJ9`), (key, value) => {\n\t\t\t\t\t\tif (typeof(value) === \"string\" && value.indexOf(\"=>\") > 0) return eval(\"(\" + value + \")\");\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t}\n\t\t)());\n\t}\n\n\t/************* Flow_Variable.Model_Table EF: GETTERS AND SETTERS **********************/\n\tModel_Table() {\n\t\treturn /*this.ef_Model_Table = */ ((\n\t\t\tfunction() {\n\t\t\t\ttry {\n\n\t\t\t\t\tlet __ret = undefined;\n\n\t\t\t\t\tif (typeof(__ret) === 'string' && __ret.startsWith(\"s(\") && __ret.endsWith(\")\")) {\n\t\t\t\t\t\t__ret = this.runScript(__ret.slice(2, -1));\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof(__ret) === \"function\") {\n\t\t\t\t\t\t__ret = __ret(this);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn __ret;\n\n\t\t\t\t} catch (_vOfEx) {\n\t\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Variable.Model_Table(): \" + 'valueOf', _vOfEx, JSON.parse(((typeof(this) !== \"undefined\" && typeof(this._atob) !== \"undefined\") ? this._atob : (typeof(_FrEMD) !== \"undefined\" ? _FrEMD._atob : atob))(`eyJTZXJ2aWNlTm93IjoiPDxzKCh7c3lzX2h1Yl9mbG93OiAnc3lzX2h1Yl9mbG93Jywgc3lzX2h1Yl9mbG93X3NuYXBzaG90OiAnc3lzX2h1Yl9mbG93X3NuYXBzaG90Jywgc3lzX3ZhcmlhYmxlX3ZhbHVlOiAnc3lzX2h1Yl9mbG93Jywgc3lzX2h1Yl9zdWJfZmxvd19pbnN0YW5jZTogJ3N5c19odWJfZmxvd19sb2dpY19leHRfaW5wdXQnLCBzeXNfaHViX2FjdGlvbl9pbnN0YW5jZTogJ3N5c19odWJfZmxvdyd9KVt7e3BwYXRofX0uX190eXBlXSk+PiIsIl9TZXJ2aWNlTm93IjoiPDwkZXhpc3RzKCoqW2Zsb3dfRmxvd19JbnB1dHNbbW9kZWxfdGFibGU9J3t7aWR9fSddIG9yIGZsb3dfRmxvd19PdXRwdXRzW21vZGVsX3RhYmxlPSd7e2lkfX0nXSBvciBmbG93X0Zsb3dfVmFyaWFibGVzW21vZGVsX3RhYmxlPSd7e2lkfX0nXV0pPydzeXNfaHViX2Zsb3cnOigkZXhpc3RzKCoqW3NuYXBzaG90X0Zsb3dfSW5wdXRzW21vZGVsX3RhYmxlPSd7e2lkfX0nXSBvciBzbmFwc2hvdF9GbG93X091dHB1dHNbbW9kZWxfdGFibGU9J3t7aWR9fSddIG9yIHNuYXBzaG90X0Zsb3dfVmFyaWFibGVzW21vZGVsX3RhYmxlPSd7e2lkfX0nXV0pPydzeXNfaHViX2Zsb3dfc25hcHNob3QnOigkZXhpc3RzKCoqW2luc3RhbmNlX0Zsb3dfSW5zdGFuY2VfSW5wdXRzW21vZGVsX3RhYmxlPSd7e2lkfX0nXV0pPydzeXNfaHViX2Zsb3dfbG9naWNfZXh0X2lucHV0JzooJGV4aXN0cygqKlthY3Rpb25fVmFyaWFibGVfVmFsdWVzW2FjdGlvbklucHV0W21vZGVsX3RhYmxlPSd7e2lkfX0nXV1dIG9yICoqW2luc3RhbmNlX1ZhcmlhYmxlX1ZhbHVlc1tmbG93SW5wdXRbbW9kZWxfdGFibGU9J3t7aWR9fSddXV0pPydzeXNfaHViX2Zsb3cnOicnKSkpPj4ifQ==`), (key, value) => {\n\t\t\t\t\t\tif (typeof(value) === \"string\" && value.indexOf(\"=>\") > 0) return eval(\"(\" + value + \")\");\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t}\n\t\t)());\n\t}\n\n\t/************* Flow_Variable.Attributes EF: GETTERS AND SETTERS **********************/\n\tAttributes() {\n\t\treturn /*this.ef_Attributes = */ ((\n\t\t\tfunction() {\n\t\t\t\ttry {\n\n\t\t\t\t\tlet __ret = undefined;\n\n\t\t\t\t\tif (typeof(__ret) === 'string' && __ret.startsWith(\"s(\") && __ret.endsWith(\")\")) {\n\t\t\t\t\t\t__ret = this.runScript(__ret.slice(2, -1));\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof(__ret) === \"function\") {\n\t\t\t\t\t\t__ret = __ret(this);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn __ret;\n\n\t\t\t\t} catch (_vOfEx) {\n\t\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Variable.Attributes(): \" + 'valueOf', _vOfEx, JSON.parse(((typeof(this) !== \"undefined\" && typeof(this._atob) !== \"undefined\") ? this._atob : (typeof(_FrEMD) !== \"undefined\" ? _FrEMD._atob : atob))(`eyJTZXJ2aWNlTm93IjoiPDxzKCdlbGVtZW50X21hcHBpbmdfcHJvdmlkZXI9Y29tLmdsaWRlLmZsb3dfZGVzaWduLmFjdGlvbi5kYXRhLkZsb3dEZXNpZ25WYXJpYWJsZU1hcHBlcix1aVR5cGU9Jyt7e19ffX0uaW50ZXJuYWxfdHlwZSsnLHVpVW5pcXVlSWQ9Jyt7e19ffX0uSWQpPj4iLCJfU2VydmljZU5vdyI6Ijw8J2VsZW1lbnRfbWFwcGluZ19wcm92aWRlcj1jb20uZ2xpZGUuZmxvd19kZXNpZ24uYWN0aW9uLmRhdGEuRmxvd0Rlc2lnblZhcmlhYmxlTWFwcGVyLHVpVHlwZT0nJnt7X199fS5pbnRlcm5hbF90eXBlJicsdWlVbmlxdWVJZD0nJnt7X199fS5JZD4+In0=`), (key, value) => {\n\t\t\t\t\t\tif (typeof(value) === \"string\" && value.indexOf(\"=>\") > 0) return eval(\"(\" + value + \")\");\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t}\n\t\t)());\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = undefined || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\tif (this._type) ret += '^' + sPath + 'type' + (this._type_coop || '=') + this.type();\n\n\t\tif (this._mandatory) ret += '^' + sPath + 'mandatory' + (this._mandatory_coop || '=') + this.mandatory();\n\n\t\tif (this._reference) ret += /*(this._reference_coop || '=') + */ this.reference()._toEQuery(sPath + 'reference.');\n\n\t\tif (this._flow) ret += /*(this._flow_coop || '=') + */ this.flow()._toEQuery(sPath + 'flow.');\n\n\t\tif (this._snapshot) ret += /*(this._snapshot_coop || '=') + */ this.snapshot()._toEQuery(sPath + 'snapshot.');\n\n\t\t(this.variable_Field_Labels() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYField_Label.variable,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Variable._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn new shs_arbfw_appd_Flow_Variable()._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Variable._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Variable._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromGlideRecord(obj) {\n\t\tif (!obj) return null;\n\t\tif (obj.isValidRecord()) {\n\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Flow_Variable\" != 'ecc_queue' && obj.source == \"shs_arbfw_appd_Flow_Variable\") {\n\t\t\t\tobj.state = \"processing\";\n\t\t\t\tobj.update();\n\n\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\tresp.queue = 'output';\n\t\t\t\tresp.agent = obj.agent;\n\t\t\t\tresp.topic = obj.topic;\n\t\t\t\tresp.name = obj.name;\n\t\t\t\tresp.source = obj.source;\n\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\tlet ret = new shs_arbfw_appd_Flow_Variable()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t});\n\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t}\n\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\tresp.insert();\n\n\t\t\t\tobj.state = \"processed\";\n\t\t\t\tobj.update();\n\t\t\t\treturn resp;\n\t\t\t} else {\n\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\ttype: obj.getValue(\"type\"),\n\n\t\t\t\t\tmandatory: obj.getValue(\"mandatory\"),\n\n\t\t\t\t\treference: obj.getValue(\"reference\"),\n\n\t\t\t\t\tflow: obj.getValue(\"flow\"),\n\n\t\t\t\t\tsnapshot: obj.getValue(\"snapshot\"),\n\n\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tobj.query();\n\t\t\tlet grRet = [];\n\t\t\twhile (obj.next()) grRet.push(this._fromGlideRecord(obj));\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Variable._fromGlideRecord(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\treturn grRet;\n\t\t}\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\tundefined\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_appd_Flow_Variable()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\tif (/((([A-Za-z]{3,9}:(?:/ / ) ? )( ? : [-;: &= +$, w] + @) ? [A - Za - z0 - 9. - ] + | ( ? : www. | [-;: &= +$, w] + @)[A - Za - z0 - 9. - ] + )(( ? : /[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)/g.test(obj)) {\n\t\t\tvar msg = new sn_ws.RESTMessageV2();\n\t\t\tmsg.setEndpoint(obj);\n\t\t\tmsg.setRequestHeader('Content-Type', 'application/json');\n\t\t\tmsg.setHttpMethod('get');\n\t\t\treturn this._fromDocument(msg.execute().getBody());\n\t\t}\n\n\t\ttry {\n\t\t\tobj = JSON.parse(obj);\n\t\t} catch (ex) {\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Variable._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\tlet _obj = {\n\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))\n\t\t\t};\n\t\t\t_obj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(this))] = obj;\n\t\t\tobj = _obj;\n\t\t}\n\t\treturn this._fromDocument(obj);\n\t}\n\telse if (typeof(obj) === 'object') {\n\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\treturn this._fromGlideRecord(obj);\n\t\t} else if (obj._fromDocument) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Variable._fromDocument(): \" + \"redundent call\");\n\t\t\treturn obj;\n\t\t} else if (Array.isArray(obj)) {\n\t\t\treturn obj.map(function(o) {\n\t\t\t\treturn new shs_arbfw_appd_Flow_Variable()._fromDocument(o)\n\t\t\t});\n\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(obj))));\n\n\t\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Variable._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.type) !== 'undefined') {\n\n\t\t\t\t\tthis.type(obj.type);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.mandatory) !== 'undefined') {\n\n\t\t\t\t\tthis.mandatory(obj.mandatory);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.reference) !== 'undefined') {\n\n\t\t\t\t\tthis.reference(new shs_arbfw_appd_Table()._fromDocument(obj.reference));\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.flow) !== 'undefined') {\n\n\t\t\t\t\tthis.flow(new shs_arbfw_appd_Flow()._fromDocument(obj.flow));\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.snapshot) !== 'undefined') {\n\n\t\t\t\t\tthis.snapshot(new shs_arbfw_appd_Flow_Snapshot()._fromDocument(obj.snapshot));\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.variable_Field_Labels) !== 'undefined') this.variable_Field_Labels(new shs_arbfw_appd_Field_Label()._fromDocument(obj.variable_Field_Labels));\n\n\t\t\t} else { // if(obj.constructor.name==\"Flow_Variable\"){\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Variable._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t}\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Variable._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\treturn null;\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Variable._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Variable._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Variable._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\treturn this;\n}\n\n_insertAssert() {\n\treturn true;\n}\n\n_updateAssert() {\n\treturn true;\n}\n\n_storeAssert() {\n\treturn true;\n}\n\n_findAssert() {\n\treturn true;\n}\n\n_new(c) {\n\n\treturn new shs_arbfw_appd_Platform._new(c);\n\n}\n\n_toDocument(arFields) {\n\n\tlet ret = undefined || {};\n\n\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tret.active = this.active();\n\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tret.enabled = this.enabled();\n\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tret.code = this.code();\n\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tret.order = this.order();\n\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tret.date = this.date();\n\n\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tret.name = this.name();\n\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tret.remark = this.remark();\n\n\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t}\n\n\tif (typeof(this._type) !== 'undefined') {\n\t\tret.type = this.type();\n\n\t}\n\n\tif (typeof(this._mandatory) !== 'undefined') {\n\t\tret.mandatory = this.mandatory();\n\n\t}\n\n\tif (typeof(this._reference) !== 'undefined') {\n\t\tret.reference = this.reference();\n\n\t\tif (ret.reference) {\n\t\t\tret.reference = ret.reference._toDocument();\n\t\t\tif (typeof(ret.reference) === 'object' && !Object.keys(ret.reference).length) ret.reference = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this._flow) !== 'undefined') {\n\t\tret.flow = this.flow();\n\n\t\tif (ret.flow) {\n\t\t\tret.flow = ret.flow._toDocument();\n\t\t\tif (typeof(ret.flow) === 'object' && !Object.keys(ret.flow).length) ret.flow = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this._snapshot) !== 'undefined') {\n\t\tret.snapshot = this.snapshot();\n\n\t\tif (ret.snapshot) {\n\t\t\tret.snapshot = ret.snapshot._toDocument();\n\t\t\tif (typeof(ret.snapshot) === 'object' && !Object.keys(ret.snapshot).length) ret.snapshot = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this.variable_Field_Labels()) !== 'undefined') ret.variable_Field_Labels = this.variable_Field_Labels().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (typeof(this.__keys()) !== 'undefined') ret.__keys = this.__keys();\n\n\tif (typeof(this.length()) !== 'undefined') ret.length = this.length();\n\n\tif (typeof(this.Model_ID()) !== 'undefined') ret.Model_ID = this.Model_ID();\n\n\tif (typeof(this.Model_Table()) !== 'undefined') ret.Model_Table = this.Model_Table();\n\n\tif (typeof(this.Attributes()) !== 'undefined') ret.Attributes = this.Attributes();\n\n\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\treturn !arFields.find(function(_k) {\n\t\t\treturn _k == k;\n\t\t});\n\t}).forEach(function(k) {\n\t\tdelete ret[k];\n\t});\n\n\treturn ret;\n}\n\n_unique(keys, ret) {\n\tret = ret || new shs_arbfw_appd_Flow_Variable();\n\n\tundefined\n\n\t// if(this.Id) ret.Id = this.Id;\n\tif (!keys) {\n\n\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (typeof(this.flow()) !== 'undefined') ret.flow(this.flow()._unique());\n\n\t\tif (typeof(this.snapshot()) !== 'undefined') ret.snapshot(this.snapshot()._unique());\n\n\t} else {\n\n\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t\tif (keys.indexOf(\"type\") >= 0 && typeof(this.type()) !== 'undefined') ret.type(this.type());\n\n\t\tif (keys.indexOf(\"mandatory\") >= 0 && typeof(this.mandatory()) !== 'undefined') ret.mandatory(this.mandatory());\n\n\t\tif (keys.indexOf(\"reference\") >= 0 && typeof(this.reference()) !== 'undefined') ret.reference(this.reference()._unique());\n\n\t\tif (keys.indexOf(\"flow\") >= 0 && typeof(this.flow()) !== 'undefined') ret.flow(this.flow()._unique());\n\n\t\tif (keys.indexOf(\"snapshot\") >= 0 && typeof(this.snapshot()) !== 'undefined') ret.snapshot(this.snapshot()._unique());\n\n\t}\n\n\treturn ret;\n}\n\n_query(gq) {\n\tlet arFields = Object.keys(global.Schema.of('sys_hub_flow_variable', ['*'])['sys_hub_flow_variable']);\n\n\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('sys_hub_flow_variable');\n\n\tundefined\n\n\tlet idf = ((function(r) {\n\t\tlet ret = 'sys_id';\n\t\tif (typeof(r.__idField) === 'function') {\n\t\t\tret = r.__idField();\n\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\tret = r.__idField || this.__idField();\n\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\tret = 'Id';\n\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\tret = 'sys_id';\n\t\t}\n\t\treturn ret;\n\t})(this));\n\tif (idf == 'Id') idf = 'sys_id';\n\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tlet coop = this._active_coop || '=';\n\n\t\tlet v = this.active();\n\n\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Variable._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tlet coop = this._enabled_coop || '=';\n\n\t\tlet v = this.enabled();\n\n\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Variable._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tlet coop = this._code_coop || '=';\n\n\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.code();\n\n\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Variable._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tlet coop = this._order_coop || '=';\n\n\t\tlet v = this.order();\n\n\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Variable._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tlet coop = this._date_coop || '=';\n\n\t\tlet v = this.date();\n\n\t\tif (v) {\n\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t}\n\n\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Variable._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tlet coop = this._name_coop || '=';\n\n\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.name();\n\n\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Variable._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tlet coop = this._remark_coop || '=';\n\n\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.remark();\n\n\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Variable._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._type) !== 'undefined') {\n\t\tlet coop = this._type_coop || '=';\n\n\t\tif (!this._type_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.type();\n\n\t\tif (arFields.indexOf('type') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Variable._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('type');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('type');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('type', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._mandatory) !== 'undefined') {\n\t\tlet coop = this._mandatory_coop || '=';\n\n\t\tlet v = this.mandatory();\n\n\t\tif (arFields.indexOf('mandatory') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Variable._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('mandatory');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('mandatory');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('mandatory', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._reference) !== 'undefined') {\n\t\tlet coop = this._reference_coop || '=';\n\n\t\tlet v = this.reference();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Flow Variable\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Variable._query(): \"+ \"reference \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Variable._query(): \" + \"reference[reference] resuled in undefined: \" + JSON.stringify(this.reference()));\n\t\t}\n\n\t\tif (arFields.indexOf('reference') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Variable._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('reference');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('reference');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('reference', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._flow) !== 'undefined') {\n\t\tlet coop = this._flow_coop || '=';\n\n\t\tlet v = this.flow();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Flow Variable\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Variable._query(): \"+ \"flow \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Variable._query(): \" + \"flow[flow] resuled in undefined: \" + JSON.stringify(this.flow()));\n\t\t}\n\n\t\tif (arFields.indexOf('flow') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Variable._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('flow');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('flow');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('flow', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._snapshot) !== 'undefined') {\n\t\tlet coop = this._snapshot_coop || '=';\n\n\t\tlet v = this.snapshot();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Flow Variable\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Variable._query(): \"+ \"snapshot \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Variable._query(): \" + \"snapshot[snapshot] resuled in undefined: \" + JSON.stringify(this.snapshot()));\n\t\t}\n\n\t\tif (arFields.indexOf('snapshot') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Variable._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('snapshot');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('snapshot');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('snapshot', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Variable._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\treturn this._queryGQ;\n}\n\n_save(obj) {\n\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\treturn new shs_arbfw_appd_Flow_Variable()._save(o)\n\t});\n\n\tlet _obj = {};\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Variable._save(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\tObject.keys(obj).filter(function(k) {\n\t\treturn Object.keys(global.Schema.of('sys_hub_flow_variable', ['*'])['sys_hub_flow_variable']).filter(function(_k) {\n\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t}).indexOf(k.toLowerCase()) >= 0\n\t}).forEach(function(k) {\n\t\t_obj[k.toLowerCase()] = obj[k]\n\t});\n\n\tObject.keys(_obj).forEach(function(k) {\n\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Variable._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tdelete _obj[k];\n\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Variable._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t}\n\t});\n\n\tlet _this = null;\n\tif (obj.__keys) {\n\t\tlet kObj = {};\n\t\tkObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(_obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))));\n\t\tobj.__keys.forEach(function(k) {\n\t\t\tkObj[k] = _obj[k]\n\t\t});\n\t\t_this = new shs_arbfw_appd_Flow_Variable()._fromDocument(kObj);\n\t} else {\n\t\t_this = new shs_arbfw_appd_Flow_Variable()._fromDocument(_obj)._unique();\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Variable._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\tdelete _obj.__idField;\n\n\ttry {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Variable._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\tObject.keys(_obj).filter(function(k) {\n\t\t\treturn k.toLowerCase() != k;\n\t\t}).forEach(function(k) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Variable._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tvar lk = k.toLowerCase();\n\t\t\t_obj[lk] = _obj[k];\n\t\t\tdelete _obj[k];\n\t\t});\n\n\t\tlet gq = new global.GlideQuery(obj.__type || 'sys_hub_flow_variable');\n\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Variable._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\tif (_obj.sys_id) {\n\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t} else {\n\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\tgq = gq.insert(_obj);\n\t\t}\n\t\tlet _fObj = {};\n\t\t_fObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))));\n\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('sys_hub_flow_variable', ['*'])['sys_hub_flow_variable']))));\n\t} catch (ex) {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Variable._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Variable._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\treturn this;\n\t}\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Variable._save(): \" + \"obj.variable_Field_Labels: \" + JSON.stringify(obj.variable_Field_Labels, null, 4));\n\tif (Array.isArray(obj.variable_Field_Labels)) this.variable_Field_Labels(obj.variable_Field_Labels.map(function(ta) {\n\t\treturn new shs_arbfw_appd_Field_Label()._save(ta)\n\t}));\n\n\treturn this;\n}\n\n/************* Flow_Variable.store() **********************/\nstore(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Variable.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Variable.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Variable.store(): \" + \"executing locally \");\n\n\t\t// store locally\n\t\treturn this._save(this._toDocument());\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Flow_Variable.findAll() **********************/\nfindAll(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Variable.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Variable.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Variable.findAll(): \" + \"executing locally \");\n\n\t\t// findAll locally\n\t\tlet gr = new GlideRecord('sys_hub_flow_variable');\n\t\tgr.addEncodedQuery(this._toEQuery());\n\t\treturn this._fromDocument(gr);\n\n\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('sys_hub_flow_variable', ['*'])['sys_hub_flow_variable'])));\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Flow_Variable.find() **********************/\nfind(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Variable.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Variable.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Variable.find(): \" + \"executing locally \");\n\n\t\tlet ret = this.findAll();\n\t\treturn ret.length ? ret[0] : null;\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"scriptFile_Script_Compatibilitys":[{"active":true,"enabled":true}],"client_callable":true,"sys_name":"shs_arbfw_appd_Flow_Data_Variable","api_name":"x_1790593_arboard.shs_arbfw_appd_Flow_Data_Variable","name":"shs_arbfw_appd_Flow_Data_Variable","script":"class shs_arbfw_appd_Flow_Data_Variable extends global.AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"Application Designer\";\n\t\tthis.__type = \"shs_arbfw_appd_Flow_Data_Variable\";\n\t\tthis.__alias = \"shs_arbfw_appd\";\n\t\tthis.__scope = \"shs_arbfw\";\n\t}\n\n\t/************* Flow_Data_Variable.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Flow_Data_Variable.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Flow_Data_Variable.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Flow_Data_Variable.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Flow_Data_Variable.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Data_Variable.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Flow_Data_Variable.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Flow_Data_Variable.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Flow_Data_Variable.type GETTERS AND SETTERS **********************/\n\ttype(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._type = v;\n\t\t\tthis._type_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._type;\n\t\t}\n\t}\n\n\t/************* Flow_Data_Variable.mandatory GETTERS AND SETTERS **********************/\n\tmandatory(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._mandatory = v;\n\t\t\tthis._mandatory_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._mandatory;\n\t\t}\n\t}\n\n\t/************* Flow_Data_Variable.reference GETTERS AND SETTERS **********************/\n\treference(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._reference = v;\n\t\t\tthis._reference_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._reference;\n\t\t}\n\t}\n\n\t/************* Flow_Data_Variable.flow GETTERS AND SETTERS **********************/\n\tflow(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._flow = v;\n\t\t\tthis._flow_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._flow;\n\t\t}\n\t}\n\n\t/************* Flow_Data_Variable.snapshot GETTERS AND SETTERS **********************/\n\tsnapshot(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._snapshot = v;\n\t\t\tthis._snapshot_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._snapshot;\n\t\t}\n\t}\n\n\t/************* Flow_Data_Variable.__keys EF: GETTERS AND SETTERS **********************/\n\t__keys() {\n\t\treturn /*this.ef___keys = */ ((\n\t\t\tfunction() {\n\t\t\t\ttry {\n\n\t\t\t\t\tlet __ret = undefined;\n\n\t\t\t\t\t__ret = [\"element\", \"model_id\"];\n\n\t\t\t\t\tif (typeof(__ret) === 'string' && __ret.startsWith(\"s(\") && __ret.endsWith(\")\")) {\n\t\t\t\t\t\t__ret = this.runScript(__ret.slice(2, -1));\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof(__ret) === \"function\") {\n\t\t\t\t\t\t__ret = __ret(this);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn __ret;\n\n\t\t\t\t} catch (_vOfEx) {\n\t\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Data_Variable.__keys(): \" + 'valueOf', _vOfEx, JSON.parse(((typeof(this) !== \"undefined\" && typeof(this._atob) !== \"undefined\") ? this._atob : (typeof(_FrEMD) !== \"undefined\" ? _FrEMD._atob : atob))(`eyJTZXJ2aWNlTm93IjpbImVsZW1lbnQiLCJtb2RlbF9pZCJdfQ==`), (key, value) => {\n\t\t\t\t\t\tif (typeof(value) === \"string\" && value.indexOf(\"=>\") > 0) return eval(\"(\" + value + \")\");\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t}\n\t\t)());\n\t}\n\n\t/************* Flow_Data_Variable.length EF: GETTERS AND SETTERS **********************/\n\tlength() {\n\t\treturn /*this.ef_length = */ ((\n\t\t\tfunction() {\n\t\t\t\ttry {\n\n\t\t\t\t\tlet __ret = undefined;\n\n\t\t\t\t\t__ret = () => ({\n\t\t\t\t\t\t\"String\": 255,\n\t\t\t\t\t\t\"Text\": 4000,\n\t\t\t\t\t})[this.type()];\n\n\t\t\t\t\tif (typeof(__ret) === 'string' && __ret.startsWith(\"s(\") && __ret.endsWith(\")\")) {\n\t\t\t\t\t\t__ret = this.runScript(__ret.slice(2, -1));\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof(__ret) === \"function\") {\n\t\t\t\t\t\t__ret = __ret(this);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn __ret;\n\n\t\t\t\t} catch (_vOfEx) {\n\t\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Data_Variable.length(): \" + 'valueOf', _vOfEx, JSON.parse(((typeof(this) !== \"undefined\" && typeof(this._atob) !== \"undefined\") ? this._atob : (typeof(_FrEMD) !== \"undefined\" ? _FrEMD._atob : atob))(`eyJTZXJ2aWNlTm93IjoiKCkgPT4gKHtcblx0XHRcdFx0XCJTdHJpbmdcIjogMjU1LFxuXHRcdFx0XHRcIlRleHRcIjogNDAwMCxcblx0XHRcdH0pW3RoaXMudHlwZSgpXSJ9`), (key, value) => {\n\t\t\t\t\t\tif (typeof(value) === \"string\" && value.indexOf(\"=>\") > 0) return eval(\"(\" + value + \")\");\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t}\n\t\t)());\n\t}\n\n\t/************* Flow_Data_Variable.Model_ID EF: GETTERS AND SETTERS **********************/\n\tModel_ID() {\n\t\treturn /*this.ef_Model_ID = */ ((\n\t\t\tfunction() {\n\t\t\t\ttry {\n\n\t\t\t\t\tlet __ret = undefined;\n\n\t\t\t\t\tif (typeof(__ret) === 'string' && __ret.startsWith(\"s(\") && __ret.endsWith(\")\")) {\n\t\t\t\t\t\t__ret = this.runScript(__ret.slice(2, -1));\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof(__ret) === \"function\") {\n\t\t\t\t\t\t__ret = __ret(this);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn __ret;\n\n\t\t\t\t} catch (_vOfEx) {\n\t\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Data_Variable.Model_ID(): \" + 'valueOf', _vOfEx, JSON.parse(((typeof(this) !== \"undefined\" && typeof(this._atob) !== \"undefined\") ? this._atob : (typeof(_FrEMD) !== \"undefined\" ? _FrEMD._atob : atob))(`eyJTZXJ2aWNlTm93IjoiPDxzKCh7e3BwYXRofX0uX190eXBlPT0nc3lzX3ZhcmlhYmxlX3ZhbHVlJyAmJiB7e19ffX0uc3ViZmxvdyk/e3tfX319LnN1YmZsb3cuSWQ6e3twcGF0aH19LklkKT4+IiwiX1NlcnZpY2VOb3ciOiI8PFsqKltmbG93X0Zsb3dfSW5wdXRzW21vZGVsX2lkPSd7e2lkfX0nXV0uSWQsICoqW2Zsb3dfRmxvd19PdXRwdXRzW21vZGVsX2lkPSd7e2lkfX0nXV0uSWQsICoqW2Zsb3dfRmxvd19WYXJpYWJsZXNbbW9kZWxfaWQ9J3t7aWR9fSddXS5JZCwgKipbc25hcHNob3RfRmxvd19JbnB1dHNbbW9kZWxfaWQ9J3t7aWR9fSddXS5JZCwgKipbc25hcHNob3RfRmxvd19PdXRwdXRzW21vZGVsX2lkPSd7e2lkfX0nXV0uSWQsICoqW3NuYXBzaG90X0Zsb3dfVmFyaWFibGVzW21vZGVsX2lkPSd7e2lkfX0nXV0uSWQsICoqW2luc3RhbmNlX0Zsb3dfSW5zdGFuY2VfSW5wdXRzW21vZGVsX2lkPSd7e2lkfX0nXV0uSWQsICoqW2luc3RhbmNlX1ZhcmlhYmxlX1ZhbHVlc1tmbG93SW5wdXRbbW9kZWxfaWQ9J3t7aWR9fSddXV0uc3ViZmxvdy5JZCwgKipbYWN0aW9uX1ZhcmlhYmxlX1ZhbHVlc1thY3Rpb25JbnB1dFttb2RlbF9pZD0ne3tpZH19J11dXS57XCJJZFwiOiBcIl9me2dzLmluZm8oX3RvU3RyaW5nICsgJzogRklKU09OOiAnICsgSlNPTi5zdHJpbmdpZnkocmVmcy5tYW55UmVmcykpfVwifS5JZF1bMF0+PiJ9`), (key, value) => {\n\t\t\t\t\t\tif (typeof(value) === \"string\" && value.indexOf(\"=>\") > 0) return eval(\"(\" + value + \")\");\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t}\n\t\t)());\n\t}\n\n\t/************* Flow_Data_Variable.Model_Table EF: GETTERS AND SETTERS **********************/\n\tModel_Table() {\n\t\treturn /*this.ef_Model_Table = */ ((\n\t\t\tfunction() {\n\t\t\t\ttry {\n\n\t\t\t\t\tlet __ret = undefined;\n\n\t\t\t\t\tif (typeof(__ret) === 'string' && __ret.startsWith(\"s(\") && __ret.endsWith(\")\")) {\n\t\t\t\t\t\t__ret = this.runScript(__ret.slice(2, -1));\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof(__ret) === \"function\") {\n\t\t\t\t\t\t__ret = __ret(this);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn __ret;\n\n\t\t\t\t} catch (_vOfEx) {\n\t\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Data_Variable.Model_Table(): \" + 'valueOf', _vOfEx, JSON.parse(((typeof(this) !== \"undefined\" && typeof(this._atob) !== \"undefined\") ? this._atob : (typeof(_FrEMD) !== \"undefined\" ? _FrEMD._atob : atob))(`eyJTZXJ2aWNlTm93IjoiPDxzKCh7c3lzX2h1Yl9mbG93OiAnc3lzX2h1Yl9mbG93Jywgc3lzX2h1Yl9mbG93X3NuYXBzaG90OiAnc3lzX2h1Yl9mbG93X3NuYXBzaG90Jywgc3lzX3ZhcmlhYmxlX3ZhbHVlOiAnc3lzX2h1Yl9mbG93Jywgc3lzX2h1Yl9zdWJfZmxvd19pbnN0YW5jZTogJ3N5c19odWJfZmxvd19sb2dpY19leHRfaW5wdXQnLCBzeXNfaHViX2FjdGlvbl9pbnN0YW5jZTogJ3N5c19odWJfZmxvdyd9KVt7e3BwYXRofX0uX190eXBlXSk+PiIsIl9TZXJ2aWNlTm93IjoiPDwkZXhpc3RzKCoqW2Zsb3dfRmxvd19JbnB1dHNbbW9kZWxfdGFibGU9J3t7aWR9fSddIG9yIGZsb3dfRmxvd19PdXRwdXRzW21vZGVsX3RhYmxlPSd7e2lkfX0nXSBvciBmbG93X0Zsb3dfVmFyaWFibGVzW21vZGVsX3RhYmxlPSd7e2lkfX0nXV0pPydzeXNfaHViX2Zsb3cnOigkZXhpc3RzKCoqW3NuYXBzaG90X0Zsb3dfSW5wdXRzW21vZGVsX3RhYmxlPSd7e2lkfX0nXSBvciBzbmFwc2hvdF9GbG93X091dHB1dHNbbW9kZWxfdGFibGU9J3t7aWR9fSddIG9yIHNuYXBzaG90X0Zsb3dfVmFyaWFibGVzW21vZGVsX3RhYmxlPSd7e2lkfX0nXV0pPydzeXNfaHViX2Zsb3dfc25hcHNob3QnOigkZXhpc3RzKCoqW2luc3RhbmNlX0Zsb3dfSW5zdGFuY2VfSW5wdXRzW21vZGVsX3RhYmxlPSd7e2lkfX0nXV0pPydzeXNfaHViX2Zsb3dfbG9naWNfZXh0X2lucHV0JzooJGV4aXN0cygqKlthY3Rpb25fVmFyaWFibGVfVmFsdWVzW2FjdGlvbklucHV0W21vZGVsX3RhYmxlPSd7e2lkfX0nXV1dIG9yICoqW2luc3RhbmNlX1ZhcmlhYmxlX1ZhbHVlc1tmbG93SW5wdXRbbW9kZWxfdGFibGU9J3t7aWR9fSddXV0pPydzeXNfaHViX2Zsb3cnOicnKSkpPj4ifQ==`), (key, value) => {\n\t\t\t\t\t\tif (typeof(value) === \"string\" && value.indexOf(\"=>\") > 0) return eval(\"(\" + value + \")\");\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t}\n\t\t)());\n\t}\n\n\t/************* Flow_Data_Variable.Attributes EF: GETTERS AND SETTERS **********************/\n\tAttributes() {\n\t\treturn /*this.ef_Attributes = */ ((\n\t\t\tfunction() {\n\t\t\t\ttry {\n\n\t\t\t\t\tlet __ret = undefined;\n\n\t\t\t\t\tif (typeof(__ret) === 'string' && __ret.startsWith(\"s(\") && __ret.endsWith(\")\")) {\n\t\t\t\t\t\t__ret = this.runScript(__ret.slice(2, -1));\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof(__ret) === \"function\") {\n\t\t\t\t\t\t__ret = __ret(this);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn __ret;\n\n\t\t\t\t} catch (_vOfEx) {\n\t\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Data_Variable.Attributes(): \" + 'valueOf', _vOfEx, JSON.parse(((typeof(this) !== \"undefined\" && typeof(this._atob) !== \"undefined\") ? this._atob : (typeof(_FrEMD) !== \"undefined\" ? _FrEMD._atob : atob))(`eyJTZXJ2aWNlTm93IjoiPDxzKCdlbGVtZW50X21hcHBpbmdfcHJvdmlkZXI9Y29tLmdsaWRlLmZsb3dfZGVzaWduLmFjdGlvbi5kYXRhLkZsb3dEZXNpZ25WYXJpYWJsZU1hcHBlcix1aVR5cGU9Jyt7e19ffX0uaW50ZXJuYWxfdHlwZSsnLHVpVW5pcXVlSWQ9Jyt7e19ffX0uSWQpPj4iLCJfU2VydmljZU5vdyI6Ijw8J2VsZW1lbnRfbWFwcGluZ19wcm92aWRlcj1jb20uZ2xpZGUuZmxvd19kZXNpZ24uYWN0aW9uLmRhdGEuRmxvd0Rlc2lnblZhcmlhYmxlTWFwcGVyLHVpVHlwZT0nJnt7X199fS5pbnRlcm5hbF90eXBlJicsdWlVbmlxdWVJZD0nJnt7X199fS5JZD4+In0=`), (key, value) => {\n\t\t\t\t\t\tif (typeof(value) === \"string\" && value.indexOf(\"=>\") > 0) return eval(\"(\" + value + \")\");\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t}\n\t\t)());\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = undefined || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\tif (this._type) ret += '^' + sPath + 'type' + (this._type_coop || '=') + this.type();\n\n\t\tif (this._mandatory) ret += '^' + sPath + 'mandatory' + (this._mandatory_coop || '=') + this.mandatory();\n\n\t\tif (this._reference) ret += /*(this._reference_coop || '=') + */ this.reference()._toEQuery(sPath + 'reference.');\n\n\t\tif (this._flow) ret += /*(this._flow_coop || '=') + */ this.flow()._toEQuery(sPath + 'flow.');\n\n\t\tif (this._snapshot) ret += /*(this._snapshot_coop || '=') + */ this.snapshot()._toEQuery(sPath + 'snapshot.');\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Data_Variable._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn new shs_arbfw_appd_Flow_Data_Variable()._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Data_Variable._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Data_Variable._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromGlideRecord(obj) {\n\t\tif (!obj) return null;\n\t\tif (obj.isValidRecord()) {\n\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Flow_Data_Variable\" != 'ecc_queue' && obj.source == \"shs_arbfw_appd_Flow_Data_Variable\") {\n\t\t\t\tobj.state = \"processing\";\n\t\t\t\tobj.update();\n\n\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\tresp.queue = 'output';\n\t\t\t\tresp.agent = obj.agent;\n\t\t\t\tresp.topic = obj.topic;\n\t\t\t\tresp.name = obj.name;\n\t\t\t\tresp.source = obj.source;\n\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\tlet ret = new shs_arbfw_appd_Flow_Data_Variable()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t});\n\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t}\n\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\tresp.insert();\n\n\t\t\t\tobj.state = \"processed\";\n\t\t\t\tobj.update();\n\t\t\t\treturn resp;\n\t\t\t} else {\n\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\ttype: obj.getValue(\"type\"),\n\n\t\t\t\t\tmandatory: obj.getValue(\"mandatory\"),\n\n\t\t\t\t\treference: obj.getValue(\"reference\"),\n\n\t\t\t\t\tflow: obj.getValue(\"flow\"),\n\n\t\t\t\t\tsnapshot: obj.getValue(\"snapshot\"),\n\n\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tobj.query();\n\t\t\tlet grRet = [];\n\t\t\twhile (obj.next()) grRet.push(this._fromGlideRecord(obj));\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Data_Variable._fromGlideRecord(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\treturn grRet;\n\t\t}\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\tundefined\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_appd_Flow_Data_Variable()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\tif (/((([A-Za-z]{3,9}:(?:/ / ) ? )( ? : [-;: &= +$, w] + @) ? [A - Za - z0 - 9. - ] + | ( ? : www. | [-;: &= +$, w] + @)[A - Za - z0 - 9. - ] + )(( ? : /[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)/g.test(obj)) {\n\t\t\tvar msg = new sn_ws.RESTMessageV2();\n\t\t\tmsg.setEndpoint(obj);\n\t\t\tmsg.setRequestHeader('Content-Type', 'application/json');\n\t\t\tmsg.setHttpMethod('get');\n\t\t\treturn this._fromDocument(msg.execute().getBody());\n\t\t}\n\n\t\ttry {\n\t\t\tobj = JSON.parse(obj);\n\t\t} catch (ex) {\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Data_Variable._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\tlet _obj = {\n\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))\n\t\t\t};\n\t\t\t_obj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(this))] = obj;\n\t\t\tobj = _obj;\n\t\t}\n\t\treturn this._fromDocument(obj);\n\t}\n\telse if (typeof(obj) === 'object') {\n\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\treturn this._fromGlideRecord(obj);\n\t\t} else if (obj._fromDocument) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Data_Variable._fromDocument(): \" + \"redundent call\");\n\t\t\treturn obj;\n\t\t} else if (Array.isArray(obj)) {\n\t\t\treturn obj.map(function(o) {\n\t\t\t\treturn new shs_arbfw_appd_Flow_Data_Variable()._fromDocument(o)\n\t\t\t});\n\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(obj))));\n\n\t\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Data_Variable._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.type) !== 'undefined') {\n\n\t\t\t\t\tthis.type(obj.type);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.mandatory) !== 'undefined') {\n\n\t\t\t\t\tthis.mandatory(obj.mandatory);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.reference) !== 'undefined') {\n\n\t\t\t\t\tthis.reference(new shs_arbfw_appd_Table()._fromDocument(obj.reference));\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.flow) !== 'undefined') {\n\n\t\t\t\t\tthis.flow(new shs_arbfw_appd_Flow()._fromDocument(obj.flow));\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.snapshot) !== 'undefined') {\n\n\t\t\t\t\tthis.snapshot(new shs_arbfw_appd_Flow_Snapshot()._fromDocument(obj.snapshot));\n\t\t\t\t}\n\n\t\t\t} else { // if(obj.constructor.name==\"Flow_Data_Variable\"){\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Data_Variable._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t}\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Data_Variable._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\treturn null;\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Data_Variable._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Data_Variable._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Data_Variable._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\treturn this;\n}\n\n_insertAssert() {\n\treturn true;\n}\n\n_updateAssert() {\n\treturn true;\n}\n\n_storeAssert() {\n\treturn true;\n}\n\n_findAssert() {\n\treturn true;\n}\n\n_new(c) {\n\n\treturn new shs_arbfw_appd_Platform._new(c);\n\n}\n\n_toDocument(arFields) {\n\n\tlet ret = undefined || {};\n\n\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tret.active = this.active();\n\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tret.enabled = this.enabled();\n\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tret.code = this.code();\n\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tret.order = this.order();\n\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tret.date = this.date();\n\n\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tret.name = this.name();\n\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tret.remark = this.remark();\n\n\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t}\n\n\tif (typeof(this._type) !== 'undefined') {\n\t\tret.type = this.type();\n\n\t}\n\n\tif (typeof(this._mandatory) !== 'undefined') {\n\t\tret.mandatory = this.mandatory();\n\n\t}\n\n\tif (typeof(this._reference) !== 'undefined') {\n\t\tret.reference = this.reference();\n\n\t\tif (ret.reference) {\n\t\t\tret.reference = ret.reference._toDocument();\n\t\t\tif (typeof(ret.reference) === 'object' && !Object.keys(ret.reference).length) ret.reference = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this._flow) !== 'undefined') {\n\t\tret.flow = this.flow();\n\n\t\tif (ret.flow) {\n\t\t\tret.flow = ret.flow._toDocument();\n\t\t\tif (typeof(ret.flow) === 'object' && !Object.keys(ret.flow).length) ret.flow = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this._snapshot) !== 'undefined') {\n\t\tret.snapshot = this.snapshot();\n\n\t\tif (ret.snapshot) {\n\t\t\tret.snapshot = ret.snapshot._toDocument();\n\t\t\tif (typeof(ret.snapshot) === 'object' && !Object.keys(ret.snapshot).length) ret.snapshot = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this.__keys()) !== 'undefined') ret.__keys = this.__keys();\n\n\tif (typeof(this.length()) !== 'undefined') ret.length = this.length();\n\n\tif (typeof(this.Model_ID()) !== 'undefined') ret.Model_ID = this.Model_ID();\n\n\tif (typeof(this.Model_Table()) !== 'undefined') ret.Model_Table = this.Model_Table();\n\n\tif (typeof(this.Attributes()) !== 'undefined') ret.Attributes = this.Attributes();\n\n\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\treturn !arFields.find(function(_k) {\n\t\t\treturn _k == k;\n\t\t});\n\t}).forEach(function(k) {\n\t\tdelete ret[k];\n\t});\n\n\treturn ret;\n}\n\n_unique(keys, ret) {\n\tret = ret || new shs_arbfw_appd_Flow_Data_Variable();\n\n\tundefined\n\n\t// if(this.Id) ret.Id = this.Id;\n\tif (!keys) {\n\n\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (typeof(this.flow()) !== 'undefined') ret.flow(this.flow()._unique());\n\n\t\tif (typeof(this.snapshot()) !== 'undefined') ret.snapshot(this.snapshot()._unique());\n\n\t} else {\n\n\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t\tif (keys.indexOf(\"type\") >= 0 && typeof(this.type()) !== 'undefined') ret.type(this.type());\n\n\t\tif (keys.indexOf(\"mandatory\") >= 0 && typeof(this.mandatory()) !== 'undefined') ret.mandatory(this.mandatory());\n\n\t\tif (keys.indexOf(\"reference\") >= 0 && typeof(this.reference()) !== 'undefined') ret.reference(this.reference()._unique());\n\n\t\tif (keys.indexOf(\"flow\") >= 0 && typeof(this.flow()) !== 'undefined') ret.flow(this.flow()._unique());\n\n\t\tif (keys.indexOf(\"snapshot\") >= 0 && typeof(this.snapshot()) !== 'undefined') ret.snapshot(this.snapshot()._unique());\n\n\t}\n\n\treturn ret;\n}\n\n_query(gq) {\n\tlet arFields = Object.keys(global.Schema.of('sys_flow_data_var', ['*'])['sys_flow_data_var']);\n\n\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('sys_flow_data_var');\n\n\tundefined\n\n\tlet idf = ((function(r) {\n\t\tlet ret = 'sys_id';\n\t\tif (typeof(r.__idField) === 'function') {\n\t\t\tret = r.__idField();\n\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\tret = r.__idField || this.__idField();\n\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\tret = 'Id';\n\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\tret = 'sys_id';\n\t\t}\n\t\treturn ret;\n\t})(this));\n\tif (idf == 'Id') idf = 'sys_id';\n\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tlet coop = this._active_coop || '=';\n\n\t\tlet v = this.active();\n\n\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Data_Variable._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tlet coop = this._enabled_coop || '=';\n\n\t\tlet v = this.enabled();\n\n\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Data_Variable._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tlet coop = this._code_coop || '=';\n\n\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.code();\n\n\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Data_Variable._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tlet coop = this._order_coop || '=';\n\n\t\tlet v = this.order();\n\n\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Data_Variable._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tlet coop = this._date_coop || '=';\n\n\t\tlet v = this.date();\n\n\t\tif (v) {\n\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t}\n\n\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Data_Variable._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tlet coop = this._name_coop || '=';\n\n\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.name();\n\n\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Data_Variable._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tlet coop = this._remark_coop || '=';\n\n\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.remark();\n\n\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Data_Variable._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._type) !== 'undefined') {\n\t\tlet coop = this._type_coop || '=';\n\n\t\tif (!this._type_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.type();\n\n\t\tif (arFields.indexOf('type') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Data_Variable._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('type');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('type');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('type', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._mandatory) !== 'undefined') {\n\t\tlet coop = this._mandatory_coop || '=';\n\n\t\tlet v = this.mandatory();\n\n\t\tif (arFields.indexOf('mandatory') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Data_Variable._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('mandatory');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('mandatory');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('mandatory', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._reference) !== 'undefined') {\n\t\tlet coop = this._reference_coop || '=';\n\n\t\tlet v = this.reference();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Flow Data Variable\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Data_Variable._query(): \"+ \"reference \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Data_Variable._query(): \" + \"reference[reference] resuled in undefined: \" + JSON.stringify(this.reference()));\n\t\t}\n\n\t\tif (arFields.indexOf('reference') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Data_Variable._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('reference');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('reference');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('reference', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._flow) !== 'undefined') {\n\t\tlet coop = this._flow_coop || '=';\n\n\t\tlet v = this.flow();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Flow Data Variable\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Data_Variable._query(): \"+ \"flow \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Data_Variable._query(): \" + \"flow[flow] resuled in undefined: \" + JSON.stringify(this.flow()));\n\t\t}\n\n\t\tif (arFields.indexOf('flow') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Data_Variable._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('flow');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('flow');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('flow', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._snapshot) !== 'undefined') {\n\t\tlet coop = this._snapshot_coop || '=';\n\n\t\tlet v = this.snapshot();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Flow Data Variable\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Data_Variable._query(): \"+ \"snapshot \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Data_Variable._query(): \" + \"snapshot[snapshot] resuled in undefined: \" + JSON.stringify(this.snapshot()));\n\t\t}\n\n\t\tif (arFields.indexOf('snapshot') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Data_Variable._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('snapshot');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('snapshot');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('snapshot', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Data_Variable._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\treturn this._queryGQ;\n}\n\n_save(obj) {\n\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\treturn new shs_arbfw_appd_Flow_Data_Variable()._save(o)\n\t});\n\n\tlet _obj = {};\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Data_Variable._save(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\tObject.keys(obj).filter(function(k) {\n\t\treturn Object.keys(global.Schema.of('sys_flow_data_var', ['*'])['sys_flow_data_var']).filter(function(_k) {\n\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t}).indexOf(k.toLowerCase()) >= 0\n\t}).forEach(function(k) {\n\t\t_obj[k.toLowerCase()] = obj[k]\n\t});\n\n\tObject.keys(_obj).forEach(function(k) {\n\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Data_Variable._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tdelete _obj[k];\n\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Data_Variable._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t}\n\t});\n\n\tlet _this = null;\n\tif (obj.__keys) {\n\t\tlet kObj = {};\n\t\tkObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(_obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))));\n\t\tobj.__keys.forEach(function(k) {\n\t\t\tkObj[k] = _obj[k]\n\t\t});\n\t\t_this = new shs_arbfw_appd_Flow_Data_Variable()._fromDocument(kObj);\n\t} else {\n\t\t_this = new shs_arbfw_appd_Flow_Data_Variable()._fromDocument(_obj)._unique();\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Data_Variable._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\tdelete _obj.__idField;\n\n\ttry {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Data_Variable._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\tObject.keys(_obj).filter(function(k) {\n\t\t\treturn k.toLowerCase() != k;\n\t\t}).forEach(function(k) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Data_Variable._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tvar lk = k.toLowerCase();\n\t\t\t_obj[lk] = _obj[k];\n\t\t\tdelete _obj[k];\n\t\t});\n\n\t\tlet gq = new global.GlideQuery(obj.__type || 'sys_flow_data_var');\n\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Data_Variable._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\tif (_obj.sys_id) {\n\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t} else {\n\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\tgq = gq.insert(_obj);\n\t\t}\n\t\tlet _fObj = {};\n\t\t_fObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))));\n\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('sys_flow_data_var', ['*'])['sys_flow_data_var']))));\n\t} catch (ex) {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Data_Variable._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Data_Variable._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\treturn this;\n\t}\n\n\treturn this;\n}\n\n/************* Flow_Data_Variable.store() **********************/\nstore(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Data_Variable.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Data_Variable.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Data_Variable.store(): \" + \"executing locally \");\n\n\t\t// store locally\n\t\treturn this._save(this._toDocument());\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Flow_Data_Variable.findAll() **********************/\nfindAll(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Data_Variable.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Data_Variable.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Data_Variable.findAll(): \" + \"executing locally \");\n\n\t\t// findAll locally\n\t\tlet gr = new GlideRecord('sys_flow_data_var');\n\t\tgr.addEncodedQuery(this._toEQuery());\n\t\treturn this._fromDocument(gr);\n\n\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('sys_flow_data_var', ['*'])['sys_flow_data_var'])));\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Flow_Data_Variable.find() **********************/\nfind(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Data_Variable.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Data_Variable.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Data_Variable.find(): \" + \"executing locally \");\n\n\t\tlet ret = this.findAll();\n\t\treturn ret.length ? ret[0] : null;\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"scriptFile_Script_Compatibilitys":[{"active":true,"enabled":true}],"client_callable":true,"sys_name":"shs_arbfw_Requirement","api_name":"x_1790593_arboard.shs_arbfw_Requirement","name":"shs_arbfw_Requirement","script":"class shs_arbfw_Requirement extends global.AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"\";\n\t\tthis.__type = \"shs_arbfw_Requirement\";\n\t\tthis.__alias = \"shs_arbfw\";\n\t\tthis.__scope = \"shs_arbfw\";\n\t}\n\n\t/************* Requirement.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Requirement.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Requirement.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Requirement.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Requirement.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//(typeof(window)!=='undefined'?alert:gs.info)(\"Requirement.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Requirement.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Requirement.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Requirement.project GETTERS AND SETTERS **********************/\n\tproject(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._project = v;\n\t\t\tthis._project_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._project;\n\t\t}\n\t}\n\n\t/************* Requirement.capability GETTERS AND SETTERS **********************/\n\tcapability(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._capability = v;\n\t\t\tthis._capability_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._capability;\n\t\t}\n\t}\n\n\t/************* Requirement.requirement_Effort_Estimates GETTERS AND SETTERS **********************/\n\trequirement_Effort_Estimates(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._requirement_Effort_Estimates = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._requirement_Effort_Estimates_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._requirement_Effort_Estimates;\n\t\t}\n\t}\n\n\t/************* Requirement.requirement_Agenda_Items GETTERS AND SETTERS **********************/\n\trequirement_Agenda_Items(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._requirement_Agenda_Items = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._requirement_Agenda_Items_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._requirement_Agenda_Items;\n\t\t}\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = undefined || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\tif (this._project) ret += /*(this._project_coop || '=') + */ this.project()._toEQuery(sPath + 'project.');\n\n\t\tif (this._capability) ret += /*(this._capability_coop || '=') + */ this.capability()._toEQuery(sPath + 'capability.');\n\n\t\t(this.requirement_Effort_Estimates() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYEffort_Estimate.requirement,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(this.requirement_Agenda_Items() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYAgenda_Item.requirement,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Requirement._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn new shs_arbfw_Requirement()._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Requirement._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Requirement._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromGlideRecord(obj) {\n\t\tif (!obj) return null;\n\t\tif (obj.isValidRecord()) {\n\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Requirement\" != 'ecc_queue' && obj.source == \"shs_arbfw_Requirement\") {\n\t\t\t\tobj.state = \"processing\";\n\t\t\t\tobj.update();\n\n\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\tresp.queue = 'output';\n\t\t\t\tresp.agent = obj.agent;\n\t\t\t\tresp.topic = obj.topic;\n\t\t\t\tresp.name = obj.name;\n\t\t\t\tresp.source = obj.source;\n\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\tlet ret = new shs_arbfw_Requirement()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t});\n\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t}\n\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\tresp.insert();\n\n\t\t\t\tobj.state = \"processed\";\n\t\t\t\tobj.update();\n\t\t\t\treturn resp;\n\t\t\t} else {\n\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\tproject: obj.getValue(\"project\"),\n\n\t\t\t\t\tcapability: obj.getValue(\"capability\"),\n\n\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tobj.query();\n\t\t\tlet grRet = [];\n\t\t\twhile (obj.next()) grRet.push(this._fromGlideRecord(obj));\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Requirement._fromGlideRecord(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\treturn grRet;\n\t\t}\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\tundefined\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_Requirement()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\tif (/((([A-Za-z]{3,9}:(?:/ / ) ? )( ? : [-;: &= +$, w] + @) ? [A - Za - z0 - 9. - ] + | ( ? : www. | [-;: &= +$, w] + @)[A - Za - z0 - 9. - ] + )(( ? : /[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)/g.test(obj)) {\n\t\t\tvar msg = new sn_ws.RESTMessageV2();\n\t\t\tmsg.setEndpoint(obj);\n\t\t\tmsg.setRequestHeader('Content-Type', 'application/json');\n\t\t\tmsg.setHttpMethod('get');\n\t\t\treturn this._fromDocument(msg.execute().getBody());\n\t\t}\n\n\t\ttry {\n\t\t\tobj = JSON.parse(obj);\n\t\t} catch (ex) {\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Requirement._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\tlet _obj = {\n\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))\n\t\t\t};\n\t\t\t_obj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(this))] = obj;\n\t\t\tobj = _obj;\n\t\t}\n\t\treturn this._fromDocument(obj);\n\t}\n\telse if (typeof(obj) === 'object') {\n\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\treturn this._fromGlideRecord(obj);\n\t\t} else if (obj._fromDocument) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Requirement._fromDocument(): \" + \"redundent call\");\n\t\t\treturn obj;\n\t\t} else if (Array.isArray(obj)) {\n\t\t\treturn obj.map(function(o) {\n\t\t\t\treturn new shs_arbfw_Requirement()._fromDocument(o)\n\t\t\t});\n\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(obj))));\n\n\t\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Requirement._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.project) !== 'undefined') {\n\n\t\t\t\t\tthis.project(new shs_arbfw_Project()._fromDocument(obj.project));\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.capability) !== 'undefined') {\n\n\t\t\t\t\tthis.capability(new shs_arbfw_Capability()._fromDocument(obj.capability));\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.requirement_Effort_Estimates) !== 'undefined') this.requirement_Effort_Estimates(new shs_arbfw_Effort_Estimate()._fromDocument(obj.requirement_Effort_Estimates));\n\n\t\t\t\tif (typeof(obj.requirement_Agenda_Items) !== 'undefined') this.requirement_Agenda_Items(new shs_arbfw_Agenda_Item()._fromDocument(obj.requirement_Agenda_Items));\n\n\t\t\t} else { // if(obj.constructor.name==\"Requirement\"){\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Requirement._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t}\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Requirement._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\treturn null;\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Requirement._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Requirement._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Requirement._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\treturn this;\n}\n\n_insertAssert() {\n\treturn true;\n}\n\n_updateAssert() {\n\treturn true;\n}\n\n_storeAssert() {\n\treturn true;\n}\n\n_findAssert() {\n\treturn true;\n}\n\n_new(c) {\n\n\treturn new shs_arbfw_Platform._new(c);\n\n}\n\n_toDocument(arFields) {\n\n\tlet ret = undefined || {};\n\n\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tret.active = this.active();\n\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tret.enabled = this.enabled();\n\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tret.code = this.code();\n\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tret.order = this.order();\n\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tret.date = this.date();\n\n\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tret.name = this.name();\n\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tret.remark = this.remark();\n\n\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t}\n\n\tif (typeof(this._project) !== 'undefined') {\n\t\tret.project = this.project();\n\n\t\tif (ret.project) {\n\t\t\tret.project = ret.project._toDocument();\n\t\t\tif (typeof(ret.project) === 'object' && !Object.keys(ret.project).length) ret.project = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this._capability) !== 'undefined') {\n\t\tret.capability = this.capability();\n\n\t\tif (ret.capability) {\n\t\t\tret.capability = ret.capability._toDocument();\n\t\t\tif (typeof(ret.capability) === 'object' && !Object.keys(ret.capability).length) ret.capability = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this.requirement_Effort_Estimates()) !== 'undefined') ret.requirement_Effort_Estimates = this.requirement_Effort_Estimates().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (typeof(this.requirement_Agenda_Items()) !== 'undefined') ret.requirement_Agenda_Items = this.requirement_Agenda_Items().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\treturn !arFields.find(function(_k) {\n\t\t\treturn _k == k;\n\t\t});\n\t}).forEach(function(k) {\n\t\tdelete ret[k];\n\t});\n\n\treturn ret;\n}\n\n_unique(keys, ret) {\n\tret = ret || new shs_arbfw_Requirement();\n\n\tundefined\n\n\t// if(this.Id) ret.Id = this.Id;\n\tif (!keys) {\n\n\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t} else {\n\n\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t\tif (keys.indexOf(\"project\") >= 0 && typeof(this.project()) !== 'undefined') ret.project(this.project()._unique());\n\n\t\tif (keys.indexOf(\"capability\") >= 0 && typeof(this.capability()) !== 'undefined') ret.capability(this.capability()._unique());\n\n\t}\n\n\treturn ret;\n}\n\n_query(gq) {\n\tlet arFields = Object.keys(global.Schema.of('x_1790593_arboard_requirement', ['*'])['x_1790593_arboard_requirement']);\n\n\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('x_1790593_arboard_requirement');\n\n\tundefined\n\n\tlet idf = ((function(r) {\n\t\tlet ret = 'sys_id';\n\t\tif (typeof(r.__idField) === 'function') {\n\t\t\tret = r.__idField();\n\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\tret = r.__idField || this.__idField();\n\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\tret = 'Id';\n\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\tret = 'sys_id';\n\t\t}\n\t\treturn ret;\n\t})(this));\n\tif (idf == 'Id') idf = 'sys_id';\n\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tlet coop = this._active_coop || '=';\n\n\t\tlet v = this.active();\n\n\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Requirement._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tlet coop = this._enabled_coop || '=';\n\n\t\tlet v = this.enabled();\n\n\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Requirement._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tlet coop = this._code_coop || '=';\n\n\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.code();\n\n\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Requirement._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tlet coop = this._order_coop || '=';\n\n\t\tlet v = this.order();\n\n\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Requirement._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tlet coop = this._date_coop || '=';\n\n\t\tlet v = this.date();\n\n\t\tif (v) {\n\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t}\n\n\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Requirement._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tlet coop = this._name_coop || '=';\n\n\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.name();\n\n\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Requirement._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tlet coop = this._remark_coop || '=';\n\n\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.remark();\n\n\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Requirement._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._project) !== 'undefined') {\n\t\tlet coop = this._project_coop || '=';\n\n\t\tlet v = this.project();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Requirement\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Requirement._query(): \"+ \"project \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Requirement._query(): \" + \"project[project] resuled in undefined: \" + JSON.stringify(this.project()));\n\t\t}\n\n\t\tif (arFields.indexOf('project') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Requirement._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('project');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('project');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('project', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._capability) !== 'undefined') {\n\t\tlet coop = this._capability_coop || '=';\n\n\t\tlet v = this.capability();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Requirement\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Requirement._query(): \"+ \"capability \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Requirement._query(): \" + \"capability[capability] resuled in undefined: \" + JSON.stringify(this.capability()));\n\t\t}\n\n\t\tif (arFields.indexOf('capability') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Requirement._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('capability');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('capability');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('capability', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Requirement._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\treturn this._queryGQ;\n}\n\n_save(obj) {\n\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\treturn new shs_arbfw_Requirement()._save(o)\n\t});\n\n\tlet _obj = {};\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Requirement._save(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\tObject.keys(obj).filter(function(k) {\n\t\treturn Object.keys(global.Schema.of('x_1790593_arboard_requirement', ['*'])['x_1790593_arboard_requirement']).filter(function(_k) {\n\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t}).indexOf(k.toLowerCase()) >= 0\n\t}).forEach(function(k) {\n\t\t_obj[k.toLowerCase()] = obj[k]\n\t});\n\n\tObject.keys(_obj).forEach(function(k) {\n\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Requirement._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tdelete _obj[k];\n\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Requirement._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t}\n\t});\n\n\tlet _this = null;\n\tif (obj.__keys) {\n\t\tlet kObj = {};\n\t\tkObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(_obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))));\n\t\tobj.__keys.forEach(function(k) {\n\t\t\tkObj[k] = _obj[k]\n\t\t});\n\t\t_this = new shs_arbfw_Requirement()._fromDocument(kObj);\n\t} else {\n\t\t_this = new shs_arbfw_Requirement()._fromDocument(_obj)._unique();\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Requirement._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\tdelete _obj.__idField;\n\n\ttry {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Requirement._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\tObject.keys(_obj).filter(function(k) {\n\t\t\treturn k.toLowerCase() != k;\n\t\t}).forEach(function(k) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Requirement._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tvar lk = k.toLowerCase();\n\t\t\t_obj[lk] = _obj[k];\n\t\t\tdelete _obj[k];\n\t\t});\n\n\t\tlet gq = new global.GlideQuery(obj.__type || 'x_1790593_arboard_requirement');\n\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Requirement._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\tif (_obj.sys_id) {\n\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t} else {\n\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\tgq = gq.insert(_obj);\n\t\t}\n\t\tlet _fObj = {};\n\t\t_fObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))));\n\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('x_1790593_arboard_requirement', ['*'])['x_1790593_arboard_requirement']))));\n\t} catch (ex) {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Requirement._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Requirement._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\treturn this;\n\t}\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Requirement._save(): \" + \"obj.requirement_Effort_Estimates: \" + JSON.stringify(obj.requirement_Effort_Estimates, null, 4));\n\tif (Array.isArray(obj.requirement_Effort_Estimates)) this.requirement_Effort_Estimates(obj.requirement_Effort_Estimates.map(function(ta) {\n\t\treturn new shs_arbfw_Effort_Estimate()._save(ta)\n\t}));\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Requirement._save(): \" + \"obj.requirement_Agenda_Items: \" + JSON.stringify(obj.requirement_Agenda_Items, null, 4));\n\tif (Array.isArray(obj.requirement_Agenda_Items)) this.requirement_Agenda_Items(obj.requirement_Agenda_Items.map(function(ta) {\n\t\treturn new shs_arbfw_Agenda_Item()._save(ta)\n\t}));\n\n\treturn this;\n}\n\n/************* Requirement.store() **********************/\nstore(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Requirement.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Requirement.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Requirement.store(): \" + \"executing locally \");\n\n\t\t// store locally\n\t\treturn this._save(this._toDocument());\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Requirement.findAll() **********************/\nfindAll(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Requirement.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Requirement.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Requirement.findAll(): \" + \"executing locally \");\n\n\t\t// findAll locally\n\t\tlet gr = new GlideRecord('x_1790593_arboard_requirement');\n\t\tgr.addEncodedQuery(this._toEQuery());\n\t\treturn this._fromDocument(gr);\n\n\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('x_1790593_arboard_requirement', ['*'])['x_1790593_arboard_requirement'])));\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Requirement.find() **********************/\nfind(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Requirement.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Requirement.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Requirement.find(): \" + \"executing locally \");\n\n\t\tlet ret = this.findAll();\n\t\treturn ret.length ? ret[0] : null;\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"scriptFile_Script_Compatibilitys":[{"active":true,"enabled":true}],"client_callable":true,"sys_name":"shs_arbfw_appd_Subscription_Trigger","api_name":"x_1790593_arboard.shs_arbfw_appd_Subscription_Trigger","name":"shs_arbfw_appd_Subscription_Trigger","script":"class shs_arbfw_appd_Subscription_Trigger extends global.AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"Application Designer\";\n\t\tthis.__type = \"shs_arbfw_appd_Subscription_Trigger\";\n\t\tthis.__alias = \"shs_arbfw_appd\";\n\t\tthis.__scope = \"shs_arbfw\";\n\t}\n\n\t/************* Subscription_Trigger.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Subscription_Trigger.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Subscription_Trigger.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Subscription_Trigger.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Subscription_Trigger.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//(typeof(window)!=='undefined'?alert:gs.info)(\"Subscription_Trigger.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Subscription_Trigger.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Subscription_Trigger.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Subscription_Trigger.column GETTERS AND SETTERS **********************/\n\tcolumn(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._column = v;\n\t\t\tthis._column_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._column;\n\t\t}\n\t}\n\n\t/************* Subscription_Trigger.subscription GETTERS AND SETTERS **********************/\n\tsubscription(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._subscription = v;\n\t\t\tthis._subscription_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._subscription;\n\t\t}\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = undefined || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\tif (this._column) ret += /*(this._column_coop || '=') + */ this.column()._toEQuery(sPath + 'column.');\n\n\t\tif (this._subscription) ret += /*(this._subscription_coop || '=') + */ this.subscription()._toEQuery(sPath + 'subscription.');\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Subscription_Trigger._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn new shs_arbfw_appd_Subscription_Trigger()._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Subscription_Trigger._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Subscription_Trigger._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromGlideRecord(obj) {\n\t\tif (!obj) return null;\n\t\tif (obj.isValidRecord()) {\n\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Subscription_Trigger\" != 'ecc_queue' && obj.source == \"shs_arbfw_appd_Subscription_Trigger\") {\n\t\t\t\tobj.state = \"processing\";\n\t\t\t\tobj.update();\n\n\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\tresp.queue = 'output';\n\t\t\t\tresp.agent = obj.agent;\n\t\t\t\tresp.topic = obj.topic;\n\t\t\t\tresp.name = obj.name;\n\t\t\t\tresp.source = obj.source;\n\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\tlet ret = new shs_arbfw_appd_Subscription_Trigger()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t});\n\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t}\n\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\tresp.insert();\n\n\t\t\t\tobj.state = \"processed\";\n\t\t\t\tobj.update();\n\t\t\t\treturn resp;\n\t\t\t} else {\n\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\tcolumn: obj.getValue(\"column\"),\n\n\t\t\t\t\tsubscription: obj.getValue(\"subscription\"),\n\n\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tobj.query();\n\t\t\tlet grRet = [];\n\t\t\twhile (obj.next()) grRet.push(this._fromGlideRecord(obj));\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Subscription_Trigger._fromGlideRecord(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\treturn grRet;\n\t\t}\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\tundefined\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_appd_Subscription_Trigger()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\tif (/((([A-Za-z]{3,9}:(?:/ / ) ? )( ? : [-;: &= +$, w] + @) ? [A - Za - z0 - 9. - ] + | ( ? : www. | [-;: &= +$, w] + @)[A - Za - z0 - 9. - ] + )(( ? : /[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)/g.test(obj)) {\n\t\t\tvar msg = new sn_ws.RESTMessageV2();\n\t\t\tmsg.setEndpoint(obj);\n\t\t\tmsg.setRequestHeader('Content-Type', 'application/json');\n\t\t\tmsg.setHttpMethod('get');\n\t\t\treturn this._fromDocument(msg.execute().getBody());\n\t\t}\n\n\t\ttry {\n\t\t\tobj = JSON.parse(obj);\n\t\t} catch (ex) {\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Subscription_Trigger._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\tlet _obj = {\n\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))\n\t\t\t};\n\t\t\t_obj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(this))] = obj;\n\t\t\tobj = _obj;\n\t\t}\n\t\treturn this._fromDocument(obj);\n\t}\n\telse if (typeof(obj) === 'object') {\n\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\treturn this._fromGlideRecord(obj);\n\t\t} else if (obj._fromDocument) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Subscription_Trigger._fromDocument(): \" + \"redundent call\");\n\t\t\treturn obj;\n\t\t} else if (Array.isArray(obj)) {\n\t\t\treturn obj.map(function(o) {\n\t\t\t\treturn new shs_arbfw_appd_Subscription_Trigger()._fromDocument(o)\n\t\t\t});\n\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(obj))));\n\n\t\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Subscription_Trigger._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.column) !== 'undefined') {\n\n\t\t\t\t\tthis.column(new shs_arbfw_appd_Column()._fromDocument(obj.column));\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.subscription) !== 'undefined') {\n\n\t\t\t\t\tthis.subscription(new shs_arbfw_appd_Save_Subscription()._fromDocument(obj.subscription));\n\t\t\t\t}\n\n\t\t\t} else { // if(obj.constructor.name==\"Subscription_Trigger\"){\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Subscription_Trigger._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t}\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Subscription_Trigger._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\treturn null;\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Subscription_Trigger._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Subscription_Trigger._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Subscription_Trigger._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\treturn this;\n}\n\n_insertAssert() {\n\treturn true;\n}\n\n_updateAssert() {\n\treturn true;\n}\n\n_storeAssert() {\n\treturn true;\n}\n\n_findAssert() {\n\treturn true;\n}\n\n_new(c) {\n\n\treturn new shs_arbfw_appd_Platform._new(c);\n\n}\n\n_toDocument(arFields) {\n\n\tlet ret = undefined || {};\n\n\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tret.active = this.active();\n\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tret.enabled = this.enabled();\n\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tret.code = this.code();\n\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tret.order = this.order();\n\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tret.date = this.date();\n\n\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tret.name = this.name();\n\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tret.remark = this.remark();\n\n\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t}\n\n\tif (typeof(this._column) !== 'undefined') {\n\t\tret.column = this.column();\n\n\t\tif (ret.column) {\n\t\t\tret.column = ret.column._toDocument();\n\t\t\tif (typeof(ret.column) === 'object' && !Object.keys(ret.column).length) ret.column = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this._subscription) !== 'undefined') {\n\t\tret.subscription = this.subscription();\n\n\t\tif (ret.subscription) {\n\t\t\tret.subscription = ret.subscription._toDocument();\n\t\t\tif (typeof(ret.subscription) === 'object' && !Object.keys(ret.subscription).length) ret.subscription = null;\n\t\t}\n\n\t}\n\n\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\treturn !arFields.find(function(_k) {\n\t\t\treturn _k == k;\n\t\t});\n\t}).forEach(function(k) {\n\t\tdelete ret[k];\n\t});\n\n\treturn ret;\n}\n\n_unique(keys, ret) {\n\tret = ret || new shs_arbfw_appd_Subscription_Trigger();\n\n\tundefined\n\n\t// if(this.Id) ret.Id = this.Id;\n\tif (!keys) {\n\n\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t} else {\n\n\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t\tif (keys.indexOf(\"column\") >= 0 && typeof(this.column()) !== 'undefined') ret.column(this.column()._unique());\n\n\t\tif (keys.indexOf(\"subscription\") >= 0 && typeof(this.subscription()) !== 'undefined') ret.subscription(this.subscription()._unique());\n\n\t}\n\n\treturn ret;\n}\n\n_query(gq) {\n\tlet arFields = Object.keys(global.Schema.of('Subscription_Trigger', ['*'])['Subscription_Trigger']);\n\n\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('Subscription_Trigger');\n\n\tundefined\n\n\tlet idf = ((function(r) {\n\t\tlet ret = 'sys_id';\n\t\tif (typeof(r.__idField) === 'function') {\n\t\t\tret = r.__idField();\n\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\tret = r.__idField || this.__idField();\n\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\tret = 'Id';\n\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\tret = 'sys_id';\n\t\t}\n\t\treturn ret;\n\t})(this));\n\tif (idf == 'Id') idf = 'sys_id';\n\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tlet coop = this._active_coop || '=';\n\n\t\tlet v = this.active();\n\n\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Subscription_Trigger._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tlet coop = this._enabled_coop || '=';\n\n\t\tlet v = this.enabled();\n\n\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Subscription_Trigger._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tlet coop = this._code_coop || '=';\n\n\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.code();\n\n\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Subscription_Trigger._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tlet coop = this._order_coop || '=';\n\n\t\tlet v = this.order();\n\n\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Subscription_Trigger._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tlet coop = this._date_coop || '=';\n\n\t\tlet v = this.date();\n\n\t\tif (v) {\n\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t}\n\n\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Subscription_Trigger._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tlet coop = this._name_coop || '=';\n\n\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.name();\n\n\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Subscription_Trigger._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tlet coop = this._remark_coop || '=';\n\n\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.remark();\n\n\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Subscription_Trigger._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._column) !== 'undefined') {\n\t\tlet coop = this._column_coop || '=';\n\n\t\tlet v = this.column();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Subscription Trigger\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Subscription_Trigger._query(): \"+ \"column \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Subscription_Trigger._query(): \" + \"column[column] resuled in undefined: \" + JSON.stringify(this.column()));\n\t\t}\n\n\t\tif (arFields.indexOf('column') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Subscription_Trigger._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('column');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('column');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('column', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._subscription) !== 'undefined') {\n\t\tlet coop = this._subscription_coop || '=';\n\n\t\tlet v = this.subscription();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Subscription Trigger\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Subscription_Trigger._query(): \"+ \"subscription \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Subscription_Trigger._query(): \" + \"subscription[subscription] resuled in undefined: \" + JSON.stringify(this.subscription()));\n\t\t}\n\n\t\tif (arFields.indexOf('subscription') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Subscription_Trigger._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('subscription');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('subscription');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('subscription', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Subscription_Trigger._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\treturn this._queryGQ;\n}\n\n_save(obj) {\n\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\treturn new shs_arbfw_appd_Subscription_Trigger()._save(o)\n\t});\n\n\tlet _obj = {};\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Subscription_Trigger._save(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\tObject.keys(obj).filter(function(k) {\n\t\treturn Object.keys(global.Schema.of('Subscription_Trigger', ['*'])['Subscription_Trigger']).filter(function(_k) {\n\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t}).indexOf(k.toLowerCase()) >= 0\n\t}).forEach(function(k) {\n\t\t_obj[k.toLowerCase()] = obj[k]\n\t});\n\n\tObject.keys(_obj).forEach(function(k) {\n\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Subscription_Trigger._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tdelete _obj[k];\n\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Subscription_Trigger._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t}\n\t});\n\n\tlet _this = null;\n\tif (obj.__keys) {\n\t\tlet kObj = {};\n\t\tkObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(_obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))));\n\t\tobj.__keys.forEach(function(k) {\n\t\t\tkObj[k] = _obj[k]\n\t\t});\n\t\t_this = new shs_arbfw_appd_Subscription_Trigger()._fromDocument(kObj);\n\t} else {\n\t\t_this = new shs_arbfw_appd_Subscription_Trigger()._fromDocument(_obj)._unique();\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Subscription_Trigger._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\tdelete _obj.__idField;\n\n\ttry {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Subscription_Trigger._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\tObject.keys(_obj).filter(function(k) {\n\t\t\treturn k.toLowerCase() != k;\n\t\t}).forEach(function(k) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Subscription_Trigger._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tvar lk = k.toLowerCase();\n\t\t\t_obj[lk] = _obj[k];\n\t\t\tdelete _obj[k];\n\t\t});\n\n\t\tlet gq = new global.GlideQuery(obj.__type || 'Subscription_Trigger');\n\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Subscription_Trigger._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\tif (_obj.sys_id) {\n\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t} else {\n\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\tgq = gq.insert(_obj);\n\t\t}\n\t\tlet _fObj = {};\n\t\t_fObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))));\n\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('Subscription_Trigger', ['*'])['Subscription_Trigger']))));\n\t} catch (ex) {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Subscription_Trigger._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Subscription_Trigger._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\treturn this;\n\t}\n\n\treturn this;\n}\n\n/************* Subscription_Trigger.store() **********************/\nstore(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Subscription_Trigger.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Subscription_Trigger.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Subscription_Trigger.store(): \" + \"executing locally \");\n\n\t\t// store locally\n\t\treturn this._save(this._toDocument());\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Subscription_Trigger.findAll() **********************/\nfindAll(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Subscription_Trigger.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Subscription_Trigger.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Subscription_Trigger.findAll(): \" + \"executing locally \");\n\n\t\t// findAll locally\n\t\tlet gr = new GlideRecord('Subscription_Trigger');\n\t\tgr.addEncodedQuery(this._toEQuery());\n\t\treturn this._fromDocument(gr);\n\n\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('Subscription_Trigger', ['*'])['Subscription_Trigger'])));\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Subscription_Trigger.find() **********************/\nfind(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Subscription_Trigger.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Subscription_Trigger.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Subscription_Trigger.find(): \" + \"executing locally \");\n\n\t\tlet ret = this.findAll();\n\t\treturn ret.length ? ret[0] : null;\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"scriptFile_Script_Compatibilitys":[{"active":true,"enabled":true}],"client_callable":true,"sys_name":"shs_arbfw_appd_Flow_Setting","api_name":"x_1790593_arboard.shs_arbfw_appd_Flow_Setting","name":"shs_arbfw_appd_Flow_Setting","script":"class shs_arbfw_appd_Flow_Setting extends global.AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"Application Designer\";\n\t\tthis.__type = \"shs_arbfw_appd_Flow_Setting\";\n\t\tthis.__alias = \"shs_arbfw_appd\";\n\t\tthis.__scope = \"shs_arbfw\";\n\t}\n\n\t/************* Flow_Setting.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Flow_Setting.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Flow_Setting.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Flow_Setting.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Flow_Setting.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Setting.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Flow_Setting.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Flow_Setting.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Flow_Setting.flow GETTERS AND SETTERS **********************/\n\tflow(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._flow = v;\n\t\t\tthis._flow_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._flow;\n\t\t}\n\t}\n\n\t/************* Flow_Setting.sourceType EF: GETTERS AND SETTERS **********************/\n\tsourceType() {\n\t\treturn /*this.ef_sourceType = */ ((\n\t\t\tfunction() {\n\t\t\t\ttry {\n\n\t\t\t\t\tlet __ret = undefined;\n\n\t\t\t\t\t__ret = \"sys_hub_flow\";\n\n\t\t\t\t\tif (typeof(__ret) === 'string' && __ret.startsWith(\"s(\") && __ret.endsWith(\")\")) {\n\t\t\t\t\t\t__ret = this.runScript(__ret.slice(2, -1));\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof(__ret) === \"function\") {\n\t\t\t\t\t\t__ret = __ret(this);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn __ret;\n\n\t\t\t\t} catch (_vOfEx) {\n\t\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Setting.sourceType(): \" + 'valueOf', _vOfEx, JSON.parse(((typeof(this) !== \"undefined\" && typeof(this._atob) !== \"undefined\") ? this._atob : (typeof(_FrEMD) !== \"undefined\" ? _FrEMD._atob : atob))(`eyJTZXJ2aWNlTm93Ijoic3lzX2h1Yl9mbG93In0=`), (key, value) => {\n\t\t\t\t\t\tif (typeof(value) === \"string\" && value.indexOf(\"=>\") > 0) return eval(\"(\" + value + \")\");\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t}\n\t\t)());\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = undefined || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\tif (this._flow) ret += /*(this._flow_coop || '=') + */ this.flow()._toEQuery(sPath + 'flow.');\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Setting._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn new shs_arbfw_appd_Flow_Setting()._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Setting._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Setting._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromGlideRecord(obj) {\n\t\tif (!obj) return null;\n\t\tif (obj.isValidRecord()) {\n\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Flow_Setting\" != 'ecc_queue' && obj.source == \"shs_arbfw_appd_Flow_Setting\") {\n\t\t\t\tobj.state = \"processing\";\n\t\t\t\tobj.update();\n\n\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\tresp.queue = 'output';\n\t\t\t\tresp.agent = obj.agent;\n\t\t\t\tresp.topic = obj.topic;\n\t\t\t\tresp.name = obj.name;\n\t\t\t\tresp.source = obj.source;\n\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\tlet ret = new shs_arbfw_appd_Flow_Setting()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t});\n\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t}\n\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\tresp.insert();\n\n\t\t\t\tobj.state = \"processed\";\n\t\t\t\tobj.update();\n\t\t\t\treturn resp;\n\t\t\t} else {\n\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\tflow: obj.getValue(\"flow\"),\n\n\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tobj.query();\n\t\t\tlet grRet = [];\n\t\t\twhile (obj.next()) grRet.push(this._fromGlideRecord(obj));\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Setting._fromGlideRecord(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\treturn grRet;\n\t\t}\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\tundefined\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_appd_Flow_Setting()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\tif (/((([A-Za-z]{3,9}:(?:/ / ) ? )( ? : [-;: &= +$, w] + @) ? [A - Za - z0 - 9. - ] + | ( ? : www. | [-;: &= +$, w] + @)[A - Za - z0 - 9. - ] + )(( ? : /[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)/g.test(obj)) {\n\t\t\tvar msg = new sn_ws.RESTMessageV2();\n\t\t\tmsg.setEndpoint(obj);\n\t\t\tmsg.setRequestHeader('Content-Type', 'application/json');\n\t\t\tmsg.setHttpMethod('get');\n\t\t\treturn this._fromDocument(msg.execute().getBody());\n\t\t}\n\n\t\ttry {\n\t\t\tobj = JSON.parse(obj);\n\t\t} catch (ex) {\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Setting._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\tlet _obj = {\n\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))\n\t\t\t};\n\t\t\t_obj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(this))] = obj;\n\t\t\tobj = _obj;\n\t\t}\n\t\treturn this._fromDocument(obj);\n\t}\n\telse if (typeof(obj) === 'object') {\n\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\treturn this._fromGlideRecord(obj);\n\t\t} else if (obj._fromDocument) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Setting._fromDocument(): \" + \"redundent call\");\n\t\t\treturn obj;\n\t\t} else if (Array.isArray(obj)) {\n\t\t\treturn obj.map(function(o) {\n\t\t\t\treturn new shs_arbfw_appd_Flow_Setting()._fromDocument(o)\n\t\t\t});\n\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(obj))));\n\n\t\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Setting._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.flow) !== 'undefined') {\n\n\t\t\t\t\tthis.flow(new shs_arbfw_appd_Flow()._fromDocument(obj.flow));\n\t\t\t\t}\n\n\t\t\t} else { // if(obj.constructor.name==\"Flow_Setting\"){\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Setting._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t}\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Setting._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\treturn null;\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Setting._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Setting._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Setting._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\treturn this;\n}\n\n_insertAssert() {\n\treturn true;\n}\n\n_updateAssert() {\n\treturn true;\n}\n\n_storeAssert() {\n\treturn true;\n}\n\n_findAssert() {\n\treturn true;\n}\n\n_new(c) {\n\n\treturn new shs_arbfw_appd_Platform._new(c);\n\n}\n\n_toDocument(arFields) {\n\n\tlet ret = undefined || {};\n\n\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tret.active = this.active();\n\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tret.enabled = this.enabled();\n\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tret.code = this.code();\n\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tret.order = this.order();\n\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tret.date = this.date();\n\n\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tret.name = this.name();\n\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tret.remark = this.remark();\n\n\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t}\n\n\tif (typeof(this._flow) !== 'undefined') {\n\t\tret.flow = this.flow();\n\n\t\tif (ret.flow) {\n\t\t\tret.flow = ret.flow._toDocument();\n\t\t\tif (typeof(ret.flow) === 'object' && !Object.keys(ret.flow).length) ret.flow = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this.sourceType()) !== 'undefined') ret.sourceType = this.sourceType();\n\n\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\treturn !arFields.find(function(_k) {\n\t\t\treturn _k == k;\n\t\t});\n\t}).forEach(function(k) {\n\t\tdelete ret[k];\n\t});\n\n\treturn ret;\n}\n\n_unique(keys, ret) {\n\tret = ret || new shs_arbfw_appd_Flow_Setting();\n\n\tundefined\n\n\t// if(this.Id) ret.Id = this.Id;\n\tif (!keys) {\n\n\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (typeof(this.flow()) !== 'undefined') ret.flow(this.flow()._unique());\n\n\t} else {\n\n\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t\tif (keys.indexOf(\"flow\") >= 0 && typeof(this.flow()) !== 'undefined') ret.flow(this.flow()._unique());\n\n\t}\n\n\treturn ret;\n}\n\n_query(gq) {\n\tlet arFields = Object.keys(global.Schema.of('sys_flow_execution_setting', ['*'])['sys_flow_execution_setting']);\n\n\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('sys_flow_execution_setting');\n\n\tundefined\n\n\tlet idf = ((function(r) {\n\t\tlet ret = 'sys_id';\n\t\tif (typeof(r.__idField) === 'function') {\n\t\t\tret = r.__idField();\n\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\tret = r.__idField || this.__idField();\n\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\tret = 'Id';\n\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\tret = 'sys_id';\n\t\t}\n\t\treturn ret;\n\t})(this));\n\tif (idf == 'Id') idf = 'sys_id';\n\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tlet coop = this._active_coop || '=';\n\n\t\tlet v = this.active();\n\n\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Setting._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tlet coop = this._enabled_coop || '=';\n\n\t\tlet v = this.enabled();\n\n\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Setting._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tlet coop = this._code_coop || '=';\n\n\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.code();\n\n\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Setting._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tlet coop = this._order_coop || '=';\n\n\t\tlet v = this.order();\n\n\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Setting._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tlet coop = this._date_coop || '=';\n\n\t\tlet v = this.date();\n\n\t\tif (v) {\n\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t}\n\n\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Setting._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tlet coop = this._name_coop || '=';\n\n\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.name();\n\n\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Setting._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tlet coop = this._remark_coop || '=';\n\n\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.remark();\n\n\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Setting._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._flow) !== 'undefined') {\n\t\tlet coop = this._flow_coop || '=';\n\n\t\tlet v = this.flow();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Flow Setting\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Setting._query(): \"+ \"flow \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Setting._query(): \" + \"flow[flow] resuled in undefined: \" + JSON.stringify(this.flow()));\n\t\t}\n\n\t\tif (arFields.indexOf('flow') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Setting._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('flow');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('flow');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('flow', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Setting._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\treturn this._queryGQ;\n}\n\n_save(obj) {\n\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\treturn new shs_arbfw_appd_Flow_Setting()._save(o)\n\t});\n\n\tlet _obj = {};\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Setting._save(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\tObject.keys(obj).filter(function(k) {\n\t\treturn Object.keys(global.Schema.of('sys_flow_execution_setting', ['*'])['sys_flow_execution_setting']).filter(function(_k) {\n\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t}).indexOf(k.toLowerCase()) >= 0\n\t}).forEach(function(k) {\n\t\t_obj[k.toLowerCase()] = obj[k]\n\t});\n\n\tObject.keys(_obj).forEach(function(k) {\n\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Setting._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tdelete _obj[k];\n\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Setting._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t}\n\t});\n\n\tlet _this = null;\n\tif (obj.__keys) {\n\t\tlet kObj = {};\n\t\tkObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(_obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))));\n\t\tobj.__keys.forEach(function(k) {\n\t\t\tkObj[k] = _obj[k]\n\t\t});\n\t\t_this = new shs_arbfw_appd_Flow_Setting()._fromDocument(kObj);\n\t} else {\n\t\t_this = new shs_arbfw_appd_Flow_Setting()._fromDocument(_obj)._unique();\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Setting._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\tdelete _obj.__idField;\n\n\ttry {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Setting._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\tObject.keys(_obj).filter(function(k) {\n\t\t\treturn k.toLowerCase() != k;\n\t\t}).forEach(function(k) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Setting._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tvar lk = k.toLowerCase();\n\t\t\t_obj[lk] = _obj[k];\n\t\t\tdelete _obj[k];\n\t\t});\n\n\t\tlet gq = new global.GlideQuery(obj.__type || 'sys_flow_execution_setting');\n\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Setting._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\tif (_obj.sys_id) {\n\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t} else {\n\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\tgq = gq.insert(_obj);\n\t\t}\n\t\tlet _fObj = {};\n\t\t_fObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))));\n\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('sys_flow_execution_setting', ['*'])['sys_flow_execution_setting']))));\n\t} catch (ex) {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Setting._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Setting._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\treturn this;\n\t}\n\n\treturn this;\n}\n\n/************* Flow_Setting.store() **********************/\nstore(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Setting.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Setting.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Setting.store(): \" + \"executing locally \");\n\n\t\t// store locally\n\t\treturn this._save(this._toDocument());\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Flow_Setting.findAll() **********************/\nfindAll(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Setting.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Setting.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Setting.findAll(): \" + \"executing locally \");\n\n\t\t// findAll locally\n\t\tlet gr = new GlideRecord('sys_flow_execution_setting');\n\t\tgr.addEncodedQuery(this._toEQuery());\n\t\treturn this._fromDocument(gr);\n\n\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('sys_flow_execution_setting', ['*'])['sys_flow_execution_setting'])));\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Flow_Setting.find() **********************/\nfind(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Setting.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Setting.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Setting.find(): \" + \"executing locally \");\n\n\t\tlet ret = this.findAll();\n\t\treturn ret.length ? ret[0] : null;\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"scriptFile_Script_Compatibilitys":[{"active":true,"enabled":true}],"client_callable":true,"sys_name":"shs_arbfw_appd_Flow","api_name":"x_1790593_arboard.shs_arbfw_appd_Flow","name":"shs_arbfw_appd_Flow","script":"class shs_arbfw_appd_Flow extends global.AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"Application Designer\";\n\t\tthis.__type = \"shs_arbfw_appd_Flow\";\n\t\tthis.__alias = \"shs_arbfw_appd\";\n\t\tthis.__scope = \"shs_arbfw\";\n\t}\n\n\t/************* Flow.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Flow.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Flow.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Flow.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Flow.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//(typeof(window)!=='undefined'?alert:gs.info)(\"Flow.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Flow.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Flow.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Flow.application GETTERS AND SETTERS **********************/\n\tapplication(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._application = v;\n\t\t\tthis._application_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._application;\n\t\t}\n\t}\n\n\t/************* Flow.block GETTERS AND SETTERS **********************/\n\tblock(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._block = v;\n\t\t\tthis._block_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._block;\n\t\t}\n\t}\n\n\t/************* Flow.securityControl GETTERS AND SETTERS **********************/\n\tsecurityControl(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._securityControl = v;\n\t\t\tthis._securityControl_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._securityControl;\n\t\t}\n\t}\n\n\t/************* Flow.flow_Flow_Inputs GETTERS AND SETTERS **********************/\n\tflow_Flow_Inputs(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._flow_Flow_Inputs = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._flow_Flow_Inputs_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._flow_Flow_Inputs;\n\t\t}\n\t}\n\n\t/************* Flow.flow_Flow_Outputs GETTERS AND SETTERS **********************/\n\tflow_Flow_Outputs(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._flow_Flow_Outputs = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._flow_Flow_Outputs_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._flow_Flow_Outputs;\n\t\t}\n\t}\n\n\t/************* Flow.flow_Flow_Variables GETTERS AND SETTERS **********************/\n\tflow_Flow_Variables(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._flow_Flow_Variables = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._flow_Flow_Variables_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._flow_Flow_Variables;\n\t\t}\n\t}\n\n\t/************* Flow.flow_Flow_Logics GETTERS AND SETTERS **********************/\n\tflow_Flow_Logics(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._flow_Flow_Logics = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._flow_Flow_Logics_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._flow_Flow_Logics;\n\t\t}\n\t}\n\n\t/************* Flow.subflow_Flow_Instances GETTERS AND SETTERS **********************/\n\tsubflow_Flow_Instances(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._subflow_Flow_Instances = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._subflow_Flow_Instances_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._subflow_Flow_Instances;\n\t\t}\n\t}\n\n\t/************* Flow.flow_Action_Inputs GETTERS AND SETTERS **********************/\n\tflow_Action_Inputs(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._flow_Action_Inputs = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._flow_Action_Inputs_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._flow_Action_Inputs;\n\t\t}\n\t}\n\n\t/************* Flow.flow_Flow_Settings GETTERS AND SETTERS **********************/\n\tflow_Flow_Settings(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._flow_Flow_Settings = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._flow_Flow_Settings_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._flow_Flow_Settings;\n\t\t}\n\t}\n\n\t/************* Flow.flow_Flow_Snapshots GETTERS AND SETTERS **********************/\n\tflow_Flow_Snapshots(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._flow_Flow_Snapshots = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._flow_Flow_Snapshots_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._flow_Flow_Snapshots;\n\t\t}\n\t}\n\n\t/************* Flow.flow_Flow_Data_Variables GETTERS AND SETTERS **********************/\n\tflow_Flow_Data_Variables(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._flow_Flow_Data_Variables = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._flow_Flow_Data_Variables_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._flow_Flow_Data_Variables;\n\t\t}\n\t}\n\n\t/************* Flow.clientCallable EF: GETTERS AND SETTERS **********************/\n\tclientCallable() {\n\t\treturn /*this.ef_clientCallable = */ ((\n\t\t\tfunction() {\n\t\t\t\ttry {\n\n\t\t\t\t\tlet __ret = undefined;\n\n\t\t\t\t\tif (typeof(__ret) === 'string' && __ret.startsWith(\"s(\") && __ret.endsWith(\")\")) {\n\t\t\t\t\t\t__ret = this.runScript(__ret.slice(2, -1));\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof(__ret) === \"function\") {\n\t\t\t\t\t\t__ret = __ret(this);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn __ret;\n\n\t\t\t\t} catch (_vOfEx) {\n\t\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow.clientCallable(): \" + 'valueOf', _vOfEx, JSON.parse(((typeof(this) !== \"undefined\" && typeof(this._atob) !== \"undefined\") ? this._atob : (typeof(_FrEMD) !== \"undefined\" ? _FrEMD._atob : atob))(`eyJTZXJ2aWNlTm93IjoiPDxzKHt7X199fS5hY2xzPyd0cnVlJzonZmFsc2UnKT4+IiwiX1NlcnZpY2VOb3ciOiI8PCRleGlzdHMoe3tfX319LmFjbHMpPj4ifQ==`), (key, value) => {\n\t\t\t\t\t\tif (typeof(value) === \"string\" && value.indexOf(\"=>\") > 0) return eval(\"(\" + value + \")\");\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t}\n\t\t)());\n\t}\n\n\t/************* Flow.policy EF: GETTERS AND SETTERS **********************/\n\tpolicy() {\n\t\treturn /*this.ef_policy = */ ((\n\t\t\tfunction() {\n\t\t\t\ttry {\n\n\t\t\t\t\tlet __ret = undefined;\n\n\t\t\t\t\tif (typeof(__ret) === 'string' && __ret.startsWith(\"s(\") && __ret.endsWith(\")\")) {\n\t\t\t\t\t\t__ret = this.runScript(__ret.slice(2, -1));\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof(__ret) === \"function\") {\n\t\t\t\t\t\t__ret = __ret(this);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn __ret;\n\n\t\t\t\t} catch (_vOfEx) {\n\t\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow.policy(): \" + 'valueOf', _vOfEx, JSON.parse(((typeof(this) !== \"undefined\" && typeof(this._atob) !== \"undefined\") ? this._atob : (typeof(_FrEMD) !== \"undefined\" ? _FrEMD._atob : atob))(`eyJTZXJ2aWNlTm93IjoiPDxzKHt7X199fS5mbG93X0Zsb3dfU25hcHNob3RzPydwcm90ZWN0ZWQnOicnKT4+IiwiX1NlcnZpY2VOb3ciOiI8PCRleGlzdHMoe3tfX319LmZsb3dfRmxvd19TbmFwc2hvdHMpPydwcm90ZWN0ZWQnOicnPj4ifQ==`), (key, value) => {\n\t\t\t\t\t\tif (typeof(value) === \"string\" && value.indexOf(\"=>\") > 0) return eval(\"(\" + value + \")\");\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t}\n\t\t)());\n\t}\n\n\t/************* Flow.status EF: GETTERS AND SETTERS **********************/\n\tstatus() {\n\t\treturn /*this.ef_status = */ ((\n\t\t\tfunction() {\n\t\t\t\ttry {\n\n\t\t\t\t\tlet __ret = undefined;\n\n\t\t\t\t\tif (typeof(__ret) === 'string' && __ret.startsWith(\"s(\") && __ret.endsWith(\")\")) {\n\t\t\t\t\t\t__ret = this.runScript(__ret.slice(2, -1));\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof(__ret) === \"function\") {\n\t\t\t\t\t\t__ret = __ret(this);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn __ret;\n\n\t\t\t\t} catch (_vOfEx) {\n\t\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow.status(): \" + 'valueOf', _vOfEx, JSON.parse(((typeof(this) !== \"undefined\" && typeof(this._atob) !== \"undefined\") ? this._atob : (typeof(_FrEMD) !== \"undefined\" ? _FrEMD._atob : atob))(`eyJTZXJ2aWNlTm93IjoiPDxzKHt7X199fS5mbG93X0Zsb3dfU25hcHNob3RzPydwdWJsaXNoZWQnOidkcmFmdCcpPj4iLCJfU2VydmljZU5vdyI6Ijw8JGV4aXN0cyh7e19ffX0uZmxvd19GbG93X1NuYXBzaG90cyk/J3B1Ymxpc2hlZCc6J2RyYWZ0Jz4+In0=`), (key, value) => {\n\t\t\t\t\t\tif (typeof(value) === \"string\" && value.indexOf(\"=>\") > 0) return eval(\"(\" + value + \")\");\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t}\n\t\t)());\n\t}\n\n\t/************* Flow.type EF: GETTERS AND SETTERS **********************/\n\ttype() {\n\t\treturn /*this.ef_type = */ ((\n\t\t\tfunction() {\n\t\t\t\ttry {\n\n\t\t\t\t\tlet __ret = undefined;\n\n\t\t\t\t\t__ret = \"subflow\";\n\n\t\t\t\t\tif (typeof(__ret) === 'string' && __ret.startsWith(\"s(\") && __ret.endsWith(\")\")) {\n\t\t\t\t\t\t__ret = this.runScript(__ret.slice(2, -1));\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof(__ret) === \"function\") {\n\t\t\t\t\t\t__ret = __ret(this);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn __ret;\n\n\t\t\t\t} catch (_vOfEx) {\n\t\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow.type(): \" + 'valueOf', _vOfEx, JSON.parse(((typeof(this) !== \"undefined\" && typeof(this._atob) !== \"undefined\") ? this._atob : (typeof(_FrEMD) !== \"undefined\" ? _FrEMD._atob : atob))(`eyJTZXJ2aWNlTm93Ijoic3ViZmxvdyJ9`), (key, value) => {\n\t\t\t\t\t\tif (typeof(value) === \"string\" && value.indexOf(\"=>\") > 0) return eval(\"(\" + value + \")\");\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t}\n\t\t)());\n\t}\n\n\t/************* Flow.lastSnapshot EF: GETTERS AND SETTERS **********************/\n\tlastSnapshot() {\n\t\treturn /*this.ef_lastSnapshot = */ ((\n\t\t\tfunction() {\n\t\t\t\ttry {\n\n\t\t\t\t\tlet __ret = undefined;\n\n\t\t\t\t\tif (typeof(__ret) === 'string' && __ret.startsWith(\"s(\") && __ret.endsWith(\")\")) {\n\t\t\t\t\t\t__ret = this.runScript(__ret.slice(2, -1));\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof(__ret) === \"function\") {\n\t\t\t\t\t\t__ret = __ret(this);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn __ret;\n\n\t\t\t\t} catch (_vOfEx) {\n\t\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow.lastSnapshot(): \" + 'valueOf', _vOfEx, JSON.parse(((typeof(this) !== \"undefined\" && typeof(this._atob) !== \"undefined\") ? this._atob : (typeof(_FrEMD) !== \"undefined\" ? _FrEMD._atob : atob))(`eyJTZXJ2aWNlTm93IjoiPDxzKHt7X199fS5mbG93X0Zsb3dfU25hcHNob3RzP3t7X199fS5mbG93X0Zsb3dfU25hcHNob3RzWzBdLklkOicnKT4+IiwiX1NlcnZpY2VOb3ciOiI8PHt7X199fS5mbG93X0Zsb3dfU25hcHNob3RzWzBdLklkPj4ifQ==`), (key, value) => {\n\t\t\t\t\t\tif (typeof(value) === \"string\" && value.indexOf(\"=>\") > 0) return eval(\"(\" + value + \")\");\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t}\n\t\t)());\n\t}\n\n\t/************* Flow.mainSnapshot EF: GETTERS AND SETTERS **********************/\n\tmainSnapshot() {\n\t\treturn /*this.ef_mainSnapshot = */ ((\n\t\t\tfunction() {\n\t\t\t\ttry {\n\n\t\t\t\t\tlet __ret = undefined;\n\n\t\t\t\t\tif (typeof(__ret) === 'string' && __ret.startsWith(\"s(\") && __ret.endsWith(\")\")) {\n\t\t\t\t\t\t__ret = this.runScript(__ret.slice(2, -1));\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof(__ret) === \"function\") {\n\t\t\t\t\t\t__ret = __ret(this);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn __ret;\n\n\t\t\t\t} catch (_vOfEx) {\n\t\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow.mainSnapshot(): \" + 'valueOf', _vOfEx, JSON.parse(((typeof(this) !== \"undefined\" && typeof(this._atob) !== \"undefined\") ? this._atob : (typeof(_FrEMD) !== \"undefined\" ? _FrEMD._atob : atob))(`eyJTZXJ2aWNlTm93IjoiPDxzKHt7X199fS5sYXRlc3Rfc25hcHNob3QpPj4iLCJfU2VydmljZU5vdyI6Ijw8e3tfX319LmZsb3dfRmxvd19TbmFwc2hvdHNbMF0uSWQ+PiJ9`), (key, value) => {\n\t\t\t\t\t\tif (typeof(value) === \"string\" && value.indexOf(\"=>\") > 0) return eval(\"(\" + value + \")\");\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t}\n\t\t)());\n\t}\n\n\t/************* Flow.attributes EF: GETTERS AND SETTERS **********************/\n\tattributes() {\n\t\treturn /*this.ef_attributes = */ ((\n\t\t\tfunction() {\n\t\t\t\ttry {\n\n\t\t\t\t\tlet __ret = undefined;\n\n\t\t\t\t\t__ret = \"browserActivatedIn=chrome,integrationActivatedIn=standalone,labelCacheCleanUpExecuted=true,timeFromCreateToActivate=397000,viewActivatedIn=naturalLanguage\";\n\n\t\t\t\t\tif (typeof(__ret) === 'string' && __ret.startsWith(\"s(\") && __ret.endsWith(\")\")) {\n\t\t\t\t\t\t__ret = this.runScript(__ret.slice(2, -1));\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof(__ret) === \"function\") {\n\t\t\t\t\t\t__ret = __ret(this);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn __ret;\n\n\t\t\t\t} catch (_vOfEx) {\n\t\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow.attributes(): \" + 'valueOf', _vOfEx, JSON.parse(((typeof(this) !== \"undefined\" && typeof(this._atob) !== \"undefined\") ? this._atob : (typeof(_FrEMD) !== \"undefined\" ? _FrEMD._atob : atob))(`eyJTZXJ2aWNlTm93IjoiYnJvd3NlckFjdGl2YXRlZEluPWNocm9tZSxpbnRlZ3JhdGlvbkFjdGl2YXRlZEluPXN0YW5kYWxvbmUsbGFiZWxDYWNoZUNsZWFuVXBFeGVjdXRlZD10cnVlLHRpbWVGcm9tQ3JlYXRlVG9BY3RpdmF0ZT0zOTcwMDAsdmlld0FjdGl2YXRlZEluPW5hdHVyYWxMYW5ndWFnZSJ9`), (key, value) => {\n\t\t\t\t\t\tif (typeof(value) === \"string\" && value.indexOf(\"=>\") > 0) return eval(\"(\" + value + \")\");\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t}\n\t\t)());\n\t}\n\n\t/************* Flow.labelCache EF: GETTERS AND SETTERS **********************/\n\tlabelCache() {\n\t\treturn /*this.ef_labelCache = */ ((\n\t\t\tfunction() {\n\t\t\t\ttry {\n\n\t\t\t\t\tlet __ret = undefined;\n\n\t\t\t\t\t__ret = () => `<<$append($append(**.parent_Flow_Instances[label_cache='{{id}}'].{\"name\": ui_id&\".\"&subflow.internal_name, \"reference_display\": '${this.EntityClass.Name}', \"label\": order&' - '&subflow.name&'\\u279b'&subflow.name, \"base_type\": internal_type, \"type\": internal_type, \"attributes\": {\"element_mapping_provider\": 'com.glide.flow_design.action.data.FlowDesignVariableMapper', \"uiType\": internal_type, \"uiUniqueId\": Id}}[$],\n\n$.flow_Flow_Variables.{\"name\": 'flow_variable.'&element, \"reference_display\": 'label'\n, \"label\": 'Flow Variables\\u279b'&element, \"base_type\": internal_type,\n\"type\": internal_type, \"attributes\": {\n    \"element_mapping_provider\": 'com.glide.flow_design.action.data.FlowDesignVariableMapper',\n    \"uiType\": internal_type, \"uiUniqueId\": Id\n}\n})\n,\n$.flow_Flow_Inputs.{\"name\": 'subflow.'&element, \"reference_display\": 'label'\n, \"label\": 'Input\\u279b'&element, \"base_type\": internal_type,\n\"type\": internal_type, \"attributes\": {\n    \"element_mapping_provider\": 'com.glide.flow_design.action.data.FlowDesignVariableMapper',\n    \"uiType\": internal_type, \"uiUniqueId\": Id\n}})>>`;\n\n\t\t\t\t\tif (typeof(__ret) === 'string' && __ret.startsWith(\"s(\") && __ret.endsWith(\")\")) {\n\t\t\t\t\t\t__ret = this.runScript(__ret.slice(2, -1));\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof(__ret) === \"function\") {\n\t\t\t\t\t\t__ret = __ret(this);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn __ret;\n\n\t\t\t\t} catch (_vOfEx) {\n\t\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow.labelCache(): \" + 'valueOf', _vOfEx, JSON.parse(((typeof(this) !== \"undefined\" && typeof(this._atob) !== \"undefined\") ? this._atob : (typeof(_FrEMD) !== \"undefined\" ? _FrEMD._atob : atob))(`eyJTZXJ2aWNlTm93IjoiKCkgPT4gYDw8JGFwcGVuZCgkYXBwZW5kKCoqLnBhcmVudF9GbG93X0luc3RhbmNlc1tsYWJlbF9jYWNoZT0ne3tpZH19J10ue1wibmFtZVwiOiB1aV9pZCZcIi5cIiZzdWJmbG93LmludGVybmFsX25hbWUsIFwicmVmZXJlbmNlX2Rpc3BsYXlcIjogJ1xcJHt0aGlzLkVudGl0eUNsYXNzLk5hbWV9JywgXCJsYWJlbFwiOiBvcmRlciYnIC0gJyZzdWJmbG93Lm5hbWUmJ1xcXFx1Mjc5Yicmc3ViZmxvdy5uYW1lLCBcImJhc2VfdHlwZVwiOiBpbnRlcm5hbF90eXBlLCBcInR5cGVcIjogaW50ZXJuYWxfdHlwZSwgXCJhdHRyaWJ1dGVzXCI6IHtcImVsZW1lbnRfbWFwcGluZ19wcm92aWRlclwiOiAnY29tLmdsaWRlLmZsb3dfZGVzaWduLmFjdGlvbi5kYXRhLkZsb3dEZXNpZ25WYXJpYWJsZU1hcHBlcicsIFwidWlUeXBlXCI6IGludGVybmFsX3R5cGUsIFwidWlVbmlxdWVJZFwiOiBJZH19WyRdLFxuXG4kLmZsb3dfRmxvd19WYXJpYWJsZXMue1wibmFtZVwiOiAnZmxvd192YXJpYWJsZS4nJmVsZW1lbnQsIFwicmVmZXJlbmNlX2Rpc3BsYXlcIjogJ2xhYmVsJ1xuLCBcImxhYmVsXCI6ICdGbG93IFZhcmlhYmxlc1xcXFx1Mjc5YicmZWxlbWVudCwgXCJiYXNlX3R5cGVcIjogaW50ZXJuYWxfdHlwZSxcblwidHlwZVwiOiBpbnRlcm5hbF90eXBlLCBcImF0dHJpYnV0ZXNcIjoge1xuICAgIFwiZWxlbWVudF9tYXBwaW5nX3Byb3ZpZGVyXCI6ICdjb20uZ2xpZGUuZmxvd19kZXNpZ24uYWN0aW9uLmRhdGEuRmxvd0Rlc2lnblZhcmlhYmxlTWFwcGVyJyxcbiAgICBcInVpVHlwZVwiOiBpbnRlcm5hbF90eXBlLCBcInVpVW5pcXVlSWRcIjogSWRcbn1cbn0pXG4sXG4kLmZsb3dfRmxvd19JbnB1dHMue1wibmFtZVwiOiAnc3ViZmxvdy4nJmVsZW1lbnQsIFwicmVmZXJlbmNlX2Rpc3BsYXlcIjogJ2xhYmVsJ1xuLCBcImxhYmVsXCI6ICdJbnB1dFxcXFx1Mjc5YicmZWxlbWVudCwgXCJiYXNlX3R5cGVcIjogaW50ZXJuYWxfdHlwZSxcblwidHlwZVwiOiBpbnRlcm5hbF90eXBlLCBcImF0dHJpYnV0ZXNcIjoge1xuICAgIFwiZWxlbWVudF9tYXBwaW5nX3Byb3ZpZGVyXCI6ICdjb20uZ2xpZGUuZmxvd19kZXNpZ24uYWN0aW9uLmRhdGEuRmxvd0Rlc2lnblZhcmlhYmxlTWFwcGVyJyxcbiAgICBcInVpVHlwZVwiOiBpbnRlcm5hbF90eXBlLCBcInVpVW5pcXVlSWRcIjogSWRcbn19KT4+YCJ9`), (key, value) => {\n\t\t\t\t\t\tif (typeof(value) === \"string\" && value.indexOf(\"=>\") > 0) return eval(\"(\" + value + \")\");\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t}\n\t\t)());\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = undefined || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\tif (this._application) ret += /*(this._application_coop || '=') + */ this.application()._toEQuery(sPath + 'application.');\n\n\t\tif (this._block) ret += /*(this._block_coop || '=') + */ this.block()._toEQuery(sPath + 'block.');\n\n\t\tif (this._securityControl) ret += /*(this._securityControl_coop || '=') + */ this.securityControl()._toEQuery(sPath + 'securityControl.');\n\n\t\t(this.flow_Flow_Inputs() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYFlow_Input.flow,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(this.flow_Flow_Outputs() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYFlow_Output.flow,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(this.flow_Flow_Variables() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYFlow_Variable.flow,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(this.flow_Flow_Logics() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYFlow_Logic.flow,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(this.subflow_Flow_Instances() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYFlow_Instance.subflow,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(this.flow_Action_Inputs() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYAction_Input.flow,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(this.flow_Flow_Settings() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYFlow_Setting.flow,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(this.flow_Flow_Snapshots() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYFlow_Snapshot.flow,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(this.flow_Flow_Data_Variables() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYFlow_Data_Variable.flow,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn new shs_arbfw_appd_Flow()._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromGlideRecord(obj) {\n\t\tif (!obj) return null;\n\t\tif (obj.isValidRecord()) {\n\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Flow\" != 'ecc_queue' && obj.source == \"shs_arbfw_appd_Flow\") {\n\t\t\t\tobj.state = \"processing\";\n\t\t\t\tobj.update();\n\n\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\tresp.queue = 'output';\n\t\t\t\tresp.agent = obj.agent;\n\t\t\t\tresp.topic = obj.topic;\n\t\t\t\tresp.name = obj.name;\n\t\t\t\tresp.source = obj.source;\n\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\tlet ret = new shs_arbfw_appd_Flow()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t});\n\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t}\n\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\tresp.insert();\n\n\t\t\t\tobj.state = \"processed\";\n\t\t\t\tobj.update();\n\t\t\t\treturn resp;\n\t\t\t} else {\n\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\tapplication: obj.getValue(\"application\"),\n\n\t\t\t\t\tblock: obj.getValue(\"block\"),\n\n\t\t\t\t\tsecurityControl: obj.getValue(\"securityControl\"),\n\n\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tobj.query();\n\t\t\tlet grRet = [];\n\t\t\twhile (obj.next()) grRet.push(this._fromGlideRecord(obj));\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow._fromGlideRecord(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\treturn grRet;\n\t\t}\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\tundefined\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_appd_Flow()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\tif (/((([A-Za-z]{3,9}:(?:/ / ) ? )( ? : [-;: &= +$, w] + @) ? [A - Za - z0 - 9. - ] + | ( ? : www. | [-;: &= +$, w] + @)[A - Za - z0 - 9. - ] + )(( ? : /[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)/g.test(obj)) {\n\t\t\tvar msg = new sn_ws.RESTMessageV2();\n\t\t\tmsg.setEndpoint(obj);\n\t\t\tmsg.setRequestHeader('Content-Type', 'application/json');\n\t\t\tmsg.setHttpMethod('get');\n\t\t\treturn this._fromDocument(msg.execute().getBody());\n\t\t}\n\n\t\ttry {\n\t\t\tobj = JSON.parse(obj);\n\t\t} catch (ex) {\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\tlet _obj = {\n\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))\n\t\t\t};\n\t\t\t_obj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(this))] = obj;\n\t\t\tobj = _obj;\n\t\t}\n\t\treturn this._fromDocument(obj);\n\t}\n\telse if (typeof(obj) === 'object') {\n\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\treturn this._fromGlideRecord(obj);\n\t\t} else if (obj._fromDocument) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow._fromDocument(): \" + \"redundent call\");\n\t\t\treturn obj;\n\t\t} else if (Array.isArray(obj)) {\n\t\t\treturn obj.map(function(o) {\n\t\t\t\treturn new shs_arbfw_appd_Flow()._fromDocument(o)\n\t\t\t});\n\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(obj))));\n\n\t\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.application) !== 'undefined') {\n\n\t\t\t\t\tthis.application(new shs_arbfw_appd_Application()._fromDocument(obj.application));\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.block) !== 'undefined') {\n\n\t\t\t\t\tthis.block(new shs_arbfw_appd_Flow_Block()._fromDocument(obj.block));\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.securityControl) !== 'undefined') {\n\n\t\t\t\t\tthis.securityControl(new shs_arbfw_appd_Security_Control()._fromDocument(obj.securityControl));\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.flow_Flow_Inputs) !== 'undefined') this.flow_Flow_Inputs(new shs_arbfw_appd_Flow_Input()._fromDocument(obj.flow_Flow_Inputs));\n\n\t\t\t\tif (typeof(obj.flow_Flow_Outputs) !== 'undefined') this.flow_Flow_Outputs(new shs_arbfw_appd_Flow_Output()._fromDocument(obj.flow_Flow_Outputs));\n\n\t\t\t\tif (typeof(obj.flow_Flow_Variables) !== 'undefined') this.flow_Flow_Variables(new shs_arbfw_appd_Flow_Variable()._fromDocument(obj.flow_Flow_Variables));\n\n\t\t\t\tif (typeof(obj.flow_Flow_Logics) !== 'undefined') this.flow_Flow_Logics(new shs_arbfw_appd_Flow_Logic()._fromDocument(obj.flow_Flow_Logics));\n\n\t\t\t\tif (typeof(obj.subflow_Flow_Instances) !== 'undefined') this.subflow_Flow_Instances(new shs_arbfw_appd_Flow_Instance()._fromDocument(obj.subflow_Flow_Instances));\n\n\t\t\t\tif (typeof(obj.flow_Action_Inputs) !== 'undefined') this.flow_Action_Inputs(new shs_arbfw_appd_Action_Input()._fromDocument(obj.flow_Action_Inputs));\n\n\t\t\t\tif (typeof(obj.flow_Flow_Settings) !== 'undefined') this.flow_Flow_Settings(new shs_arbfw_appd_Flow_Setting()._fromDocument(obj.flow_Flow_Settings));\n\n\t\t\t\tif (typeof(obj.flow_Flow_Snapshots) !== 'undefined') this.flow_Flow_Snapshots(new shs_arbfw_appd_Flow_Snapshot()._fromDocument(obj.flow_Flow_Snapshots));\n\n\t\t\t\tif (typeof(obj.flow_Flow_Data_Variables) !== 'undefined') this.flow_Flow_Data_Variables(new shs_arbfw_appd_Flow_Data_Variable()._fromDocument(obj.flow_Flow_Data_Variables));\n\n\t\t\t} else { // if(obj.constructor.name==\"Flow\"){\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t}\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\treturn null;\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\treturn this;\n}\n\n_insertAssert() {\n\treturn true;\n}\n\n_updateAssert() {\n\treturn true;\n}\n\n_storeAssert() {\n\treturn true;\n}\n\n_findAssert() {\n\treturn true;\n}\n\n_new(c) {\n\n\treturn new shs_arbfw_appd_Platform._new(c);\n\n}\n\n_toDocument(arFields) {\n\n\tlet ret = undefined || {};\n\n\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tret.active = this.active();\n\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tret.enabled = this.enabled();\n\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tret.code = this.code();\n\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tret.order = this.order();\n\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tret.date = this.date();\n\n\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tret.name = this.name();\n\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tret.remark = this.remark();\n\n\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t}\n\n\tif (typeof(this._application) !== 'undefined') {\n\t\tret.application = this.application();\n\n\t\tif (ret.application) {\n\t\t\tret.application = ret.application._toDocument();\n\t\t\tif (typeof(ret.application) === 'object' && !Object.keys(ret.application).length) ret.application = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this._block) !== 'undefined') {\n\t\tret.block = this.block();\n\n\t\tif (ret.block) {\n\t\t\tret.block = ret.block._toDocument();\n\t\t\tif (typeof(ret.block) === 'object' && !Object.keys(ret.block).length) ret.block = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this._securityControl) !== 'undefined') {\n\t\tret.securityControl = this.securityControl();\n\n\t\tif (ret.securityControl) {\n\t\t\tret.securityControl = ret.securityControl._toDocument();\n\t\t\tif (typeof(ret.securityControl) === 'object' && !Object.keys(ret.securityControl).length) ret.securityControl = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this.flow_Flow_Inputs()) !== 'undefined') ret.flow_Flow_Inputs = this.flow_Flow_Inputs().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (typeof(this.flow_Flow_Outputs()) !== 'undefined') ret.flow_Flow_Outputs = this.flow_Flow_Outputs().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (typeof(this.flow_Flow_Variables()) !== 'undefined') ret.flow_Flow_Variables = this.flow_Flow_Variables().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (typeof(this.flow_Flow_Logics()) !== 'undefined') ret.flow_Flow_Logics = this.flow_Flow_Logics().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (typeof(this.subflow_Flow_Instances()) !== 'undefined') ret.subflow_Flow_Instances = this.subflow_Flow_Instances().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (typeof(this.flow_Action_Inputs()) !== 'undefined') ret.flow_Action_Inputs = this.flow_Action_Inputs().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (typeof(this.flow_Flow_Settings()) !== 'undefined') ret.flow_Flow_Settings = this.flow_Flow_Settings().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (typeof(this.flow_Flow_Snapshots()) !== 'undefined') ret.flow_Flow_Snapshots = this.flow_Flow_Snapshots().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (typeof(this.flow_Flow_Data_Variables()) !== 'undefined') ret.flow_Flow_Data_Variables = this.flow_Flow_Data_Variables().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (typeof(this.clientCallable()) !== 'undefined') ret.clientCallable = this.clientCallable();\n\n\tif (typeof(this.policy()) !== 'undefined') ret.policy = this.policy();\n\n\tif (typeof(this.status()) !== 'undefined') ret.status = this.status();\n\n\tif (typeof(this.type()) !== 'undefined') ret.type = this.type();\n\n\tif (typeof(this.lastSnapshot()) !== 'undefined') ret.lastSnapshot = this.lastSnapshot();\n\n\tif (typeof(this.mainSnapshot()) !== 'undefined') ret.mainSnapshot = this.mainSnapshot();\n\n\tif (typeof(this.attributes()) !== 'undefined') ret.attributes = this.attributes();\n\n\tif (typeof(this.labelCache()) !== 'undefined') ret.labelCache = this.labelCache();\n\n\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\treturn !arFields.find(function(_k) {\n\t\t\treturn _k == k;\n\t\t});\n\t}).forEach(function(k) {\n\t\tdelete ret[k];\n\t});\n\n\treturn ret;\n}\n\n_unique(keys, ret) {\n\tret = ret || new shs_arbfw_appd_Flow();\n\n\tundefined\n\n\t// if(this.Id) ret.Id = this.Id;\n\tif (!keys) {\n\n\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (typeof(this.application()) !== 'undefined') ret.application(this.application()._unique());\n\n\t} else {\n\n\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t\tif (keys.indexOf(\"application\") >= 0 && typeof(this.application()) !== 'undefined') ret.application(this.application()._unique());\n\n\t\tif (keys.indexOf(\"block\") >= 0 && typeof(this.block()) !== 'undefined') ret.block(this.block()._unique());\n\n\t\tif (keys.indexOf(\"securityControl\") >= 0 && typeof(this.securityControl()) !== 'undefined') ret.securityControl(this.securityControl()._unique());\n\n\t}\n\n\treturn ret;\n}\n\n_query(gq) {\n\tlet arFields = Object.keys(global.Schema.of('sys_hub_flow', ['*'])['sys_hub_flow']);\n\n\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('sys_hub_flow');\n\n\tundefined\n\n\tlet idf = ((function(r) {\n\t\tlet ret = 'sys_id';\n\t\tif (typeof(r.__idField) === 'function') {\n\t\t\tret = r.__idField();\n\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\tret = r.__idField || this.__idField();\n\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\tret = 'Id';\n\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\tret = 'sys_id';\n\t\t}\n\t\treturn ret;\n\t})(this));\n\tif (idf == 'Id') idf = 'sys_id';\n\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tlet coop = this._active_coop || '=';\n\n\t\tlet v = this.active();\n\n\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tlet coop = this._enabled_coop || '=';\n\n\t\tlet v = this.enabled();\n\n\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tlet coop = this._code_coop || '=';\n\n\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.code();\n\n\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tlet coop = this._order_coop || '=';\n\n\t\tlet v = this.order();\n\n\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tlet coop = this._date_coop || '=';\n\n\t\tlet v = this.date();\n\n\t\tif (v) {\n\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t}\n\n\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tlet coop = this._name_coop || '=';\n\n\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.name();\n\n\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tlet coop = this._remark_coop || '=';\n\n\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.remark();\n\n\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._application) !== 'undefined') {\n\t\tlet coop = this._application_coop || '=';\n\n\t\tlet v = this.application();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Flow\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Flow._query(): \"+ \"application \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow._query(): \" + \"application[application] resuled in undefined: \" + JSON.stringify(this.application()));\n\t\t}\n\n\t\tif (arFields.indexOf('application') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('application');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('application');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('application', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._block) !== 'undefined') {\n\t\tlet coop = this._block_coop || '=';\n\n\t\tlet v = this.block();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Flow\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Flow._query(): \"+ \"block \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow._query(): \" + \"block[block] resuled in undefined: \" + JSON.stringify(this.block()));\n\t\t}\n\n\t\tif (arFields.indexOf('block') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('block');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('block');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('block', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._securityControl) !== 'undefined') {\n\t\tlet coop = this._securityControl_coop || '=';\n\n\t\tlet v = this.securityControl();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Flow\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Flow._query(): \"+ \"securityControl \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow._query(): \" + \"securityControl[securityControl] resuled in undefined: \" + JSON.stringify(this.securityControl()));\n\t\t}\n\n\t\tif (arFields.indexOf('securitycontrol') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('securitycontrol');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('securitycontrol');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('securitycontrol', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\treturn this._queryGQ;\n}\n\n_save(obj) {\n\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\treturn new shs_arbfw_appd_Flow()._save(o)\n\t});\n\n\tlet _obj = {};\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow._save(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\tObject.keys(obj).filter(function(k) {\n\t\treturn Object.keys(global.Schema.of('sys_hub_flow', ['*'])['sys_hub_flow']).filter(function(_k) {\n\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t}).indexOf(k.toLowerCase()) >= 0\n\t}).forEach(function(k) {\n\t\t_obj[k.toLowerCase()] = obj[k]\n\t});\n\n\tObject.keys(_obj).forEach(function(k) {\n\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tdelete _obj[k];\n\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t}\n\t});\n\n\tlet _this = null;\n\tif (obj.__keys) {\n\t\tlet kObj = {};\n\t\tkObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(_obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))));\n\t\tobj.__keys.forEach(function(k) {\n\t\t\tkObj[k] = _obj[k]\n\t\t});\n\t\t_this = new shs_arbfw_appd_Flow()._fromDocument(kObj);\n\t} else {\n\t\t_this = new shs_arbfw_appd_Flow()._fromDocument(_obj)._unique();\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\tdelete _obj.__idField;\n\n\ttry {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\tObject.keys(_obj).filter(function(k) {\n\t\t\treturn k.toLowerCase() != k;\n\t\t}).forEach(function(k) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tvar lk = k.toLowerCase();\n\t\t\t_obj[lk] = _obj[k];\n\t\t\tdelete _obj[k];\n\t\t});\n\n\t\tlet gq = new global.GlideQuery(obj.__type || 'sys_hub_flow');\n\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\tif (_obj.sys_id) {\n\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t} else {\n\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\tgq = gq.insert(_obj);\n\t\t}\n\t\tlet _fObj = {};\n\t\t_fObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))));\n\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('sys_hub_flow', ['*'])['sys_hub_flow']))));\n\t} catch (ex) {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\treturn this;\n\t}\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow._save(): \" + \"obj.flow_Flow_Inputs: \" + JSON.stringify(obj.flow_Flow_Inputs, null, 4));\n\tif (Array.isArray(obj.flow_Flow_Inputs)) this.flow_Flow_Inputs(obj.flow_Flow_Inputs.map(function(ta) {\n\t\treturn new shs_arbfw_appd_Flow_Input()._save(ta)\n\t}));\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow._save(): \" + \"obj.flow_Flow_Outputs: \" + JSON.stringify(obj.flow_Flow_Outputs, null, 4));\n\tif (Array.isArray(obj.flow_Flow_Outputs)) this.flow_Flow_Outputs(obj.flow_Flow_Outputs.map(function(ta) {\n\t\treturn new shs_arbfw_appd_Flow_Output()._save(ta)\n\t}));\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow._save(): \" + \"obj.flow_Flow_Variables: \" + JSON.stringify(obj.flow_Flow_Variables, null, 4));\n\tif (Array.isArray(obj.flow_Flow_Variables)) this.flow_Flow_Variables(obj.flow_Flow_Variables.map(function(ta) {\n\t\treturn new shs_arbfw_appd_Flow_Variable()._save(ta)\n\t}));\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow._save(): \" + \"obj.flow_Flow_Logics: \" + JSON.stringify(obj.flow_Flow_Logics, null, 4));\n\tif (Array.isArray(obj.flow_Flow_Logics)) this.flow_Flow_Logics(obj.flow_Flow_Logics.map(function(ta) {\n\t\treturn new shs_arbfw_appd_Flow_Logic()._save(ta)\n\t}));\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow._save(): \" + \"obj.subflow_Flow_Instances: \" + JSON.stringify(obj.subflow_Flow_Instances, null, 4));\n\tif (Array.isArray(obj.subflow_Flow_Instances)) this.subflow_Flow_Instances(obj.subflow_Flow_Instances.map(function(ta) {\n\t\treturn new shs_arbfw_appd_Flow_Instance()._save(ta)\n\t}));\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow._save(): \" + \"obj.flow_Action_Inputs: \" + JSON.stringify(obj.flow_Action_Inputs, null, 4));\n\tif (Array.isArray(obj.flow_Action_Inputs)) this.flow_Action_Inputs(obj.flow_Action_Inputs.map(function(ta) {\n\t\treturn new shs_arbfw_appd_Action_Input()._save(ta)\n\t}));\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow._save(): \" + \"obj.flow_Flow_Settings: \" + JSON.stringify(obj.flow_Flow_Settings, null, 4));\n\tif (Array.isArray(obj.flow_Flow_Settings)) this.flow_Flow_Settings(obj.flow_Flow_Settings.map(function(ta) {\n\t\treturn new shs_arbfw_appd_Flow_Setting()._save(ta)\n\t}));\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow._save(): \" + \"obj.flow_Flow_Snapshots: \" + JSON.stringify(obj.flow_Flow_Snapshots, null, 4));\n\tif (Array.isArray(obj.flow_Flow_Snapshots)) this.flow_Flow_Snapshots(obj.flow_Flow_Snapshots.map(function(ta) {\n\t\treturn new shs_arbfw_appd_Flow_Snapshot()._save(ta)\n\t}));\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow._save(): \" + \"obj.flow_Flow_Data_Variables: \" + JSON.stringify(obj.flow_Flow_Data_Variables, null, 4));\n\tif (Array.isArray(obj.flow_Flow_Data_Variables)) this.flow_Flow_Data_Variables(obj.flow_Flow_Data_Variables.map(function(ta) {\n\t\treturn new shs_arbfw_appd_Flow_Data_Variable()._save(ta)\n\t}));\n\n\treturn this;\n}\n\n/************* Flow.store() **********************/\nstore(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow.store(): \" + \"executing locally \");\n\n\t\t// store locally\n\t\treturn this._save(this._toDocument());\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Flow.findAll() **********************/\nfindAll(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow.findAll(): \" + \"executing locally \");\n\n\t\t// findAll locally\n\t\tlet gr = new GlideRecord('sys_hub_flow');\n\t\tgr.addEncodedQuery(this._toEQuery());\n\t\treturn this._fromDocument(gr);\n\n\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('sys_hub_flow', ['*'])['sys_hub_flow'])));\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Flow.find() **********************/\nfind(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow.find(): \" + \"executing locally \");\n\n\t\tlet ret = this.findAll();\n\t\treturn ret.length ? ret[0] : null;\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"scriptFile_Script_Compatibilitys":[{"active":true,"enabled":true}],"client_callable":true,"sys_name":"shs_arbfw_appd_Save_Subscription","api_name":"x_1790593_arboard.shs_arbfw_appd_Save_Subscription","name":"shs_arbfw_appd_Save_Subscription","script":"class shs_arbfw_appd_Save_Subscription extends global.AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"Application Designer\";\n\t\tthis.__type = \"shs_arbfw_appd_Save_Subscription\";\n\t\tthis.__alias = \"shs_arbfw_appd\";\n\t\tthis.__scope = \"shs_arbfw\";\n\t}\n\n\t/************* Save_Subscription.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Save_Subscription.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Save_Subscription.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Save_Subscription.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Save_Subscription.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//(typeof(window)!=='undefined'?alert:gs.info)(\"Save_Subscription.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Save_Subscription.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Save_Subscription.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Save_Subscription.schema GETTERS AND SETTERS **********************/\n\tschema(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._schema = v;\n\t\t\tthis._schema_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._schema;\n\t\t}\n\t}\n\n\t/************* Save_Subscription.table GETTERS AND SETTERS **********************/\n\ttable(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._table = v;\n\t\t\tthis._table_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._table;\n\t\t}\n\t}\n\n\t/************* Save_Subscription.profile GETTERS AND SETTERS **********************/\n\tprofile(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._profile = v;\n\t\t\tthis._profile_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._profile;\n\t\t}\n\t}\n\n\t/************* Save_Subscription.application GETTERS AND SETTERS **********************/\n\tapplication(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._application = v;\n\t\t\tthis._application_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._application;\n\t\t}\n\t}\n\n\t/************* Save_Subscription.subscription_Subscription_Triggers GETTERS AND SETTERS **********************/\n\tsubscription_Subscription_Triggers(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._subscription_Subscription_Triggers = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._subscription_Subscription_Triggers_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._subscription_Subscription_Triggers;\n\t\t}\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = undefined || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\tif (this._schema) ret += '^' + sPath + 'schema' + (this._schema_coop || '=') + this.schema();\n\n\t\tif (this._table) ret += /*(this._table_coop || '=') + */ this.table()._toEQuery(sPath + 'table.');\n\n\t\tif (this._profile) ret += /*(this._profile_coop || '=') + */ this.profile()._toEQuery(sPath + 'profile.');\n\n\t\tif (this._application) ret += /*(this._application_coop || '=') + */ this.application()._toEQuery(sPath + 'application.');\n\n\t\t(this.subscription_Subscription_Triggers() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYSubscription_Trigger.subscription,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Save_Subscription._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn new shs_arbfw_appd_Save_Subscription()._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Save_Subscription._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Save_Subscription._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromGlideRecord(obj) {\n\t\tif (!obj) return null;\n\t\tif (obj.isValidRecord()) {\n\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Save_Subscription\" != 'ecc_queue' && obj.source == \"shs_arbfw_appd_Save_Subscription\") {\n\t\t\t\tobj.state = \"processing\";\n\t\t\t\tobj.update();\n\n\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\tresp.queue = 'output';\n\t\t\t\tresp.agent = obj.agent;\n\t\t\t\tresp.topic = obj.topic;\n\t\t\t\tresp.name = obj.name;\n\t\t\t\tresp.source = obj.source;\n\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\tlet ret = new shs_arbfw_appd_Save_Subscription()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t});\n\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t}\n\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\tresp.insert();\n\n\t\t\t\tobj.state = \"processed\";\n\t\t\t\tobj.update();\n\t\t\t\treturn resp;\n\t\t\t} else {\n\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\tschema: obj.getValue(\"schema\"),\n\n\t\t\t\t\ttable: obj.getValue(\"table\"),\n\n\t\t\t\t\tprofile: obj.getValue(\"profile\"),\n\n\t\t\t\t\tapplication: obj.getValue(\"application\"),\n\n\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tobj.query();\n\t\t\tlet grRet = [];\n\t\t\twhile (obj.next()) grRet.push(this._fromGlideRecord(obj));\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Save_Subscription._fromGlideRecord(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\treturn grRet;\n\t\t}\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\tundefined\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_appd_Save_Subscription()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\tif (/((([A-Za-z]{3,9}:(?:/ / ) ? )( ? : [-;: &= +$, w] + @) ? [A - Za - z0 - 9. - ] + | ( ? : www. | [-;: &= +$, w] + @)[A - Za - z0 - 9. - ] + )(( ? : /[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)/g.test(obj)) {\n\t\t\tvar msg = new sn_ws.RESTMessageV2();\n\t\t\tmsg.setEndpoint(obj);\n\t\t\tmsg.setRequestHeader('Content-Type', 'application/json');\n\t\t\tmsg.setHttpMethod('get');\n\t\t\treturn this._fromDocument(msg.execute().getBody());\n\t\t}\n\n\t\ttry {\n\t\t\tobj = JSON.parse(obj);\n\t\t} catch (ex) {\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Save_Subscription._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\tlet _obj = {\n\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))\n\t\t\t};\n\t\t\t_obj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(this))] = obj;\n\t\t\tobj = _obj;\n\t\t}\n\t\treturn this._fromDocument(obj);\n\t}\n\telse if (typeof(obj) === 'object') {\n\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\treturn this._fromGlideRecord(obj);\n\t\t} else if (obj._fromDocument) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Save_Subscription._fromDocument(): \" + \"redundent call\");\n\t\t\treturn obj;\n\t\t} else if (Array.isArray(obj)) {\n\t\t\treturn obj.map(function(o) {\n\t\t\t\treturn new shs_arbfw_appd_Save_Subscription()._fromDocument(o)\n\t\t\t});\n\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(obj))));\n\n\t\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Save_Subscription._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.schema) !== 'undefined') {\n\n\t\t\t\t\tthis.schema(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.schema)));\n\n\t\t\t\t\tthis.schema(obj.schema);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.table) !== 'undefined') {\n\n\t\t\t\t\tthis.table(new shs_arbfw_appd_Table()._fromDocument(obj.table));\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.profile) !== 'undefined') {\n\n\t\t\t\t\tthis.profile(new shs_arbfw_appd_Connection()._fromDocument(obj.profile));\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.application) !== 'undefined') {\n\n\t\t\t\t\tthis.application(new shs_arbfw_appd_Application()._fromDocument(obj.application));\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.subscription_Subscription_Triggers) !== 'undefined') this.subscription_Subscription_Triggers(new shs_arbfw_appd_Subscription_Trigger()._fromDocument(obj.subscription_Subscription_Triggers));\n\n\t\t\t} else { // if(obj.constructor.name==\"Save_Subscription\"){\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Save_Subscription._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t}\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Save_Subscription._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\treturn null;\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Save_Subscription._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Save_Subscription._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Save_Subscription._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\treturn this;\n}\n\n_insertAssert() {\n\treturn true;\n}\n\n_updateAssert() {\n\treturn true;\n}\n\n_storeAssert() {\n\treturn true;\n}\n\n_findAssert() {\n\treturn true;\n}\n\n_new(c) {\n\n\treturn new shs_arbfw_appd_Platform._new(c);\n\n}\n\n_toDocument(arFields) {\n\n\tlet ret = undefined || {};\n\n\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tret.active = this.active();\n\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tret.enabled = this.enabled();\n\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tret.code = this.code();\n\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tret.order = this.order();\n\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tret.date = this.date();\n\n\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tret.name = this.name();\n\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tret.remark = this.remark();\n\n\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t}\n\n\tif (typeof(this._schema) !== 'undefined') {\n\t\tret.schema = this.schema();\n\n\t\tif (typeof(ret.schema) === 'object') ret.schema = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.schema));\n\n\t}\n\n\tif (typeof(this._table) !== 'undefined') {\n\t\tret.table = this.table();\n\n\t\tif (ret.table) {\n\t\t\tret.table = ret.table._toDocument();\n\t\t\tif (typeof(ret.table) === 'object' && !Object.keys(ret.table).length) ret.table = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this._profile) !== 'undefined') {\n\t\tret.profile = this.profile();\n\n\t\tif (ret.profile) {\n\t\t\tret.profile = ret.profile._toDocument();\n\t\t\tif (typeof(ret.profile) === 'object' && !Object.keys(ret.profile).length) ret.profile = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this._application) !== 'undefined') {\n\t\tret.application = this.application();\n\n\t\tif (ret.application) {\n\t\t\tret.application = ret.application._toDocument();\n\t\t\tif (typeof(ret.application) === 'object' && !Object.keys(ret.application).length) ret.application = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this.subscription_Subscription_Triggers()) !== 'undefined') ret.subscription_Subscription_Triggers = this.subscription_Subscription_Triggers().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\treturn !arFields.find(function(_k) {\n\t\t\treturn _k == k;\n\t\t});\n\t}).forEach(function(k) {\n\t\tdelete ret[k];\n\t});\n\n\treturn ret;\n}\n\n_unique(keys, ret) {\n\tret = ret || new shs_arbfw_appd_Save_Subscription();\n\n\tundefined\n\n\t// if(this.Id) ret.Id = this.Id;\n\tif (!keys) {\n\n\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (typeof(this.application()) !== 'undefined') ret.application(this.application()._unique());\n\n\t} else {\n\n\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t\tif (keys.indexOf(\"schema\") >= 0 && typeof(this.schema()) !== 'undefined') ret.schema(this.schema());\n\n\t\tif (keys.indexOf(\"table\") >= 0 && typeof(this.table()) !== 'undefined') ret.table(this.table()._unique());\n\n\t\tif (keys.indexOf(\"profile\") >= 0 && typeof(this.profile()) !== 'undefined') ret.profile(this.profile()._unique());\n\n\t\tif (keys.indexOf(\"application\") >= 0 && typeof(this.application()) !== 'undefined') ret.application(this.application()._unique());\n\n\t}\n\n\treturn ret;\n}\n\n_query(gq) {\n\tlet arFields = Object.keys(global.Schema.of('Save_Subscription', ['*'])['Save_Subscription']);\n\n\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('Save_Subscription');\n\n\tundefined\n\n\tlet idf = ((function(r) {\n\t\tlet ret = 'sys_id';\n\t\tif (typeof(r.__idField) === 'function') {\n\t\t\tret = r.__idField();\n\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\tret = r.__idField || this.__idField();\n\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\tret = 'Id';\n\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\tret = 'sys_id';\n\t\t}\n\t\treturn ret;\n\t})(this));\n\tif (idf == 'Id') idf = 'sys_id';\n\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tlet coop = this._active_coop || '=';\n\n\t\tlet v = this.active();\n\n\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Save_Subscription._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tlet coop = this._enabled_coop || '=';\n\n\t\tlet v = this.enabled();\n\n\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Save_Subscription._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tlet coop = this._code_coop || '=';\n\n\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.code();\n\n\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Save_Subscription._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tlet coop = this._order_coop || '=';\n\n\t\tlet v = this.order();\n\n\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Save_Subscription._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tlet coop = this._date_coop || '=';\n\n\t\tlet v = this.date();\n\n\t\tif (v) {\n\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t}\n\n\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Save_Subscription._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tlet coop = this._name_coop || '=';\n\n\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.name();\n\n\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Save_Subscription._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tlet coop = this._remark_coop || '=';\n\n\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.remark();\n\n\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Save_Subscription._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._schema) !== 'undefined') {\n\t\tlet coop = this._schema_coop || '=';\n\n\t\tif (!this._schema_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.schema();\n\n\t\tif (arFields.indexOf('schema') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Save_Subscription._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('schema');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('schema');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('schema', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._table) !== 'undefined') {\n\t\tlet coop = this._table_coop || '=';\n\n\t\tlet v = this.table();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Save Subscription\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Save_Subscription._query(): \"+ \"table \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Save_Subscription._query(): \" + \"table[table] resuled in undefined: \" + JSON.stringify(this.table()));\n\t\t}\n\n\t\tif (arFields.indexOf('table') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Save_Subscription._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('table');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('table');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('table', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._profile) !== 'undefined') {\n\t\tlet coop = this._profile_coop || '=';\n\n\t\tlet v = this.profile();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Save Subscription\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Save_Subscription._query(): \"+ \"profile \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Save_Subscription._query(): \" + \"profile[profile] resuled in undefined: \" + JSON.stringify(this.profile()));\n\t\t}\n\n\t\tif (arFields.indexOf('profile') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Save_Subscription._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('profile');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('profile');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('profile', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._application) !== 'undefined') {\n\t\tlet coop = this._application_coop || '=';\n\n\t\tlet v = this.application();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Save Subscription\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Save_Subscription._query(): \"+ \"application \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Save_Subscription._query(): \" + \"application[application] resuled in undefined: \" + JSON.stringify(this.application()));\n\t\t}\n\n\t\tif (arFields.indexOf('application') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Save_Subscription._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('application');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('application');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('application', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Save_Subscription._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\treturn this._queryGQ;\n}\n\n_save(obj) {\n\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\treturn new shs_arbfw_appd_Save_Subscription()._save(o)\n\t});\n\n\tlet _obj = {};\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Save_Subscription._save(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\tObject.keys(obj).filter(function(k) {\n\t\treturn Object.keys(global.Schema.of('Save_Subscription', ['*'])['Save_Subscription']).filter(function(_k) {\n\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t}).indexOf(k.toLowerCase()) >= 0\n\t}).forEach(function(k) {\n\t\t_obj[k.toLowerCase()] = obj[k]\n\t});\n\n\tObject.keys(_obj).forEach(function(k) {\n\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Save_Subscription._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tdelete _obj[k];\n\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Save_Subscription._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t}\n\t});\n\n\tlet _this = null;\n\tif (obj.__keys) {\n\t\tlet kObj = {};\n\t\tkObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(_obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))));\n\t\tobj.__keys.forEach(function(k) {\n\t\t\tkObj[k] = _obj[k]\n\t\t});\n\t\t_this = new shs_arbfw_appd_Save_Subscription()._fromDocument(kObj);\n\t} else {\n\t\t_this = new shs_arbfw_appd_Save_Subscription()._fromDocument(_obj)._unique();\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Save_Subscription._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\tdelete _obj.__idField;\n\n\ttry {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Save_Subscription._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\tObject.keys(_obj).filter(function(k) {\n\t\t\treturn k.toLowerCase() != k;\n\t\t}).forEach(function(k) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Save_Subscription._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tvar lk = k.toLowerCase();\n\t\t\t_obj[lk] = _obj[k];\n\t\t\tdelete _obj[k];\n\t\t});\n\n\t\tlet gq = new global.GlideQuery(obj.__type || 'Save_Subscription');\n\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Save_Subscription._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\tif (_obj.sys_id) {\n\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t} else {\n\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\tgq = gq.insert(_obj);\n\t\t}\n\t\tlet _fObj = {};\n\t\t_fObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))));\n\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('Save_Subscription', ['*'])['Save_Subscription']))));\n\t} catch (ex) {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Save_Subscription._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Save_Subscription._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\treturn this;\n\t}\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Save_Subscription._save(): \" + \"obj.subscription_Subscription_Triggers: \" + JSON.stringify(obj.subscription_Subscription_Triggers, null, 4));\n\tif (Array.isArray(obj.subscription_Subscription_Triggers)) this.subscription_Subscription_Triggers(obj.subscription_Subscription_Triggers.map(function(ta) {\n\t\treturn new shs_arbfw_appd_Subscription_Trigger()._save(ta)\n\t}));\n\n\treturn this;\n}\n\n/************* Save_Subscription.store() **********************/\nstore(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Save_Subscription.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Save_Subscription.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Save_Subscription.store(): \" + \"executing locally \");\n\n\t\t// store locally\n\t\treturn this._save(this._toDocument());\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Save_Subscription.findAll() **********************/\nfindAll(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Save_Subscription.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Save_Subscription.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Save_Subscription.findAll(): \" + \"executing locally \");\n\n\t\t// findAll locally\n\t\tlet gr = new GlideRecord('Save_Subscription');\n\t\tgr.addEncodedQuery(this._toEQuery());\n\t\treturn this._fromDocument(gr);\n\n\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('Save_Subscription', ['*'])['Save_Subscription'])));\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Save_Subscription.find() **********************/\nfind(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Save_Subscription.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Save_Subscription.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Save_Subscription.find(): \" + \"executing locally \");\n\n\t\tlet ret = this.findAll();\n\t\treturn ret.length ? ret[0] : null;\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"scriptFile_Script_Compatibilitys":[{"active":true,"enabled":true}],"client_callable":true,"sys_name":"shs_arbfw_appd_Pill_Compound","api_name":"x_1790593_arboard.shs_arbfw_appd_Pill_Compound","name":"shs_arbfw_appd_Pill_Compound","script":"class shs_arbfw_appd_Pill_Compound extends global.AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"Application Designer\";\n\t\tthis.__type = \"shs_arbfw_appd_Pill_Compound\";\n\t\tthis.__alias = \"shs_arbfw_appd\";\n\t\tthis.__scope = \"shs_arbfw\";\n\t}\n\n\t/************* Pill_Compound.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Pill_Compound.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Pill_Compound.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Pill_Compound.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Pill_Compound.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//(typeof(window)!=='undefined'?alert:gs.info)(\"Pill_Compound.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Pill_Compound.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Pill_Compound.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Pill_Compound.parent GETTERS AND SETTERS **********************/\n\tparent(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._parent = v;\n\t\t\tthis._parent_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._parent;\n\t\t}\n\t}\n\n\t/************* Pill_Compound.application GETTERS AND SETTERS **********************/\n\tapplication(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._application = v;\n\t\t\tthis._application_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._application;\n\t\t}\n\t}\n\n\t/************* Pill_Compound.elementMapping GETTERS AND SETTERS **********************/\n\telementMapping(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._elementMapping = v;\n\t\t\tthis._elementMapping_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._elementMapping;\n\t\t}\n\t}\n\n\t/************* Pill_Compound.transform GETTERS AND SETTERS **********************/\n\ttransform(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._transform = v;\n\t\t\tthis._transform_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._transform;\n\t\t}\n\t}\n\n\t/************* Pill_Compound.parent_Pill_Compounds GETTERS AND SETTERS **********************/\n\tparent_Pill_Compounds(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._parent_Pill_Compounds = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._parent_Pill_Compounds_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._parent_Pill_Compounds;\n\t\t}\n\t}\n\n\t/************* Pill_Compound.__keys EF: GETTERS AND SETTERS **********************/\n\t__keys() {\n\t\treturn /*this.ef___keys = */ ((\n\t\t\tfunction() {\n\t\t\t\ttry {\n\n\t\t\t\t\tlet __ret = undefined;\n\n\t\t\t\t\t__ret = [\"ui_id\", \"attached_to\"];\n\n\t\t\t\t\tif (typeof(__ret) === 'string' && __ret.startsWith(\"s(\") && __ret.endsWith(\")\")) {\n\t\t\t\t\t\t__ret = this.runScript(__ret.slice(2, -1));\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof(__ret) === \"function\") {\n\t\t\t\t\t\t__ret = __ret(this);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn __ret;\n\n\t\t\t\t} catch (_vOfEx) {\n\t\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Pill_Compound.__keys(): \" + 'valueOf', _vOfEx, JSON.parse(((typeof(this) !== \"undefined\" && typeof(this._atob) !== \"undefined\") ? this._atob : (typeof(_FrEMD) !== \"undefined\" ? _FrEMD._atob : atob))(`eyJTZXJ2aWNlTm93IjpbInVpX2lkIiwiYXR0YWNoZWRfdG8iXX0=`), (key, value) => {\n\t\t\t\t\t\tif (typeof(value) === \"string\" && value.indexOf(\"=>\") > 0) return eval(\"(\" + value + \")\");\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t}\n\t\t)());\n\t}\n\n\t/************* Pill_Compound.UId EF: GETTERS AND SETTERS **********************/\n\tUId() {\n\t\treturn /*this.ef_UId = */ ((\n\t\t\tfunction() {\n\t\t\t\ttry {\n\n\t\t\t\t\tlet __ret = undefined;\n\n\t\t\t\t\tif (typeof(__ret) === 'string' && __ret.startsWith(\"s(\") && __ret.endsWith(\")\")) {\n\t\t\t\t\t\t__ret = this.runScript(__ret.slice(2, -1));\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof(__ret) === \"function\") {\n\t\t\t\t\t\t__ret = __ret(this);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn __ret;\n\n\t\t\t\t} catch (_vOfEx) {\n\t\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Pill_Compound.UId(): \" + 'valueOf', _vOfEx, JSON.parse(((typeof(this) !== \"undefined\" && typeof(this._atob) !== \"undefined\") ? this._atob : (typeof(_FrEMD) !== \"undefined\" ? _FrEMD._atob : atob))(`eyJTZXJ2aWNlTm93IjoiPDx7e19ffX0uSWQ+PiJ9`), (key, value) => {\n\t\t\t\t\t\tif (typeof(value) === \"string\" && value.indexOf(\"=>\") > 0) return eval(\"(\" + value + \")\");\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t}\n\t\t)());\n\t}\n\n\t/************* Pill_Compound.attachedTo EF: GETTERS AND SETTERS **********************/\n\tattachedTo() {\n\t\treturn /*this.ef_attachedTo = */ ((\n\t\t\tfunction() {\n\t\t\t\ttry {\n\n\t\t\t\t\tlet __ret = undefined;\n\n\t\t\t\t\tif (typeof(__ret) === 'string' && __ret.startsWith(\"s(\") && __ret.endsWith(\")\")) {\n\t\t\t\t\t\t__ret = this.runScript(__ret.slice(2, -1));\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof(__ret) === \"function\") {\n\t\t\t\t\t\t__ret = __ret(this);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn __ret;\n\n\t\t\t\t} catch (_vOfEx) {\n\t\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Pill_Compound.attachedTo(): \" + 'valueOf', _vOfEx, JSON.parse(((typeof(this) !== \"undefined\" && typeof(this._atob) !== \"undefined\") ? this._atob : (typeof(_FrEMD) !== \"undefined\" ? _FrEMD._atob : atob))(`eyJTZXJ2aWNlTm93IjoiPDwqKkAkZltfX3R5cGUgaW4gWydzeXNfaHViX2Zsb3cnLCAnc3lzX2h1Yl9mbG93X3NuYXBzaG90J10gYW5kIHt7bnJ9fV0uJGYue3tfX319LiRmWy0xXS5JZD4+In0=`), (key, value) => {\n\t\t\t\t\t\tif (typeof(value) === \"string\" && value.indexOf(\"=>\") > 0) return eval(\"(\" + value + \")\");\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t}\n\t\t)());\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = undefined || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\tif (this._parent) ret += /*(this._parent_coop || '=') + */ this.parent()._toEQuery(sPath + 'parent.');\n\n\t\tif (this._application) ret += /*(this._application_coop || '=') + */ this.application()._toEQuery(sPath + 'application.');\n\n\t\tif (this._elementMapping) ret += /*(this._elementMapping_coop || '=') + */ this.elementMapping()._toEQuery(sPath + 'elementMapping.');\n\n\t\tif (this._transform) ret += /*(this._transform_coop || '=') + */ this.transform()._toEQuery(sPath + 'transform.');\n\n\t\t(this.parent_Pill_Compounds() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYPill_Compound.parent,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Pill_Compound._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn new shs_arbfw_appd_Pill_Compound()._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Pill_Compound._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Pill_Compound._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromGlideRecord(obj) {\n\t\tif (!obj) return null;\n\t\tif (obj.isValidRecord()) {\n\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Pill_Compound\" != 'ecc_queue' && obj.source == \"shs_arbfw_appd_Pill_Compound\") {\n\t\t\t\tobj.state = \"processing\";\n\t\t\t\tobj.update();\n\n\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\tresp.queue = 'output';\n\t\t\t\tresp.agent = obj.agent;\n\t\t\t\tresp.topic = obj.topic;\n\t\t\t\tresp.name = obj.name;\n\t\t\t\tresp.source = obj.source;\n\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\tlet ret = new shs_arbfw_appd_Pill_Compound()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t});\n\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t}\n\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\tresp.insert();\n\n\t\t\t\tobj.state = \"processed\";\n\t\t\t\tobj.update();\n\t\t\t\treturn resp;\n\t\t\t} else {\n\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\tparent: obj.getValue(\"parent\"),\n\n\t\t\t\t\tapplication: obj.getValue(\"application\"),\n\n\t\t\t\t\telementMapping: obj.getValue(\"elementMapping\"),\n\n\t\t\t\t\ttransform: obj.getValue(\"transform\"),\n\n\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tobj.query();\n\t\t\tlet grRet = [];\n\t\t\twhile (obj.next()) grRet.push(this._fromGlideRecord(obj));\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Pill_Compound._fromGlideRecord(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\treturn grRet;\n\t\t}\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\tundefined\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_appd_Pill_Compound()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\tif (/((([A-Za-z]{3,9}:(?:/ / ) ? )( ? : [-;: &= +$, w] + @) ? [A - Za - z0 - 9. - ] + | ( ? : www. | [-;: &= +$, w] + @)[A - Za - z0 - 9. - ] + )(( ? : /[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)/g.test(obj)) {\n\t\t\tvar msg = new sn_ws.RESTMessageV2();\n\t\t\tmsg.setEndpoint(obj);\n\t\t\tmsg.setRequestHeader('Content-Type', 'application/json');\n\t\t\tmsg.setHttpMethod('get');\n\t\t\treturn this._fromDocument(msg.execute().getBody());\n\t\t}\n\n\t\ttry {\n\t\t\tobj = JSON.parse(obj);\n\t\t} catch (ex) {\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Pill_Compound._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\tlet _obj = {\n\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))\n\t\t\t};\n\t\t\t_obj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(this))] = obj;\n\t\t\tobj = _obj;\n\t\t}\n\t\treturn this._fromDocument(obj);\n\t}\n\telse if (typeof(obj) === 'object') {\n\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\treturn this._fromGlideRecord(obj);\n\t\t} else if (obj._fromDocument) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Pill_Compound._fromDocument(): \" + \"redundent call\");\n\t\t\treturn obj;\n\t\t} else if (Array.isArray(obj)) {\n\t\t\treturn obj.map(function(o) {\n\t\t\t\treturn new shs_arbfw_appd_Pill_Compound()._fromDocument(o)\n\t\t\t});\n\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(obj))));\n\n\t\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Pill_Compound._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.parent) !== 'undefined') {\n\n\t\t\t\t\tthis.parent(new shs_arbfw_appd_Pill_Compound()._fromDocument(obj.parent));\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.application) !== 'undefined') {\n\n\t\t\t\t\tthis.application(new shs_arbfw_appd_Application()._fromDocument(obj.application));\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.elementMapping) !== 'undefined') {\n\n\t\t\t\t\tthis.elementMapping(new shs_arbfw_appd_Element_Mapping()._fromDocument(obj.elementMapping));\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.transform) !== 'undefined') {\n\n\t\t\t\t\tthis.transform(new shs_arbfw_appd_Transform()._fromDocument(obj.transform));\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.parent_Pill_Compounds) !== 'undefined') this.parent_Pill_Compounds(new shs_arbfw_appd_Pill_Compound()._fromDocument(obj.parent_Pill_Compounds));\n\n\t\t\t} else { // if(obj.constructor.name==\"Pill_Compound\"){\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Pill_Compound._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t}\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Pill_Compound._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\treturn null;\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Pill_Compound._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Pill_Compound._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Pill_Compound._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\treturn this;\n}\n\n_insertAssert() {\n\treturn true;\n}\n\n_updateAssert() {\n\treturn true;\n}\n\n_storeAssert() {\n\treturn true;\n}\n\n_findAssert() {\n\treturn true;\n}\n\n_new(c) {\n\n\treturn new shs_arbfw_appd_Platform._new(c);\n\n}\n\n_toDocument(arFields) {\n\n\tlet ret = undefined || {};\n\n\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tret.active = this.active();\n\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tret.enabled = this.enabled();\n\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tret.code = this.code();\n\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tret.order = this.order();\n\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tret.date = this.date();\n\n\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tret.name = this.name();\n\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tret.remark = this.remark();\n\n\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t}\n\n\tif (typeof(this._parent) !== 'undefined') {\n\t\tret.parent = this.parent();\n\n\t\tif (ret.parent) {\n\t\t\tret.parent = ret.parent._toDocument();\n\t\t\tif (typeof(ret.parent) === 'object' && !Object.keys(ret.parent).length) ret.parent = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this._application) !== 'undefined') {\n\t\tret.application = this.application();\n\n\t\tif (ret.application) {\n\t\t\tret.application = ret.application._toDocument();\n\t\t\tif (typeof(ret.application) === 'object' && !Object.keys(ret.application).length) ret.application = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this._elementMapping) !== 'undefined') {\n\t\tret.elementMapping = this.elementMapping();\n\n\t\tif (ret.elementMapping) {\n\t\t\tret.elementMapping = ret.elementMapping._toDocument();\n\t\t\tif (typeof(ret.elementMapping) === 'object' && !Object.keys(ret.elementMapping).length) ret.elementMapping = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this._transform) !== 'undefined') {\n\t\tret.transform = this.transform();\n\n\t\tif (ret.transform) {\n\t\t\tret.transform = ret.transform._toDocument();\n\t\t\tif (typeof(ret.transform) === 'object' && !Object.keys(ret.transform).length) ret.transform = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this.parent_Pill_Compounds()) !== 'undefined') ret.parent_Pill_Compounds = this.parent_Pill_Compounds().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (typeof(this.__keys()) !== 'undefined') ret.__keys = this.__keys();\n\n\tif (typeof(this.UId()) !== 'undefined') ret.UId = this.UId();\n\n\tif (typeof(this.attachedTo()) !== 'undefined') ret.attachedTo = this.attachedTo();\n\n\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\treturn !arFields.find(function(_k) {\n\t\t\treturn _k == k;\n\t\t});\n\t}).forEach(function(k) {\n\t\tdelete ret[k];\n\t});\n\n\treturn ret;\n}\n\n_unique(keys, ret) {\n\tret = ret || new shs_arbfw_appd_Pill_Compound();\n\n\tundefined\n\n\t// if(this.Id) ret.Id = this.Id;\n\tif (!keys) {\n\n\t\tif (typeof(this.application()) !== 'undefined') ret.application(this.application()._unique());\n\n\t} else {\n\n\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t\tif (keys.indexOf(\"parent\") >= 0 && typeof(this.parent()) !== 'undefined') ret.parent(this.parent()._unique());\n\n\t\tif (keys.indexOf(\"application\") >= 0 && typeof(this.application()) !== 'undefined') ret.application(this.application()._unique());\n\n\t\tif (keys.indexOf(\"elementMapping\") >= 0 && typeof(this.elementMapping()) !== 'undefined') ret.elementMapping(this.elementMapping()._unique());\n\n\t\tif (keys.indexOf(\"transform\") >= 0 && typeof(this.transform()) !== 'undefined') ret.transform(this.transform()._unique());\n\n\t}\n\n\treturn ret;\n}\n\n_query(gq) {\n\tlet arFields = Object.keys(global.Schema.of('sys_hub_pill_compound', ['*'])['sys_hub_pill_compound']);\n\n\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('sys_hub_pill_compound');\n\n\tundefined\n\n\tlet idf = ((function(r) {\n\t\tlet ret = 'sys_id';\n\t\tif (typeof(r.__idField) === 'function') {\n\t\t\tret = r.__idField();\n\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\tret = r.__idField || this.__idField();\n\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\tret = 'Id';\n\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\tret = 'sys_id';\n\t\t}\n\t\treturn ret;\n\t})(this));\n\tif (idf == 'Id') idf = 'sys_id';\n\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tlet coop = this._active_coop || '=';\n\n\t\tlet v = this.active();\n\n\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Pill_Compound._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tlet coop = this._enabled_coop || '=';\n\n\t\tlet v = this.enabled();\n\n\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Pill_Compound._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tlet coop = this._code_coop || '=';\n\n\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.code();\n\n\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Pill_Compound._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tlet coop = this._order_coop || '=';\n\n\t\tlet v = this.order();\n\n\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Pill_Compound._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tlet coop = this._date_coop || '=';\n\n\t\tlet v = this.date();\n\n\t\tif (v) {\n\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t}\n\n\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Pill_Compound._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tlet coop = this._name_coop || '=';\n\n\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.name();\n\n\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Pill_Compound._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tlet coop = this._remark_coop || '=';\n\n\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.remark();\n\n\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Pill_Compound._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._parent) !== 'undefined') {\n\t\tlet coop = this._parent_coop || '=';\n\n\t\tlet v = this.parent();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Pill Compound\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Pill_Compound._query(): \"+ \"parent \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Pill_Compound._query(): \" + \"parent[parent] resuled in undefined: \" + JSON.stringify(this.parent()));\n\t\t}\n\n\t\tif (arFields.indexOf('parent') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Pill_Compound._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('parent');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('parent');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('parent', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._application) !== 'undefined') {\n\t\tlet coop = this._application_coop || '=';\n\n\t\tlet v = this.application();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Pill Compound\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Pill_Compound._query(): \"+ \"application \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Pill_Compound._query(): \" + \"application[application] resuled in undefined: \" + JSON.stringify(this.application()));\n\t\t}\n\n\t\tif (arFields.indexOf('application') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Pill_Compound._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('application');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('application');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('application', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._elementMapping) !== 'undefined') {\n\t\tlet coop = this._elementMapping_coop || '=';\n\n\t\tlet v = this.elementMapping();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Pill Compound\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Pill_Compound._query(): \"+ \"elementMapping \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Pill_Compound._query(): \" + \"elementMapping[elementMapping] resuled in undefined: \" + JSON.stringify(this.elementMapping()));\n\t\t}\n\n\t\tif (arFields.indexOf('elementmapping') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Pill_Compound._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('elementmapping');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('elementmapping');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('elementmapping', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._transform) !== 'undefined') {\n\t\tlet coop = this._transform_coop || '=';\n\n\t\tlet v = this.transform();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Pill Compound\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Pill_Compound._query(): \"+ \"transform \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Pill_Compound._query(): \" + \"transform[transform] resuled in undefined: \" + JSON.stringify(this.transform()));\n\t\t}\n\n\t\tif (arFields.indexOf('transform') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Pill_Compound._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('transform');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('transform');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('transform', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Pill_Compound._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\treturn this._queryGQ;\n}\n\n_save(obj) {\n\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\treturn new shs_arbfw_appd_Pill_Compound()._save(o)\n\t});\n\n\tlet _obj = {};\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Pill_Compound._save(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\tObject.keys(obj).filter(function(k) {\n\t\treturn Object.keys(global.Schema.of('sys_hub_pill_compound', ['*'])['sys_hub_pill_compound']).filter(function(_k) {\n\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t}).indexOf(k.toLowerCase()) >= 0\n\t}).forEach(function(k) {\n\t\t_obj[k.toLowerCase()] = obj[k]\n\t});\n\n\tObject.keys(_obj).forEach(function(k) {\n\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Pill_Compound._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tdelete _obj[k];\n\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Pill_Compound._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t}\n\t});\n\n\tlet _this = null;\n\tif (obj.__keys) {\n\t\tlet kObj = {};\n\t\tkObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(_obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))));\n\t\tobj.__keys.forEach(function(k) {\n\t\t\tkObj[k] = _obj[k]\n\t\t});\n\t\t_this = new shs_arbfw_appd_Pill_Compound()._fromDocument(kObj);\n\t} else {\n\t\t_this = new shs_arbfw_appd_Pill_Compound()._fromDocument(_obj)._unique();\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Pill_Compound._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\tdelete _obj.__idField;\n\n\ttry {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Pill_Compound._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\tObject.keys(_obj).filter(function(k) {\n\t\t\treturn k.toLowerCase() != k;\n\t\t}).forEach(function(k) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Pill_Compound._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tvar lk = k.toLowerCase();\n\t\t\t_obj[lk] = _obj[k];\n\t\t\tdelete _obj[k];\n\t\t});\n\n\t\tlet gq = new global.GlideQuery(obj.__type || 'sys_hub_pill_compound');\n\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Pill_Compound._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\tif (_obj.sys_id) {\n\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t} else {\n\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\tgq = gq.insert(_obj);\n\t\t}\n\t\tlet _fObj = {};\n\t\t_fObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))));\n\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('sys_hub_pill_compound', ['*'])['sys_hub_pill_compound']))));\n\t} catch (ex) {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Pill_Compound._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Pill_Compound._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\treturn this;\n\t}\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Pill_Compound._save(): \" + \"obj.parent_Pill_Compounds: \" + JSON.stringify(obj.parent_Pill_Compounds, null, 4));\n\tif (Array.isArray(obj.parent_Pill_Compounds)) this.parent_Pill_Compounds(obj.parent_Pill_Compounds.map(function(ta) {\n\t\treturn new shs_arbfw_appd_Pill_Compound()._save(ta)\n\t}));\n\n\treturn this;\n}\n\n/************* Pill_Compound.store() **********************/\nstore(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Pill_Compound.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Pill_Compound.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Pill_Compound.store(): \" + \"executing locally \");\n\n\t\t// store locally\n\t\treturn this._save(this._toDocument());\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Pill_Compound.findAll() **********************/\nfindAll(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Pill_Compound.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Pill_Compound.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Pill_Compound.findAll(): \" + \"executing locally \");\n\n\t\t// findAll locally\n\t\tlet gr = new GlideRecord('sys_hub_pill_compound');\n\t\tgr.addEncodedQuery(this._toEQuery());\n\t\treturn this._fromDocument(gr);\n\n\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('sys_hub_pill_compound', ['*'])['sys_hub_pill_compound'])));\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Pill_Compound.find() **********************/\nfind(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Pill_Compound.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Pill_Compound.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Pill_Compound.find(): \" + \"executing locally \");\n\n\t\tlet ret = this.findAll();\n\t\treturn ret.length ? ret[0] : null;\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"scriptFile_Script_Compatibilitys":[{"active":true,"enabled":true}],"client_callable":true,"sys_name":"shs_arbfw_appd_Security_Control","api_name":"x_1790593_arboard.shs_arbfw_appd_Security_Control","name":"shs_arbfw_appd_Security_Control","script":"class shs_arbfw_appd_Security_Control extends global.AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"Application Designer\";\n\t\tthis.__type = \"shs_arbfw_appd_Security_Control\";\n\t\tthis.__alias = \"shs_arbfw_appd\";\n\t\tthis.__scope = \"shs_arbfw\";\n\t}\n\n\t/************* Security_Control.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Security_Control.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Security_Control.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Security_Control.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Security_Control.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//(typeof(window)!=='undefined'?alert:gs.info)(\"Security_Control.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Security_Control.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Security_Control.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Security_Control.type GETTERS AND SETTERS **********************/\n\ttype(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._type = v;\n\t\t\tthis._type_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._type;\n\t\t}\n\t}\n\n\t/************* Security_Control.operation GETTERS AND SETTERS **********************/\n\toperation(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._operation = v;\n\t\t\tthis._operation_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._operation;\n\t\t}\n\t}\n\n\t/************* Security_Control.application GETTERS AND SETTERS **********************/\n\tapplication(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._application = v;\n\t\t\tthis._application_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._application;\n\t\t}\n\t}\n\n\t/************* Security_Control.securityControl_Flows GETTERS AND SETTERS **********************/\n\tsecurityControl_Flows(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._securityControl_Flows = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._securityControl_Flows_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._securityControl_Flows;\n\t\t}\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = undefined || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\tif (this._type) ret += /*(this._type_coop || '=') + */ this.type()._toEQuery(sPath + 'type.');\n\n\t\tif (this._operation) ret += /*(this._operation_coop || '=') + */ this.operation()._toEQuery(sPath + 'operation.');\n\n\t\tif (this._application) ret += /*(this._application_coop || '=') + */ this.application()._toEQuery(sPath + 'application.');\n\n\t\t(this.securityControl_Flows() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYFlow.securityControl,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Security_Control._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn new shs_arbfw_appd_Security_Control()._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Security_Control._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Security_Control._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromGlideRecord(obj) {\n\t\tif (!obj) return null;\n\t\tif (obj.isValidRecord()) {\n\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Security_Control\" != 'ecc_queue' && obj.source == \"shs_arbfw_appd_Security_Control\") {\n\t\t\t\tobj.state = \"processing\";\n\t\t\t\tobj.update();\n\n\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\tresp.queue = 'output';\n\t\t\t\tresp.agent = obj.agent;\n\t\t\t\tresp.topic = obj.topic;\n\t\t\t\tresp.name = obj.name;\n\t\t\t\tresp.source = obj.source;\n\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\tlet ret = new shs_arbfw_appd_Security_Control()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t});\n\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t}\n\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\tresp.insert();\n\n\t\t\t\tobj.state = \"processed\";\n\t\t\t\tobj.update();\n\t\t\t\treturn resp;\n\t\t\t} else {\n\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\ttype: obj.getValue(\"type\"),\n\n\t\t\t\t\toperation: obj.getValue(\"operation\"),\n\n\t\t\t\t\tapplication: obj.getValue(\"application\"),\n\n\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tobj.query();\n\t\t\tlet grRet = [];\n\t\t\twhile (obj.next()) grRet.push(this._fromGlideRecord(obj));\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Security_Control._fromGlideRecord(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\treturn grRet;\n\t\t}\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\tundefined\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_appd_Security_Control()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\tif (/((([A-Za-z]{3,9}:(?:/ / ) ? )( ? : [-;: &= +$, w] + @) ? [A - Za - z0 - 9. - ] + | ( ? : www. | [-;: &= +$, w] + @)[A - Za - z0 - 9. - ] + )(( ? : /[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)/g.test(obj)) {\n\t\t\tvar msg = new sn_ws.RESTMessageV2();\n\t\t\tmsg.setEndpoint(obj);\n\t\t\tmsg.setRequestHeader('Content-Type', 'application/json');\n\t\t\tmsg.setHttpMethod('get');\n\t\t\treturn this._fromDocument(msg.execute().getBody());\n\t\t}\n\n\t\ttry {\n\t\t\tobj = JSON.parse(obj);\n\t\t} catch (ex) {\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Security_Control._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\tlet _obj = {\n\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))\n\t\t\t};\n\t\t\t_obj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(this))] = obj;\n\t\t\tobj = _obj;\n\t\t}\n\t\treturn this._fromDocument(obj);\n\t}\n\telse if (typeof(obj) === 'object') {\n\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\treturn this._fromGlideRecord(obj);\n\t\t} else if (obj._fromDocument) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Security_Control._fromDocument(): \" + \"redundent call\");\n\t\t\treturn obj;\n\t\t} else if (Array.isArray(obj)) {\n\t\t\treturn obj.map(function(o) {\n\t\t\t\treturn new shs_arbfw_appd_Security_Control()._fromDocument(o)\n\t\t\t});\n\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(obj))));\n\n\t\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Security_Control._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.type) !== 'undefined') {\n\n\t\t\t\t\tthis.type(new shs_arbfw_appd_Security_Type()._fromDocument(obj.type));\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.operation) !== 'undefined') {\n\n\t\t\t\t\tthis.operation(new shs_arbfw_appd_Security_Operation()._fromDocument(obj.operation));\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.application) !== 'undefined') {\n\n\t\t\t\t\tthis.application(new shs_arbfw_appd_Application()._fromDocument(obj.application));\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.securityControl_Flows) !== 'undefined') this.securityControl_Flows(new shs_arbfw_appd_Flow()._fromDocument(obj.securityControl_Flows));\n\n\t\t\t} else { // if(obj.constructor.name==\"Security_Control\"){\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Security_Control._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t}\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Security_Control._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\treturn null;\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Security_Control._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Security_Control._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Security_Control._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\treturn this;\n}\n\n_insertAssert() {\n\treturn true;\n}\n\n_updateAssert() {\n\treturn true;\n}\n\n_storeAssert() {\n\treturn true;\n}\n\n_findAssert() {\n\treturn true;\n}\n\n_new(c) {\n\n\treturn new shs_arbfw_appd_Platform._new(c);\n\n}\n\n_toDocument(arFields) {\n\n\tlet ret = undefined || {};\n\n\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tret.active = this.active();\n\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tret.enabled = this.enabled();\n\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tret.code = this.code();\n\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tret.order = this.order();\n\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tret.date = this.date();\n\n\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tret.name = this.name();\n\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tret.remark = this.remark();\n\n\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t}\n\n\tif (typeof(this._type) !== 'undefined') {\n\t\tret.type = this.type();\n\n\t\tif (ret.type) {\n\t\t\tret.type = ret.type._toDocument();\n\t\t\tif (typeof(ret.type) === 'object' && !Object.keys(ret.type).length) ret.type = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this._operation) !== 'undefined') {\n\t\tret.operation = this.operation();\n\n\t\tif (ret.operation) {\n\t\t\tret.operation = ret.operation._toDocument();\n\t\t\tif (typeof(ret.operation) === 'object' && !Object.keys(ret.operation).length) ret.operation = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this._application) !== 'undefined') {\n\t\tret.application = this.application();\n\n\t\tif (ret.application) {\n\t\t\tret.application = ret.application._toDocument();\n\t\t\tif (typeof(ret.application) === 'object' && !Object.keys(ret.application).length) ret.application = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this.securityControl_Flows()) !== 'undefined') ret.securityControl_Flows = this.securityControl_Flows().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\treturn !arFields.find(function(_k) {\n\t\t\treturn _k == k;\n\t\t});\n\t}).forEach(function(k) {\n\t\tdelete ret[k];\n\t});\n\n\treturn ret;\n}\n\n_unique(keys, ret) {\n\tret = ret || new shs_arbfw_appd_Security_Control();\n\n\tundefined\n\n\t// if(this.Id) ret.Id = this.Id;\n\tif (!keys) {\n\n\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (typeof(this.type()) !== 'undefined') ret.type(this.type()._unique());\n\n\t\tif (typeof(this.operation()) !== 'undefined') ret.operation(this.operation()._unique());\n\n\t\tif (typeof(this.application()) !== 'undefined') ret.application(this.application()._unique());\n\n\t} else {\n\n\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t\tif (keys.indexOf(\"type\") >= 0 && typeof(this.type()) !== 'undefined') ret.type(this.type()._unique());\n\n\t\tif (keys.indexOf(\"operation\") >= 0 && typeof(this.operation()) !== 'undefined') ret.operation(this.operation()._unique());\n\n\t\tif (keys.indexOf(\"application\") >= 0 && typeof(this.application()) !== 'undefined') ret.application(this.application()._unique());\n\n\t}\n\n\treturn ret;\n}\n\n_query(gq) {\n\tlet arFields = Object.keys(global.Schema.of('sys_security_acl', ['*'])['sys_security_acl']);\n\n\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('sys_security_acl');\n\n\tundefined\n\n\tlet idf = ((function(r) {\n\t\tlet ret = 'sys_id';\n\t\tif (typeof(r.__idField) === 'function') {\n\t\t\tret = r.__idField();\n\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\tret = r.__idField || this.__idField();\n\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\tret = 'Id';\n\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\tret = 'sys_id';\n\t\t}\n\t\treturn ret;\n\t})(this));\n\tif (idf == 'Id') idf = 'sys_id';\n\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tlet coop = this._active_coop || '=';\n\n\t\tlet v = this.active();\n\n\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Security_Control._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tlet coop = this._enabled_coop || '=';\n\n\t\tlet v = this.enabled();\n\n\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Security_Control._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tlet coop = this._code_coop || '=';\n\n\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.code();\n\n\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Security_Control._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tlet coop = this._order_coop || '=';\n\n\t\tlet v = this.order();\n\n\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Security_Control._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tlet coop = this._date_coop || '=';\n\n\t\tlet v = this.date();\n\n\t\tif (v) {\n\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t}\n\n\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Security_Control._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tlet coop = this._name_coop || '=';\n\n\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.name();\n\n\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Security_Control._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tlet coop = this._remark_coop || '=';\n\n\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.remark();\n\n\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Security_Control._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._type) !== 'undefined') {\n\t\tlet coop = this._type_coop || '=';\n\n\t\tlet v = this.type();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Security Control\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Security_Control._query(): \"+ \"type \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Security_Control._query(): \" + \"type[type] resuled in undefined: \" + JSON.stringify(this.type()));\n\t\t}\n\n\t\tif (arFields.indexOf('type') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Security_Control._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('type');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('type');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('type', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._operation) !== 'undefined') {\n\t\tlet coop = this._operation_coop || '=';\n\n\t\tlet v = this.operation();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Security Control\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Security_Control._query(): \"+ \"operation \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Security_Control._query(): \" + \"operation[operation] resuled in undefined: \" + JSON.stringify(this.operation()));\n\t\t}\n\n\t\tif (arFields.indexOf('operation') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Security_Control._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('operation');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('operation');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('operation', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._application) !== 'undefined') {\n\t\tlet coop = this._application_coop || '=';\n\n\t\tlet v = this.application();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Security Control\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Security_Control._query(): \"+ \"application \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Security_Control._query(): \" + \"application[application] resuled in undefined: \" + JSON.stringify(this.application()));\n\t\t}\n\n\t\tif (arFields.indexOf('application') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Security_Control._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('application');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('application');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('application', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Security_Control._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\treturn this._queryGQ;\n}\n\n_save(obj) {\n\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\treturn new shs_arbfw_appd_Security_Control()._save(o)\n\t});\n\n\tlet _obj = {};\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Security_Control._save(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\tObject.keys(obj).filter(function(k) {\n\t\treturn Object.keys(global.Schema.of('sys_security_acl', ['*'])['sys_security_acl']).filter(function(_k) {\n\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t}).indexOf(k.toLowerCase()) >= 0\n\t}).forEach(function(k) {\n\t\t_obj[k.toLowerCase()] = obj[k]\n\t});\n\n\tObject.keys(_obj).forEach(function(k) {\n\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Security_Control._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tdelete _obj[k];\n\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Security_Control._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t}\n\t});\n\n\tlet _this = null;\n\tif (obj.__keys) {\n\t\tlet kObj = {};\n\t\tkObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(_obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))));\n\t\tobj.__keys.forEach(function(k) {\n\t\t\tkObj[k] = _obj[k]\n\t\t});\n\t\t_this = new shs_arbfw_appd_Security_Control()._fromDocument(kObj);\n\t} else {\n\t\t_this = new shs_arbfw_appd_Security_Control()._fromDocument(_obj)._unique();\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Security_Control._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\tdelete _obj.__idField;\n\n\ttry {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Security_Control._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\tObject.keys(_obj).filter(function(k) {\n\t\t\treturn k.toLowerCase() != k;\n\t\t}).forEach(function(k) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Security_Control._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tvar lk = k.toLowerCase();\n\t\t\t_obj[lk] = _obj[k];\n\t\t\tdelete _obj[k];\n\t\t});\n\n\t\tlet gq = new global.GlideQuery(obj.__type || 'sys_security_acl');\n\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Security_Control._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\tif (_obj.sys_id) {\n\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t} else {\n\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\tgq = gq.insert(_obj);\n\t\t}\n\t\tlet _fObj = {};\n\t\t_fObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))));\n\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('sys_security_acl', ['*'])['sys_security_acl']))));\n\t} catch (ex) {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Security_Control._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Security_Control._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\treturn this;\n\t}\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Security_Control._save(): \" + \"obj.securityControl_Flows: \" + JSON.stringify(obj.securityControl_Flows, null, 4));\n\tif (Array.isArray(obj.securityControl_Flows)) this.securityControl_Flows(obj.securityControl_Flows.map(function(ta) {\n\t\treturn new shs_arbfw_appd_Flow()._save(ta)\n\t}));\n\n\treturn this;\n}\n\n/************* Security_Control.store() **********************/\nstore(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Security_Control.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Security_Control.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Security_Control.store(): \" + \"executing locally \");\n\n\t\t// store locally\n\t\treturn this._save(this._toDocument());\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Security_Control.findAll() **********************/\nfindAll(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Security_Control.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Security_Control.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Security_Control.findAll(): \" + \"executing locally \");\n\n\t\t// findAll locally\n\t\tlet gr = new GlideRecord('sys_security_acl');\n\t\tgr.addEncodedQuery(this._toEQuery());\n\t\treturn this._fromDocument(gr);\n\n\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('sys_security_acl', ['*'])['sys_security_acl'])));\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Security_Control.find() **********************/\nfind(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Security_Control.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Security_Control.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Security_Control.find(): \" + \"executing locally \");\n\n\t\tlet ret = this.findAll();\n\t\treturn ret.length ? ret[0] : null;\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"scriptFile_Script_Compatibilitys":[{"active":true,"enabled":true}],"client_callable":true,"sys_name":"shs_arbfw_Team_Member","api_name":"x_1790593_arboard.shs_arbfw_Team_Member","name":"shs_arbfw_Team_Member","script":"class shs_arbfw_Team_Member extends global.AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"\";\n\t\tthis.__type = \"shs_arbfw_Team_Member\";\n\t\tthis.__alias = \"shs_arbfw\";\n\t\tthis.__scope = \"shs_arbfw\";\n\t}\n\n\t/************* Team_Member.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Team_Member.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Team_Member.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Team_Member.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Team_Member.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//(typeof(window)!=='undefined'?alert:gs.info)(\"Team_Member.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Team_Member.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Team_Member.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Team_Member.team GETTERS AND SETTERS **********************/\n\tteam(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._team = v;\n\t\t\tthis._team_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._team;\n\t\t}\n\t}\n\n\t/************* Team_Member.member GETTERS AND SETTERS **********************/\n\tmember(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._member = v;\n\t\t\tthis._member_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._member;\n\t\t}\n\t}\n\n\t/************* Team_Member.role GETTERS AND SETTERS **********************/\n\trole(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._role = v;\n\t\t\tthis._role_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._role;\n\t\t}\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = undefined || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\tif (this._team) ret += /*(this._team_coop || '=') + */ this.team()._toEQuery(sPath + 'team.');\n\n\t\tif (this._member) ret += /*(this._member_coop || '=') + */ this.member()._toEQuery(sPath + 'member.');\n\n\t\tif (this._role) ret += /*(this._role_coop || '=') + */ this.role()._toEQuery(sPath + 'role.');\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Team_Member._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn new shs_arbfw_Team_Member()._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Team_Member._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Team_Member._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromGlideRecord(obj) {\n\t\tif (!obj) return null;\n\t\tif (obj.isValidRecord()) {\n\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Team_Member\" != 'ecc_queue' && obj.source == \"shs_arbfw_Team_Member\") {\n\t\t\t\tobj.state = \"processing\";\n\t\t\t\tobj.update();\n\n\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\tresp.queue = 'output';\n\t\t\t\tresp.agent = obj.agent;\n\t\t\t\tresp.topic = obj.topic;\n\t\t\t\tresp.name = obj.name;\n\t\t\t\tresp.source = obj.source;\n\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\tlet ret = new shs_arbfw_Team_Member()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t});\n\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t}\n\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\tresp.insert();\n\n\t\t\t\tobj.state = \"processed\";\n\t\t\t\tobj.update();\n\t\t\t\treturn resp;\n\t\t\t} else {\n\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\tteam: obj.getValue(\"team\"),\n\n\t\t\t\t\tmember: obj.getValue(\"member\"),\n\n\t\t\t\t\trole: obj.getValue(\"role\"),\n\n\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tobj.query();\n\t\t\tlet grRet = [];\n\t\t\twhile (obj.next()) grRet.push(this._fromGlideRecord(obj));\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Team_Member._fromGlideRecord(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\treturn grRet;\n\t\t}\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\tundefined\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_Team_Member()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\tif (/((([A-Za-z]{3,9}:(?:/ / ) ? )( ? : [-;: &= +$, w] + @) ? [A - Za - z0 - 9. - ] + | ( ? : www. | [-;: &= +$, w] + @)[A - Za - z0 - 9. - ] + )(( ? : /[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)/g.test(obj)) {\n\t\t\tvar msg = new sn_ws.RESTMessageV2();\n\t\t\tmsg.setEndpoint(obj);\n\t\t\tmsg.setRequestHeader('Content-Type', 'application/json');\n\t\t\tmsg.setHttpMethod('get');\n\t\t\treturn this._fromDocument(msg.execute().getBody());\n\t\t}\n\n\t\ttry {\n\t\t\tobj = JSON.parse(obj);\n\t\t} catch (ex) {\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Team_Member._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\tlet _obj = {\n\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))\n\t\t\t};\n\t\t\t_obj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(this))] = obj;\n\t\t\tobj = _obj;\n\t\t}\n\t\treturn this._fromDocument(obj);\n\t}\n\telse if (typeof(obj) === 'object') {\n\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\treturn this._fromGlideRecord(obj);\n\t\t} else if (obj._fromDocument) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Team_Member._fromDocument(): \" + \"redundent call\");\n\t\t\treturn obj;\n\t\t} else if (Array.isArray(obj)) {\n\t\t\treturn obj.map(function(o) {\n\t\t\t\treturn new shs_arbfw_Team_Member()._fromDocument(o)\n\t\t\t});\n\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(obj))));\n\n\t\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Team_Member._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.team) !== 'undefined') {\n\n\t\t\t\t\tthis.team(new shs_arbfw_Team()._fromDocument(obj.team));\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.member) !== 'undefined') {\n\n\t\t\t\t\tthis.member(new shs_arbfw_User()._fromDocument(obj.member));\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.role) !== 'undefined') {\n\n\t\t\t\t\tthis.role(new shs_arbfw_Role()._fromDocument(obj.role));\n\t\t\t\t}\n\n\t\t\t} else { // if(obj.constructor.name==\"Team_Member\"){\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Team_Member._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t}\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Team_Member._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\treturn null;\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Team_Member._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Team_Member._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Team_Member._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\treturn this;\n}\n\n_insertAssert() {\n\treturn true;\n}\n\n_updateAssert() {\n\treturn true;\n}\n\n_storeAssert() {\n\treturn true;\n}\n\n_findAssert() {\n\treturn true;\n}\n\n_new(c) {\n\n\treturn new shs_arbfw_Platform._new(c);\n\n}\n\n_toDocument(arFields) {\n\n\tlet ret = undefined || {};\n\n\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tret.active = this.active();\n\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tret.enabled = this.enabled();\n\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tret.code = this.code();\n\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tret.order = this.order();\n\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tret.date = this.date();\n\n\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tret.name = this.name();\n\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tret.remark = this.remark();\n\n\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t}\n\n\tif (typeof(this._team) !== 'undefined') {\n\t\tret.team = this.team();\n\n\t\tif (ret.team) {\n\t\t\tret.team = ret.team._toDocument();\n\t\t\tif (typeof(ret.team) === 'object' && !Object.keys(ret.team).length) ret.team = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this._member) !== 'undefined') {\n\t\tret.member = this.member();\n\n\t\tif (ret.member) {\n\t\t\tret.member = ret.member._toDocument();\n\t\t\tif (typeof(ret.member) === 'object' && !Object.keys(ret.member).length) ret.member = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this._role) !== 'undefined') {\n\t\tret.role = this.role();\n\n\t\tif (ret.role) {\n\t\t\tret.role = ret.role._toDocument();\n\t\t\tif (typeof(ret.role) === 'object' && !Object.keys(ret.role).length) ret.role = null;\n\t\t}\n\n\t}\n\n\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\treturn !arFields.find(function(_k) {\n\t\t\treturn _k == k;\n\t\t});\n\t}).forEach(function(k) {\n\t\tdelete ret[k];\n\t});\n\n\treturn ret;\n}\n\n_unique(keys, ret) {\n\tret = ret || new shs_arbfw_Team_Member();\n\n\tundefined\n\n\t// if(this.Id) ret.Id = this.Id;\n\tif (!keys) {\n\n\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t} else {\n\n\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t\tif (keys.indexOf(\"team\") >= 0 && typeof(this.team()) !== 'undefined') ret.team(this.team()._unique());\n\n\t\tif (keys.indexOf(\"member\") >= 0 && typeof(this.member()) !== 'undefined') ret.member(this.member()._unique());\n\n\t\tif (keys.indexOf(\"role\") >= 0 && typeof(this.role()) !== 'undefined') ret.role(this.role()._unique());\n\n\t}\n\n\treturn ret;\n}\n\n_query(gq) {\n\tlet arFields = Object.keys(global.Schema.of('x_1790593_arboard_team_member', ['*'])['x_1790593_arboard_team_member']);\n\n\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('x_1790593_arboard_team_member');\n\n\tundefined\n\n\tlet idf = ((function(r) {\n\t\tlet ret = 'sys_id';\n\t\tif (typeof(r.__idField) === 'function') {\n\t\t\tret = r.__idField();\n\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\tret = r.__idField || this.__idField();\n\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\tret = 'Id';\n\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\tret = 'sys_id';\n\t\t}\n\t\treturn ret;\n\t})(this));\n\tif (idf == 'Id') idf = 'sys_id';\n\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tlet coop = this._active_coop || '=';\n\n\t\tlet v = this.active();\n\n\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Team_Member._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tlet coop = this._enabled_coop || '=';\n\n\t\tlet v = this.enabled();\n\n\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Team_Member._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tlet coop = this._code_coop || '=';\n\n\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.code();\n\n\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Team_Member._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tlet coop = this._order_coop || '=';\n\n\t\tlet v = this.order();\n\n\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Team_Member._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tlet coop = this._date_coop || '=';\n\n\t\tlet v = this.date();\n\n\t\tif (v) {\n\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t}\n\n\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Team_Member._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tlet coop = this._name_coop || '=';\n\n\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.name();\n\n\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Team_Member._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tlet coop = this._remark_coop || '=';\n\n\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.remark();\n\n\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Team_Member._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._team) !== 'undefined') {\n\t\tlet coop = this._team_coop || '=';\n\n\t\tlet v = this.team();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Team Member\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Team_Member._query(): \"+ \"team \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Team_Member._query(): \" + \"team[team] resuled in undefined: \" + JSON.stringify(this.team()));\n\t\t}\n\n\t\tif (arFields.indexOf('team') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Team_Member._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('team');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('team');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('team', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._member) !== 'undefined') {\n\t\tlet coop = this._member_coop || '=';\n\n\t\tlet v = this.member();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Team Member\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Team_Member._query(): \"+ \"member \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Team_Member._query(): \" + \"member[member] resuled in undefined: \" + JSON.stringify(this.member()));\n\t\t}\n\n\t\tif (arFields.indexOf('member') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Team_Member._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('member');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('member');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('member', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._role) !== 'undefined') {\n\t\tlet coop = this._role_coop || '=';\n\n\t\tlet v = this.role();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Team Member\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Team_Member._query(): \"+ \"role \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Team_Member._query(): \" + \"role[role] resuled in undefined: \" + JSON.stringify(this.role()));\n\t\t}\n\n\t\tif (arFields.indexOf('role') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Team_Member._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('role');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('role');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('role', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Team_Member._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\treturn this._queryGQ;\n}\n\n_save(obj) {\n\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\treturn new shs_arbfw_Team_Member()._save(o)\n\t});\n\n\tlet _obj = {};\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Team_Member._save(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\tObject.keys(obj).filter(function(k) {\n\t\treturn Object.keys(global.Schema.of('x_1790593_arboard_team_member', ['*'])['x_1790593_arboard_team_member']).filter(function(_k) {\n\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t}).indexOf(k.toLowerCase()) >= 0\n\t}).forEach(function(k) {\n\t\t_obj[k.toLowerCase()] = obj[k]\n\t});\n\n\tObject.keys(_obj).forEach(function(k) {\n\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Team_Member._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tdelete _obj[k];\n\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Team_Member._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t}\n\t});\n\n\tlet _this = null;\n\tif (obj.__keys) {\n\t\tlet kObj = {};\n\t\tkObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(_obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))));\n\t\tobj.__keys.forEach(function(k) {\n\t\t\tkObj[k] = _obj[k]\n\t\t});\n\t\t_this = new shs_arbfw_Team_Member()._fromDocument(kObj);\n\t} else {\n\t\t_this = new shs_arbfw_Team_Member()._fromDocument(_obj)._unique();\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Team_Member._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\tdelete _obj.__idField;\n\n\ttry {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Team_Member._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\tObject.keys(_obj).filter(function(k) {\n\t\t\treturn k.toLowerCase() != k;\n\t\t}).forEach(function(k) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Team_Member._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tvar lk = k.toLowerCase();\n\t\t\t_obj[lk] = _obj[k];\n\t\t\tdelete _obj[k];\n\t\t});\n\n\t\tlet gq = new global.GlideQuery(obj.__type || 'x_1790593_arboard_team_member');\n\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Team_Member._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\tif (_obj.sys_id) {\n\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t} else {\n\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\tgq = gq.insert(_obj);\n\t\t}\n\t\tlet _fObj = {};\n\t\t_fObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))));\n\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('x_1790593_arboard_team_member', ['*'])['x_1790593_arboard_team_member']))));\n\t} catch (ex) {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Team_Member._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Team_Member._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\treturn this;\n\t}\n\n\treturn this;\n}\n\n/************* Team_Member.store() **********************/\nstore(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Team_Member.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Team_Member.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Team_Member.store(): \" + \"executing locally \");\n\n\t\t// store locally\n\t\treturn this._save(this._toDocument());\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Team_Member.findAll() **********************/\nfindAll(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Team_Member.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Team_Member.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Team_Member.findAll(): \" + \"executing locally \");\n\n\t\t// findAll locally\n\t\tlet gr = new GlideRecord('x_1790593_arboard_team_member');\n\t\tgr.addEncodedQuery(this._toEQuery());\n\t\treturn this._fromDocument(gr);\n\n\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('x_1790593_arboard_team_member', ['*'])['x_1790593_arboard_team_member'])));\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Team_Member.find() **********************/\nfind(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Team_Member.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Team_Member.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Team_Member.find(): \" + \"executing locally \");\n\n\t\tlet ret = this.findAll();\n\t\treturn ret.length ? ret[0] : null;\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"scriptFile_Script_Compatibilitys":[{"active":true,"enabled":true}],"client_callable":true,"sys_name":"shs_arbfw_appd_Column","api_name":"x_1790593_arboard.shs_arbfw_appd_Column","name":"shs_arbfw_appd_Column","script":"class shs_arbfw_appd_Column extends global.AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"Application Designer\";\n\t\tthis.__type = \"shs_arbfw_appd_Column\";\n\t\tthis.__alias = \"shs_arbfw_appd\";\n\t\tthis.__scope = \"shs_arbfw\";\n\t}\n\n\t/************* Column.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Column.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Column.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Column.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Column.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//(typeof(window)!=='undefined'?alert:gs.info)(\"Column.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Column.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Column.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Column.type GETTERS AND SETTERS **********************/\n\ttype(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._type = v;\n\t\t\tthis._type_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._type;\n\t\t}\n\t}\n\n\t/************* Column.mandatory GETTERS AND SETTERS **********************/\n\tmandatory(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._mandatory = v;\n\t\t\tthis._mandatory_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._mandatory;\n\t\t}\n\t}\n\n\t/************* Column.table GETTERS AND SETTERS **********************/\n\ttable(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._table = v;\n\t\t\tthis._table_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._table;\n\t\t}\n\t}\n\n\t/************* Column.reference GETTERS AND SETTERS **********************/\n\treference(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._reference = v;\n\t\t\tthis._reference_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._reference;\n\t\t}\n\t}\n\n\t/************* Column.column_Subscription_Triggers GETTERS AND SETTERS **********************/\n\tcolumn_Subscription_Triggers(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._column_Subscription_Triggers = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._column_Subscription_Triggers_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._column_Subscription_Triggers;\n\t\t}\n\t}\n\n\t/************* Column.column_Field_Labels GETTERS AND SETTERS **********************/\n\tcolumn_Field_Labels(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._column_Field_Labels = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._column_Field_Labels_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._column_Field_Labels;\n\t\t}\n\t}\n\n\t/************* Column.__keys EF: GETTERS AND SETTERS **********************/\n\t__keys() {\n\t\treturn /*this.ef___keys = */ ((\n\t\t\tfunction() {\n\t\t\t\ttry {\n\n\t\t\t\t\tlet __ret = undefined;\n\n\t\t\t\t\t__ret = [\"element\", \"name\"];\n\n\t\t\t\t\tif (typeof(__ret) === 'string' && __ret.startsWith(\"s(\") && __ret.endsWith(\")\")) {\n\t\t\t\t\t\t__ret = this.runScript(__ret.slice(2, -1));\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof(__ret) === \"function\") {\n\t\t\t\t\t\t__ret = __ret(this);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn __ret;\n\n\t\t\t\t} catch (_vOfEx) {\n\t\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Column.__keys(): \" + 'valueOf', _vOfEx, JSON.parse(((typeof(this) !== \"undefined\" && typeof(this._atob) !== \"undefined\") ? this._atob : (typeof(_FrEMD) !== \"undefined\" ? _FrEMD._atob : atob))(`eyJTZXJ2aWNlTm93IjpbImVsZW1lbnQiLCJuYW1lIl19`), (key, value) => {\n\t\t\t\t\t\tif (typeof(value) === \"string\" && value.indexOf(\"=>\") > 0) return eval(\"(\" + value + \")\");\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t}\n\t\t)());\n\t}\n\n\t/************* Column.length EF: GETTERS AND SETTERS **********************/\n\tlength() {\n\t\treturn /*this.ef_length = */ ((\n\t\t\tfunction() {\n\t\t\t\ttry {\n\n\t\t\t\t\tlet __ret = undefined;\n\n\t\t\t\t\t__ret = () => ({\n\t\t\t\t\t\t\"String\": 255,\n\t\t\t\t\t\t\"Text\": 4000,\n\t\t\t\t\t})[this.type()];\n\n\t\t\t\t\tif (typeof(__ret) === 'string' && __ret.startsWith(\"s(\") && __ret.endsWith(\")\")) {\n\t\t\t\t\t\t__ret = this.runScript(__ret.slice(2, -1));\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof(__ret) === \"function\") {\n\t\t\t\t\t\t__ret = __ret(this);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn __ret;\n\n\t\t\t\t} catch (_vOfEx) {\n\t\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Column.length(): \" + 'valueOf', _vOfEx, JSON.parse(((typeof(this) !== \"undefined\" && typeof(this._atob) !== \"undefined\") ? this._atob : (typeof(_FrEMD) !== \"undefined\" ? _FrEMD._atob : atob))(`eyJTZXJ2aWNlTm93IjoiKCkgPT4gKHtcblx0XHRcdFx0XCJTdHJpbmdcIjogMjU1LFxuXHRcdFx0XHRcIlRleHRcIjogNDAwMCxcblx0XHRcdH0pW3RoaXMudHlwZSgpXSJ9`), (key, value) => {\n\t\t\t\t\t\tif (typeof(value) === \"string\" && value.indexOf(\"=>\") > 0) return eval(\"(\" + value + \")\");\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t}\n\t\t)());\n\t}\n\n\t/************* Column.display EF: GETTERS AND SETTERS **********************/\n\tdisplay() {\n\t\treturn /*this.ef_display = */ ((\n\t\t\tfunction() {\n\t\t\t\ttry {\n\n\t\t\t\t\tlet __ret = undefined;\n\n\t\t\t\t\t__ret = () => typeof(this.table()) === \"object\" && this.table().table_Columns().find(c => c.type() == 'String') == this;\n\n\t\t\t\t\tif (typeof(__ret) === 'string' && __ret.startsWith(\"s(\") && __ret.endsWith(\")\")) {\n\t\t\t\t\t\t__ret = this.runScript(__ret.slice(2, -1));\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof(__ret) === \"function\") {\n\t\t\t\t\t\t__ret = __ret(this);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn __ret;\n\n\t\t\t\t} catch (_vOfEx) {\n\t\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Column.display(): \" + 'valueOf', _vOfEx, JSON.parse(((typeof(this) !== \"undefined\" && typeof(this._atob) !== \"undefined\") ? this._atob : (typeof(_FrEMD) !== \"undefined\" ? _FrEMD._atob : atob))(`eyJTZXJ2aWNlTm93IjoiKCkgPT4gdHlwZW9mKHRoaXMudGFibGUoKSkgPT09IFwib2JqZWN0XCIgJiYgdGhpcy50YWJsZSgpLnRhYmxlX0NvbHVtbnMoKS5maW5kKGMgPT4gYy50eXBlKCkgPT0gJ1N0cmluZycpID09IHRoaXMifQ==`), (key, value) => {\n\t\t\t\t\t\tif (typeof(value) === \"string\" && value.indexOf(\"=>\") > 0) return eval(\"(\" + value + \")\");\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t}\n\t\t)());\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = undefined || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\tif (this._type) ret += '^' + sPath + 'type' + (this._type_coop || '=') + this.type();\n\n\t\tif (this._mandatory) ret += '^' + sPath + 'mandatory' + (this._mandatory_coop || '=') + this.mandatory();\n\n\t\tif (this._table) ret += /*(this._table_coop || '=') + */ this.table()._toEQuery(sPath + 'table.');\n\n\t\tif (this._reference) ret += /*(this._reference_coop || '=') + */ this.reference()._toEQuery(sPath + 'reference.');\n\n\t\t(this.column_Subscription_Triggers() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYSubscription_Trigger.column,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(this.column_Field_Labels() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYField_Label.column,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Column._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn new shs_arbfw_appd_Column()._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Column._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Column._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromGlideRecord(obj) {\n\t\tif (!obj) return null;\n\t\tif (obj.isValidRecord()) {\n\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Column\" != 'ecc_queue' && obj.source == \"shs_arbfw_appd_Column\") {\n\t\t\t\tobj.state = \"processing\";\n\t\t\t\tobj.update();\n\n\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\tresp.queue = 'output';\n\t\t\t\tresp.agent = obj.agent;\n\t\t\t\tresp.topic = obj.topic;\n\t\t\t\tresp.name = obj.name;\n\t\t\t\tresp.source = obj.source;\n\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\tlet ret = new shs_arbfw_appd_Column()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t});\n\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t}\n\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\tresp.insert();\n\n\t\t\t\tobj.state = \"processed\";\n\t\t\t\tobj.update();\n\t\t\t\treturn resp;\n\t\t\t} else {\n\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\ttype: obj.getValue(\"type\"),\n\n\t\t\t\t\tmandatory: obj.getValue(\"mandatory\"),\n\n\t\t\t\t\ttable: obj.getValue(\"table\"),\n\n\t\t\t\t\treference: obj.getValue(\"reference\"),\n\n\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tobj.query();\n\t\t\tlet grRet = [];\n\t\t\twhile (obj.next()) grRet.push(this._fromGlideRecord(obj));\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Column._fromGlideRecord(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\treturn grRet;\n\t\t}\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\tundefined\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_appd_Column()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\tif (/((([A-Za-z]{3,9}:(?:/ / ) ? )( ? : [-;: &= +$, w] + @) ? [A - Za - z0 - 9. - ] + | ( ? : www. | [-;: &= +$, w] + @)[A - Za - z0 - 9. - ] + )(( ? : /[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)/g.test(obj)) {\n\t\t\tvar msg = new sn_ws.RESTMessageV2();\n\t\t\tmsg.setEndpoint(obj);\n\t\t\tmsg.setRequestHeader('Content-Type', 'application/json');\n\t\t\tmsg.setHttpMethod('get');\n\t\t\treturn this._fromDocument(msg.execute().getBody());\n\t\t}\n\n\t\ttry {\n\t\t\tobj = JSON.parse(obj);\n\t\t} catch (ex) {\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Column._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\tlet _obj = {\n\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))\n\t\t\t};\n\t\t\t_obj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(this))] = obj;\n\t\t\tobj = _obj;\n\t\t}\n\t\treturn this._fromDocument(obj);\n\t}\n\telse if (typeof(obj) === 'object') {\n\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\treturn this._fromGlideRecord(obj);\n\t\t} else if (obj._fromDocument) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Column._fromDocument(): \" + \"redundent call\");\n\t\t\treturn obj;\n\t\t} else if (Array.isArray(obj)) {\n\t\t\treturn obj.map(function(o) {\n\t\t\t\treturn new shs_arbfw_appd_Column()._fromDocument(o)\n\t\t\t});\n\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(obj))));\n\n\t\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Column._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.type) !== 'undefined') {\n\n\t\t\t\t\tthis.type(obj.type);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.mandatory) !== 'undefined') {\n\n\t\t\t\t\tthis.mandatory(obj.mandatory);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.table) !== 'undefined') {\n\n\t\t\t\t\tthis.table(new shs_arbfw_appd_Table()._fromDocument(obj.table));\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.reference) !== 'undefined') {\n\n\t\t\t\t\tthis.reference(new shs_arbfw_appd_Table()._fromDocument(obj.reference));\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.column_Subscription_Triggers) !== 'undefined') this.column_Subscription_Triggers(new shs_arbfw_appd_Subscription_Trigger()._fromDocument(obj.column_Subscription_Triggers));\n\n\t\t\t\tif (typeof(obj.column_Field_Labels) !== 'undefined') this.column_Field_Labels(new shs_arbfw_appd_Field_Label()._fromDocument(obj.column_Field_Labels));\n\n\t\t\t} else { // if(obj.constructor.name==\"Column\"){\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Column._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t}\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Column._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\treturn null;\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Column._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Column._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Column._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\treturn this;\n}\n\n_insertAssert() {\n\treturn true;\n}\n\n_updateAssert() {\n\treturn true;\n}\n\n_storeAssert() {\n\treturn true;\n}\n\n_findAssert() {\n\treturn true;\n}\n\n_new(c) {\n\n\treturn new shs_arbfw_appd_Platform._new(c);\n\n}\n\n_toDocument(arFields) {\n\n\tlet ret = undefined || {};\n\n\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tret.active = this.active();\n\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tret.enabled = this.enabled();\n\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tret.code = this.code();\n\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tret.order = this.order();\n\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tret.date = this.date();\n\n\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tret.name = this.name();\n\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tret.remark = this.remark();\n\n\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t}\n\n\tif (typeof(this._type) !== 'undefined') {\n\t\tret.type = this.type();\n\n\t}\n\n\tif (typeof(this._mandatory) !== 'undefined') {\n\t\tret.mandatory = this.mandatory();\n\n\t}\n\n\tif (typeof(this._table) !== 'undefined') {\n\t\tret.table = this.table();\n\n\t\tif (ret.table) {\n\t\t\tret.table = ret.table._toDocument();\n\t\t\tif (typeof(ret.table) === 'object' && !Object.keys(ret.table).length) ret.table = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this._reference) !== 'undefined') {\n\t\tret.reference = this.reference();\n\n\t\tif (ret.reference) {\n\t\t\tret.reference = ret.reference._toDocument();\n\t\t\tif (typeof(ret.reference) === 'object' && !Object.keys(ret.reference).length) ret.reference = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this.column_Subscription_Triggers()) !== 'undefined') ret.column_Subscription_Triggers = this.column_Subscription_Triggers().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (typeof(this.column_Field_Labels()) !== 'undefined') ret.column_Field_Labels = this.column_Field_Labels().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (typeof(this.__keys()) !== 'undefined') ret.__keys = this.__keys();\n\n\tif (typeof(this.length()) !== 'undefined') ret.length = this.length();\n\n\tif (typeof(this.display()) !== 'undefined') ret.display = this.display();\n\n\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\treturn !arFields.find(function(_k) {\n\t\t\treturn _k == k;\n\t\t});\n\t}).forEach(function(k) {\n\t\tdelete ret[k];\n\t});\n\n\treturn ret;\n}\n\n_unique(keys, ret) {\n\tret = ret || new shs_arbfw_appd_Column();\n\n\tundefined\n\n\t// if(this.Id) ret.Id = this.Id;\n\tif (!keys) {\n\n\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (typeof(this.table()) !== 'undefined') ret.table(this.table()._unique());\n\n\t} else {\n\n\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t\tif (keys.indexOf(\"type\") >= 0 && typeof(this.type()) !== 'undefined') ret.type(this.type());\n\n\t\tif (keys.indexOf(\"mandatory\") >= 0 && typeof(this.mandatory()) !== 'undefined') ret.mandatory(this.mandatory());\n\n\t\tif (keys.indexOf(\"table\") >= 0 && typeof(this.table()) !== 'undefined') ret.table(this.table()._unique());\n\n\t\tif (keys.indexOf(\"reference\") >= 0 && typeof(this.reference()) !== 'undefined') ret.reference(this.reference()._unique());\n\n\t}\n\n\treturn ret;\n}\n\n_query(gq) {\n\tlet arFields = Object.keys(global.Schema.of('sys_dictionary', ['*'])['sys_dictionary']);\n\n\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('sys_dictionary');\n\n\tundefined\n\n\tlet idf = ((function(r) {\n\t\tlet ret = 'sys_id';\n\t\tif (typeof(r.__idField) === 'function') {\n\t\t\tret = r.__idField();\n\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\tret = r.__idField || this.__idField();\n\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\tret = 'Id';\n\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\tret = 'sys_id';\n\t\t}\n\t\treturn ret;\n\t})(this));\n\tif (idf == 'Id') idf = 'sys_id';\n\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tlet coop = this._active_coop || '=';\n\n\t\tlet v = this.active();\n\n\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Column._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tlet coop = this._enabled_coop || '=';\n\n\t\tlet v = this.enabled();\n\n\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Column._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tlet coop = this._code_coop || '=';\n\n\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.code();\n\n\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Column._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tlet coop = this._order_coop || '=';\n\n\t\tlet v = this.order();\n\n\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Column._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tlet coop = this._date_coop || '=';\n\n\t\tlet v = this.date();\n\n\t\tif (v) {\n\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t}\n\n\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Column._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tlet coop = this._name_coop || '=';\n\n\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.name();\n\n\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Column._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tlet coop = this._remark_coop || '=';\n\n\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.remark();\n\n\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Column._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._type) !== 'undefined') {\n\t\tlet coop = this._type_coop || '=';\n\n\t\tif (!this._type_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.type();\n\n\t\tif (arFields.indexOf('type') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Column._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('type');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('type');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('type', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._mandatory) !== 'undefined') {\n\t\tlet coop = this._mandatory_coop || '=';\n\n\t\tlet v = this.mandatory();\n\n\t\tif (arFields.indexOf('mandatory') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Column._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('mandatory');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('mandatory');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('mandatory', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._table) !== 'undefined') {\n\t\tlet coop = this._table_coop || '=';\n\n\t\tlet v = this.table();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Column\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Column._query(): \"+ \"table \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Column._query(): \" + \"table[table] resuled in undefined: \" + JSON.stringify(this.table()));\n\t\t}\n\n\t\tif (arFields.indexOf('table') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Column._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('table');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('table');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('table', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._reference) !== 'undefined') {\n\t\tlet coop = this._reference_coop || '=';\n\n\t\tlet v = this.reference();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Column\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Column._query(): \"+ \"reference \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Column._query(): \" + \"reference[reference] resuled in undefined: \" + JSON.stringify(this.reference()));\n\t\t}\n\n\t\tif (arFields.indexOf('reference') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Column._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('reference');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('reference');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('reference', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Column._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\treturn this._queryGQ;\n}\n\n_save(obj) {\n\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\treturn new shs_arbfw_appd_Column()._save(o)\n\t});\n\n\tlet _obj = {};\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Column._save(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\tObject.keys(obj).filter(function(k) {\n\t\treturn Object.keys(global.Schema.of('sys_dictionary', ['*'])['sys_dictionary']).filter(function(_k) {\n\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t}).indexOf(k.toLowerCase()) >= 0\n\t}).forEach(function(k) {\n\t\t_obj[k.toLowerCase()] = obj[k]\n\t});\n\n\tObject.keys(_obj).forEach(function(k) {\n\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Column._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tdelete _obj[k];\n\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Column._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t}\n\t});\n\n\tlet _this = null;\n\tif (obj.__keys) {\n\t\tlet kObj = {};\n\t\tkObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(_obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))));\n\t\tobj.__keys.forEach(function(k) {\n\t\t\tkObj[k] = _obj[k]\n\t\t});\n\t\t_this = new shs_arbfw_appd_Column()._fromDocument(kObj);\n\t} else {\n\t\t_this = new shs_arbfw_appd_Column()._fromDocument(_obj)._unique();\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Column._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\tdelete _obj.__idField;\n\n\ttry {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Column._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\tObject.keys(_obj).filter(function(k) {\n\t\t\treturn k.toLowerCase() != k;\n\t\t}).forEach(function(k) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Column._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tvar lk = k.toLowerCase();\n\t\t\t_obj[lk] = _obj[k];\n\t\t\tdelete _obj[k];\n\t\t});\n\n\t\tlet gq = new global.GlideQuery(obj.__type || 'sys_dictionary');\n\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Column._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\tif (_obj.sys_id) {\n\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t} else {\n\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\tgq = gq.insert(_obj);\n\t\t}\n\t\tlet _fObj = {};\n\t\t_fObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))));\n\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('sys_dictionary', ['*'])['sys_dictionary']))));\n\t} catch (ex) {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Column._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Column._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\treturn this;\n\t}\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Column._save(): \" + \"obj.column_Subscription_Triggers: \" + JSON.stringify(obj.column_Subscription_Triggers, null, 4));\n\tif (Array.isArray(obj.column_Subscription_Triggers)) this.column_Subscription_Triggers(obj.column_Subscription_Triggers.map(function(ta) {\n\t\treturn new shs_arbfw_appd_Subscription_Trigger()._save(ta)\n\t}));\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Column._save(): \" + \"obj.column_Field_Labels: \" + JSON.stringify(obj.column_Field_Labels, null, 4));\n\tif (Array.isArray(obj.column_Field_Labels)) this.column_Field_Labels(obj.column_Field_Labels.map(function(ta) {\n\t\treturn new shs_arbfw_appd_Field_Label()._save(ta)\n\t}));\n\n\treturn this;\n}\n\n/************* Column.store() **********************/\nstore(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Column.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Column.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Column.store(): \" + \"executing locally \");\n\n\t\t// store locally\n\t\treturn this._save(this._toDocument());\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Column.findAll() **********************/\nfindAll(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Column.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Column.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Column.findAll(): \" + \"executing locally \");\n\n\t\t// findAll locally\n\t\tlet gr = new GlideRecord('sys_dictionary');\n\t\tgr.addEncodedQuery(this._toEQuery());\n\t\treturn this._fromDocument(gr);\n\n\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('sys_dictionary', ['*'])['sys_dictionary'])));\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Column.find() **********************/\nfind(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Column.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Column.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Column.find(): \" + \"executing locally \");\n\n\t\tlet ret = this.findAll();\n\t\treturn ret.length ? ret[0] : null;\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"scriptFile_Script_Compatibilitys":[{"active":true,"enabled":true}],"client_callable":true,"sys_name":"shs_arbfw_Version_History","api_name":"x_1790593_arboard.shs_arbfw_Version_History","name":"shs_arbfw_Version_History","script":"class shs_arbfw_Version_History extends global.AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"\";\n\t\tthis.__type = \"shs_arbfw_Version_History\";\n\t\tthis.__alias = \"shs_arbfw\";\n\t\tthis.__scope = \"shs_arbfw\";\n\t}\n\n\t/************* Version_History.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Version_History.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Version_History.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Version_History.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Version_History.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//(typeof(window)!=='undefined'?alert:gs.info)(\"Version_History.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Version_History.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Version_History.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Version_History.design GETTERS AND SETTERS **********************/\n\tdesign(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._design = v;\n\t\t\tthis._design_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._design;\n\t\t}\n\t}\n\n\t/************* Version_History.editor GETTERS AND SETTERS **********************/\n\teditor(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._editor = v;\n\t\t\tthis._editor_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._editor;\n\t\t}\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = undefined || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\tif (this._design) ret += /*(this._design_coop || '=') + */ this.design()._toEQuery(sPath + 'design.');\n\n\t\tif (this._editor) ret += /*(this._editor_coop || '=') + */ this.editor()._toEQuery(sPath + 'editor.');\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Version_History._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn new shs_arbfw_Version_History()._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Version_History._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Version_History._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromGlideRecord(obj) {\n\t\tif (!obj) return null;\n\t\tif (obj.isValidRecord()) {\n\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Version_History\" != 'ecc_queue' && obj.source == \"shs_arbfw_Version_History\") {\n\t\t\t\tobj.state = \"processing\";\n\t\t\t\tobj.update();\n\n\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\tresp.queue = 'output';\n\t\t\t\tresp.agent = obj.agent;\n\t\t\t\tresp.topic = obj.topic;\n\t\t\t\tresp.name = obj.name;\n\t\t\t\tresp.source = obj.source;\n\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\tlet ret = new shs_arbfw_Version_History()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t});\n\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t}\n\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\tresp.insert();\n\n\t\t\t\tobj.state = \"processed\";\n\t\t\t\tobj.update();\n\t\t\t\treturn resp;\n\t\t\t} else {\n\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\tdesign: obj.getValue(\"design\"),\n\n\t\t\t\t\teditor: obj.getValue(\"editor\"),\n\n\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tobj.query();\n\t\t\tlet grRet = [];\n\t\t\twhile (obj.next()) grRet.push(this._fromGlideRecord(obj));\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Version_History._fromGlideRecord(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\treturn grRet;\n\t\t}\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\tundefined\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_Version_History()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\tif (/((([A-Za-z]{3,9}:(?:/ / ) ? )( ? : [-;: &= +$, w] + @) ? [A - Za - z0 - 9. - ] + | ( ? : www. | [-;: &= +$, w] + @)[A - Za - z0 - 9. - ] + )(( ? : /[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)/g.test(obj)) {\n\t\t\tvar msg = new sn_ws.RESTMessageV2();\n\t\t\tmsg.setEndpoint(obj);\n\t\t\tmsg.setRequestHeader('Content-Type', 'application/json');\n\t\t\tmsg.setHttpMethod('get');\n\t\t\treturn this._fromDocument(msg.execute().getBody());\n\t\t}\n\n\t\ttry {\n\t\t\tobj = JSON.parse(obj);\n\t\t} catch (ex) {\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Version_History._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\tlet _obj = {\n\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))\n\t\t\t};\n\t\t\t_obj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(this))] = obj;\n\t\t\tobj = _obj;\n\t\t}\n\t\treturn this._fromDocument(obj);\n\t}\n\telse if (typeof(obj) === 'object') {\n\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\treturn this._fromGlideRecord(obj);\n\t\t} else if (obj._fromDocument) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Version_History._fromDocument(): \" + \"redundent call\");\n\t\t\treturn obj;\n\t\t} else if (Array.isArray(obj)) {\n\t\t\treturn obj.map(function(o) {\n\t\t\t\treturn new shs_arbfw_Version_History()._fromDocument(o)\n\t\t\t});\n\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(obj))));\n\n\t\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Version_History._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.design) !== 'undefined') {\n\n\t\t\t\t\tthis.design(new shs_arbfw_Solution_Design()._fromDocument(obj.design));\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.editor) !== 'undefined') {\n\n\t\t\t\t\tthis.editor(new shs_arbfw_User()._fromDocument(obj.editor));\n\t\t\t\t}\n\n\t\t\t} else { // if(obj.constructor.name==\"Version_History\"){\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Version_History._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t}\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Version_History._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\treturn null;\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Version_History._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Version_History._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Version_History._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\treturn this;\n}\n\n_insertAssert() {\n\treturn true;\n}\n\n_updateAssert() {\n\treturn true;\n}\n\n_storeAssert() {\n\treturn true;\n}\n\n_findAssert() {\n\treturn true;\n}\n\n_new(c) {\n\n\treturn new shs_arbfw_Platform._new(c);\n\n}\n\n_toDocument(arFields) {\n\n\tlet ret = undefined || {};\n\n\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tret.active = this.active();\n\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tret.enabled = this.enabled();\n\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tret.code = this.code();\n\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tret.order = this.order();\n\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tret.date = this.date();\n\n\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tret.name = this.name();\n\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tret.remark = this.remark();\n\n\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t}\n\n\tif (typeof(this._design) !== 'undefined') {\n\t\tret.design = this.design();\n\n\t\tif (ret.design) {\n\t\t\tret.design = ret.design._toDocument();\n\t\t\tif (typeof(ret.design) === 'object' && !Object.keys(ret.design).length) ret.design = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this._editor) !== 'undefined') {\n\t\tret.editor = this.editor();\n\n\t\tif (ret.editor) {\n\t\t\tret.editor = ret.editor._toDocument();\n\t\t\tif (typeof(ret.editor) === 'object' && !Object.keys(ret.editor).length) ret.editor = null;\n\t\t}\n\n\t}\n\n\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\treturn !arFields.find(function(_k) {\n\t\t\treturn _k == k;\n\t\t});\n\t}).forEach(function(k) {\n\t\tdelete ret[k];\n\t});\n\n\treturn ret;\n}\n\n_unique(keys, ret) {\n\tret = ret || new shs_arbfw_Version_History();\n\n\tundefined\n\n\t// if(this.Id) ret.Id = this.Id;\n\tif (!keys) {\n\n\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t} else {\n\n\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t\tif (keys.indexOf(\"design\") >= 0 && typeof(this.design()) !== 'undefined') ret.design(this.design()._unique());\n\n\t\tif (keys.indexOf(\"editor\") >= 0 && typeof(this.editor()) !== 'undefined') ret.editor(this.editor()._unique());\n\n\t}\n\n\treturn ret;\n}\n\n_query(gq) {\n\tlet arFields = Object.keys(global.Schema.of('x_1790593_arboard_version_history', ['*'])['x_1790593_arboard_version_history']);\n\n\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('x_1790593_arboard_version_history');\n\n\tundefined\n\n\tlet idf = ((function(r) {\n\t\tlet ret = 'sys_id';\n\t\tif (typeof(r.__idField) === 'function') {\n\t\t\tret = r.__idField();\n\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\tret = r.__idField || this.__idField();\n\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\tret = 'Id';\n\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\tret = 'sys_id';\n\t\t}\n\t\treturn ret;\n\t})(this));\n\tif (idf == 'Id') idf = 'sys_id';\n\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tlet coop = this._active_coop || '=';\n\n\t\tlet v = this.active();\n\n\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Version_History._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tlet coop = this._enabled_coop || '=';\n\n\t\tlet v = this.enabled();\n\n\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Version_History._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tlet coop = this._code_coop || '=';\n\n\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.code();\n\n\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Version_History._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tlet coop = this._order_coop || '=';\n\n\t\tlet v = this.order();\n\n\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Version_History._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tlet coop = this._date_coop || '=';\n\n\t\tlet v = this.date();\n\n\t\tif (v) {\n\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t}\n\n\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Version_History._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tlet coop = this._name_coop || '=';\n\n\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.name();\n\n\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Version_History._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tlet coop = this._remark_coop || '=';\n\n\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.remark();\n\n\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Version_History._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._design) !== 'undefined') {\n\t\tlet coop = this._design_coop || '=';\n\n\t\tlet v = this.design();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Version History\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Version_History._query(): \"+ \"design \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Version_History._query(): \" + \"design[design] resuled in undefined: \" + JSON.stringify(this.design()));\n\t\t}\n\n\t\tif (arFields.indexOf('design') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Version_History._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('design');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('design');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('design', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._editor) !== 'undefined') {\n\t\tlet coop = this._editor_coop || '=';\n\n\t\tlet v = this.editor();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Version History\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Version_History._query(): \"+ \"editor \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Version_History._query(): \" + \"editor[editor] resuled in undefined: \" + JSON.stringify(this.editor()));\n\t\t}\n\n\t\tif (arFields.indexOf('editor') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Version_History._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('editor');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('editor');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('editor', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Version_History._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\treturn this._queryGQ;\n}\n\n_save(obj) {\n\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\treturn new shs_arbfw_Version_History()._save(o)\n\t});\n\n\tlet _obj = {};\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Version_History._save(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\tObject.keys(obj).filter(function(k) {\n\t\treturn Object.keys(global.Schema.of('x_1790593_arboard_version_history', ['*'])['x_1790593_arboard_version_history']).filter(function(_k) {\n\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t}).indexOf(k.toLowerCase()) >= 0\n\t}).forEach(function(k) {\n\t\t_obj[k.toLowerCase()] = obj[k]\n\t});\n\n\tObject.keys(_obj).forEach(function(k) {\n\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Version_History._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tdelete _obj[k];\n\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Version_History._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t}\n\t});\n\n\tlet _this = null;\n\tif (obj.__keys) {\n\t\tlet kObj = {};\n\t\tkObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(_obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))));\n\t\tobj.__keys.forEach(function(k) {\n\t\t\tkObj[k] = _obj[k]\n\t\t});\n\t\t_this = new shs_arbfw_Version_History()._fromDocument(kObj);\n\t} else {\n\t\t_this = new shs_arbfw_Version_History()._fromDocument(_obj)._unique();\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Version_History._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\tdelete _obj.__idField;\n\n\ttry {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Version_History._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\tObject.keys(_obj).filter(function(k) {\n\t\t\treturn k.toLowerCase() != k;\n\t\t}).forEach(function(k) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Version_History._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tvar lk = k.toLowerCase();\n\t\t\t_obj[lk] = _obj[k];\n\t\t\tdelete _obj[k];\n\t\t});\n\n\t\tlet gq = new global.GlideQuery(obj.__type || 'x_1790593_arboard_version_history');\n\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Version_History._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\tif (_obj.sys_id) {\n\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t} else {\n\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\tgq = gq.insert(_obj);\n\t\t}\n\t\tlet _fObj = {};\n\t\t_fObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))));\n\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('x_1790593_arboard_version_history', ['*'])['x_1790593_arboard_version_history']))));\n\t} catch (ex) {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Version_History._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Version_History._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\treturn this;\n\t}\n\n\treturn this;\n}\n\n/************* Version_History.store() **********************/\nstore(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Version_History.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Version_History.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Version_History.store(): \" + \"executing locally \");\n\n\t\t// store locally\n\t\treturn this._save(this._toDocument());\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Version_History.findAll() **********************/\nfindAll(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Version_History.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Version_History.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Version_History.findAll(): \" + \"executing locally \");\n\n\t\t// findAll locally\n\t\tlet gr = new GlideRecord('x_1790593_arboard_version_history');\n\t\tgr.addEncodedQuery(this._toEQuery());\n\t\treturn this._fromDocument(gr);\n\n\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('x_1790593_arboard_version_history', ['*'])['x_1790593_arboard_version_history'])));\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Version_History.find() **********************/\nfind(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Version_History.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Version_History.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Version_History.find(): \" + \"executing locally \");\n\n\t\tlet ret = this.findAll();\n\t\treturn ret.length ? ret[0] : null;\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"scriptFile_Script_Compatibilitys":[{"active":true,"enabled":true}],"client_callable":true,"sys_name":"shs_arbfw_Solution_Section","api_name":"x_1790593_arboard.shs_arbfw_Solution_Section","name":"shs_arbfw_Solution_Section","script":"class shs_arbfw_Solution_Section extends global.AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"\";\n\t\tthis.__type = \"shs_arbfw_Solution_Section\";\n\t\tthis.__alias = \"shs_arbfw\";\n\t\tthis.__scope = \"shs_arbfw\";\n\t}\n\n\t/************* Solution_Section.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Solution_Section.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Solution_Section.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Solution_Section.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Solution_Section.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//(typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Section.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Solution_Section.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Solution_Section.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Solution_Section.design GETTERS AND SETTERS **********************/\n\tdesign(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._design = v;\n\t\t\tthis._design_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._design;\n\t\t}\n\t}\n\n\t/************* Solution_Section.type GETTERS AND SETTERS **********************/\n\ttype(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._type = v;\n\t\t\tthis._type_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._type;\n\t\t}\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = undefined || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\tif (this._design) ret += /*(this._design_coop || '=') + */ this.design()._toEQuery(sPath + 'design.');\n\n\t\tif (this._type) ret += /*(this._type_coop || '=') + */ this.type()._toEQuery(sPath + 'type.');\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Section._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn new shs_arbfw_Solution_Section()._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Section._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Section._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromGlideRecord(obj) {\n\t\tif (!obj) return null;\n\t\tif (obj.isValidRecord()) {\n\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Solution_Section\" != 'ecc_queue' && obj.source == \"shs_arbfw_Solution_Section\") {\n\t\t\t\tobj.state = \"processing\";\n\t\t\t\tobj.update();\n\n\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\tresp.queue = 'output';\n\t\t\t\tresp.agent = obj.agent;\n\t\t\t\tresp.topic = obj.topic;\n\t\t\t\tresp.name = obj.name;\n\t\t\t\tresp.source = obj.source;\n\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\tlet ret = new shs_arbfw_Solution_Section()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t});\n\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t}\n\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\tresp.insert();\n\n\t\t\t\tobj.state = \"processed\";\n\t\t\t\tobj.update();\n\t\t\t\treturn resp;\n\t\t\t} else {\n\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\tdesign: obj.getValue(\"design\"),\n\n\t\t\t\t\ttype: obj.getValue(\"type\"),\n\n\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tobj.query();\n\t\t\tlet grRet = [];\n\t\t\twhile (obj.next()) grRet.push(this._fromGlideRecord(obj));\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Section._fromGlideRecord(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\treturn grRet;\n\t\t}\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\tundefined\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_Solution_Section()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\tif (/((([A-Za-z]{3,9}:(?:/ / ) ? )( ? : [-;: &= +$, w] + @) ? [A - Za - z0 - 9. - ] + | ( ? : www. | [-;: &= +$, w] + @)[A - Za - z0 - 9. - ] + )(( ? : /[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)/g.test(obj)) {\n\t\t\tvar msg = new sn_ws.RESTMessageV2();\n\t\t\tmsg.setEndpoint(obj);\n\t\t\tmsg.setRequestHeader('Content-Type', 'application/json');\n\t\t\tmsg.setHttpMethod('get');\n\t\t\treturn this._fromDocument(msg.execute().getBody());\n\t\t}\n\n\t\ttry {\n\t\t\tobj = JSON.parse(obj);\n\t\t} catch (ex) {\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Section._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\tlet _obj = {\n\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))\n\t\t\t};\n\t\t\t_obj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(this))] = obj;\n\t\t\tobj = _obj;\n\t\t}\n\t\treturn this._fromDocument(obj);\n\t}\n\telse if (typeof(obj) === 'object') {\n\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\treturn this._fromGlideRecord(obj);\n\t\t} else if (obj._fromDocument) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Section._fromDocument(): \" + \"redundent call\");\n\t\t\treturn obj;\n\t\t} else if (Array.isArray(obj)) {\n\t\t\treturn obj.map(function(o) {\n\t\t\t\treturn new shs_arbfw_Solution_Section()._fromDocument(o)\n\t\t\t});\n\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(obj))));\n\n\t\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Section._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.design) !== 'undefined') {\n\n\t\t\t\t\tthis.design(new shs_arbfw_Solution_Design()._fromDocument(obj.design));\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.type) !== 'undefined') {\n\n\t\t\t\t\tthis.type(new shs_arbfw_Section_Type()._fromDocument(obj.type));\n\t\t\t\t}\n\n\t\t\t} else { // if(obj.constructor.name==\"Solution_Section\"){\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Section._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t}\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Section._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\treturn null;\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Section._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Section._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Section._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\treturn this;\n}\n\n_insertAssert() {\n\treturn true;\n}\n\n_updateAssert() {\n\treturn true;\n}\n\n_storeAssert() {\n\treturn true;\n}\n\n_findAssert() {\n\treturn true;\n}\n\n_new(c) {\n\n\treturn new shs_arbfw_Platform._new(c);\n\n}\n\n_toDocument(arFields) {\n\n\tlet ret = undefined || {};\n\n\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tret.active = this.active();\n\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tret.enabled = this.enabled();\n\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tret.code = this.code();\n\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tret.order = this.order();\n\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tret.date = this.date();\n\n\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tret.name = this.name();\n\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tret.remark = this.remark();\n\n\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t}\n\n\tif (typeof(this._design) !== 'undefined') {\n\t\tret.design = this.design();\n\n\t\tif (ret.design) {\n\t\t\tret.design = ret.design._toDocument();\n\t\t\tif (typeof(ret.design) === 'object' && !Object.keys(ret.design).length) ret.design = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this._type) !== 'undefined') {\n\t\tret.type = this.type();\n\n\t\tif (ret.type) {\n\t\t\tret.type = ret.type._toDocument();\n\t\t\tif (typeof(ret.type) === 'object' && !Object.keys(ret.type).length) ret.type = null;\n\t\t}\n\n\t}\n\n\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\treturn !arFields.find(function(_k) {\n\t\t\treturn _k == k;\n\t\t});\n\t}).forEach(function(k) {\n\t\tdelete ret[k];\n\t});\n\n\treturn ret;\n}\n\n_unique(keys, ret) {\n\tret = ret || new shs_arbfw_Solution_Section();\n\n\tundefined\n\n\t// if(this.Id) ret.Id = this.Id;\n\tif (!keys) {\n\n\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t} else {\n\n\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t\tif (keys.indexOf(\"design\") >= 0 && typeof(this.design()) !== 'undefined') ret.design(this.design()._unique());\n\n\t\tif (keys.indexOf(\"type\") >= 0 && typeof(this.type()) !== 'undefined') ret.type(this.type()._unique());\n\n\t}\n\n\treturn ret;\n}\n\n_query(gq) {\n\tlet arFields = Object.keys(global.Schema.of('x_1790593_arboard_solution_section', ['*'])['x_1790593_arboard_solution_section']);\n\n\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('x_1790593_arboard_solution_section');\n\n\tundefined\n\n\tlet idf = ((function(r) {\n\t\tlet ret = 'sys_id';\n\t\tif (typeof(r.__idField) === 'function') {\n\t\t\tret = r.__idField();\n\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\tret = r.__idField || this.__idField();\n\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\tret = 'Id';\n\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\tret = 'sys_id';\n\t\t}\n\t\treturn ret;\n\t})(this));\n\tif (idf == 'Id') idf = 'sys_id';\n\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tlet coop = this._active_coop || '=';\n\n\t\tlet v = this.active();\n\n\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Section._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tlet coop = this._enabled_coop || '=';\n\n\t\tlet v = this.enabled();\n\n\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Section._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tlet coop = this._code_coop || '=';\n\n\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.code();\n\n\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Section._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tlet coop = this._order_coop || '=';\n\n\t\tlet v = this.order();\n\n\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Section._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tlet coop = this._date_coop || '=';\n\n\t\tlet v = this.date();\n\n\t\tif (v) {\n\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t}\n\n\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Section._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tlet coop = this._name_coop || '=';\n\n\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.name();\n\n\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Section._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tlet coop = this._remark_coop || '=';\n\n\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.remark();\n\n\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Section._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._design) !== 'undefined') {\n\t\tlet coop = this._design_coop || '=';\n\n\t\tlet v = this.design();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Solution Section\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Section._query(): \"+ \"design \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Section._query(): \" + \"design[design] resuled in undefined: \" + JSON.stringify(this.design()));\n\t\t}\n\n\t\tif (arFields.indexOf('design') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Section._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('design');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('design');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('design', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._type) !== 'undefined') {\n\t\tlet coop = this._type_coop || '=';\n\n\t\tlet v = this.type();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Solution Section\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Section._query(): \"+ \"type \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Section._query(): \" + \"type[type] resuled in undefined: \" + JSON.stringify(this.type()));\n\t\t}\n\n\t\tif (arFields.indexOf('type') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Section._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('type');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('type');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('type', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Section._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\treturn this._queryGQ;\n}\n\n_save(obj) {\n\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\treturn new shs_arbfw_Solution_Section()._save(o)\n\t});\n\n\tlet _obj = {};\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Section._save(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\tObject.keys(obj).filter(function(k) {\n\t\treturn Object.keys(global.Schema.of('x_1790593_arboard_solution_section', ['*'])['x_1790593_arboard_solution_section']).filter(function(_k) {\n\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t}).indexOf(k.toLowerCase()) >= 0\n\t}).forEach(function(k) {\n\t\t_obj[k.toLowerCase()] = obj[k]\n\t});\n\n\tObject.keys(_obj).forEach(function(k) {\n\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Section._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tdelete _obj[k];\n\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Section._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t}\n\t});\n\n\tlet _this = null;\n\tif (obj.__keys) {\n\t\tlet kObj = {};\n\t\tkObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(_obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))));\n\t\tobj.__keys.forEach(function(k) {\n\t\t\tkObj[k] = _obj[k]\n\t\t});\n\t\t_this = new shs_arbfw_Solution_Section()._fromDocument(kObj);\n\t} else {\n\t\t_this = new shs_arbfw_Solution_Section()._fromDocument(_obj)._unique();\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Section._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\tdelete _obj.__idField;\n\n\ttry {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Section._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\tObject.keys(_obj).filter(function(k) {\n\t\t\treturn k.toLowerCase() != k;\n\t\t}).forEach(function(k) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Section._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tvar lk = k.toLowerCase();\n\t\t\t_obj[lk] = _obj[k];\n\t\t\tdelete _obj[k];\n\t\t});\n\n\t\tlet gq = new global.GlideQuery(obj.__type || 'x_1790593_arboard_solution_section');\n\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Section._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\tif (_obj.sys_id) {\n\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t} else {\n\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\tgq = gq.insert(_obj);\n\t\t}\n\t\tlet _fObj = {};\n\t\t_fObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))));\n\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('x_1790593_arboard_solution_section', ['*'])['x_1790593_arboard_solution_section']))));\n\t} catch (ex) {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Section._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Section._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\treturn this;\n\t}\n\n\treturn this;\n}\n\n/************* Solution_Section.store() **********************/\nstore(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Section.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Section.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Section.store(): \" + \"executing locally \");\n\n\t\t// store locally\n\t\treturn this._save(this._toDocument());\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Solution_Section.findAll() **********************/\nfindAll(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Section.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Section.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Section.findAll(): \" + \"executing locally \");\n\n\t\t// findAll locally\n\t\tlet gr = new GlideRecord('x_1790593_arboard_solution_section');\n\t\tgr.addEncodedQuery(this._toEQuery());\n\t\treturn this._fromDocument(gr);\n\n\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('x_1790593_arboard_solution_section', ['*'])['x_1790593_arboard_solution_section'])));\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Solution_Section.find() **********************/\nfind(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Section.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Section.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Section.find(): \" + \"executing locally \");\n\n\t\tlet ret = this.findAll();\n\t\treturn ret.length ? ret[0] : null;\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"scriptFile_Script_Compatibilitys":[{"active":true,"enabled":true}],"client_callable":true,"sys_name":"shs_arbfw_Solution_Storage_Mapping","api_name":"x_1790593_arboard.shs_arbfw_Solution_Storage_Mapping","name":"shs_arbfw_Solution_Storage_Mapping","script":"class shs_arbfw_Solution_Storage_Mapping extends global.AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"\";\n\t\tthis.__type = \"shs_arbfw_Solution_Storage_Mapping\";\n\t\tthis.__alias = \"shs_arbfw\";\n\t\tthis.__scope = \"shs_arbfw\";\n\t}\n\n\t/************* Solution_Storage_Mapping.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Solution_Storage_Mapping.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Solution_Storage_Mapping.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Solution_Storage_Mapping.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Solution_Storage_Mapping.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//(typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Storage_Mapping.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Solution_Storage_Mapping.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Solution_Storage_Mapping.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Solution_Storage_Mapping.type GETTERS AND SETTERS **********************/\n\ttype(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._type = v;\n\t\t\tthis._type_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._type;\n\t\t}\n\t}\n\n\t/************* Solution_Storage_Mapping.storage GETTERS AND SETTERS **********************/\n\tstorage(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._storage = v;\n\t\t\tthis._storage_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._storage;\n\t\t}\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = undefined || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\tif (this._type) ret += /*(this._type_coop || '=') + */ this.type()._toEQuery(sPath + 'type.');\n\n\t\tif (this._storage) ret += /*(this._storage_coop || '=') + */ this.storage()._toEQuery(sPath + 'storage.');\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Storage_Mapping._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn new shs_arbfw_Solution_Storage_Mapping()._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Storage_Mapping._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Storage_Mapping._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromGlideRecord(obj) {\n\t\tif (!obj) return null;\n\t\tif (obj.isValidRecord()) {\n\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Solution_Storage_Mapping\" != 'ecc_queue' && obj.source == \"shs_arbfw_Solution_Storage_Mapping\") {\n\t\t\t\tobj.state = \"processing\";\n\t\t\t\tobj.update();\n\n\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\tresp.queue = 'output';\n\t\t\t\tresp.agent = obj.agent;\n\t\t\t\tresp.topic = obj.topic;\n\t\t\t\tresp.name = obj.name;\n\t\t\t\tresp.source = obj.source;\n\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\tlet ret = new shs_arbfw_Solution_Storage_Mapping()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t});\n\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t}\n\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\tresp.insert();\n\n\t\t\t\tobj.state = \"processed\";\n\t\t\t\tobj.update();\n\t\t\t\treturn resp;\n\t\t\t} else {\n\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\ttype: obj.getValue(\"type\"),\n\n\t\t\t\t\tstorage: obj.getValue(\"storage\"),\n\n\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tobj.query();\n\t\t\tlet grRet = [];\n\t\t\twhile (obj.next()) grRet.push(this._fromGlideRecord(obj));\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Storage_Mapping._fromGlideRecord(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\treturn grRet;\n\t\t}\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\tundefined\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_Solution_Storage_Mapping()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\tif (/((([A-Za-z]{3,9}:(?:/ / ) ? )( ? : [-;: &= +$, w] + @) ? [A - Za - z0 - 9. - ] + | ( ? : www. | [-;: &= +$, w] + @)[A - Za - z0 - 9. - ] + )(( ? : /[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)/g.test(obj)) {\n\t\t\tvar msg = new sn_ws.RESTMessageV2();\n\t\t\tmsg.setEndpoint(obj);\n\t\t\tmsg.setRequestHeader('Content-Type', 'application/json');\n\t\t\tmsg.setHttpMethod('get');\n\t\t\treturn this._fromDocument(msg.execute().getBody());\n\t\t}\n\n\t\ttry {\n\t\t\tobj = JSON.parse(obj);\n\t\t} catch (ex) {\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Storage_Mapping._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\tlet _obj = {\n\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))\n\t\t\t};\n\t\t\t_obj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(this))] = obj;\n\t\t\tobj = _obj;\n\t\t}\n\t\treturn this._fromDocument(obj);\n\t}\n\telse if (typeof(obj) === 'object') {\n\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\treturn this._fromGlideRecord(obj);\n\t\t} else if (obj._fromDocument) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Storage_Mapping._fromDocument(): \" + \"redundent call\");\n\t\t\treturn obj;\n\t\t} else if (Array.isArray(obj)) {\n\t\t\treturn obj.map(function(o) {\n\t\t\t\treturn new shs_arbfw_Solution_Storage_Mapping()._fromDocument(o)\n\t\t\t});\n\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(obj))));\n\n\t\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Storage_Mapping._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.type) !== 'undefined') {\n\n\t\t\t\t\tthis.type(new shs_arbfw_Section_Type()._fromDocument(obj.type));\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.storage) !== 'undefined') {\n\n\t\t\t\t\tthis.storage(new shs_arbfw_Solution_Storage()._fromDocument(obj.storage));\n\t\t\t\t}\n\n\t\t\t} else { // if(obj.constructor.name==\"Solution_Storage_Mapping\"){\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Storage_Mapping._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t}\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Storage_Mapping._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\treturn null;\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Storage_Mapping._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Storage_Mapping._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Storage_Mapping._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\treturn this;\n}\n\n_insertAssert() {\n\treturn true;\n}\n\n_updateAssert() {\n\treturn true;\n}\n\n_storeAssert() {\n\treturn true;\n}\n\n_findAssert() {\n\treturn true;\n}\n\n_new(c) {\n\n\treturn new shs_arbfw_Platform._new(c);\n\n}\n\n_toDocument(arFields) {\n\n\tlet ret = undefined || {};\n\n\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tret.active = this.active();\n\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tret.enabled = this.enabled();\n\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tret.code = this.code();\n\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tret.order = this.order();\n\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tret.date = this.date();\n\n\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tret.name = this.name();\n\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tret.remark = this.remark();\n\n\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t}\n\n\tif (typeof(this._type) !== 'undefined') {\n\t\tret.type = this.type();\n\n\t\tif (ret.type) {\n\t\t\tret.type = ret.type._toDocument();\n\t\t\tif (typeof(ret.type) === 'object' && !Object.keys(ret.type).length) ret.type = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this._storage) !== 'undefined') {\n\t\tret.storage = this.storage();\n\n\t\tif (ret.storage) {\n\t\t\tret.storage = ret.storage._toDocument();\n\t\t\tif (typeof(ret.storage) === 'object' && !Object.keys(ret.storage).length) ret.storage = null;\n\t\t}\n\n\t}\n\n\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\treturn !arFields.find(function(_k) {\n\t\t\treturn _k == k;\n\t\t});\n\t}).forEach(function(k) {\n\t\tdelete ret[k];\n\t});\n\n\treturn ret;\n}\n\n_unique(keys, ret) {\n\tret = ret || new shs_arbfw_Solution_Storage_Mapping();\n\n\tundefined\n\n\t// if(this.Id) ret.Id = this.Id;\n\tif (!keys) {\n\n\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t} else {\n\n\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t\tif (keys.indexOf(\"type\") >= 0 && typeof(this.type()) !== 'undefined') ret.type(this.type()._unique());\n\n\t\tif (keys.indexOf(\"storage\") >= 0 && typeof(this.storage()) !== 'undefined') ret.storage(this.storage()._unique());\n\n\t}\n\n\treturn ret;\n}\n\n_query(gq) {\n\tlet arFields = Object.keys(global.Schema.of('x_1790593_arboard_solution_storage_mapping', ['*'])['x_1790593_arboard_solution_storage_mapping']);\n\n\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('x_1790593_arboard_solution_storage_mapping');\n\n\tundefined\n\n\tlet idf = ((function(r) {\n\t\tlet ret = 'sys_id';\n\t\tif (typeof(r.__idField) === 'function') {\n\t\t\tret = r.__idField();\n\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\tret = r.__idField || this.__idField();\n\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\tret = 'Id';\n\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\tret = 'sys_id';\n\t\t}\n\t\treturn ret;\n\t})(this));\n\tif (idf == 'Id') idf = 'sys_id';\n\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tlet coop = this._active_coop || '=';\n\n\t\tlet v = this.active();\n\n\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Storage_Mapping._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tlet coop = this._enabled_coop || '=';\n\n\t\tlet v = this.enabled();\n\n\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Storage_Mapping._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tlet coop = this._code_coop || '=';\n\n\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.code();\n\n\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Storage_Mapping._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tlet coop = this._order_coop || '=';\n\n\t\tlet v = this.order();\n\n\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Storage_Mapping._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tlet coop = this._date_coop || '=';\n\n\t\tlet v = this.date();\n\n\t\tif (v) {\n\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t}\n\n\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Storage_Mapping._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tlet coop = this._name_coop || '=';\n\n\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.name();\n\n\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Storage_Mapping._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tlet coop = this._remark_coop || '=';\n\n\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.remark();\n\n\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Storage_Mapping._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._type) !== 'undefined') {\n\t\tlet coop = this._type_coop || '=';\n\n\t\tlet v = this.type();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Solution Storage Mapping\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Storage_Mapping._query(): \"+ \"type \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Storage_Mapping._query(): \" + \"type[type] resuled in undefined: \" + JSON.stringify(this.type()));\n\t\t}\n\n\t\tif (arFields.indexOf('type') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Storage_Mapping._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('type');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('type');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('type', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._storage) !== 'undefined') {\n\t\tlet coop = this._storage_coop || '=';\n\n\t\tlet v = this.storage();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Solution Storage Mapping\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Storage_Mapping._query(): \"+ \"storage \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Storage_Mapping._query(): \" + \"storage[storage] resuled in undefined: \" + JSON.stringify(this.storage()));\n\t\t}\n\n\t\tif (arFields.indexOf('storage') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Storage_Mapping._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('storage');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('storage');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('storage', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Storage_Mapping._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\treturn this._queryGQ;\n}\n\n_save(obj) {\n\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\treturn new shs_arbfw_Solution_Storage_Mapping()._save(o)\n\t});\n\n\tlet _obj = {};\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Storage_Mapping._save(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\tObject.keys(obj).filter(function(k) {\n\t\treturn Object.keys(global.Schema.of('x_1790593_arboard_solution_storage_mapping', ['*'])['x_1790593_arboard_solution_storage_mapping']).filter(function(_k) {\n\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t}).indexOf(k.toLowerCase()) >= 0\n\t}).forEach(function(k) {\n\t\t_obj[k.toLowerCase()] = obj[k]\n\t});\n\n\tObject.keys(_obj).forEach(function(k) {\n\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Storage_Mapping._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tdelete _obj[k];\n\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Storage_Mapping._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t}\n\t});\n\n\tlet _this = null;\n\tif (obj.__keys) {\n\t\tlet kObj = {};\n\t\tkObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(_obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))));\n\t\tobj.__keys.forEach(function(k) {\n\t\t\tkObj[k] = _obj[k]\n\t\t});\n\t\t_this = new shs_arbfw_Solution_Storage_Mapping()._fromDocument(kObj);\n\t} else {\n\t\t_this = new shs_arbfw_Solution_Storage_Mapping()._fromDocument(_obj)._unique();\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Storage_Mapping._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\tdelete _obj.__idField;\n\n\ttry {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Storage_Mapping._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\tObject.keys(_obj).filter(function(k) {\n\t\t\treturn k.toLowerCase() != k;\n\t\t}).forEach(function(k) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Storage_Mapping._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tvar lk = k.toLowerCase();\n\t\t\t_obj[lk] = _obj[k];\n\t\t\tdelete _obj[k];\n\t\t});\n\n\t\tlet gq = new global.GlideQuery(obj.__type || 'x_1790593_arboard_solution_storage_mapping');\n\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Storage_Mapping._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\tif (_obj.sys_id) {\n\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t} else {\n\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\tgq = gq.insert(_obj);\n\t\t}\n\t\tlet _fObj = {};\n\t\t_fObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))));\n\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('x_1790593_arboard_solution_storage_mapping', ['*'])['x_1790593_arboard_solution_storage_mapping']))));\n\t} catch (ex) {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Storage_Mapping._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Storage_Mapping._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\treturn this;\n\t}\n\n\treturn this;\n}\n\n/************* Solution_Storage_Mapping.store() **********************/\nstore(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Storage_Mapping.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Storage_Mapping.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Storage_Mapping.store(): \" + \"executing locally \");\n\n\t\t// store locally\n\t\treturn this._save(this._toDocument());\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Solution_Storage_Mapping.findAll() **********************/\nfindAll(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Storage_Mapping.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Storage_Mapping.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Storage_Mapping.findAll(): \" + \"executing locally \");\n\n\t\t// findAll locally\n\t\tlet gr = new GlideRecord('x_1790593_arboard_solution_storage_mapping');\n\t\tgr.addEncodedQuery(this._toEQuery());\n\t\treturn this._fromDocument(gr);\n\n\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('x_1790593_arboard_solution_storage_mapping', ['*'])['x_1790593_arboard_solution_storage_mapping'])));\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Solution_Storage_Mapping.find() **********************/\nfind(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Storage_Mapping.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Storage_Mapping.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Storage_Mapping.find(): \" + \"executing locally \");\n\n\t\tlet ret = this.findAll();\n\t\treturn ret.length ? ret[0] : null;\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"scriptFile_Script_Compatibilitys":[{"active":true,"enabled":true}],"client_callable":true,"sys_name":"shs_arbfw_Board_Member","api_name":"x_1790593_arboard.shs_arbfw_Board_Member","name":"shs_arbfw_Board_Member","script":"class shs_arbfw_Board_Member extends global.AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"\";\n\t\tthis.__type = \"shs_arbfw_Board_Member\";\n\t\tthis.__alias = \"shs_arbfw\";\n\t\tthis.__scope = \"shs_arbfw\";\n\t}\n\n\t/************* Board_Member.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Board_Member.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Board_Member.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Board_Member.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Board_Member.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//(typeof(window)!=='undefined'?alert:gs.info)(\"Board_Member.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Board_Member.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Board_Member.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Board_Member.start GETTERS AND SETTERS **********************/\n\tstart(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//(typeof(window)!=='undefined'?alert:gs.info)(\"Board_Member.start(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._start = v;\n\t\t\tthis._start_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._start;\n\t\t}\n\t}\n\n\t/************* Board_Member.end GETTERS AND SETTERS **********************/\n\tend(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//(typeof(window)!=='undefined'?alert:gs.info)(\"Board_Member.end(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._end = v;\n\t\t\tthis._end_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._end;\n\t\t}\n\t}\n\n\t/************* Board_Member.board GETTERS AND SETTERS **********************/\n\tboard(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._board = v;\n\t\t\tthis._board_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._board;\n\t\t}\n\t}\n\n\t/************* Board_Member.member GETTERS AND SETTERS **********************/\n\tmember(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._member = v;\n\t\t\tthis._member_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._member;\n\t\t}\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = undefined || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\tif (this._start) ret += '^' + sPath + 'start' + (this._start_coop || '=') + this.start();\n\n\t\tif (this._end) ret += '^' + sPath + 'end' + (this._end_coop || '=') + this.end();\n\n\t\tif (this._board) ret += /*(this._board_coop || '=') + */ this.board()._toEQuery(sPath + 'board.');\n\n\t\tif (this._member) ret += /*(this._member_coop || '=') + */ this.member()._toEQuery(sPath + 'member.');\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Board_Member._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn new shs_arbfw_Board_Member()._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Board_Member._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Board_Member._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromGlideRecord(obj) {\n\t\tif (!obj) return null;\n\t\tif (obj.isValidRecord()) {\n\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Board_Member\" != 'ecc_queue' && obj.source == \"shs_arbfw_Board_Member\") {\n\t\t\t\tobj.state = \"processing\";\n\t\t\t\tobj.update();\n\n\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\tresp.queue = 'output';\n\t\t\t\tresp.agent = obj.agent;\n\t\t\t\tresp.topic = obj.topic;\n\t\t\t\tresp.name = obj.name;\n\t\t\t\tresp.source = obj.source;\n\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\tlet ret = new shs_arbfw_Board_Member()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t});\n\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t}\n\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\tresp.insert();\n\n\t\t\t\tobj.state = \"processed\";\n\t\t\t\tobj.update();\n\t\t\t\treturn resp;\n\t\t\t} else {\n\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\tstart: obj.getValue(\"start\"),\n\n\t\t\t\t\tend: obj.getValue(\"end\"),\n\n\t\t\t\t\tboard: obj.getValue(\"board\"),\n\n\t\t\t\t\tmember: obj.getValue(\"member\"),\n\n\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tobj.query();\n\t\t\tlet grRet = [];\n\t\t\twhile (obj.next()) grRet.push(this._fromGlideRecord(obj));\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Board_Member._fromGlideRecord(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\treturn grRet;\n\t\t}\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\tundefined\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_Board_Member()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\tif (/((([A-Za-z]{3,9}:(?:/ / ) ? )( ? : [-;: &= +$, w] + @) ? [A - Za - z0 - 9. - ] + | ( ? : www. | [-;: &= +$, w] + @)[A - Za - z0 - 9. - ] + )(( ? : /[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)/g.test(obj)) {\n\t\t\tvar msg = new sn_ws.RESTMessageV2();\n\t\t\tmsg.setEndpoint(obj);\n\t\t\tmsg.setRequestHeader('Content-Type', 'application/json');\n\t\t\tmsg.setHttpMethod('get');\n\t\t\treturn this._fromDocument(msg.execute().getBody());\n\t\t}\n\n\t\ttry {\n\t\t\tobj = JSON.parse(obj);\n\t\t} catch (ex) {\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Board_Member._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\tlet _obj = {\n\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))\n\t\t\t};\n\t\t\t_obj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(this))] = obj;\n\t\t\tobj = _obj;\n\t\t}\n\t\treturn this._fromDocument(obj);\n\t}\n\telse if (typeof(obj) === 'object') {\n\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\treturn this._fromGlideRecord(obj);\n\t\t} else if (obj._fromDocument) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Board_Member._fromDocument(): \" + \"redundent call\");\n\t\t\treturn obj;\n\t\t} else if (Array.isArray(obj)) {\n\t\t\treturn obj.map(function(o) {\n\t\t\t\treturn new shs_arbfw_Board_Member()._fromDocument(o)\n\t\t\t});\n\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(obj))));\n\n\t\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Board_Member._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.start) !== 'undefined') {\n\n\t\t\t\t\tthis.start(obj.start);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.end) !== 'undefined') {\n\n\t\t\t\t\tthis.end(obj.end);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.board) !== 'undefined') {\n\n\t\t\t\t\tthis.board(new shs_arbfw_Board()._fromDocument(obj.board));\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.member) !== 'undefined') {\n\n\t\t\t\t\tthis.member(new shs_arbfw_User()._fromDocument(obj.member));\n\t\t\t\t}\n\n\t\t\t} else { // if(obj.constructor.name==\"Board_Member\"){\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Board_Member._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t}\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Board_Member._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\treturn null;\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Board_Member._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Board_Member._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Board_Member._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\treturn this;\n}\n\n_insertAssert() {\n\treturn true;\n}\n\n_updateAssert() {\n\treturn true;\n}\n\n_storeAssert() {\n\treturn true;\n}\n\n_findAssert() {\n\treturn true;\n}\n\n_new(c) {\n\n\treturn new shs_arbfw_Platform._new(c);\n\n}\n\n_toDocument(arFields) {\n\n\tlet ret = undefined || {};\n\n\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tret.active = this.active();\n\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tret.enabled = this.enabled();\n\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tret.code = this.code();\n\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tret.order = this.order();\n\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tret.date = this.date();\n\n\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tret.name = this.name();\n\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tret.remark = this.remark();\n\n\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t}\n\n\tif (typeof(this._start) !== 'undefined') {\n\t\tret.start = this.start();\n\n\t\tif (ret.start && typeof(ret.start.toISOString) === 'function') ret.start = ret.start.toISOString().replace('.000Z', 'Z');\n\n\t}\n\n\tif (typeof(this._end) !== 'undefined') {\n\t\tret.end = this.end();\n\n\t\tif (ret.end && typeof(ret.end.toISOString) === 'function') ret.end = ret.end.toISOString().replace('.000Z', 'Z');\n\n\t}\n\n\tif (typeof(this._board) !== 'undefined') {\n\t\tret.board = this.board();\n\n\t\tif (ret.board) {\n\t\t\tret.board = ret.board._toDocument();\n\t\t\tif (typeof(ret.board) === 'object' && !Object.keys(ret.board).length) ret.board = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this._member) !== 'undefined') {\n\t\tret.member = this.member();\n\n\t\tif (ret.member) {\n\t\t\tret.member = ret.member._toDocument();\n\t\t\tif (typeof(ret.member) === 'object' && !Object.keys(ret.member).length) ret.member = null;\n\t\t}\n\n\t}\n\n\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\treturn !arFields.find(function(_k) {\n\t\t\treturn _k == k;\n\t\t});\n\t}).forEach(function(k) {\n\t\tdelete ret[k];\n\t});\n\n\treturn ret;\n}\n\n_unique(keys, ret) {\n\tret = ret || new shs_arbfw_Board_Member();\n\n\tundefined\n\n\t// if(this.Id) ret.Id = this.Id;\n\tif (!keys) {\n\n\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t} else {\n\n\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t\tif (keys.indexOf(\"start\") >= 0 && typeof(this.start()) !== 'undefined') ret.start(this.start());\n\n\t\tif (keys.indexOf(\"end\") >= 0 && typeof(this.end()) !== 'undefined') ret.end(this.end());\n\n\t\tif (keys.indexOf(\"board\") >= 0 && typeof(this.board()) !== 'undefined') ret.board(this.board()._unique());\n\n\t\tif (keys.indexOf(\"member\") >= 0 && typeof(this.member()) !== 'undefined') ret.member(this.member()._unique());\n\n\t}\n\n\treturn ret;\n}\n\n_query(gq) {\n\tlet arFields = Object.keys(global.Schema.of('x_1790593_arboard_board_member', ['*'])['x_1790593_arboard_board_member']);\n\n\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('x_1790593_arboard_board_member');\n\n\tundefined\n\n\tlet idf = ((function(r) {\n\t\tlet ret = 'sys_id';\n\t\tif (typeof(r.__idField) === 'function') {\n\t\t\tret = r.__idField();\n\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\tret = r.__idField || this.__idField();\n\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\tret = 'Id';\n\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\tret = 'sys_id';\n\t\t}\n\t\treturn ret;\n\t})(this));\n\tif (idf == 'Id') idf = 'sys_id';\n\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tlet coop = this._active_coop || '=';\n\n\t\tlet v = this.active();\n\n\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Board_Member._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tlet coop = this._enabled_coop || '=';\n\n\t\tlet v = this.enabled();\n\n\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Board_Member._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tlet coop = this._code_coop || '=';\n\n\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.code();\n\n\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Board_Member._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tlet coop = this._order_coop || '=';\n\n\t\tlet v = this.order();\n\n\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Board_Member._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tlet coop = this._date_coop || '=';\n\n\t\tlet v = this.date();\n\n\t\tif (v) {\n\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t}\n\n\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Board_Member._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tlet coop = this._name_coop || '=';\n\n\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.name();\n\n\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Board_Member._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tlet coop = this._remark_coop || '=';\n\n\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.remark();\n\n\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Board_Member._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._start) !== 'undefined') {\n\t\tlet coop = this._start_coop || '=';\n\n\t\tlet v = this.start();\n\n\t\tif (v) {\n\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t}\n\n\t\tif (arFields.indexOf('start') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Board_Member._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('start');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('start');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('start', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._end) !== 'undefined') {\n\t\tlet coop = this._end_coop || '=';\n\n\t\tlet v = this.end();\n\n\t\tif (v) {\n\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t}\n\n\t\tif (arFields.indexOf('end') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Board_Member._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('end');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('end');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('end', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._board) !== 'undefined') {\n\t\tlet coop = this._board_coop || '=';\n\n\t\tlet v = this.board();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Board Member\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Board_Member._query(): \"+ \"board \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Board_Member._query(): \" + \"board[board] resuled in undefined: \" + JSON.stringify(this.board()));\n\t\t}\n\n\t\tif (arFields.indexOf('board') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Board_Member._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('board');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('board');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('board', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._member) !== 'undefined') {\n\t\tlet coop = this._member_coop || '=';\n\n\t\tlet v = this.member();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Board Member\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Board_Member._query(): \"+ \"member \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Board_Member._query(): \" + \"member[member] resuled in undefined: \" + JSON.stringify(this.member()));\n\t\t}\n\n\t\tif (arFields.indexOf('member') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Board_Member._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('member');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('member');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('member', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Board_Member._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\treturn this._queryGQ;\n}\n\n_save(obj) {\n\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\treturn new shs_arbfw_Board_Member()._save(o)\n\t});\n\n\tlet _obj = {};\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Board_Member._save(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\tObject.keys(obj).filter(function(k) {\n\t\treturn Object.keys(global.Schema.of('x_1790593_arboard_board_member', ['*'])['x_1790593_arboard_board_member']).filter(function(_k) {\n\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t}).indexOf(k.toLowerCase()) >= 0\n\t}).forEach(function(k) {\n\t\t_obj[k.toLowerCase()] = obj[k]\n\t});\n\n\tObject.keys(_obj).forEach(function(k) {\n\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Board_Member._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tdelete _obj[k];\n\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Board_Member._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t}\n\t});\n\n\tlet _this = null;\n\tif (obj.__keys) {\n\t\tlet kObj = {};\n\t\tkObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(_obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))));\n\t\tobj.__keys.forEach(function(k) {\n\t\t\tkObj[k] = _obj[k]\n\t\t});\n\t\t_this = new shs_arbfw_Board_Member()._fromDocument(kObj);\n\t} else {\n\t\t_this = new shs_arbfw_Board_Member()._fromDocument(_obj)._unique();\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Board_Member._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\tdelete _obj.__idField;\n\n\ttry {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Board_Member._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\tObject.keys(_obj).filter(function(k) {\n\t\t\treturn k.toLowerCase() != k;\n\t\t}).forEach(function(k) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Board_Member._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tvar lk = k.toLowerCase();\n\t\t\t_obj[lk] = _obj[k];\n\t\t\tdelete _obj[k];\n\t\t});\n\n\t\tlet gq = new global.GlideQuery(obj.__type || 'x_1790593_arboard_board_member');\n\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Board_Member._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\tif (_obj.sys_id) {\n\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t} else {\n\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\tgq = gq.insert(_obj);\n\t\t}\n\t\tlet _fObj = {};\n\t\t_fObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))));\n\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('x_1790593_arboard_board_member', ['*'])['x_1790593_arboard_board_member']))));\n\t} catch (ex) {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Board_Member._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Board_Member._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\treturn this;\n\t}\n\n\treturn this;\n}\n\n/************* Board_Member.store() **********************/\nstore(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Board_Member.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Board_Member.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Board_Member.store(): \" + \"executing locally \");\n\n\t\t// store locally\n\t\treturn this._save(this._toDocument());\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Board_Member.findAll() **********************/\nfindAll(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Board_Member.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Board_Member.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Board_Member.findAll(): \" + \"executing locally \");\n\n\t\t// findAll locally\n\t\tlet gr = new GlideRecord('x_1790593_arboard_board_member');\n\t\tgr.addEncodedQuery(this._toEQuery());\n\t\treturn this._fromDocument(gr);\n\n\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('x_1790593_arboard_board_member', ['*'])['x_1790593_arboard_board_member'])));\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Board_Member.find() **********************/\nfind(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Board_Member.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Board_Member.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Board_Member.find(): \" + \"executing locally \");\n\n\t\tlet ret = this.findAll();\n\t\treturn ret.length ? ret[0] : null;\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"scriptFile_Script_Compatibilitys":[{"active":true,"enabled":true}],"client_callable":true,"sys_name":"shs_arbfw_Capability","api_name":"x_1790593_arboard.shs_arbfw_Capability","name":"shs_arbfw_Capability","script":"class shs_arbfw_Capability extends global.AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"\";\n\t\tthis.__type = \"shs_arbfw_Capability\";\n\t\tthis.__alias = \"shs_arbfw\";\n\t\tthis.__scope = \"shs_arbfw\";\n\t}\n\n\t/************* Capability.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Capability.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Capability.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Capability.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Capability.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//(typeof(window)!=='undefined'?alert:gs.info)(\"Capability.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Capability.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Capability.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Capability.module GETTERS AND SETTERS **********************/\n\tmodule(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._module = v;\n\t\t\tthis._module_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._module;\n\t\t}\n\t}\n\n\t/************* Capability.capability_Requirements GETTERS AND SETTERS **********************/\n\tcapability_Requirements(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._capability_Requirements = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._capability_Requirements_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._capability_Requirements;\n\t\t}\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = undefined || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\tif (this._module) ret += /*(this._module_coop || '=') + */ this.module()._toEQuery(sPath + 'module.');\n\n\t\t(this.capability_Requirements() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYRequirement.capability,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Capability._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn new shs_arbfw_Capability()._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Capability._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Capability._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromGlideRecord(obj) {\n\t\tif (!obj) return null;\n\t\tif (obj.isValidRecord()) {\n\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Capability\" != 'ecc_queue' && obj.source == \"shs_arbfw_Capability\") {\n\t\t\t\tobj.state = \"processing\";\n\t\t\t\tobj.update();\n\n\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\tresp.queue = 'output';\n\t\t\t\tresp.agent = obj.agent;\n\t\t\t\tresp.topic = obj.topic;\n\t\t\t\tresp.name = obj.name;\n\t\t\t\tresp.source = obj.source;\n\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\tlet ret = new shs_arbfw_Capability()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t});\n\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t}\n\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\tresp.insert();\n\n\t\t\t\tobj.state = \"processed\";\n\t\t\t\tobj.update();\n\t\t\t\treturn resp;\n\t\t\t} else {\n\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\tmodule: obj.getValue(\"module\"),\n\n\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tobj.query();\n\t\t\tlet grRet = [];\n\t\t\twhile (obj.next()) grRet.push(this._fromGlideRecord(obj));\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Capability._fromGlideRecord(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\treturn grRet;\n\t\t}\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\tundefined\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_Capability()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\tif (/((([A-Za-z]{3,9}:(?:/ / ) ? )( ? : [-;: &= +$, w] + @) ? [A - Za - z0 - 9. - ] + | ( ? : www. | [-;: &= +$, w] + @)[A - Za - z0 - 9. - ] + )(( ? : /[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)/g.test(obj)) {\n\t\t\tvar msg = new sn_ws.RESTMessageV2();\n\t\t\tmsg.setEndpoint(obj);\n\t\t\tmsg.setRequestHeader('Content-Type', 'application/json');\n\t\t\tmsg.setHttpMethod('get');\n\t\t\treturn this._fromDocument(msg.execute().getBody());\n\t\t}\n\n\t\ttry {\n\t\t\tobj = JSON.parse(obj);\n\t\t} catch (ex) {\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Capability._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\tlet _obj = {\n\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))\n\t\t\t};\n\t\t\t_obj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(this))] = obj;\n\t\t\tobj = _obj;\n\t\t}\n\t\treturn this._fromDocument(obj);\n\t}\n\telse if (typeof(obj) === 'object') {\n\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\treturn this._fromGlideRecord(obj);\n\t\t} else if (obj._fromDocument) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Capability._fromDocument(): \" + \"redundent call\");\n\t\t\treturn obj;\n\t\t} else if (Array.isArray(obj)) {\n\t\t\treturn obj.map(function(o) {\n\t\t\t\treturn new shs_arbfw_Capability()._fromDocument(o)\n\t\t\t});\n\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(obj))));\n\n\t\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Capability._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.module) !== 'undefined') {\n\n\t\t\t\t\tthis.module(new shs_arbfw_Module()._fromDocument(obj.module));\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.capability_Requirements) !== 'undefined') this.capability_Requirements(new shs_arbfw_Requirement()._fromDocument(obj.capability_Requirements));\n\n\t\t\t} else { // if(obj.constructor.name==\"Capability\"){\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Capability._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t}\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Capability._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\treturn null;\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Capability._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Capability._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Capability._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\treturn this;\n}\n\n_insertAssert() {\n\treturn true;\n}\n\n_updateAssert() {\n\treturn true;\n}\n\n_storeAssert() {\n\treturn true;\n}\n\n_findAssert() {\n\treturn true;\n}\n\n_new(c) {\n\n\treturn new shs_arbfw_Platform._new(c);\n\n}\n\n_toDocument(arFields) {\n\n\tlet ret = undefined || {};\n\n\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tret.active = this.active();\n\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tret.enabled = this.enabled();\n\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tret.code = this.code();\n\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tret.order = this.order();\n\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tret.date = this.date();\n\n\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tret.name = this.name();\n\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tret.remark = this.remark();\n\n\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t}\n\n\tif (typeof(this._module) !== 'undefined') {\n\t\tret.module = this.module();\n\n\t\tif (ret.module) {\n\t\t\tret.module = ret.module._toDocument();\n\t\t\tif (typeof(ret.module) === 'object' && !Object.keys(ret.module).length) ret.module = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this.capability_Requirements()) !== 'undefined') ret.capability_Requirements = this.capability_Requirements().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\treturn !arFields.find(function(_k) {\n\t\t\treturn _k == k;\n\t\t});\n\t}).forEach(function(k) {\n\t\tdelete ret[k];\n\t});\n\n\treturn ret;\n}\n\n_unique(keys, ret) {\n\tret = ret || new shs_arbfw_Capability();\n\n\tundefined\n\n\t// if(this.Id) ret.Id = this.Id;\n\tif (!keys) {\n\n\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t} else {\n\n\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t\tif (keys.indexOf(\"module\") >= 0 && typeof(this.module()) !== 'undefined') ret.module(this.module()._unique());\n\n\t}\n\n\treturn ret;\n}\n\n_query(gq) {\n\tlet arFields = Object.keys(global.Schema.of('x_1790593_arboard_capability', ['*'])['x_1790593_arboard_capability']);\n\n\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('x_1790593_arboard_capability');\n\n\tundefined\n\n\tlet idf = ((function(r) {\n\t\tlet ret = 'sys_id';\n\t\tif (typeof(r.__idField) === 'function') {\n\t\t\tret = r.__idField();\n\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\tret = r.__idField || this.__idField();\n\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\tret = 'Id';\n\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\tret = 'sys_id';\n\t\t}\n\t\treturn ret;\n\t})(this));\n\tif (idf == 'Id') idf = 'sys_id';\n\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tlet coop = this._active_coop || '=';\n\n\t\tlet v = this.active();\n\n\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Capability._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tlet coop = this._enabled_coop || '=';\n\n\t\tlet v = this.enabled();\n\n\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Capability._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tlet coop = this._code_coop || '=';\n\n\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.code();\n\n\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Capability._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tlet coop = this._order_coop || '=';\n\n\t\tlet v = this.order();\n\n\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Capability._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tlet coop = this._date_coop || '=';\n\n\t\tlet v = this.date();\n\n\t\tif (v) {\n\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t}\n\n\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Capability._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tlet coop = this._name_coop || '=';\n\n\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.name();\n\n\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Capability._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tlet coop = this._remark_coop || '=';\n\n\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.remark();\n\n\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Capability._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._module) !== 'undefined') {\n\t\tlet coop = this._module_coop || '=';\n\n\t\tlet v = this.module();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Capability\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Capability._query(): \"+ \"module \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Capability._query(): \" + \"module[module] resuled in undefined: \" + JSON.stringify(this.module()));\n\t\t}\n\n\t\tif (arFields.indexOf('module') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Capability._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('module');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('module');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('module', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Capability._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\treturn this._queryGQ;\n}\n\n_save(obj) {\n\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\treturn new shs_arbfw_Capability()._save(o)\n\t});\n\n\tlet _obj = {};\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Capability._save(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\tObject.keys(obj).filter(function(k) {\n\t\treturn Object.keys(global.Schema.of('x_1790593_arboard_capability', ['*'])['x_1790593_arboard_capability']).filter(function(_k) {\n\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t}).indexOf(k.toLowerCase()) >= 0\n\t}).forEach(function(k) {\n\t\t_obj[k.toLowerCase()] = obj[k]\n\t});\n\n\tObject.keys(_obj).forEach(function(k) {\n\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Capability._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tdelete _obj[k];\n\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Capability._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t}\n\t});\n\n\tlet _this = null;\n\tif (obj.__keys) {\n\t\tlet kObj = {};\n\t\tkObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(_obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))));\n\t\tobj.__keys.forEach(function(k) {\n\t\t\tkObj[k] = _obj[k]\n\t\t});\n\t\t_this = new shs_arbfw_Capability()._fromDocument(kObj);\n\t} else {\n\t\t_this = new shs_arbfw_Capability()._fromDocument(_obj)._unique();\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Capability._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\tdelete _obj.__idField;\n\n\ttry {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Capability._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\tObject.keys(_obj).filter(function(k) {\n\t\t\treturn k.toLowerCase() != k;\n\t\t}).forEach(function(k) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Capability._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tvar lk = k.toLowerCase();\n\t\t\t_obj[lk] = _obj[k];\n\t\t\tdelete _obj[k];\n\t\t});\n\n\t\tlet gq = new global.GlideQuery(obj.__type || 'x_1790593_arboard_capability');\n\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Capability._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\tif (_obj.sys_id) {\n\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t} else {\n\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\tgq = gq.insert(_obj);\n\t\t}\n\t\tlet _fObj = {};\n\t\t_fObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))));\n\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('x_1790593_arboard_capability', ['*'])['x_1790593_arboard_capability']))));\n\t} catch (ex) {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Capability._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Capability._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\treturn this;\n\t}\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Capability._save(): \" + \"obj.capability_Requirements: \" + JSON.stringify(obj.capability_Requirements, null, 4));\n\tif (Array.isArray(obj.capability_Requirements)) this.capability_Requirements(obj.capability_Requirements.map(function(ta) {\n\t\treturn new shs_arbfw_Requirement()._save(ta)\n\t}));\n\n\treturn this;\n}\n\n/************* Capability.store() **********************/\nstore(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Capability.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Capability.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Capability.store(): \" + \"executing locally \");\n\n\t\t// store locally\n\t\treturn this._save(this._toDocument());\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Capability.findAll() **********************/\nfindAll(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Capability.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Capability.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Capability.findAll(): \" + \"executing locally \");\n\n\t\t// findAll locally\n\t\tlet gr = new GlideRecord('x_1790593_arboard_capability');\n\t\tgr.addEncodedQuery(this._toEQuery());\n\t\treturn this._fromDocument(gr);\n\n\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('x_1790593_arboard_capability', ['*'])['x_1790593_arboard_capability'])));\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Capability.find() **********************/\nfind(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Capability.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Capability.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Capability.find(): \" + \"executing locally \");\n\n\t\tlet ret = this.findAll();\n\t\treturn ret.length ? ret[0] : null;\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"scriptFile_Script_Compatibilitys":[{"active":true,"enabled":true}],"client_callable":true,"sys_name":"shs_arbfw_Project","api_name":"x_1790593_arboard.shs_arbfw_Project","name":"shs_arbfw_Project","script":"class shs_arbfw_Project extends global.AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"\";\n\t\tthis.__type = \"shs_arbfw_Project\";\n\t\tthis.__alias = \"shs_arbfw\";\n\t\tthis.__scope = \"shs_arbfw\";\n\t}\n\n\t/************* Project.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Project.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Project.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Project.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Project.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//(typeof(window)!=='undefined'?alert:gs.info)(\"Project.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Project.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Project.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Project.team GETTERS AND SETTERS **********************/\n\tteam(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._team = v;\n\t\t\tthis._team_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._team;\n\t\t}\n\t}\n\n\t/************* Project.budget GETTERS AND SETTERS **********************/\n\tbudget(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._budget = v;\n\t\t\tthis._budget_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._budget;\n\t\t}\n\t}\n\n\t/************* Project.project_Requirements GETTERS AND SETTERS **********************/\n\tproject_Requirements(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._project_Requirements = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._project_Requirements_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._project_Requirements;\n\t\t}\n\t}\n\n\t/************* Project.project_Meetings GETTERS AND SETTERS **********************/\n\tproject_Meetings(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._project_Meetings = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._project_Meetings_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._project_Meetings;\n\t\t}\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = undefined || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\tif (this._team) ret += /*(this._team_coop || '=') + */ this.team()._toEQuery(sPath + 'team.');\n\n\t\tif (this._budget) ret += /*(this._budget_coop || '=') + */ this.budget()._toEQuery(sPath + 'budget.');\n\n\t\t(this.project_Requirements() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYRequirement.project,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(this.project_Meetings() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYMeeting.project,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Project._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn new shs_arbfw_Project()._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Project._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tcase \"actualCost\": {\n\t\t\t\treturn this.actualCost(payload[\"tillDate\"], );\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Project._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromGlideRecord(obj) {\n\t\tif (!obj) return null;\n\t\tif (obj.isValidRecord()) {\n\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Project\" != 'ecc_queue' && obj.source == \"shs_arbfw_Project\") {\n\t\t\t\tobj.state = \"processing\";\n\t\t\t\tobj.update();\n\n\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\tresp.queue = 'output';\n\t\t\t\tresp.agent = obj.agent;\n\t\t\t\tresp.topic = obj.topic;\n\t\t\t\tresp.name = obj.name;\n\t\t\t\tresp.source = obj.source;\n\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\tlet ret = new shs_arbfw_Project()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t});\n\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t}\n\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\tresp.insert();\n\n\t\t\t\tobj.state = \"processed\";\n\t\t\t\tobj.update();\n\t\t\t\treturn resp;\n\t\t\t} else {\n\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\tteam: obj.getValue(\"team\"),\n\n\t\t\t\t\tbudget: obj.getValue(\"budget\"),\n\n\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tobj.query();\n\t\t\tlet grRet = [];\n\t\t\twhile (obj.next()) grRet.push(this._fromGlideRecord(obj));\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Project._fromGlideRecord(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\treturn grRet;\n\t\t}\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\tundefined\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_Project()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\tif (/((([A-Za-z]{3,9}:(?:/ / ) ? )( ? : [-;: &= +$, w] + @) ? [A - Za - z0 - 9. - ] + | ( ? : www. | [-;: &= +$, w] + @)[A - Za - z0 - 9. - ] + )(( ? : /[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)/g.test(obj)) {\n\t\t\tvar msg = new sn_ws.RESTMessageV2();\n\t\t\tmsg.setEndpoint(obj);\n\t\t\tmsg.setRequestHeader('Content-Type', 'application/json');\n\t\t\tmsg.setHttpMethod('get');\n\t\t\treturn this._fromDocument(msg.execute().getBody());\n\t\t}\n\n\t\ttry {\n\t\t\tobj = JSON.parse(obj);\n\t\t} catch (ex) {\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Project._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\tlet _obj = {\n\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))\n\t\t\t};\n\t\t\t_obj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(this))] = obj;\n\t\t\tobj = _obj;\n\t\t}\n\t\treturn this._fromDocument(obj);\n\t}\n\telse if (typeof(obj) === 'object') {\n\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\treturn this._fromGlideRecord(obj);\n\t\t} else if (obj._fromDocument) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Project._fromDocument(): \" + \"redundent call\");\n\t\t\treturn obj;\n\t\t} else if (Array.isArray(obj)) {\n\t\t\treturn obj.map(function(o) {\n\t\t\t\treturn new shs_arbfw_Project()._fromDocument(o)\n\t\t\t});\n\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(obj))));\n\n\t\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Project._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.team) !== 'undefined') {\n\n\t\t\t\t\tthis.team(new shs_arbfw_Team()._fromDocument(obj.team));\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.budget) !== 'undefined') {\n\n\t\t\t\t\tthis.budget(new shs_arbfw_Budget()._fromDocument(obj.budget));\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.project_Requirements) !== 'undefined') this.project_Requirements(new shs_arbfw_Requirement()._fromDocument(obj.project_Requirements));\n\n\t\t\t\tif (typeof(obj.project_Meetings) !== 'undefined') this.project_Meetings(new shs_arbfw_Meeting()._fromDocument(obj.project_Meetings));\n\n\t\t\t} else { // if(obj.constructor.name==\"Project\"){\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Project._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t}\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Project._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\treturn null;\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Project._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Project._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Project._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\treturn this;\n}\n\n_insertAssert() {\n\treturn true;\n}\n\n_updateAssert() {\n\treturn true;\n}\n\n_storeAssert() {\n\treturn true;\n}\n\n_findAssert() {\n\treturn true;\n}\n\n_new(c) {\n\n\treturn new shs_arbfw_Platform._new(c);\n\n}\n\n_toDocument(arFields) {\n\n\tlet ret = undefined || {};\n\n\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tret.active = this.active();\n\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tret.enabled = this.enabled();\n\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tret.code = this.code();\n\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tret.order = this.order();\n\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tret.date = this.date();\n\n\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tret.name = this.name();\n\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tret.remark = this.remark();\n\n\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t}\n\n\tif (typeof(this._team) !== 'undefined') {\n\t\tret.team = this.team();\n\n\t\tif (ret.team) {\n\t\t\tret.team = ret.team._toDocument();\n\t\t\tif (typeof(ret.team) === 'object' && !Object.keys(ret.team).length) ret.team = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this._budget) !== 'undefined') {\n\t\tret.budget = this.budget();\n\n\t\tif (ret.budget) {\n\t\t\tret.budget = ret.budget._toDocument();\n\t\t\tif (typeof(ret.budget) === 'object' && !Object.keys(ret.budget).length) ret.budget = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this.project_Requirements()) !== 'undefined') ret.project_Requirements = this.project_Requirements().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (typeof(this.project_Meetings()) !== 'undefined') ret.project_Meetings = this.project_Meetings().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\treturn !arFields.find(function(_k) {\n\t\t\treturn _k == k;\n\t\t});\n\t}).forEach(function(k) {\n\t\tdelete ret[k];\n\t});\n\n\treturn ret;\n}\n\n_unique(keys, ret) {\n\tret = ret || new shs_arbfw_Project();\n\n\tundefined\n\n\t// if(this.Id) ret.Id = this.Id;\n\tif (!keys) {\n\n\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t} else {\n\n\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t\tif (keys.indexOf(\"team\") >= 0 && typeof(this.team()) !== 'undefined') ret.team(this.team()._unique());\n\n\t\tif (keys.indexOf(\"budget\") >= 0 && typeof(this.budget()) !== 'undefined') ret.budget(this.budget()._unique());\n\n\t}\n\n\treturn ret;\n}\n\n_query(gq) {\n\tlet arFields = Object.keys(global.Schema.of('x_1790593_arboard_project', ['*'])['x_1790593_arboard_project']);\n\n\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('x_1790593_arboard_project');\n\n\tundefined\n\n\tlet idf = ((function(r) {\n\t\tlet ret = 'sys_id';\n\t\tif (typeof(r.__idField) === 'function') {\n\t\t\tret = r.__idField();\n\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\tret = r.__idField || this.__idField();\n\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\tret = 'Id';\n\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\tret = 'sys_id';\n\t\t}\n\t\treturn ret;\n\t})(this));\n\tif (idf == 'Id') idf = 'sys_id';\n\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tlet coop = this._active_coop || '=';\n\n\t\tlet v = this.active();\n\n\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Project._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tlet coop = this._enabled_coop || '=';\n\n\t\tlet v = this.enabled();\n\n\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Project._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tlet coop = this._code_coop || '=';\n\n\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.code();\n\n\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Project._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tlet coop = this._order_coop || '=';\n\n\t\tlet v = this.order();\n\n\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Project._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tlet coop = this._date_coop || '=';\n\n\t\tlet v = this.date();\n\n\t\tif (v) {\n\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t}\n\n\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Project._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tlet coop = this._name_coop || '=';\n\n\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.name();\n\n\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Project._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tlet coop = this._remark_coop || '=';\n\n\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.remark();\n\n\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Project._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._team) !== 'undefined') {\n\t\tlet coop = this._team_coop || '=';\n\n\t\tlet v = this.team();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Project\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Project._query(): \"+ \"team \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Project._query(): \" + \"team[team] resuled in undefined: \" + JSON.stringify(this.team()));\n\t\t}\n\n\t\tif (arFields.indexOf('team') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Project._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('team');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('team');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('team', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._budget) !== 'undefined') {\n\t\tlet coop = this._budget_coop || '=';\n\n\t\tlet v = this.budget();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Project\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Project._query(): \"+ \"budget \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Project._query(): \" + \"budget[budget] resuled in undefined: \" + JSON.stringify(this.budget()));\n\t\t}\n\n\t\tif (arFields.indexOf('budget') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Project._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('budget');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('budget');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('budget', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Project._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\treturn this._queryGQ;\n}\n\n_save(obj) {\n\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\treturn new shs_arbfw_Project()._save(o)\n\t});\n\n\tlet _obj = {};\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Project._save(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\tObject.keys(obj).filter(function(k) {\n\t\treturn Object.keys(global.Schema.of('x_1790593_arboard_project', ['*'])['x_1790593_arboard_project']).filter(function(_k) {\n\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t}).indexOf(k.toLowerCase()) >= 0\n\t}).forEach(function(k) {\n\t\t_obj[k.toLowerCase()] = obj[k]\n\t});\n\n\tObject.keys(_obj).forEach(function(k) {\n\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Project._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tdelete _obj[k];\n\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Project._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t}\n\t});\n\n\tlet _this = null;\n\tif (obj.__keys) {\n\t\tlet kObj = {};\n\t\tkObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(_obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))));\n\t\tobj.__keys.forEach(function(k) {\n\t\t\tkObj[k] = _obj[k]\n\t\t});\n\t\t_this = new shs_arbfw_Project()._fromDocument(kObj);\n\t} else {\n\t\t_this = new shs_arbfw_Project()._fromDocument(_obj)._unique();\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Project._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\tdelete _obj.__idField;\n\n\ttry {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Project._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\tObject.keys(_obj).filter(function(k) {\n\t\t\treturn k.toLowerCase() != k;\n\t\t}).forEach(function(k) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Project._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tvar lk = k.toLowerCase();\n\t\t\t_obj[lk] = _obj[k];\n\t\t\tdelete _obj[k];\n\t\t});\n\n\t\tlet gq = new global.GlideQuery(obj.__type || 'x_1790593_arboard_project');\n\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Project._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\tif (_obj.sys_id) {\n\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t} else {\n\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\tgq = gq.insert(_obj);\n\t\t}\n\t\tlet _fObj = {};\n\t\t_fObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))));\n\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('x_1790593_arboard_project', ['*'])['x_1790593_arboard_project']))));\n\t} catch (ex) {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Project._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Project._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\treturn this;\n\t}\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Project._save(): \" + \"obj.project_Requirements: \" + JSON.stringify(obj.project_Requirements, null, 4));\n\tif (Array.isArray(obj.project_Requirements)) this.project_Requirements(obj.project_Requirements.map(function(ta) {\n\t\treturn new shs_arbfw_Requirement()._save(ta)\n\t}));\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Project._save(): \" + \"obj.project_Meetings: \" + JSON.stringify(obj.project_Meetings, null, 4));\n\tif (Array.isArray(obj.project_Meetings)) this.project_Meetings(obj.project_Meetings.map(function(ta) {\n\t\treturn new shs_arbfw_Meeting()._save(ta)\n\t}));\n\n\treturn this;\n}\n\n/************* Project.store() **********************/\nstore(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Project.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Project.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Project.store(): \" + \"executing locally \");\n\n\t\t// store locally\n\t\treturn this._save(this._toDocument());\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Project.findAll() **********************/\nfindAll(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Project.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Project.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Project.findAll(): \" + \"executing locally \");\n\n\t\t// findAll locally\n\t\tlet gr = new GlideRecord('x_1790593_arboard_project');\n\t\tgr.addEncodedQuery(this._toEQuery());\n\t\treturn this._fromDocument(gr);\n\n\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('x_1790593_arboard_project', ['*'])['x_1790593_arboard_project'])));\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Project.find() **********************/\nfind(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Project.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Project.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Project.find(): \" + \"executing locally \");\n\n\t\tlet ret = this.findAll();\n\t\treturn ret.length ? ret[0] : null;\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Project.actualCost() **********************/\nactualCost(__event, tillDate) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (typeof(evJSON.tillDate) !== 'undefined') {\n\t\t\ttillDate = evJSON.tillDate;\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Project.actualCost(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Project.actualCost(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = evJSON;\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Project.actualCost(): \" + \"executing locally \");\n\n\t\tif (typeof(this.getParameter) === 'function' && typeof(tillDate) === 'undefined' && typeof(this.getParameter('tillDate')) !== 'undefined') {\n\t\t\ttillDate = this.getParameter('tillDate');\n\t\t}\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(str(answer));\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"scriptFile_Script_Compatibilitys":[{"active":true,"enabled":true}],"client_callable":true,"sys_name":"shs_arbfw_appd_Script_Compatibility","api_name":"x_1790593_arboard.shs_arbfw_appd_Script_Compatibility","name":"shs_arbfw_appd_Script_Compatibility","script":"class shs_arbfw_appd_Script_Compatibility extends global.AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"Application Designer\";\n\t\tthis.__type = \"shs_arbfw_appd_Script_Compatibility\";\n\t\tthis.__alias = \"shs_arbfw_appd\";\n\t\tthis.__scope = \"shs_arbfw\";\n\t}\n\n\t/************* Script_Compatibility.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Script_Compatibility.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Script_Compatibility.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Script_Compatibility.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Script_Compatibility.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//(typeof(window)!=='undefined'?alert:gs.info)(\"Script_Compatibility.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Script_Compatibility.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Script_Compatibility.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Script_Compatibility.scriptFile GETTERS AND SETTERS **********************/\n\tscriptFile(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._scriptFile = v;\n\t\t\tthis._scriptFile_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._scriptFile;\n\t\t}\n\t}\n\n\t/************* Script_Compatibility.table EF: GETTERS AND SETTERS **********************/\n\ttable() {\n\t\treturn /*this.ef_table = */ ((\n\t\t\tfunction() {\n\t\t\t\ttry {\n\n\t\t\t\t\tlet __ret = undefined;\n\n\t\t\t\t\t__ret = \"sys_script_include\";\n\n\t\t\t\t\tif (typeof(__ret) === 'string' && __ret.startsWith(\"s(\") && __ret.endsWith(\")\")) {\n\t\t\t\t\t\t__ret = this.runScript(__ret.slice(2, -1));\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof(__ret) === \"function\") {\n\t\t\t\t\t\t__ret = __ret(this);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn __ret;\n\n\t\t\t\t} catch (_vOfEx) {\n\t\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Script_Compatibility.table(): \" + 'valueOf', _vOfEx, JSON.parse(((typeof(this) !== \"undefined\" && typeof(this._atob) !== \"undefined\") ? this._atob : (typeof(_FrEMD) !== \"undefined\" ? _FrEMD._atob : atob))(`eyJTZXJ2aWNlTm93Ijoic3lzX3NjcmlwdF9pbmNsdWRlIn0=`), (key, value) => {\n\t\t\t\t\t\tif (typeof(value) === \"string\" && value.indexOf(\"=>\") > 0) return eval(\"(\" + value + \")\");\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t}\n\t\t)());\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = undefined || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\tif (this._scriptFile) ret += /*(this._scriptFile_coop || '=') + */ this.scriptFile()._toEQuery(sPath + 'scriptFile.');\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Script_Compatibility._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn new shs_arbfw_appd_Script_Compatibility()._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Script_Compatibility._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Script_Compatibility._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromGlideRecord(obj) {\n\t\tif (!obj) return null;\n\t\tif (obj.isValidRecord()) {\n\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Script_Compatibility\" != 'ecc_queue' && obj.source == \"shs_arbfw_appd_Script_Compatibility\") {\n\t\t\t\tobj.state = \"processing\";\n\t\t\t\tobj.update();\n\n\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\tresp.queue = 'output';\n\t\t\t\tresp.agent = obj.agent;\n\t\t\t\tresp.topic = obj.topic;\n\t\t\t\tresp.name = obj.name;\n\t\t\t\tresp.source = obj.source;\n\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\tlet ret = new shs_arbfw_appd_Script_Compatibility()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t});\n\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t}\n\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\tresp.insert();\n\n\t\t\t\tobj.state = \"processed\";\n\t\t\t\tobj.update();\n\t\t\t\treturn resp;\n\t\t\t} else {\n\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\tscriptFile: obj.getValue(\"scriptFile\"),\n\n\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tobj.query();\n\t\t\tlet grRet = [];\n\t\t\twhile (obj.next()) grRet.push(this._fromGlideRecord(obj));\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Script_Compatibility._fromGlideRecord(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\treturn grRet;\n\t\t}\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\tundefined\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_appd_Script_Compatibility()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\tif (/((([A-Za-z]{3,9}:(?:/ / ) ? )( ? : [-;: &= +$, w] + @) ? [A - Za - z0 - 9. - ] + | ( ? : www. | [-;: &= +$, w] + @)[A - Za - z0 - 9. - ] + )(( ? : /[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)/g.test(obj)) {\n\t\t\tvar msg = new sn_ws.RESTMessageV2();\n\t\t\tmsg.setEndpoint(obj);\n\t\t\tmsg.setRequestHeader('Content-Type', 'application/json');\n\t\t\tmsg.setHttpMethod('get');\n\t\t\treturn this._fromDocument(msg.execute().getBody());\n\t\t}\n\n\t\ttry {\n\t\t\tobj = JSON.parse(obj);\n\t\t} catch (ex) {\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Script_Compatibility._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\tlet _obj = {\n\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))\n\t\t\t};\n\t\t\t_obj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(this))] = obj;\n\t\t\tobj = _obj;\n\t\t}\n\t\treturn this._fromDocument(obj);\n\t}\n\telse if (typeof(obj) === 'object') {\n\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\treturn this._fromGlideRecord(obj);\n\t\t} else if (obj._fromDocument) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Script_Compatibility._fromDocument(): \" + \"redundent call\");\n\t\t\treturn obj;\n\t\t} else if (Array.isArray(obj)) {\n\t\t\treturn obj.map(function(o) {\n\t\t\t\treturn new shs_arbfw_appd_Script_Compatibility()._fromDocument(o)\n\t\t\t});\n\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(obj))));\n\n\t\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Script_Compatibility._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.scriptFile) !== 'undefined') {\n\n\t\t\t\t\tthis.scriptFile(new shs_arbfw_appd_Script_File()._fromDocument(obj.scriptFile));\n\t\t\t\t}\n\n\t\t\t} else { // if(obj.constructor.name==\"Script_Compatibility\"){\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Script_Compatibility._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t}\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Script_Compatibility._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\treturn null;\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Script_Compatibility._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Script_Compatibility._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Script_Compatibility._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\treturn this;\n}\n\n_insertAssert() {\n\treturn true;\n}\n\n_updateAssert() {\n\treturn true;\n}\n\n_storeAssert() {\n\treturn true;\n}\n\n_findAssert() {\n\treturn true;\n}\n\n_new(c) {\n\n\treturn new shs_arbfw_appd_Platform._new(c);\n\n}\n\n_toDocument(arFields) {\n\n\tlet ret = undefined || {};\n\n\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tret.active = this.active();\n\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tret.enabled = this.enabled();\n\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tret.code = this.code();\n\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tret.order = this.order();\n\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tret.date = this.date();\n\n\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tret.name = this.name();\n\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tret.remark = this.remark();\n\n\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t}\n\n\tif (typeof(this._scriptFile) !== 'undefined') {\n\t\tret.scriptFile = this.scriptFile();\n\n\t\tif (ret.scriptFile) {\n\t\t\tret.scriptFile = ret.scriptFile._toDocument();\n\t\t\tif (typeof(ret.scriptFile) === 'object' && !Object.keys(ret.scriptFile).length) ret.scriptFile = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this.table()) !== 'undefined') ret.table = this.table();\n\n\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\treturn !arFields.find(function(_k) {\n\t\t\treturn _k == k;\n\t\t});\n\t}).forEach(function(k) {\n\t\tdelete ret[k];\n\t});\n\n\treturn ret;\n}\n\n_unique(keys, ret) {\n\tret = ret || new shs_arbfw_appd_Script_Compatibility();\n\n\tundefined\n\n\t// if(this.Id) ret.Id = this.Id;\n\tif (!keys) {\n\n\t\tif (typeof(this.scriptFile()) !== 'undefined') ret.scriptFile(this.scriptFile()._unique());\n\n\t} else {\n\n\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t\tif (keys.indexOf(\"scriptFile\") >= 0 && typeof(this.scriptFile()) !== 'undefined') ret.scriptFile(this.scriptFile()._unique());\n\n\t}\n\n\treturn ret;\n}\n\n_query(gq) {\n\tlet arFields = Object.keys(global.Schema.of('sys_es_latest_script', ['*'])['sys_es_latest_script']);\n\n\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('sys_es_latest_script');\n\n\tundefined\n\n\tlet idf = ((function(r) {\n\t\tlet ret = 'sys_id';\n\t\tif (typeof(r.__idField) === 'function') {\n\t\t\tret = r.__idField();\n\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\tret = r.__idField || this.__idField();\n\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\tret = 'Id';\n\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\tret = 'sys_id';\n\t\t}\n\t\treturn ret;\n\t})(this));\n\tif (idf == 'Id') idf = 'sys_id';\n\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tlet coop = this._active_coop || '=';\n\n\t\tlet v = this.active();\n\n\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Script_Compatibility._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tlet coop = this._enabled_coop || '=';\n\n\t\tlet v = this.enabled();\n\n\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Script_Compatibility._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tlet coop = this._code_coop || '=';\n\n\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.code();\n\n\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Script_Compatibility._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tlet coop = this._order_coop || '=';\n\n\t\tlet v = this.order();\n\n\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Script_Compatibility._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tlet coop = this._date_coop || '=';\n\n\t\tlet v = this.date();\n\n\t\tif (v) {\n\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t}\n\n\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Script_Compatibility._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tlet coop = this._name_coop || '=';\n\n\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.name();\n\n\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Script_Compatibility._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tlet coop = this._remark_coop || '=';\n\n\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.remark();\n\n\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Script_Compatibility._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._scriptFile) !== 'undefined') {\n\t\tlet coop = this._scriptFile_coop || '=';\n\n\t\tlet v = this.scriptFile();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Script Compatibility\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Script_Compatibility._query(): \"+ \"scriptFile \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Script_Compatibility._query(): \" + \"scriptFile[scriptFile] resuled in undefined: \" + JSON.stringify(this.scriptFile()));\n\t\t}\n\n\t\tif (arFields.indexOf('scriptfile') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Script_Compatibility._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('scriptfile');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('scriptfile');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('scriptfile', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Script_Compatibility._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\treturn this._queryGQ;\n}\n\n_save(obj) {\n\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\treturn new shs_arbfw_appd_Script_Compatibility()._save(o)\n\t});\n\n\tlet _obj = {};\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Script_Compatibility._save(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\tObject.keys(obj).filter(function(k) {\n\t\treturn Object.keys(global.Schema.of('sys_es_latest_script', ['*'])['sys_es_latest_script']).filter(function(_k) {\n\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t}).indexOf(k.toLowerCase()) >= 0\n\t}).forEach(function(k) {\n\t\t_obj[k.toLowerCase()] = obj[k]\n\t});\n\n\tObject.keys(_obj).forEach(function(k) {\n\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Script_Compatibility._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tdelete _obj[k];\n\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Script_Compatibility._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t}\n\t});\n\n\tlet _this = null;\n\tif (obj.__keys) {\n\t\tlet kObj = {};\n\t\tkObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(_obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))));\n\t\tobj.__keys.forEach(function(k) {\n\t\t\tkObj[k] = _obj[k]\n\t\t});\n\t\t_this = new shs_arbfw_appd_Script_Compatibility()._fromDocument(kObj);\n\t} else {\n\t\t_this = new shs_arbfw_appd_Script_Compatibility()._fromDocument(_obj)._unique();\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Script_Compatibility._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\tdelete _obj.__idField;\n\n\ttry {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Script_Compatibility._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\tObject.keys(_obj).filter(function(k) {\n\t\t\treturn k.toLowerCase() != k;\n\t\t}).forEach(function(k) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Script_Compatibility._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tvar lk = k.toLowerCase();\n\t\t\t_obj[lk] = _obj[k];\n\t\t\tdelete _obj[k];\n\t\t});\n\n\t\tlet gq = new global.GlideQuery(obj.__type || 'sys_es_latest_script');\n\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Script_Compatibility._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\tif (_obj.sys_id) {\n\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t} else {\n\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\tgq = gq.insert(_obj);\n\t\t}\n\t\tlet _fObj = {};\n\t\t_fObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))));\n\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('sys_es_latest_script', ['*'])['sys_es_latest_script']))));\n\t} catch (ex) {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Script_Compatibility._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Script_Compatibility._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\treturn this;\n\t}\n\n\treturn this;\n}\n\n/************* Script_Compatibility.store() **********************/\nstore(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Script_Compatibility.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Script_Compatibility.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Script_Compatibility.store(): \" + \"executing locally \");\n\n\t\t// store locally\n\t\treturn this._save(this._toDocument());\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Script_Compatibility.findAll() **********************/\nfindAll(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Script_Compatibility.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Script_Compatibility.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Script_Compatibility.findAll(): \" + \"executing locally \");\n\n\t\t// findAll locally\n\t\tlet gr = new GlideRecord('sys_es_latest_script');\n\t\tgr.addEncodedQuery(this._toEQuery());\n\t\treturn this._fromDocument(gr);\n\n\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('sys_es_latest_script', ['*'])['sys_es_latest_script'])));\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Script_Compatibility.find() **********************/\nfind(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Script_Compatibility.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Script_Compatibility.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Script_Compatibility.find(): \" + \"executing locally \");\n\n\t\tlet ret = this.findAll();\n\t\treturn ret.length ? ret[0] : null;\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"scriptFile_Script_Compatibilitys":[{"active":true,"enabled":true}],"client_callable":true,"sys_name":"shs_arbfw_appd_Action_Step","api_name":"x_1790593_arboard.shs_arbfw_appd_Action_Step","name":"shs_arbfw_appd_Action_Step","script":"class shs_arbfw_appd_Action_Step extends global.AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"Application Designer\";\n\t\tthis.__type = \"shs_arbfw_appd_Action_Step\";\n\t\tthis.__alias = \"shs_arbfw_appd\";\n\t\tthis.__scope = \"shs_arbfw\";\n\t}\n\n\t/************* Action_Step.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Action_Step.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Action_Step.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Action_Step.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Action_Step.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//(typeof(window)!=='undefined'?alert:gs.info)(\"Action_Step.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Action_Step.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Action_Step.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Action_Step.action GETTERS AND SETTERS **********************/\n\taction(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._action = v;\n\t\t\tthis._action_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._action;\n\t\t}\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = undefined || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\tif (this._action) ret += /*(this._action_coop || '=') + */ this.action()._toEQuery(sPath + 'action.');\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Step._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn new shs_arbfw_appd_Action_Step()._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Step._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Step._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromGlideRecord(obj) {\n\t\tif (!obj) return null;\n\t\tif (obj.isValidRecord()) {\n\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Action_Step\" != 'ecc_queue' && obj.source == \"shs_arbfw_appd_Action_Step\") {\n\t\t\t\tobj.state = \"processing\";\n\t\t\t\tobj.update();\n\n\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\tresp.queue = 'output';\n\t\t\t\tresp.agent = obj.agent;\n\t\t\t\tresp.topic = obj.topic;\n\t\t\t\tresp.name = obj.name;\n\t\t\t\tresp.source = obj.source;\n\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\tlet ret = new shs_arbfw_appd_Action_Step()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t});\n\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t}\n\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\tresp.insert();\n\n\t\t\t\tobj.state = \"processed\";\n\t\t\t\tobj.update();\n\t\t\t\treturn resp;\n\t\t\t} else {\n\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\taction: obj.getValue(\"action\"),\n\n\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tobj.query();\n\t\t\tlet grRet = [];\n\t\t\twhile (obj.next()) grRet.push(this._fromGlideRecord(obj));\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Action_Step._fromGlideRecord(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\treturn grRet;\n\t\t}\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\tundefined\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_appd_Action_Step()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\tif (/((([A-Za-z]{3,9}:(?:/ / ) ? )( ? : [-;: &= +$, w] + @) ? [A - Za - z0 - 9. - ] + | ( ? : www. | [-;: &= +$, w] + @)[A - Za - z0 - 9. - ] + )(( ? : /[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)/g.test(obj)) {\n\t\t\tvar msg = new sn_ws.RESTMessageV2();\n\t\t\tmsg.setEndpoint(obj);\n\t\t\tmsg.setRequestHeader('Content-Type', 'application/json');\n\t\t\tmsg.setHttpMethod('get');\n\t\t\treturn this._fromDocument(msg.execute().getBody());\n\t\t}\n\n\t\ttry {\n\t\t\tobj = JSON.parse(obj);\n\t\t} catch (ex) {\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Action_Step._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\tlet _obj = {\n\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))\n\t\t\t};\n\t\t\t_obj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(this))] = obj;\n\t\t\tobj = _obj;\n\t\t}\n\t\treturn this._fromDocument(obj);\n\t}\n\telse if (typeof(obj) === 'object') {\n\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\treturn this._fromGlideRecord(obj);\n\t\t} else if (obj._fromDocument) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Step._fromDocument(): \" + \"redundent call\");\n\t\t\treturn obj;\n\t\t} else if (Array.isArray(obj)) {\n\t\t\treturn obj.map(function(o) {\n\t\t\t\treturn new shs_arbfw_appd_Action_Step()._fromDocument(o)\n\t\t\t});\n\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(obj))));\n\n\t\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Action_Step._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.action) !== 'undefined') {\n\n\t\t\t\t\tthis.action(new shs_arbfw_appd_Action_Type()._fromDocument(obj.action));\n\t\t\t\t}\n\n\t\t\t} else { // if(obj.constructor.name==\"Action_Step\"){\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Step._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t}\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Step._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\treturn null;\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Step._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Action_Step._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Action_Step._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\treturn this;\n}\n\n_insertAssert() {\n\treturn true;\n}\n\n_updateAssert() {\n\treturn true;\n}\n\n_storeAssert() {\n\treturn true;\n}\n\n_findAssert() {\n\treturn true;\n}\n\n_new(c) {\n\n\treturn new shs_arbfw_appd_Platform._new(c);\n\n}\n\n_toDocument(arFields) {\n\n\tlet ret = undefined || {};\n\n\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tret.active = this.active();\n\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tret.enabled = this.enabled();\n\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tret.code = this.code();\n\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tret.order = this.order();\n\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tret.date = this.date();\n\n\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tret.name = this.name();\n\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tret.remark = this.remark();\n\n\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t}\n\n\tif (typeof(this._action) !== 'undefined') {\n\t\tret.action = this.action();\n\n\t\tif (ret.action) {\n\t\t\tret.action = ret.action._toDocument();\n\t\t\tif (typeof(ret.action) === 'object' && !Object.keys(ret.action).length) ret.action = null;\n\t\t}\n\n\t}\n\n\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\treturn !arFields.find(function(_k) {\n\t\t\treturn _k == k;\n\t\t});\n\t}).forEach(function(k) {\n\t\tdelete ret[k];\n\t});\n\n\treturn ret;\n}\n\n_unique(keys, ret) {\n\tret = ret || new shs_arbfw_appd_Action_Step();\n\n\tundefined\n\n\t// if(this.Id) ret.Id = this.Id;\n\tif (!keys) {\n\n\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t} else {\n\n\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t\tif (keys.indexOf(\"action\") >= 0 && typeof(this.action()) !== 'undefined') ret.action(this.action()._unique());\n\n\t}\n\n\treturn ret;\n}\n\n_query(gq) {\n\tlet arFields = Object.keys(global.Schema.of('sys_hub_step_instance', ['*'])['sys_hub_step_instance']);\n\n\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('sys_hub_step_instance');\n\n\tundefined\n\n\tlet idf = ((function(r) {\n\t\tlet ret = 'sys_id';\n\t\tif (typeof(r.__idField) === 'function') {\n\t\t\tret = r.__idField();\n\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\tret = r.__idField || this.__idField();\n\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\tret = 'Id';\n\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\tret = 'sys_id';\n\t\t}\n\t\treturn ret;\n\t})(this));\n\tif (idf == 'Id') idf = 'sys_id';\n\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tlet coop = this._active_coop || '=';\n\n\t\tlet v = this.active();\n\n\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Action_Step._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tlet coop = this._enabled_coop || '=';\n\n\t\tlet v = this.enabled();\n\n\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Action_Step._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tlet coop = this._code_coop || '=';\n\n\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.code();\n\n\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Action_Step._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tlet coop = this._order_coop || '=';\n\n\t\tlet v = this.order();\n\n\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Action_Step._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tlet coop = this._date_coop || '=';\n\n\t\tlet v = this.date();\n\n\t\tif (v) {\n\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t}\n\n\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Action_Step._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tlet coop = this._name_coop || '=';\n\n\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.name();\n\n\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Action_Step._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tlet coop = this._remark_coop || '=';\n\n\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.remark();\n\n\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Action_Step._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._action) !== 'undefined') {\n\t\tlet coop = this._action_coop || '=';\n\n\t\tlet v = this.action();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Action Step\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Action_Step._query(): \"+ \"action \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Step._query(): \" + \"action[action] resuled in undefined: \" + JSON.stringify(this.action()));\n\t\t}\n\n\t\tif (arFields.indexOf('action') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Action_Step._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('action');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('action');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('action', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Action_Step._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\treturn this._queryGQ;\n}\n\n_save(obj) {\n\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\treturn new shs_arbfw_appd_Action_Step()._save(o)\n\t});\n\n\tlet _obj = {};\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Action_Step._save(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\tObject.keys(obj).filter(function(k) {\n\t\treturn Object.keys(global.Schema.of('sys_hub_step_instance', ['*'])['sys_hub_step_instance']).filter(function(_k) {\n\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t}).indexOf(k.toLowerCase()) >= 0\n\t}).forEach(function(k) {\n\t\t_obj[k.toLowerCase()] = obj[k]\n\t});\n\n\tObject.keys(_obj).forEach(function(k) {\n\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Step._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tdelete _obj[k];\n\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Step._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t}\n\t});\n\n\tlet _this = null;\n\tif (obj.__keys) {\n\t\tlet kObj = {};\n\t\tkObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(_obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))));\n\t\tobj.__keys.forEach(function(k) {\n\t\t\tkObj[k] = _obj[k]\n\t\t});\n\t\t_this = new shs_arbfw_appd_Action_Step()._fromDocument(kObj);\n\t} else {\n\t\t_this = new shs_arbfw_appd_Action_Step()._fromDocument(_obj)._unique();\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Action_Step._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\tdelete _obj.__idField;\n\n\ttry {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Step._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\tObject.keys(_obj).filter(function(k) {\n\t\t\treturn k.toLowerCase() != k;\n\t\t}).forEach(function(k) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Step._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tvar lk = k.toLowerCase();\n\t\t\t_obj[lk] = _obj[k];\n\t\t\tdelete _obj[k];\n\t\t});\n\n\t\tlet gq = new global.GlideQuery(obj.__type || 'sys_hub_step_instance');\n\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Action_Step._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\tif (_obj.sys_id) {\n\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t} else {\n\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\tgq = gq.insert(_obj);\n\t\t}\n\t\tlet _fObj = {};\n\t\t_fObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))));\n\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('sys_hub_step_instance', ['*'])['sys_hub_step_instance']))));\n\t} catch (ex) {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Step._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Step._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\treturn this;\n\t}\n\n\treturn this;\n}\n\n/************* Action_Step.store() **********************/\nstore(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Step.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Step.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Step.store(): \" + \"executing locally \");\n\n\t\t// store locally\n\t\treturn this._save(this._toDocument());\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Action_Step.findAll() **********************/\nfindAll(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Step.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Step.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Step.findAll(): \" + \"executing locally \");\n\n\t\t// findAll locally\n\t\tlet gr = new GlideRecord('sys_hub_step_instance');\n\t\tgr.addEncodedQuery(this._toEQuery());\n\t\treturn this._fromDocument(gr);\n\n\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('sys_hub_step_instance', ['*'])['sys_hub_step_instance'])));\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Action_Step.find() **********************/\nfind(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Step.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Step.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Step.find(): \" + \"executing locally \");\n\n\t\tlet ret = this.findAll();\n\t\treturn ret.length ? ret[0] : null;\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"scriptFile_Script_Compatibilitys":[{"active":true,"enabled":true}],"client_callable":true,"sys_name":"shs_arbfw_appd_Action_Step_Input","api_name":"x_1790593_arboard.shs_arbfw_appd_Action_Step_Input","name":"shs_arbfw_appd_Action_Step_Input","script":"class shs_arbfw_appd_Action_Step_Input extends global.AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"Application Designer\";\n\t\tthis.__type = \"shs_arbfw_appd_Action_Step_Input\";\n\t\tthis.__alias = \"shs_arbfw_appd\";\n\t\tthis.__scope = \"shs_arbfw\";\n\t}\n\n\t/************* Action_Step_Input.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Action_Step_Input.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Action_Step_Input.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Action_Step_Input.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Action_Step_Input.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//(typeof(window)!=='undefined'?alert:gs.info)(\"Action_Step_Input.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Action_Step_Input.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Action_Step_Input.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Action_Step_Input.action GETTERS AND SETTERS **********************/\n\taction(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._action = v;\n\t\t\tthis._action_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._action;\n\t\t}\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = undefined || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\tif (this._action) ret += /*(this._action_coop || '=') + */ this.action()._toEQuery(sPath + 'action.');\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Step_Input._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn new shs_arbfw_appd_Action_Step_Input()._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Step_Input._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Step_Input._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromGlideRecord(obj) {\n\t\tif (!obj) return null;\n\t\tif (obj.isValidRecord()) {\n\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Action_Step_Input\" != 'ecc_queue' && obj.source == \"shs_arbfw_appd_Action_Step_Input\") {\n\t\t\t\tobj.state = \"processing\";\n\t\t\t\tobj.update();\n\n\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\tresp.queue = 'output';\n\t\t\t\tresp.agent = obj.agent;\n\t\t\t\tresp.topic = obj.topic;\n\t\t\t\tresp.name = obj.name;\n\t\t\t\tresp.source = obj.source;\n\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\tlet ret = new shs_arbfw_appd_Action_Step_Input()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t});\n\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t}\n\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\tresp.insert();\n\n\t\t\t\tobj.state = \"processed\";\n\t\t\t\tobj.update();\n\t\t\t\treturn resp;\n\t\t\t} else {\n\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\taction: obj.getValue(\"action\"),\n\n\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tobj.query();\n\t\t\tlet grRet = [];\n\t\t\twhile (obj.next()) grRet.push(this._fromGlideRecord(obj));\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Action_Step_Input._fromGlideRecord(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\treturn grRet;\n\t\t}\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\tundefined\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_appd_Action_Step_Input()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\tif (/((([A-Za-z]{3,9}:(?:/ / ) ? )( ? : [-;: &= +$, w] + @) ? [A - Za - z0 - 9. - ] + | ( ? : www. | [-;: &= +$, w] + @)[A - Za - z0 - 9. - ] + )(( ? : /[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)/g.test(obj)) {\n\t\t\tvar msg = new sn_ws.RESTMessageV2();\n\t\t\tmsg.setEndpoint(obj);\n\t\t\tmsg.setRequestHeader('Content-Type', 'application/json');\n\t\t\tmsg.setHttpMethod('get');\n\t\t\treturn this._fromDocument(msg.execute().getBody());\n\t\t}\n\n\t\ttry {\n\t\t\tobj = JSON.parse(obj);\n\t\t} catch (ex) {\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Action_Step_Input._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\tlet _obj = {\n\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))\n\t\t\t};\n\t\t\t_obj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(this))] = obj;\n\t\t\tobj = _obj;\n\t\t}\n\t\treturn this._fromDocument(obj);\n\t}\n\telse if (typeof(obj) === 'object') {\n\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\treturn this._fromGlideRecord(obj);\n\t\t} else if (obj._fromDocument) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Step_Input._fromDocument(): \" + \"redundent call\");\n\t\t\treturn obj;\n\t\t} else if (Array.isArray(obj)) {\n\t\t\treturn obj.map(function(o) {\n\t\t\t\treturn new shs_arbfw_appd_Action_Step_Input()._fromDocument(o)\n\t\t\t});\n\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(obj))));\n\n\t\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Action_Step_Input._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.action) !== 'undefined') {\n\n\t\t\t\t\tthis.action(new shs_arbfw_appd_Action_Type()._fromDocument(obj.action));\n\t\t\t\t}\n\n\t\t\t} else { // if(obj.constructor.name==\"Action_Step_Input\"){\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Step_Input._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t}\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Step_Input._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\treturn null;\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Step_Input._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Action_Step_Input._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Action_Step_Input._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\treturn this;\n}\n\n_insertAssert() {\n\treturn true;\n}\n\n_updateAssert() {\n\treturn true;\n}\n\n_storeAssert() {\n\treturn true;\n}\n\n_findAssert() {\n\treturn true;\n}\n\n_new(c) {\n\n\treturn new shs_arbfw_appd_Platform._new(c);\n\n}\n\n_toDocument(arFields) {\n\n\tlet ret = undefined || {};\n\n\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tret.active = this.active();\n\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tret.enabled = this.enabled();\n\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tret.code = this.code();\n\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tret.order = this.order();\n\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tret.date = this.date();\n\n\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tret.name = this.name();\n\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tret.remark = this.remark();\n\n\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t}\n\n\tif (typeof(this._action) !== 'undefined') {\n\t\tret.action = this.action();\n\n\t\tif (ret.action) {\n\t\t\tret.action = ret.action._toDocument();\n\t\t\tif (typeof(ret.action) === 'object' && !Object.keys(ret.action).length) ret.action = null;\n\t\t}\n\n\t}\n\n\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\treturn !arFields.find(function(_k) {\n\t\t\treturn _k == k;\n\t\t});\n\t}).forEach(function(k) {\n\t\tdelete ret[k];\n\t});\n\n\treturn ret;\n}\n\n_unique(keys, ret) {\n\tret = ret || new shs_arbfw_appd_Action_Step_Input();\n\n\tundefined\n\n\t// if(this.Id) ret.Id = this.Id;\n\tif (!keys) {\n\n\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t} else {\n\n\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t\tif (keys.indexOf(\"action\") >= 0 && typeof(this.action()) !== 'undefined') ret.action(this.action()._unique());\n\n\t}\n\n\treturn ret;\n}\n\n_query(gq) {\n\tlet arFields = Object.keys(global.Schema.of('sys_flow_step_definition_input', ['*'])['sys_flow_step_definition_input']);\n\n\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('sys_flow_step_definition_input');\n\n\tundefined\n\n\tlet idf = ((function(r) {\n\t\tlet ret = 'sys_id';\n\t\tif (typeof(r.__idField) === 'function') {\n\t\t\tret = r.__idField();\n\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\tret = r.__idField || this.__idField();\n\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\tret = 'Id';\n\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\tret = 'sys_id';\n\t\t}\n\t\treturn ret;\n\t})(this));\n\tif (idf == 'Id') idf = 'sys_id';\n\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tlet coop = this._active_coop || '=';\n\n\t\tlet v = this.active();\n\n\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Action_Step_Input._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tlet coop = this._enabled_coop || '=';\n\n\t\tlet v = this.enabled();\n\n\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Action_Step_Input._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tlet coop = this._code_coop || '=';\n\n\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.code();\n\n\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Action_Step_Input._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tlet coop = this._order_coop || '=';\n\n\t\tlet v = this.order();\n\n\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Action_Step_Input._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tlet coop = this._date_coop || '=';\n\n\t\tlet v = this.date();\n\n\t\tif (v) {\n\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t}\n\n\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Action_Step_Input._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tlet coop = this._name_coop || '=';\n\n\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.name();\n\n\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Action_Step_Input._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tlet coop = this._remark_coop || '=';\n\n\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.remark();\n\n\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Action_Step_Input._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._action) !== 'undefined') {\n\t\tlet coop = this._action_coop || '=';\n\n\t\tlet v = this.action();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Action Step Input\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Action_Step_Input._query(): \"+ \"action \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Step_Input._query(): \" + \"action[action] resuled in undefined: \" + JSON.stringify(this.action()));\n\t\t}\n\n\t\tif (arFields.indexOf('action') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Action_Step_Input._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('action');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('action');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('action', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Action_Step_Input._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\treturn this._queryGQ;\n}\n\n_save(obj) {\n\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\treturn new shs_arbfw_appd_Action_Step_Input()._save(o)\n\t});\n\n\tlet _obj = {};\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Action_Step_Input._save(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\tObject.keys(obj).filter(function(k) {\n\t\treturn Object.keys(global.Schema.of('sys_flow_step_definition_input', ['*'])['sys_flow_step_definition_input']).filter(function(_k) {\n\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t}).indexOf(k.toLowerCase()) >= 0\n\t}).forEach(function(k) {\n\t\t_obj[k.toLowerCase()] = obj[k]\n\t});\n\n\tObject.keys(_obj).forEach(function(k) {\n\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Step_Input._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tdelete _obj[k];\n\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Step_Input._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t}\n\t});\n\n\tlet _this = null;\n\tif (obj.__keys) {\n\t\tlet kObj = {};\n\t\tkObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(_obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))));\n\t\tobj.__keys.forEach(function(k) {\n\t\t\tkObj[k] = _obj[k]\n\t\t});\n\t\t_this = new shs_arbfw_appd_Action_Step_Input()._fromDocument(kObj);\n\t} else {\n\t\t_this = new shs_arbfw_appd_Action_Step_Input()._fromDocument(_obj)._unique();\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Action_Step_Input._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\tdelete _obj.__idField;\n\n\ttry {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Step_Input._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\tObject.keys(_obj).filter(function(k) {\n\t\t\treturn k.toLowerCase() != k;\n\t\t}).forEach(function(k) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Step_Input._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tvar lk = k.toLowerCase();\n\t\t\t_obj[lk] = _obj[k];\n\t\t\tdelete _obj[k];\n\t\t});\n\n\t\tlet gq = new global.GlideQuery(obj.__type || 'sys_flow_step_definition_input');\n\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Action_Step_Input._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\tif (_obj.sys_id) {\n\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t} else {\n\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\tgq = gq.insert(_obj);\n\t\t}\n\t\tlet _fObj = {};\n\t\t_fObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))));\n\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('sys_flow_step_definition_input', ['*'])['sys_flow_step_definition_input']))));\n\t} catch (ex) {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Step_Input._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Step_Input._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\treturn this;\n\t}\n\n\treturn this;\n}\n\n/************* Action_Step_Input.store() **********************/\nstore(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Step_Input.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Step_Input.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Step_Input.store(): \" + \"executing locally \");\n\n\t\t// store locally\n\t\treturn this._save(this._toDocument());\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Action_Step_Input.findAll() **********************/\nfindAll(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Step_Input.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Step_Input.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Step_Input.findAll(): \" + \"executing locally \");\n\n\t\t// findAll locally\n\t\tlet gr = new GlideRecord('sys_flow_step_definition_input');\n\t\tgr.addEncodedQuery(this._toEQuery());\n\t\treturn this._fromDocument(gr);\n\n\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('sys_flow_step_definition_input', ['*'])['sys_flow_step_definition_input'])));\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Action_Step_Input.find() **********************/\nfind(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Step_Input.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Step_Input.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Step_Input.find(): \" + \"executing locally \");\n\n\t\tlet ret = this.findAll();\n\t\treturn ret.length ? ret[0] : null;\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"scriptFile_Script_Compatibilitys":[{"active":true,"enabled":true}],"client_callable":true,"sys_name":"shs_arbfw_Solution_Appendix","api_name":"x_1790593_arboard.shs_arbfw_Solution_Appendix","name":"shs_arbfw_Solution_Appendix","script":"class shs_arbfw_Solution_Appendix extends global.AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"\";\n\t\tthis.__type = \"shs_arbfw_Solution_Appendix\";\n\t\tthis.__alias = \"shs_arbfw\";\n\t\tthis.__scope = \"shs_arbfw\";\n\t}\n\n\t/************* Solution_Appendix.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Solution_Appendix.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Solution_Appendix.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Solution_Appendix.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Solution_Appendix.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//(typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Appendix.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Solution_Appendix.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Solution_Appendix.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Solution_Appendix.design GETTERS AND SETTERS **********************/\n\tdesign(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._design = v;\n\t\t\tthis._design_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._design;\n\t\t}\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = undefined || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\tif (this._design) ret += /*(this._design_coop || '=') + */ this.design()._toEQuery(sPath + 'design.');\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Appendix._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn new shs_arbfw_Solution_Appendix()._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Appendix._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Appendix._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromGlideRecord(obj) {\n\t\tif (!obj) return null;\n\t\tif (obj.isValidRecord()) {\n\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Solution_Appendix\" != 'ecc_queue' && obj.source == \"shs_arbfw_Solution_Appendix\") {\n\t\t\t\tobj.state = \"processing\";\n\t\t\t\tobj.update();\n\n\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\tresp.queue = 'output';\n\t\t\t\tresp.agent = obj.agent;\n\t\t\t\tresp.topic = obj.topic;\n\t\t\t\tresp.name = obj.name;\n\t\t\t\tresp.source = obj.source;\n\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\tlet ret = new shs_arbfw_Solution_Appendix()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t});\n\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t}\n\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\tresp.insert();\n\n\t\t\t\tobj.state = \"processed\";\n\t\t\t\tobj.update();\n\t\t\t\treturn resp;\n\t\t\t} else {\n\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\tdesign: obj.getValue(\"design\"),\n\n\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tobj.query();\n\t\t\tlet grRet = [];\n\t\t\twhile (obj.next()) grRet.push(this._fromGlideRecord(obj));\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Appendix._fromGlideRecord(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\treturn grRet;\n\t\t}\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\tundefined\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_Solution_Appendix()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\tif (/((([A-Za-z]{3,9}:(?:/ / ) ? )( ? : [-;: &= +$, w] + @) ? [A - Za - z0 - 9. - ] + | ( ? : www. | [-;: &= +$, w] + @)[A - Za - z0 - 9. - ] + )(( ? : /[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)/g.test(obj)) {\n\t\t\tvar msg = new sn_ws.RESTMessageV2();\n\t\t\tmsg.setEndpoint(obj);\n\t\t\tmsg.setRequestHeader('Content-Type', 'application/json');\n\t\t\tmsg.setHttpMethod('get');\n\t\t\treturn this._fromDocument(msg.execute().getBody());\n\t\t}\n\n\t\ttry {\n\t\t\tobj = JSON.parse(obj);\n\t\t} catch (ex) {\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Appendix._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\tlet _obj = {\n\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))\n\t\t\t};\n\t\t\t_obj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(this))] = obj;\n\t\t\tobj = _obj;\n\t\t}\n\t\treturn this._fromDocument(obj);\n\t}\n\telse if (typeof(obj) === 'object') {\n\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\treturn this._fromGlideRecord(obj);\n\t\t} else if (obj._fromDocument) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Appendix._fromDocument(): \" + \"redundent call\");\n\t\t\treturn obj;\n\t\t} else if (Array.isArray(obj)) {\n\t\t\treturn obj.map(function(o) {\n\t\t\t\treturn new shs_arbfw_Solution_Appendix()._fromDocument(o)\n\t\t\t});\n\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(obj))));\n\n\t\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Appendix._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.design) !== 'undefined') {\n\n\t\t\t\t\tthis.design(new shs_arbfw_Solution_Design()._fromDocument(obj.design));\n\t\t\t\t}\n\n\t\t\t} else { // if(obj.constructor.name==\"Solution_Appendix\"){\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Appendix._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t}\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Appendix._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\treturn null;\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Appendix._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Appendix._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Appendix._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\treturn this;\n}\n\n_insertAssert() {\n\treturn true;\n}\n\n_updateAssert() {\n\treturn true;\n}\n\n_storeAssert() {\n\treturn true;\n}\n\n_findAssert() {\n\treturn true;\n}\n\n_new(c) {\n\n\treturn new shs_arbfw_Platform._new(c);\n\n}\n\n_toDocument(arFields) {\n\n\tlet ret = undefined || {};\n\n\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tret.active = this.active();\n\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tret.enabled = this.enabled();\n\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tret.code = this.code();\n\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tret.order = this.order();\n\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tret.date = this.date();\n\n\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tret.name = this.name();\n\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tret.remark = this.remark();\n\n\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t}\n\n\tif (typeof(this._design) !== 'undefined') {\n\t\tret.design = this.design();\n\n\t\tif (ret.design) {\n\t\t\tret.design = ret.design._toDocument();\n\t\t\tif (typeof(ret.design) === 'object' && !Object.keys(ret.design).length) ret.design = null;\n\t\t}\n\n\t}\n\n\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\treturn !arFields.find(function(_k) {\n\t\t\treturn _k == k;\n\t\t});\n\t}).forEach(function(k) {\n\t\tdelete ret[k];\n\t});\n\n\treturn ret;\n}\n\n_unique(keys, ret) {\n\tret = ret || new shs_arbfw_Solution_Appendix();\n\n\tundefined\n\n\t// if(this.Id) ret.Id = this.Id;\n\tif (!keys) {\n\n\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t} else {\n\n\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t\tif (keys.indexOf(\"design\") >= 0 && typeof(this.design()) !== 'undefined') ret.design(this.design()._unique());\n\n\t}\n\n\treturn ret;\n}\n\n_query(gq) {\n\tlet arFields = Object.keys(global.Schema.of('x_1790593_arboard_solution_appendix', ['*'])['x_1790593_arboard_solution_appendix']);\n\n\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('x_1790593_arboard_solution_appendix');\n\n\tundefined\n\n\tlet idf = ((function(r) {\n\t\tlet ret = 'sys_id';\n\t\tif (typeof(r.__idField) === 'function') {\n\t\t\tret = r.__idField();\n\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\tret = r.__idField || this.__idField();\n\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\tret = 'Id';\n\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\tret = 'sys_id';\n\t\t}\n\t\treturn ret;\n\t})(this));\n\tif (idf == 'Id') idf = 'sys_id';\n\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tlet coop = this._active_coop || '=';\n\n\t\tlet v = this.active();\n\n\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Appendix._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tlet coop = this._enabled_coop || '=';\n\n\t\tlet v = this.enabled();\n\n\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Appendix._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tlet coop = this._code_coop || '=';\n\n\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.code();\n\n\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Appendix._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tlet coop = this._order_coop || '=';\n\n\t\tlet v = this.order();\n\n\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Appendix._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tlet coop = this._date_coop || '=';\n\n\t\tlet v = this.date();\n\n\t\tif (v) {\n\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t}\n\n\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Appendix._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tlet coop = this._name_coop || '=';\n\n\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.name();\n\n\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Appendix._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tlet coop = this._remark_coop || '=';\n\n\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.remark();\n\n\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Appendix._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._design) !== 'undefined') {\n\t\tlet coop = this._design_coop || '=';\n\n\t\tlet v = this.design();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Solution Appendix\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Appendix._query(): \"+ \"design \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Appendix._query(): \" + \"design[design] resuled in undefined: \" + JSON.stringify(this.design()));\n\t\t}\n\n\t\tif (arFields.indexOf('design') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Appendix._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('design');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('design');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('design', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Appendix._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\treturn this._queryGQ;\n}\n\n_save(obj) {\n\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\treturn new shs_arbfw_Solution_Appendix()._save(o)\n\t});\n\n\tlet _obj = {};\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Appendix._save(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\tObject.keys(obj).filter(function(k) {\n\t\treturn Object.keys(global.Schema.of('x_1790593_arboard_solution_appendix', ['*'])['x_1790593_arboard_solution_appendix']).filter(function(_k) {\n\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t}).indexOf(k.toLowerCase()) >= 0\n\t}).forEach(function(k) {\n\t\t_obj[k.toLowerCase()] = obj[k]\n\t});\n\n\tObject.keys(_obj).forEach(function(k) {\n\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Appendix._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tdelete _obj[k];\n\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Appendix._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t}\n\t});\n\n\tlet _this = null;\n\tif (obj.__keys) {\n\t\tlet kObj = {};\n\t\tkObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(_obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))));\n\t\tobj.__keys.forEach(function(k) {\n\t\t\tkObj[k] = _obj[k]\n\t\t});\n\t\t_this = new shs_arbfw_Solution_Appendix()._fromDocument(kObj);\n\t} else {\n\t\t_this = new shs_arbfw_Solution_Appendix()._fromDocument(_obj)._unique();\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Appendix._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\tdelete _obj.__idField;\n\n\ttry {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Appendix._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\tObject.keys(_obj).filter(function(k) {\n\t\t\treturn k.toLowerCase() != k;\n\t\t}).forEach(function(k) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Appendix._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tvar lk = k.toLowerCase();\n\t\t\t_obj[lk] = _obj[k];\n\t\t\tdelete _obj[k];\n\t\t});\n\n\t\tlet gq = new global.GlideQuery(obj.__type || 'x_1790593_arboard_solution_appendix');\n\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Appendix._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\tif (_obj.sys_id) {\n\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t} else {\n\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\tgq = gq.insert(_obj);\n\t\t}\n\t\tlet _fObj = {};\n\t\t_fObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))));\n\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('x_1790593_arboard_solution_appendix', ['*'])['x_1790593_arboard_solution_appendix']))));\n\t} catch (ex) {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Appendix._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Appendix._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\treturn this;\n\t}\n\n\treturn this;\n}\n\n/************* Solution_Appendix.store() **********************/\nstore(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Appendix.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Appendix.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Appendix.store(): \" + \"executing locally \");\n\n\t\t// store locally\n\t\treturn this._save(this._toDocument());\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Solution_Appendix.findAll() **********************/\nfindAll(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Appendix.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Appendix.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Appendix.findAll(): \" + \"executing locally \");\n\n\t\t// findAll locally\n\t\tlet gr = new GlideRecord('x_1790593_arboard_solution_appendix');\n\t\tgr.addEncodedQuery(this._toEQuery());\n\t\treturn this._fromDocument(gr);\n\n\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('x_1790593_arboard_solution_appendix', ['*'])['x_1790593_arboard_solution_appendix'])));\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Solution_Appendix.find() **********************/\nfind(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Appendix.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Appendix.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Appendix.find(): \" + \"executing locally \");\n\n\t\tlet ret = this.findAll();\n\t\treturn ret.length ? ret[0] : null;\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"scriptFile_Script_Compatibilitys":[{"active":true,"enabled":true}],"client_callable":true,"sys_name":"shs_arbfw_Decision_Option","api_name":"x_1790593_arboard.shs_arbfw_Decision_Option","name":"shs_arbfw_Decision_Option","script":"class shs_arbfw_Decision_Option extends global.AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"\";\n\t\tthis.__type = \"shs_arbfw_Decision_Option\";\n\t\tthis.__alias = \"shs_arbfw\";\n\t\tthis.__scope = \"shs_arbfw\";\n\t}\n\n\t/************* Decision_Option.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Decision_Option.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Decision_Option.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Decision_Option.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Decision_Option.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//(typeof(window)!=='undefined'?alert:gs.info)(\"Decision_Option.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Decision_Option.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Decision_Option.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Decision_Option.decision GETTERS AND SETTERS **********************/\n\tdecision(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._decision = v;\n\t\t\tthis._decision_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._decision;\n\t\t}\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = undefined || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\tif (this._decision) ret += /*(this._decision_coop || '=') + */ this.decision()._toEQuery(sPath + 'decision.');\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Decision_Option._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn new shs_arbfw_Decision_Option()._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Decision_Option._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Decision_Option._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromGlideRecord(obj) {\n\t\tif (!obj) return null;\n\t\tif (obj.isValidRecord()) {\n\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Decision_Option\" != 'ecc_queue' && obj.source == \"shs_arbfw_Decision_Option\") {\n\t\t\t\tobj.state = \"processing\";\n\t\t\t\tobj.update();\n\n\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\tresp.queue = 'output';\n\t\t\t\tresp.agent = obj.agent;\n\t\t\t\tresp.topic = obj.topic;\n\t\t\t\tresp.name = obj.name;\n\t\t\t\tresp.source = obj.source;\n\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\tlet ret = new shs_arbfw_Decision_Option()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t});\n\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t}\n\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\tresp.insert();\n\n\t\t\t\tobj.state = \"processed\";\n\t\t\t\tobj.update();\n\t\t\t\treturn resp;\n\t\t\t} else {\n\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\tdecision: obj.getValue(\"decision\"),\n\n\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tobj.query();\n\t\t\tlet grRet = [];\n\t\t\twhile (obj.next()) grRet.push(this._fromGlideRecord(obj));\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Decision_Option._fromGlideRecord(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\treturn grRet;\n\t\t}\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\tundefined\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_Decision_Option()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\tif (/((([A-Za-z]{3,9}:(?:/ / ) ? )( ? : [-;: &= +$, w] + @) ? [A - Za - z0 - 9. - ] + | ( ? : www. | [-;: &= +$, w] + @)[A - Za - z0 - 9. - ] + )(( ? : /[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)/g.test(obj)) {\n\t\t\tvar msg = new sn_ws.RESTMessageV2();\n\t\t\tmsg.setEndpoint(obj);\n\t\t\tmsg.setRequestHeader('Content-Type', 'application/json');\n\t\t\tmsg.setHttpMethod('get');\n\t\t\treturn this._fromDocument(msg.execute().getBody());\n\t\t}\n\n\t\ttry {\n\t\t\tobj = JSON.parse(obj);\n\t\t} catch (ex) {\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Decision_Option._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\tlet _obj = {\n\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))\n\t\t\t};\n\t\t\t_obj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(this))] = obj;\n\t\t\tobj = _obj;\n\t\t}\n\t\treturn this._fromDocument(obj);\n\t}\n\telse if (typeof(obj) === 'object') {\n\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\treturn this._fromGlideRecord(obj);\n\t\t} else if (obj._fromDocument) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Decision_Option._fromDocument(): \" + \"redundent call\");\n\t\t\treturn obj;\n\t\t} else if (Array.isArray(obj)) {\n\t\t\treturn obj.map(function(o) {\n\t\t\t\treturn new shs_arbfw_Decision_Option()._fromDocument(o)\n\t\t\t});\n\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(obj))));\n\n\t\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Decision_Option._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.decision) !== 'undefined') {\n\n\t\t\t\t\tthis.decision(new shs_arbfw_Decision()._fromDocument(obj.decision));\n\t\t\t\t}\n\n\t\t\t} else { // if(obj.constructor.name==\"Decision_Option\"){\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Decision_Option._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t}\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Decision_Option._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\treturn null;\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Decision_Option._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Decision_Option._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Decision_Option._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\treturn this;\n}\n\n_insertAssert() {\n\treturn true;\n}\n\n_updateAssert() {\n\treturn true;\n}\n\n_storeAssert() {\n\treturn true;\n}\n\n_findAssert() {\n\treturn true;\n}\n\n_new(c) {\n\n\treturn new shs_arbfw_Platform._new(c);\n\n}\n\n_toDocument(arFields) {\n\n\tlet ret = undefined || {};\n\n\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tret.active = this.active();\n\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tret.enabled = this.enabled();\n\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tret.code = this.code();\n\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tret.order = this.order();\n\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tret.date = this.date();\n\n\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tret.name = this.name();\n\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tret.remark = this.remark();\n\n\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t}\n\n\tif (typeof(this._decision) !== 'undefined') {\n\t\tret.decision = this.decision();\n\n\t\tif (ret.decision) {\n\t\t\tret.decision = ret.decision._toDocument();\n\t\t\tif (typeof(ret.decision) === 'object' && !Object.keys(ret.decision).length) ret.decision = null;\n\t\t}\n\n\t}\n\n\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\treturn !arFields.find(function(_k) {\n\t\t\treturn _k == k;\n\t\t});\n\t}).forEach(function(k) {\n\t\tdelete ret[k];\n\t});\n\n\treturn ret;\n}\n\n_unique(keys, ret) {\n\tret = ret || new shs_arbfw_Decision_Option();\n\n\tundefined\n\n\t// if(this.Id) ret.Id = this.Id;\n\tif (!keys) {\n\n\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (typeof(this.decision()) !== 'undefined') ret.decision(this.decision()._unique());\n\n\t} else {\n\n\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t\tif (keys.indexOf(\"decision\") >= 0 && typeof(this.decision()) !== 'undefined') ret.decision(this.decision()._unique());\n\n\t}\n\n\treturn ret;\n}\n\n_query(gq) {\n\tlet arFields = Object.keys(global.Schema.of('x_1790593_arboard_decision_option', ['*'])['x_1790593_arboard_decision_option']);\n\n\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('x_1790593_arboard_decision_option');\n\n\tundefined\n\n\tlet idf = ((function(r) {\n\t\tlet ret = 'sys_id';\n\t\tif (typeof(r.__idField) === 'function') {\n\t\t\tret = r.__idField();\n\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\tret = r.__idField || this.__idField();\n\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\tret = 'Id';\n\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\tret = 'sys_id';\n\t\t}\n\t\treturn ret;\n\t})(this));\n\tif (idf == 'Id') idf = 'sys_id';\n\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tlet coop = this._active_coop || '=';\n\n\t\tlet v = this.active();\n\n\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Decision_Option._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tlet coop = this._enabled_coop || '=';\n\n\t\tlet v = this.enabled();\n\n\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Decision_Option._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tlet coop = this._code_coop || '=';\n\n\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.code();\n\n\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Decision_Option._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tlet coop = this._order_coop || '=';\n\n\t\tlet v = this.order();\n\n\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Decision_Option._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tlet coop = this._date_coop || '=';\n\n\t\tlet v = this.date();\n\n\t\tif (v) {\n\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t}\n\n\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Decision_Option._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tlet coop = this._name_coop || '=';\n\n\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.name();\n\n\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Decision_Option._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tlet coop = this._remark_coop || '=';\n\n\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.remark();\n\n\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Decision_Option._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._decision) !== 'undefined') {\n\t\tlet coop = this._decision_coop || '=';\n\n\t\tlet v = this.decision();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Decision Option\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Decision_Option._query(): \"+ \"decision \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Decision_Option._query(): \" + \"decision[decision] resuled in undefined: \" + JSON.stringify(this.decision()));\n\t\t}\n\n\t\tif (arFields.indexOf('decision') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Decision_Option._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('decision');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('decision');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('decision', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Decision_Option._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\treturn this._queryGQ;\n}\n\n_save(obj) {\n\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\treturn new shs_arbfw_Decision_Option()._save(o)\n\t});\n\n\tlet _obj = {};\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Decision_Option._save(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\tObject.keys(obj).filter(function(k) {\n\t\treturn Object.keys(global.Schema.of('x_1790593_arboard_decision_option', ['*'])['x_1790593_arboard_decision_option']).filter(function(_k) {\n\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t}).indexOf(k.toLowerCase()) >= 0\n\t}).forEach(function(k) {\n\t\t_obj[k.toLowerCase()] = obj[k]\n\t});\n\n\tObject.keys(_obj).forEach(function(k) {\n\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Decision_Option._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tdelete _obj[k];\n\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Decision_Option._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t}\n\t});\n\n\tlet _this = null;\n\tif (obj.__keys) {\n\t\tlet kObj = {};\n\t\tkObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(_obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))));\n\t\tobj.__keys.forEach(function(k) {\n\t\t\tkObj[k] = _obj[k]\n\t\t});\n\t\t_this = new shs_arbfw_Decision_Option()._fromDocument(kObj);\n\t} else {\n\t\t_this = new shs_arbfw_Decision_Option()._fromDocument(_obj)._unique();\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Decision_Option._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\tdelete _obj.__idField;\n\n\ttry {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Decision_Option._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\tObject.keys(_obj).filter(function(k) {\n\t\t\treturn k.toLowerCase() != k;\n\t\t}).forEach(function(k) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Decision_Option._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tvar lk = k.toLowerCase();\n\t\t\t_obj[lk] = _obj[k];\n\t\t\tdelete _obj[k];\n\t\t});\n\n\t\tlet gq = new global.GlideQuery(obj.__type || 'x_1790593_arboard_decision_option');\n\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Decision_Option._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\tif (_obj.sys_id) {\n\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t} else {\n\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\tgq = gq.insert(_obj);\n\t\t}\n\t\tlet _fObj = {};\n\t\t_fObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))));\n\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('x_1790593_arboard_decision_option', ['*'])['x_1790593_arboard_decision_option']))));\n\t} catch (ex) {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Decision_Option._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Decision_Option._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\treturn this;\n\t}\n\n\treturn this;\n}\n\n/************* Decision_Option.store() **********************/\nstore(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Decision_Option.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Decision_Option.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Decision_Option.store(): \" + \"executing locally \");\n\n\t\t// store locally\n\t\treturn this._save(this._toDocument());\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Decision_Option.findAll() **********************/\nfindAll(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Decision_Option.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Decision_Option.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Decision_Option.findAll(): \" + \"executing locally \");\n\n\t\t// findAll locally\n\t\tlet gr = new GlideRecord('x_1790593_arboard_decision_option');\n\t\tgr.addEncodedQuery(this._toEQuery());\n\t\treturn this._fromDocument(gr);\n\n\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('x_1790593_arboard_decision_option', ['*'])['x_1790593_arboard_decision_option'])));\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Decision_Option.find() **********************/\nfind(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Decision_Option.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Decision_Option.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Decision_Option.find(): \" + \"executing locally \");\n\n\t\tlet ret = this.findAll();\n\t\treturn ret.length ? ret[0] : null;\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"scriptFile_Script_Compatibilitys":[{"active":true,"enabled":true}],"client_callable":true,"sys_name":"shs_arbfw_Meeting_Series","api_name":"x_1790593_arboard.shs_arbfw_Meeting_Series","name":"shs_arbfw_Meeting_Series","script":"class shs_arbfw_Meeting_Series extends global.AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"\";\n\t\tthis.__type = \"shs_arbfw_Meeting_Series\";\n\t\tthis.__alias = \"shs_arbfw\";\n\t\tthis.__scope = \"shs_arbfw\";\n\t}\n\n\t/************* Meeting_Series.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Meeting_Series.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Meeting_Series.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Meeting_Series.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Meeting_Series.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//(typeof(window)!=='undefined'?alert:gs.info)(\"Meeting_Series.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Meeting_Series.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Meeting_Series.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Meeting_Series.frequency GETTERS AND SETTERS **********************/\n\tfrequency(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._frequency = v;\n\t\t\tthis._frequency_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._frequency;\n\t\t}\n\t}\n\n\t/************* Meeting_Series.series_Meetings GETTERS AND SETTERS **********************/\n\tseries_Meetings(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._series_Meetings = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._series_Meetings_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._series_Meetings;\n\t\t}\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = undefined || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\tif (this._frequency) ret += /*(this._frequency_coop || '=') + */ this.frequency()._toEQuery(sPath + 'frequency.');\n\n\t\t(this.series_Meetings() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYMeeting.series,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting_Series._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn new shs_arbfw_Meeting_Series()._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting_Series._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting_Series._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromGlideRecord(obj) {\n\t\tif (!obj) return null;\n\t\tif (obj.isValidRecord()) {\n\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Meeting_Series\" != 'ecc_queue' && obj.source == \"shs_arbfw_Meeting_Series\") {\n\t\t\t\tobj.state = \"processing\";\n\t\t\t\tobj.update();\n\n\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\tresp.queue = 'output';\n\t\t\t\tresp.agent = obj.agent;\n\t\t\t\tresp.topic = obj.topic;\n\t\t\t\tresp.name = obj.name;\n\t\t\t\tresp.source = obj.source;\n\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\tlet ret = new shs_arbfw_Meeting_Series()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t});\n\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t}\n\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\tresp.insert();\n\n\t\t\t\tobj.state = \"processed\";\n\t\t\t\tobj.update();\n\t\t\t\treturn resp;\n\t\t\t} else {\n\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\tfrequency: obj.getValue(\"frequency\"),\n\n\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tobj.query();\n\t\t\tlet grRet = [];\n\t\t\twhile (obj.next()) grRet.push(this._fromGlideRecord(obj));\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Meeting_Series._fromGlideRecord(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\treturn grRet;\n\t\t}\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\tundefined\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_Meeting_Series()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\tif (/((([A-Za-z]{3,9}:(?:/ / ) ? )( ? : [-;: &= +$, w] + @) ? [A - Za - z0 - 9. - ] + | ( ? : www. | [-;: &= +$, w] + @)[A - Za - z0 - 9. - ] + )(( ? : /[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)/g.test(obj)) {\n\t\t\tvar msg = new sn_ws.RESTMessageV2();\n\t\t\tmsg.setEndpoint(obj);\n\t\t\tmsg.setRequestHeader('Content-Type', 'application/json');\n\t\t\tmsg.setHttpMethod('get');\n\t\t\treturn this._fromDocument(msg.execute().getBody());\n\t\t}\n\n\t\ttry {\n\t\t\tobj = JSON.parse(obj);\n\t\t} catch (ex) {\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Meeting_Series._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\tlet _obj = {\n\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))\n\t\t\t};\n\t\t\t_obj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(this))] = obj;\n\t\t\tobj = _obj;\n\t\t}\n\t\treturn this._fromDocument(obj);\n\t}\n\telse if (typeof(obj) === 'object') {\n\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\treturn this._fromGlideRecord(obj);\n\t\t} else if (obj._fromDocument) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting_Series._fromDocument(): \" + \"redundent call\");\n\t\t\treturn obj;\n\t\t} else if (Array.isArray(obj)) {\n\t\t\treturn obj.map(function(o) {\n\t\t\t\treturn new shs_arbfw_Meeting_Series()._fromDocument(o)\n\t\t\t});\n\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(obj))));\n\n\t\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Meeting_Series._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.frequency) !== 'undefined') {\n\n\t\t\t\t\tthis.frequency(new shs_arbfw_Frequency()._fromDocument(obj.frequency));\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.series_Meetings) !== 'undefined') this.series_Meetings(new shs_arbfw_Meeting()._fromDocument(obj.series_Meetings));\n\n\t\t\t} else { // if(obj.constructor.name==\"Meeting_Series\"){\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting_Series._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t}\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting_Series._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\treturn null;\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting_Series._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Meeting_Series._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Meeting_Series._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\treturn this;\n}\n\n_insertAssert() {\n\treturn true;\n}\n\n_updateAssert() {\n\treturn true;\n}\n\n_storeAssert() {\n\treturn true;\n}\n\n_findAssert() {\n\treturn true;\n}\n\n_new(c) {\n\n\treturn new shs_arbfw_Platform._new(c);\n\n}\n\n_toDocument(arFields) {\n\n\tlet ret = undefined || {};\n\n\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tret.active = this.active();\n\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tret.enabled = this.enabled();\n\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tret.code = this.code();\n\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tret.order = this.order();\n\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tret.date = this.date();\n\n\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tret.name = this.name();\n\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tret.remark = this.remark();\n\n\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t}\n\n\tif (typeof(this._frequency) !== 'undefined') {\n\t\tret.frequency = this.frequency();\n\n\t\tif (ret.frequency) {\n\t\t\tret.frequency = ret.frequency._toDocument();\n\t\t\tif (typeof(ret.frequency) === 'object' && !Object.keys(ret.frequency).length) ret.frequency = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this.series_Meetings()) !== 'undefined') ret.series_Meetings = this.series_Meetings().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\treturn !arFields.find(function(_k) {\n\t\t\treturn _k == k;\n\t\t});\n\t}).forEach(function(k) {\n\t\tdelete ret[k];\n\t});\n\n\treturn ret;\n}\n\n_unique(keys, ret) {\n\tret = ret || new shs_arbfw_Meeting_Series();\n\n\tundefined\n\n\t// if(this.Id) ret.Id = this.Id;\n\tif (!keys) {\n\n\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t} else {\n\n\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t\tif (keys.indexOf(\"frequency\") >= 0 && typeof(this.frequency()) !== 'undefined') ret.frequency(this.frequency()._unique());\n\n\t}\n\n\treturn ret;\n}\n\n_query(gq) {\n\tlet arFields = Object.keys(global.Schema.of('x_1790593_arboard_meeting_series', ['*'])['x_1790593_arboard_meeting_series']);\n\n\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('x_1790593_arboard_meeting_series');\n\n\tundefined\n\n\tlet idf = ((function(r) {\n\t\tlet ret = 'sys_id';\n\t\tif (typeof(r.__idField) === 'function') {\n\t\t\tret = r.__idField();\n\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\tret = r.__idField || this.__idField();\n\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\tret = 'Id';\n\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\tret = 'sys_id';\n\t\t}\n\t\treturn ret;\n\t})(this));\n\tif (idf == 'Id') idf = 'sys_id';\n\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tlet coop = this._active_coop || '=';\n\n\t\tlet v = this.active();\n\n\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Meeting_Series._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tlet coop = this._enabled_coop || '=';\n\n\t\tlet v = this.enabled();\n\n\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Meeting_Series._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tlet coop = this._code_coop || '=';\n\n\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.code();\n\n\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Meeting_Series._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tlet coop = this._order_coop || '=';\n\n\t\tlet v = this.order();\n\n\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Meeting_Series._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tlet coop = this._date_coop || '=';\n\n\t\tlet v = this.date();\n\n\t\tif (v) {\n\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t}\n\n\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Meeting_Series._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tlet coop = this._name_coop || '=';\n\n\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.name();\n\n\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Meeting_Series._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tlet coop = this._remark_coop || '=';\n\n\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.remark();\n\n\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Meeting_Series._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._frequency) !== 'undefined') {\n\t\tlet coop = this._frequency_coop || '=';\n\n\t\tlet v = this.frequency();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Meeting Series\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Meeting_Series._query(): \"+ \"frequency \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting_Series._query(): \" + \"frequency[frequency] resuled in undefined: \" + JSON.stringify(this.frequency()));\n\t\t}\n\n\t\tif (arFields.indexOf('frequency') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Meeting_Series._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('frequency');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('frequency');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('frequency', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Meeting_Series._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\treturn this._queryGQ;\n}\n\n_save(obj) {\n\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\treturn new shs_arbfw_Meeting_Series()._save(o)\n\t});\n\n\tlet _obj = {};\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Meeting_Series._save(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\tObject.keys(obj).filter(function(k) {\n\t\treturn Object.keys(global.Schema.of('x_1790593_arboard_meeting_series', ['*'])['x_1790593_arboard_meeting_series']).filter(function(_k) {\n\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t}).indexOf(k.toLowerCase()) >= 0\n\t}).forEach(function(k) {\n\t\t_obj[k.toLowerCase()] = obj[k]\n\t});\n\n\tObject.keys(_obj).forEach(function(k) {\n\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting_Series._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tdelete _obj[k];\n\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting_Series._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t}\n\t});\n\n\tlet _this = null;\n\tif (obj.__keys) {\n\t\tlet kObj = {};\n\t\tkObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(_obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))));\n\t\tobj.__keys.forEach(function(k) {\n\t\t\tkObj[k] = _obj[k]\n\t\t});\n\t\t_this = new shs_arbfw_Meeting_Series()._fromDocument(kObj);\n\t} else {\n\t\t_this = new shs_arbfw_Meeting_Series()._fromDocument(_obj)._unique();\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Meeting_Series._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\tdelete _obj.__idField;\n\n\ttry {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting_Series._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\tObject.keys(_obj).filter(function(k) {\n\t\t\treturn k.toLowerCase() != k;\n\t\t}).forEach(function(k) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting_Series._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tvar lk = k.toLowerCase();\n\t\t\t_obj[lk] = _obj[k];\n\t\t\tdelete _obj[k];\n\t\t});\n\n\t\tlet gq = new global.GlideQuery(obj.__type || 'x_1790593_arboard_meeting_series');\n\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Meeting_Series._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\tif (_obj.sys_id) {\n\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t} else {\n\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\tgq = gq.insert(_obj);\n\t\t}\n\t\tlet _fObj = {};\n\t\t_fObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))));\n\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('x_1790593_arboard_meeting_series', ['*'])['x_1790593_arboard_meeting_series']))));\n\t} catch (ex) {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting_Series._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting_Series._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\treturn this;\n\t}\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting_Series._save(): \" + \"obj.series_Meetings: \" + JSON.stringify(obj.series_Meetings, null, 4));\n\tif (Array.isArray(obj.series_Meetings)) this.series_Meetings(obj.series_Meetings.map(function(ta) {\n\t\treturn new shs_arbfw_Meeting()._save(ta)\n\t}));\n\n\treturn this;\n}\n\n/************* Meeting_Series.store() **********************/\nstore(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting_Series.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting_Series.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting_Series.store(): \" + \"executing locally \");\n\n\t\t// store locally\n\t\treturn this._save(this._toDocument());\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Meeting_Series.findAll() **********************/\nfindAll(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting_Series.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting_Series.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting_Series.findAll(): \" + \"executing locally \");\n\n\t\t// findAll locally\n\t\tlet gr = new GlideRecord('x_1790593_arboard_meeting_series');\n\t\tgr.addEncodedQuery(this._toEQuery());\n\t\treturn this._fromDocument(gr);\n\n\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('x_1790593_arboard_meeting_series', ['*'])['x_1790593_arboard_meeting_series'])));\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Meeting_Series.find() **********************/\nfind(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting_Series.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting_Series.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Meeting_Series.find(): \" + \"executing locally \");\n\n\t\tlet ret = this.findAll();\n\t\treturn ret.length ? ret[0] : null;\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"scriptFile_Script_Compatibilitys":[{"active":true,"enabled":true}],"client_callable":true,"sys_name":"shs_arbfw_Module","api_name":"x_1790593_arboard.shs_arbfw_Module","name":"shs_arbfw_Module","script":"class shs_arbfw_Module extends global.AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"\";\n\t\tthis.__type = \"shs_arbfw_Module\";\n\t\tthis.__alias = \"shs_arbfw\";\n\t\tthis.__scope = \"shs_arbfw\";\n\t}\n\n\t/************* Module.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Module.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Module.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Module.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Module.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//(typeof(window)!=='undefined'?alert:gs.info)(\"Module.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Module.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Module.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Module.platform GETTERS AND SETTERS **********************/\n\tplatform(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._platform = v;\n\t\t\tthis._platform_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._platform;\n\t\t}\n\t}\n\n\t/************* Module.module_Capabilitys GETTERS AND SETTERS **********************/\n\tmodule_Capabilitys(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._module_Capabilitys = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._module_Capabilitys_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._module_Capabilitys;\n\t\t}\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = undefined || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\tif (this._platform) ret += /*(this._platform_coop || '=') + */ this.platform()._toEQuery(sPath + 'platform.');\n\n\t\t(this.module_Capabilitys() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYCapability.module,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Module._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn new shs_arbfw_Module()._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Module._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Module._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromGlideRecord(obj) {\n\t\tif (!obj) return null;\n\t\tif (obj.isValidRecord()) {\n\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Module\" != 'ecc_queue' && obj.source == \"shs_arbfw_Module\") {\n\t\t\t\tobj.state = \"processing\";\n\t\t\t\tobj.update();\n\n\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\tresp.queue = 'output';\n\t\t\t\tresp.agent = obj.agent;\n\t\t\t\tresp.topic = obj.topic;\n\t\t\t\tresp.name = obj.name;\n\t\t\t\tresp.source = obj.source;\n\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\tlet ret = new shs_arbfw_Module()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t});\n\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t}\n\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\tresp.insert();\n\n\t\t\t\tobj.state = \"processed\";\n\t\t\t\tobj.update();\n\t\t\t\treturn resp;\n\t\t\t} else {\n\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\tplatform: obj.getValue(\"platform\"),\n\n\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tobj.query();\n\t\t\tlet grRet = [];\n\t\t\twhile (obj.next()) grRet.push(this._fromGlideRecord(obj));\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Module._fromGlideRecord(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\treturn grRet;\n\t\t}\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\tundefined\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_Module()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\tif (/((([A-Za-z]{3,9}:(?:/ / ) ? )( ? : [-;: &= +$, w] + @) ? [A - Za - z0 - 9. - ] + | ( ? : www. | [-;: &= +$, w] + @)[A - Za - z0 - 9. - ] + )(( ? : /[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)/g.test(obj)) {\n\t\t\tvar msg = new sn_ws.RESTMessageV2();\n\t\t\tmsg.setEndpoint(obj);\n\t\t\tmsg.setRequestHeader('Content-Type', 'application/json');\n\t\t\tmsg.setHttpMethod('get');\n\t\t\treturn this._fromDocument(msg.execute().getBody());\n\t\t}\n\n\t\ttry {\n\t\t\tobj = JSON.parse(obj);\n\t\t} catch (ex) {\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Module._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\tlet _obj = {\n\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))\n\t\t\t};\n\t\t\t_obj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(this))] = obj;\n\t\t\tobj = _obj;\n\t\t}\n\t\treturn this._fromDocument(obj);\n\t}\n\telse if (typeof(obj) === 'object') {\n\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\treturn this._fromGlideRecord(obj);\n\t\t} else if (obj._fromDocument) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Module._fromDocument(): \" + \"redundent call\");\n\t\t\treturn obj;\n\t\t} else if (Array.isArray(obj)) {\n\t\t\treturn obj.map(function(o) {\n\t\t\t\treturn new shs_arbfw_Module()._fromDocument(o)\n\t\t\t});\n\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(obj))));\n\n\t\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Module._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.platform) !== 'undefined') {\n\n\t\t\t\t\tthis.platform(new shs_arbfw_Platform()._fromDocument(obj.platform));\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.module_Capabilitys) !== 'undefined') this.module_Capabilitys(new shs_arbfw_Capability()._fromDocument(obj.module_Capabilitys));\n\n\t\t\t} else { // if(obj.constructor.name==\"Module\"){\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Module._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t}\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Module._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\treturn null;\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Module._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Module._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Module._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\treturn this;\n}\n\n_insertAssert() {\n\treturn true;\n}\n\n_updateAssert() {\n\treturn true;\n}\n\n_storeAssert() {\n\treturn true;\n}\n\n_findAssert() {\n\treturn true;\n}\n\n_new(c) {\n\n\treturn new shs_arbfw_Platform._new(c);\n\n}\n\n_toDocument(arFields) {\n\n\tlet ret = undefined || {};\n\n\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tret.active = this.active();\n\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tret.enabled = this.enabled();\n\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tret.code = this.code();\n\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tret.order = this.order();\n\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tret.date = this.date();\n\n\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tret.name = this.name();\n\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tret.remark = this.remark();\n\n\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t}\n\n\tif (typeof(this._platform) !== 'undefined') {\n\t\tret.platform = this.platform();\n\n\t\tif (ret.platform) {\n\t\t\tret.platform = ret.platform._toDocument();\n\t\t\tif (typeof(ret.platform) === 'object' && !Object.keys(ret.platform).length) ret.platform = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this.module_Capabilitys()) !== 'undefined') ret.module_Capabilitys = this.module_Capabilitys().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\treturn !arFields.find(function(_k) {\n\t\t\treturn _k == k;\n\t\t});\n\t}).forEach(function(k) {\n\t\tdelete ret[k];\n\t});\n\n\treturn ret;\n}\n\n_unique(keys, ret) {\n\tret = ret || new shs_arbfw_Module();\n\n\tundefined\n\n\t// if(this.Id) ret.Id = this.Id;\n\tif (!keys) {\n\n\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t} else {\n\n\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t\tif (keys.indexOf(\"platform\") >= 0 && typeof(this.platform()) !== 'undefined') ret.platform(this.platform()._unique());\n\n\t}\n\n\treturn ret;\n}\n\n_query(gq) {\n\tlet arFields = Object.keys(global.Schema.of('x_1790593_arboard_module', ['*'])['x_1790593_arboard_module']);\n\n\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('x_1790593_arboard_module');\n\n\tundefined\n\n\tlet idf = ((function(r) {\n\t\tlet ret = 'sys_id';\n\t\tif (typeof(r.__idField) === 'function') {\n\t\t\tret = r.__idField();\n\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\tret = r.__idField || this.__idField();\n\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\tret = 'Id';\n\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\tret = 'sys_id';\n\t\t}\n\t\treturn ret;\n\t})(this));\n\tif (idf == 'Id') idf = 'sys_id';\n\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tlet coop = this._active_coop || '=';\n\n\t\tlet v = this.active();\n\n\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Module._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tlet coop = this._enabled_coop || '=';\n\n\t\tlet v = this.enabled();\n\n\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Module._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tlet coop = this._code_coop || '=';\n\n\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.code();\n\n\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Module._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tlet coop = this._order_coop || '=';\n\n\t\tlet v = this.order();\n\n\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Module._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tlet coop = this._date_coop || '=';\n\n\t\tlet v = this.date();\n\n\t\tif (v) {\n\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t}\n\n\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Module._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tlet coop = this._name_coop || '=';\n\n\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.name();\n\n\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Module._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tlet coop = this._remark_coop || '=';\n\n\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.remark();\n\n\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Module._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._platform) !== 'undefined') {\n\t\tlet coop = this._platform_coop || '=';\n\n\t\tlet v = this.platform();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Module\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Module._query(): \"+ \"platform \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Module._query(): \" + \"platform[platform] resuled in undefined: \" + JSON.stringify(this.platform()));\n\t\t}\n\n\t\tif (arFields.indexOf('platform') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Module._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('platform');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('platform');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('platform', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Module._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\treturn this._queryGQ;\n}\n\n_save(obj) {\n\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\treturn new shs_arbfw_Module()._save(o)\n\t});\n\n\tlet _obj = {};\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Module._save(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\tObject.keys(obj).filter(function(k) {\n\t\treturn Object.keys(global.Schema.of('x_1790593_arboard_module', ['*'])['x_1790593_arboard_module']).filter(function(_k) {\n\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t}).indexOf(k.toLowerCase()) >= 0\n\t}).forEach(function(k) {\n\t\t_obj[k.toLowerCase()] = obj[k]\n\t});\n\n\tObject.keys(_obj).forEach(function(k) {\n\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Module._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tdelete _obj[k];\n\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Module._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t}\n\t});\n\n\tlet _this = null;\n\tif (obj.__keys) {\n\t\tlet kObj = {};\n\t\tkObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(_obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))));\n\t\tobj.__keys.forEach(function(k) {\n\t\t\tkObj[k] = _obj[k]\n\t\t});\n\t\t_this = new shs_arbfw_Module()._fromDocument(kObj);\n\t} else {\n\t\t_this = new shs_arbfw_Module()._fromDocument(_obj)._unique();\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Module._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\tdelete _obj.__idField;\n\n\ttry {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Module._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\tObject.keys(_obj).filter(function(k) {\n\t\t\treturn k.toLowerCase() != k;\n\t\t}).forEach(function(k) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Module._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tvar lk = k.toLowerCase();\n\t\t\t_obj[lk] = _obj[k];\n\t\t\tdelete _obj[k];\n\t\t});\n\n\t\tlet gq = new global.GlideQuery(obj.__type || 'x_1790593_arboard_module');\n\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Module._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\tif (_obj.sys_id) {\n\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t} else {\n\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\tgq = gq.insert(_obj);\n\t\t}\n\t\tlet _fObj = {};\n\t\t_fObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))));\n\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('x_1790593_arboard_module', ['*'])['x_1790593_arboard_module']))));\n\t} catch (ex) {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Module._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Module._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\treturn this;\n\t}\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Module._save(): \" + \"obj.module_Capabilitys: \" + JSON.stringify(obj.module_Capabilitys, null, 4));\n\tif (Array.isArray(obj.module_Capabilitys)) this.module_Capabilitys(obj.module_Capabilitys.map(function(ta) {\n\t\treturn new shs_arbfw_Capability()._save(ta)\n\t}));\n\n\treturn this;\n}\n\n/************* Module.store() **********************/\nstore(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Module.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Module.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Module.store(): \" + \"executing locally \");\n\n\t\t// store locally\n\t\treturn this._save(this._toDocument());\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Module.findAll() **********************/\nfindAll(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Module.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Module.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Module.findAll(): \" + \"executing locally \");\n\n\t\t// findAll locally\n\t\tlet gr = new GlideRecord('x_1790593_arboard_module');\n\t\tgr.addEncodedQuery(this._toEQuery());\n\t\treturn this._fromDocument(gr);\n\n\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('x_1790593_arboard_module', ['*'])['x_1790593_arboard_module'])));\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Module.find() **********************/\nfind(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Module.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Module.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Module.find(): \" + \"executing locally \");\n\n\t\tlet ret = this.findAll();\n\t\treturn ret.length ? ret[0] : null;\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"scriptFile_Script_Compatibilitys":[{"active":true,"enabled":true}],"client_callable":true,"sys_name":"shs_arbfw_appd_Rollback_Context","api_name":"x_1790593_arboard.shs_arbfw_appd_Rollback_Context","name":"shs_arbfw_appd_Rollback_Context","script":"class shs_arbfw_appd_Rollback_Context extends global.AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"Application Designer\";\n\t\tthis.__type = \"shs_arbfw_appd_Rollback_Context\";\n\t\tthis.__alias = \"shs_arbfw_appd\";\n\t\tthis.__scope = \"shs_arbfw\";\n\t}\n\n\t/************* Rollback_Context.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Rollback_Context.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Rollback_Context.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Rollback_Context.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Rollback_Context.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//(typeof(window)!=='undefined'?alert:gs.info)(\"Rollback_Context.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Rollback_Context.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Rollback_Context.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Rollback_Context.application GETTERS AND SETTERS **********************/\n\tapplication(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._application = v;\n\t\t\tthis._application_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._application;\n\t\t}\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = undefined || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\tif (this._application) ret += /*(this._application_coop || '=') + */ this.application()._toEQuery(sPath + 'application.');\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Rollback_Context._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn new shs_arbfw_appd_Rollback_Context()._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Rollback_Context._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Rollback_Context._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromGlideRecord(obj) {\n\t\tif (!obj) return null;\n\t\tif (obj.isValidRecord()) {\n\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Rollback_Context\" != 'ecc_queue' && obj.source == \"shs_arbfw_appd_Rollback_Context\") {\n\t\t\t\tobj.state = \"processing\";\n\t\t\t\tobj.update();\n\n\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\tresp.queue = 'output';\n\t\t\t\tresp.agent = obj.agent;\n\t\t\t\tresp.topic = obj.topic;\n\t\t\t\tresp.name = obj.name;\n\t\t\t\tresp.source = obj.source;\n\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\tlet ret = new shs_arbfw_appd_Rollback_Context()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t});\n\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t}\n\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\tresp.insert();\n\n\t\t\t\tobj.state = \"processed\";\n\t\t\t\tobj.update();\n\t\t\t\treturn resp;\n\t\t\t} else {\n\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\tapplication: obj.getValue(\"application\"),\n\n\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tobj.query();\n\t\t\tlet grRet = [];\n\t\t\twhile (obj.next()) grRet.push(this._fromGlideRecord(obj));\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Rollback_Context._fromGlideRecord(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\treturn grRet;\n\t\t}\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\tundefined\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_appd_Rollback_Context()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\tif (/((([A-Za-z]{3,9}:(?:/ / ) ? )( ? : [-;: &= +$, w] + @) ? [A - Za - z0 - 9. - ] + | ( ? : www. | [-;: &= +$, w] + @)[A - Za - z0 - 9. - ] + )(( ? : /[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)/g.test(obj)) {\n\t\t\tvar msg = new sn_ws.RESTMessageV2();\n\t\t\tmsg.setEndpoint(obj);\n\t\t\tmsg.setRequestHeader('Content-Type', 'application/json');\n\t\t\tmsg.setHttpMethod('get');\n\t\t\treturn this._fromDocument(msg.execute().getBody());\n\t\t}\n\n\t\ttry {\n\t\t\tobj = JSON.parse(obj);\n\t\t} catch (ex) {\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Rollback_Context._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\tlet _obj = {\n\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))\n\t\t\t};\n\t\t\t_obj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(this))] = obj;\n\t\t\tobj = _obj;\n\t\t}\n\t\treturn this._fromDocument(obj);\n\t}\n\telse if (typeof(obj) === 'object') {\n\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\treturn this._fromGlideRecord(obj);\n\t\t} else if (obj._fromDocument) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Rollback_Context._fromDocument(): \" + \"redundent call\");\n\t\t\treturn obj;\n\t\t} else if (Array.isArray(obj)) {\n\t\t\treturn obj.map(function(o) {\n\t\t\t\treturn new shs_arbfw_appd_Rollback_Context()._fromDocument(o)\n\t\t\t});\n\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(obj))));\n\n\t\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Rollback_Context._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.application) !== 'undefined') {\n\n\t\t\t\t\tthis.application(new shs_arbfw_appd_Application()._fromDocument(obj.application));\n\t\t\t\t}\n\n\t\t\t} else { // if(obj.constructor.name==\"Rollback_Context\"){\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Rollback_Context._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t}\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Rollback_Context._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\treturn null;\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Rollback_Context._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Rollback_Context._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Rollback_Context._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\treturn this;\n}\n\n_insertAssert() {\n\treturn true;\n}\n\n_updateAssert() {\n\treturn true;\n}\n\n_storeAssert() {\n\treturn true;\n}\n\n_findAssert() {\n\treturn true;\n}\n\n_new(c) {\n\n\treturn new shs_arbfw_appd_Platform._new(c);\n\n}\n\n_toDocument(arFields) {\n\n\tlet ret = undefined || {};\n\n\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tret.active = this.active();\n\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tret.enabled = this.enabled();\n\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tret.code = this.code();\n\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tret.order = this.order();\n\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tret.date = this.date();\n\n\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tret.name = this.name();\n\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tret.remark = this.remark();\n\n\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t}\n\n\tif (typeof(this._application) !== 'undefined') {\n\t\tret.application = this.application();\n\n\t\tif (ret.application) {\n\t\t\tret.application = ret.application._toDocument();\n\t\t\tif (typeof(ret.application) === 'object' && !Object.keys(ret.application).length) ret.application = null;\n\t\t}\n\n\t}\n\n\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\treturn !arFields.find(function(_k) {\n\t\t\treturn _k == k;\n\t\t});\n\t}).forEach(function(k) {\n\t\tdelete ret[k];\n\t});\n\n\treturn ret;\n}\n\n_unique(keys, ret) {\n\tret = ret || new shs_arbfw_appd_Rollback_Context();\n\n\tundefined\n\n\t// if(this.Id) ret.Id = this.Id;\n\tif (!keys) {\n\n\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (typeof(this.application()) !== 'undefined') ret.application(this.application()._unique());\n\n\t} else {\n\n\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t\tif (keys.indexOf(\"application\") >= 0 && typeof(this.application()) !== 'undefined') ret.application(this.application()._unique());\n\n\t}\n\n\treturn ret;\n}\n\n_query(gq) {\n\tlet arFields = Object.keys(global.Schema.of('sys_rollback_context', ['*'])['sys_rollback_context']);\n\n\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('sys_rollback_context');\n\n\tundefined\n\n\tlet idf = ((function(r) {\n\t\tlet ret = 'sys_id';\n\t\tif (typeof(r.__idField) === 'function') {\n\t\t\tret = r.__idField();\n\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\tret = r.__idField || this.__idField();\n\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\tret = 'Id';\n\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\tret = 'sys_id';\n\t\t}\n\t\treturn ret;\n\t})(this));\n\tif (idf == 'Id') idf = 'sys_id';\n\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tlet coop = this._active_coop || '=';\n\n\t\tlet v = this.active();\n\n\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Rollback_Context._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tlet coop = this._enabled_coop || '=';\n\n\t\tlet v = this.enabled();\n\n\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Rollback_Context._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tlet coop = this._code_coop || '=';\n\n\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.code();\n\n\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Rollback_Context._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tlet coop = this._order_coop || '=';\n\n\t\tlet v = this.order();\n\n\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Rollback_Context._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tlet coop = this._date_coop || '=';\n\n\t\tlet v = this.date();\n\n\t\tif (v) {\n\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t}\n\n\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Rollback_Context._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tlet coop = this._name_coop || '=';\n\n\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.name();\n\n\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Rollback_Context._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tlet coop = this._remark_coop || '=';\n\n\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.remark();\n\n\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Rollback_Context._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._application) !== 'undefined') {\n\t\tlet coop = this._application_coop || '=';\n\n\t\tlet v = this.application();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Rollback Context\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Rollback_Context._query(): \"+ \"application \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Rollback_Context._query(): \" + \"application[application] resuled in undefined: \" + JSON.stringify(this.application()));\n\t\t}\n\n\t\tif (arFields.indexOf('application') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Rollback_Context._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('application');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('application');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('application', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Rollback_Context._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\treturn this._queryGQ;\n}\n\n_save(obj) {\n\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\treturn new shs_arbfw_appd_Rollback_Context()._save(o)\n\t});\n\n\tlet _obj = {};\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Rollback_Context._save(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\tObject.keys(obj).filter(function(k) {\n\t\treturn Object.keys(global.Schema.of('sys_rollback_context', ['*'])['sys_rollback_context']).filter(function(_k) {\n\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t}).indexOf(k.toLowerCase()) >= 0\n\t}).forEach(function(k) {\n\t\t_obj[k.toLowerCase()] = obj[k]\n\t});\n\n\tObject.keys(_obj).forEach(function(k) {\n\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Rollback_Context._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tdelete _obj[k];\n\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Rollback_Context._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t}\n\t});\n\n\tlet _this = null;\n\tif (obj.__keys) {\n\t\tlet kObj = {};\n\t\tkObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(_obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))));\n\t\tobj.__keys.forEach(function(k) {\n\t\t\tkObj[k] = _obj[k]\n\t\t});\n\t\t_this = new shs_arbfw_appd_Rollback_Context()._fromDocument(kObj);\n\t} else {\n\t\t_this = new shs_arbfw_appd_Rollback_Context()._fromDocument(_obj)._unique();\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Rollback_Context._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\tdelete _obj.__idField;\n\n\ttry {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Rollback_Context._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\tObject.keys(_obj).filter(function(k) {\n\t\t\treturn k.toLowerCase() != k;\n\t\t}).forEach(function(k) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Rollback_Context._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tvar lk = k.toLowerCase();\n\t\t\t_obj[lk] = _obj[k];\n\t\t\tdelete _obj[k];\n\t\t});\n\n\t\tlet gq = new global.GlideQuery(obj.__type || 'sys_rollback_context');\n\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Rollback_Context._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\tif (_obj.sys_id) {\n\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t} else {\n\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\tgq = gq.insert(_obj);\n\t\t}\n\t\tlet _fObj = {};\n\t\t_fObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))));\n\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('sys_rollback_context', ['*'])['sys_rollback_context']))));\n\t} catch (ex) {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Rollback_Context._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Rollback_Context._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\treturn this;\n\t}\n\n\treturn this;\n}\n\n/************* Rollback_Context.store() **********************/\nstore(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Rollback_Context.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Rollback_Context.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Rollback_Context.store(): \" + \"executing locally \");\n\n\t\t// store locally\n\t\treturn this._save(this._toDocument());\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Rollback_Context.findAll() **********************/\nfindAll(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Rollback_Context.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Rollback_Context.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Rollback_Context.findAll(): \" + \"executing locally \");\n\n\t\t// findAll locally\n\t\tlet gr = new GlideRecord('sys_rollback_context');\n\t\tgr.addEncodedQuery(this._toEQuery());\n\t\treturn this._fromDocument(gr);\n\n\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('sys_rollback_context', ['*'])['sys_rollback_context'])));\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Rollback_Context.find() **********************/\nfind(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Rollback_Context.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Rollback_Context.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Rollback_Context.find(): \" + \"executing locally \");\n\n\t\tlet ret = this.findAll();\n\t\treturn ret.length ? ret[0] : null;\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"scriptFile_Script_Compatibilitys":[{"active":true,"enabled":true}],"client_callable":true,"sys_name":"shs_arbfw_appd_Script_File","api_name":"x_1790593_arboard.shs_arbfw_appd_Script_File","name":"shs_arbfw_appd_Script_File","script":"class shs_arbfw_appd_Script_File extends global.AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"Application Designer\";\n\t\tthis.__type = \"shs_arbfw_appd_Script_File\";\n\t\tthis.__alias = \"shs_arbfw_appd\";\n\t\tthis.__scope = \"shs_arbfw\";\n\t}\n\n\t/************* Script_File.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Script_File.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Script_File.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Script_File.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Script_File.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//(typeof(window)!=='undefined'?alert:gs.info)(\"Script_File.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Script_File.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Script_File.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Script_File.application GETTERS AND SETTERS **********************/\n\tapplication(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._application = v;\n\t\t\tthis._application_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._application;\n\t\t}\n\t}\n\n\t/************* Script_File.scriptFile_Script_Compatibilitys GETTERS AND SETTERS **********************/\n\tscriptFile_Script_Compatibilitys(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._scriptFile_Script_Compatibilitys = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._scriptFile_Script_Compatibilitys_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._scriptFile_Script_Compatibilitys;\n\t\t}\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = undefined || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\tif (this._application) ret += /*(this._application_coop || '=') + */ this.application()._toEQuery(sPath + 'application.');\n\n\t\t(this.scriptFile_Script_Compatibilitys() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYScript_Compatibility.scriptFile,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Script_File._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn new shs_arbfw_appd_Script_File()._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Script_File._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Script_File._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromGlideRecord(obj) {\n\t\tif (!obj) return null;\n\t\tif (obj.isValidRecord()) {\n\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Script_File\" != 'ecc_queue' && obj.source == \"shs_arbfw_appd_Script_File\") {\n\t\t\t\tobj.state = \"processing\";\n\t\t\t\tobj.update();\n\n\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\tresp.queue = 'output';\n\t\t\t\tresp.agent = obj.agent;\n\t\t\t\tresp.topic = obj.topic;\n\t\t\t\tresp.name = obj.name;\n\t\t\t\tresp.source = obj.source;\n\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\tlet ret = new shs_arbfw_appd_Script_File()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t});\n\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t}\n\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\tresp.insert();\n\n\t\t\t\tobj.state = \"processed\";\n\t\t\t\tobj.update();\n\t\t\t\treturn resp;\n\t\t\t} else {\n\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\tapplication: obj.getValue(\"application\"),\n\n\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tobj.query();\n\t\t\tlet grRet = [];\n\t\t\twhile (obj.next()) grRet.push(this._fromGlideRecord(obj));\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Script_File._fromGlideRecord(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\treturn grRet;\n\t\t}\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\tundefined\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_appd_Script_File()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\tif (/((([A-Za-z]{3,9}:(?:/ / ) ? )( ? : [-;: &= +$, w] + @) ? [A - Za - z0 - 9. - ] + | ( ? : www. | [-;: &= +$, w] + @)[A - Za - z0 - 9. - ] + )(( ? : /[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)/g.test(obj)) {\n\t\t\tvar msg = new sn_ws.RESTMessageV2();\n\t\t\tmsg.setEndpoint(obj);\n\t\t\tmsg.setRequestHeader('Content-Type', 'application/json');\n\t\t\tmsg.setHttpMethod('get');\n\t\t\treturn this._fromDocument(msg.execute().getBody());\n\t\t}\n\n\t\ttry {\n\t\t\tobj = JSON.parse(obj);\n\t\t} catch (ex) {\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Script_File._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\tlet _obj = {\n\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))\n\t\t\t};\n\t\t\t_obj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(this))] = obj;\n\t\t\tobj = _obj;\n\t\t}\n\t\treturn this._fromDocument(obj);\n\t}\n\telse if (typeof(obj) === 'object') {\n\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\treturn this._fromGlideRecord(obj);\n\t\t} else if (obj._fromDocument) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Script_File._fromDocument(): \" + \"redundent call\");\n\t\t\treturn obj;\n\t\t} else if (Array.isArray(obj)) {\n\t\t\treturn obj.map(function(o) {\n\t\t\t\treturn new shs_arbfw_appd_Script_File()._fromDocument(o)\n\t\t\t});\n\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(obj))));\n\n\t\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Script_File._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.application) !== 'undefined') {\n\n\t\t\t\t\tthis.application(new shs_arbfw_appd_Application()._fromDocument(obj.application));\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.scriptFile_Script_Compatibilitys) !== 'undefined') this.scriptFile_Script_Compatibilitys(new shs_arbfw_appd_Script_Compatibility()._fromDocument(obj.scriptFile_Script_Compatibilitys));\n\n\t\t\t} else { // if(obj.constructor.name==\"Script_File\"){\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Script_File._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t}\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Script_File._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\treturn null;\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Script_File._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Script_File._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Script_File._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\treturn this;\n}\n\n_insertAssert() {\n\treturn true;\n}\n\n_updateAssert() {\n\treturn true;\n}\n\n_storeAssert() {\n\treturn true;\n}\n\n_findAssert() {\n\treturn true;\n}\n\n_new(c) {\n\n\treturn new shs_arbfw_appd_Platform._new(c);\n\n}\n\n_toDocument(arFields) {\n\n\tlet ret = undefined || {};\n\n\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tret.active = this.active();\n\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tret.enabled = this.enabled();\n\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tret.code = this.code();\n\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tret.order = this.order();\n\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tret.date = this.date();\n\n\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tret.name = this.name();\n\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tret.remark = this.remark();\n\n\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t}\n\n\tif (typeof(this._application) !== 'undefined') {\n\t\tret.application = this.application();\n\n\t\tif (ret.application) {\n\t\t\tret.application = ret.application._toDocument();\n\t\t\tif (typeof(ret.application) === 'object' && !Object.keys(ret.application).length) ret.application = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this.scriptFile_Script_Compatibilitys()) !== 'undefined') ret.scriptFile_Script_Compatibilitys = this.scriptFile_Script_Compatibilitys().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\treturn !arFields.find(function(_k) {\n\t\t\treturn _k == k;\n\t\t});\n\t}).forEach(function(k) {\n\t\tdelete ret[k];\n\t});\n\n\treturn ret;\n}\n\n_unique(keys, ret) {\n\tret = ret || new shs_arbfw_appd_Script_File();\n\n\tundefined\n\n\t// if(this.Id) ret.Id = this.Id;\n\tif (!keys) {\n\n\t\tif (typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t} else {\n\n\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t\tif (keys.indexOf(\"application\") >= 0 && typeof(this.application()) !== 'undefined') ret.application(this.application()._unique());\n\n\t}\n\n\treturn ret;\n}\n\n_query(gq) {\n\tlet arFields = Object.keys(global.Schema.of('sys_script_include', ['*'])['sys_script_include']);\n\n\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('sys_script_include');\n\n\tundefined\n\n\tlet idf = ((function(r) {\n\t\tlet ret = 'sys_id';\n\t\tif (typeof(r.__idField) === 'function') {\n\t\t\tret = r.__idField();\n\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\tret = r.__idField || this.__idField();\n\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\tret = 'Id';\n\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\tret = 'sys_id';\n\t\t}\n\t\treturn ret;\n\t})(this));\n\tif (idf == 'Id') idf = 'sys_id';\n\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tlet coop = this._active_coop || '=';\n\n\t\tlet v = this.active();\n\n\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Script_File._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tlet coop = this._enabled_coop || '=';\n\n\t\tlet v = this.enabled();\n\n\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Script_File._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tlet coop = this._code_coop || '=';\n\n\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.code();\n\n\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Script_File._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tlet coop = this._order_coop || '=';\n\n\t\tlet v = this.order();\n\n\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Script_File._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tlet coop = this._date_coop || '=';\n\n\t\tlet v = this.date();\n\n\t\tif (v) {\n\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t}\n\n\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Script_File._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tlet coop = this._name_coop || '=';\n\n\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.name();\n\n\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Script_File._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tlet coop = this._remark_coop || '=';\n\n\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.remark();\n\n\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Script_File._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._application) !== 'undefined') {\n\t\tlet coop = this._application_coop || '=';\n\n\t\tlet v = this.application();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Script File\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Script_File._query(): \"+ \"application \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Script_File._query(): \" + \"application[application] resuled in undefined: \" + JSON.stringify(this.application()));\n\t\t}\n\n\t\tif (arFields.indexOf('application') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Script_File._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('application');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('application');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('application', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Script_File._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\treturn this._queryGQ;\n}\n\n_save(obj) {\n\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\treturn new shs_arbfw_appd_Script_File()._save(o)\n\t});\n\n\tlet _obj = {};\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Script_File._save(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\tObject.keys(obj).filter(function(k) {\n\t\treturn Object.keys(global.Schema.of('sys_script_include', ['*'])['sys_script_include']).filter(function(_k) {\n\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t}).indexOf(k.toLowerCase()) >= 0\n\t}).forEach(function(k) {\n\t\t_obj[k.toLowerCase()] = obj[k]\n\t});\n\n\tObject.keys(_obj).forEach(function(k) {\n\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Script_File._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tdelete _obj[k];\n\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Script_File._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t}\n\t});\n\n\tlet _this = null;\n\tif (obj.__keys) {\n\t\tlet kObj = {};\n\t\tkObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(_obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))));\n\t\tobj.__keys.forEach(function(k) {\n\t\t\tkObj[k] = _obj[k]\n\t\t});\n\t\t_this = new shs_arbfw_appd_Script_File()._fromDocument(kObj);\n\t} else {\n\t\t_this = new shs_arbfw_appd_Script_File()._fromDocument(_obj)._unique();\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Script_File._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\tdelete _obj.__idField;\n\n\ttry {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Script_File._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\tObject.keys(_obj).filter(function(k) {\n\t\t\treturn k.toLowerCase() != k;\n\t\t}).forEach(function(k) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Script_File._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tvar lk = k.toLowerCase();\n\t\t\t_obj[lk] = _obj[k];\n\t\t\tdelete _obj[k];\n\t\t});\n\n\t\tlet gq = new global.GlideQuery(obj.__type || 'sys_script_include');\n\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Script_File._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\tif (_obj.sys_id) {\n\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t} else {\n\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\tgq = gq.insert(_obj);\n\t\t}\n\t\tlet _fObj = {};\n\t\t_fObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))));\n\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('sys_script_include', ['*'])['sys_script_include']))));\n\t} catch (ex) {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Script_File._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Script_File._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\treturn this;\n\t}\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Script_File._save(): \" + \"obj.scriptFile_Script_Compatibilitys: \" + JSON.stringify(obj.scriptFile_Script_Compatibilitys, null, 4));\n\tif (Array.isArray(obj.scriptFile_Script_Compatibilitys)) this.scriptFile_Script_Compatibilitys(obj.scriptFile_Script_Compatibilitys.map(function(ta) {\n\t\treturn new shs_arbfw_appd_Script_Compatibility()._save(ta)\n\t}));\n\n\treturn this;\n}\n\n/************* Script_File.store() **********************/\nstore(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Script_File.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Script_File.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Script_File.store(): \" + \"executing locally \");\n\n\t\t// store locally\n\t\treturn this._save(this._toDocument());\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Script_File.findAll() **********************/\nfindAll(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Script_File.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Script_File.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Script_File.findAll(): \" + \"executing locally \");\n\n\t\t// findAll locally\n\t\tlet gr = new GlideRecord('sys_script_include');\n\t\tgr.addEncodedQuery(this._toEQuery());\n\t\treturn this._fromDocument(gr);\n\n\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('sys_script_include', ['*'])['sys_script_include'])));\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Script_File.find() **********************/\nfind(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Script_File.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Script_File.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Script_File.find(): \" + \"executing locally \");\n\n\t\tlet ret = this.findAll();\n\t\treturn ret.length ? ret[0] : null;\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"scriptFile_Script_Compatibilitys":[{"active":true,"enabled":true}],"client_callable":true,"sys_name":"shs_arbfw_appd_Fix_Script","api_name":"x_1790593_arboard.shs_arbfw_appd_Fix_Script","name":"shs_arbfw_appd_Fix_Script","script":"class shs_arbfw_appd_Fix_Script extends global.AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"Application Designer\";\n\t\tthis.__type = \"shs_arbfw_appd_Fix_Script\";\n\t\tthis.__alias = \"shs_arbfw_appd\";\n\t\tthis.__scope = \"shs_arbfw\";\n\t}\n\n\t/************* Fix_Script.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Fix_Script.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Fix_Script.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Fix_Script.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Fix_Script.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//(typeof(window)!=='undefined'?alert:gs.info)(\"Fix_Script.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Fix_Script.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Fix_Script.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Fix_Script.application GETTERS AND SETTERS **********************/\n\tapplication(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._application = v;\n\t\t\tthis._application_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._application;\n\t\t}\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = undefined || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\tif (this._application) ret += /*(this._application_coop || '=') + */ this.application()._toEQuery(sPath + 'application.');\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Fix_Script._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn new shs_arbfw_appd_Fix_Script()._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Fix_Script._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Fix_Script._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromGlideRecord(obj) {\n\t\tif (!obj) return null;\n\t\tif (obj.isValidRecord()) {\n\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Fix_Script\" != 'ecc_queue' && obj.source == \"shs_arbfw_appd_Fix_Script\") {\n\t\t\t\tobj.state = \"processing\";\n\t\t\t\tobj.update();\n\n\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\tresp.queue = 'output';\n\t\t\t\tresp.agent = obj.agent;\n\t\t\t\tresp.topic = obj.topic;\n\t\t\t\tresp.name = obj.name;\n\t\t\t\tresp.source = obj.source;\n\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\tlet ret = new shs_arbfw_appd_Fix_Script()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t});\n\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t}\n\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\tresp.insert();\n\n\t\t\t\tobj.state = \"processed\";\n\t\t\t\tobj.update();\n\t\t\t\treturn resp;\n\t\t\t} else {\n\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\tapplication: obj.getValue(\"application\"),\n\n\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tobj.query();\n\t\t\tlet grRet = [];\n\t\t\twhile (obj.next()) grRet.push(this._fromGlideRecord(obj));\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Fix_Script._fromGlideRecord(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\treturn grRet;\n\t\t}\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\tundefined\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_appd_Fix_Script()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\tif (/((([A-Za-z]{3,9}:(?:/ / ) ? )( ? : [-;: &= +$, w] + @) ? [A - Za - z0 - 9. - ] + | ( ? : www. | [-;: &= +$, w] + @)[A - Za - z0 - 9. - ] + )(( ? : /[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)/g.test(obj)) {\n\t\t\tvar msg = new sn_ws.RESTMessageV2();\n\t\t\tmsg.setEndpoint(obj);\n\t\t\tmsg.setRequestHeader('Content-Type', 'application/json');\n\t\t\tmsg.setHttpMethod('get');\n\t\t\treturn this._fromDocument(msg.execute().getBody());\n\t\t}\n\n\t\ttry {\n\t\t\tobj = JSON.parse(obj);\n\t\t} catch (ex) {\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Fix_Script._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\tlet _obj = {\n\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))\n\t\t\t};\n\t\t\t_obj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(this))] = obj;\n\t\t\tobj = _obj;\n\t\t}\n\t\treturn this._fromDocument(obj);\n\t}\n\telse if (typeof(obj) === 'object') {\n\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\treturn this._fromGlideRecord(obj);\n\t\t} else if (obj._fromDocument) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Fix_Script._fromDocument(): \" + \"redundent call\");\n\t\t\treturn obj;\n\t\t} else if (Array.isArray(obj)) {\n\t\t\treturn obj.map(function(o) {\n\t\t\t\treturn new shs_arbfw_appd_Fix_Script()._fromDocument(o)\n\t\t\t});\n\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(obj))));\n\n\t\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Fix_Script._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.application) !== 'undefined') {\n\n\t\t\t\t\tthis.application(new shs_arbfw_appd_Application()._fromDocument(obj.application));\n\t\t\t\t}\n\n\t\t\t} else { // if(obj.constructor.name==\"Fix_Script\"){\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Fix_Script._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t}\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Fix_Script._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\treturn null;\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Fix_Script._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Fix_Script._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Fix_Script._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\treturn this;\n}\n\n_insertAssert() {\n\treturn true;\n}\n\n_updateAssert() {\n\treturn true;\n}\n\n_storeAssert() {\n\treturn true;\n}\n\n_findAssert() {\n\treturn true;\n}\n\n_new(c) {\n\n\treturn new shs_arbfw_appd_Platform._new(c);\n\n}\n\n_toDocument(arFields) {\n\n\tlet ret = undefined || {};\n\n\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tret.active = this.active();\n\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tret.enabled = this.enabled();\n\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tret.code = this.code();\n\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tret.order = this.order();\n\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tret.date = this.date();\n\n\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tret.name = this.name();\n\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tret.remark = this.remark();\n\n\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t}\n\n\tif (typeof(this._application) !== 'undefined') {\n\t\tret.application = this.application();\n\n\t\tif (ret.application) {\n\t\t\tret.application = ret.application._toDocument();\n\t\t\tif (typeof(ret.application) === 'object' && !Object.keys(ret.application).length) ret.application = null;\n\t\t}\n\n\t}\n\n\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\treturn !arFields.find(function(_k) {\n\t\t\treturn _k == k;\n\t\t});\n\t}).forEach(function(k) {\n\t\tdelete ret[k];\n\t});\n\n\treturn ret;\n}\n\n_unique(keys, ret) {\n\tret = ret || new shs_arbfw_appd_Fix_Script();\n\n\tundefined\n\n\t// if(this.Id) ret.Id = this.Id;\n\tif (!keys) {\n\n\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t} else {\n\n\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t\tif (keys.indexOf(\"application\") >= 0 && typeof(this.application()) !== 'undefined') ret.application(this.application()._unique());\n\n\t}\n\n\treturn ret;\n}\n\n_query(gq) {\n\tlet arFields = Object.keys(global.Schema.of('sys_script_fix', ['*'])['sys_script_fix']);\n\n\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('sys_script_fix');\n\n\tundefined\n\n\tlet idf = ((function(r) {\n\t\tlet ret = 'sys_id';\n\t\tif (typeof(r.__idField) === 'function') {\n\t\t\tret = r.__idField();\n\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\tret = r.__idField || this.__idField();\n\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\tret = 'Id';\n\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\tret = 'sys_id';\n\t\t}\n\t\treturn ret;\n\t})(this));\n\tif (idf == 'Id') idf = 'sys_id';\n\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tlet coop = this._active_coop || '=';\n\n\t\tlet v = this.active();\n\n\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Fix_Script._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tlet coop = this._enabled_coop || '=';\n\n\t\tlet v = this.enabled();\n\n\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Fix_Script._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tlet coop = this._code_coop || '=';\n\n\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.code();\n\n\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Fix_Script._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tlet coop = this._order_coop || '=';\n\n\t\tlet v = this.order();\n\n\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Fix_Script._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tlet coop = this._date_coop || '=';\n\n\t\tlet v = this.date();\n\n\t\tif (v) {\n\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t}\n\n\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Fix_Script._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tlet coop = this._name_coop || '=';\n\n\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.name();\n\n\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Fix_Script._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tlet coop = this._remark_coop || '=';\n\n\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.remark();\n\n\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Fix_Script._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._application) !== 'undefined') {\n\t\tlet coop = this._application_coop || '=';\n\n\t\tlet v = this.application();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Fix Script\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Fix_Script._query(): \"+ \"application \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Fix_Script._query(): \" + \"application[application] resuled in undefined: \" + JSON.stringify(this.application()));\n\t\t}\n\n\t\tif (arFields.indexOf('application') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Fix_Script._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('application');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('application');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('application', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Fix_Script._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\treturn this._queryGQ;\n}\n\n_save(obj) {\n\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\treturn new shs_arbfw_appd_Fix_Script()._save(o)\n\t});\n\n\tlet _obj = {};\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Fix_Script._save(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\tObject.keys(obj).filter(function(k) {\n\t\treturn Object.keys(global.Schema.of('sys_script_fix', ['*'])['sys_script_fix']).filter(function(_k) {\n\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t}).indexOf(k.toLowerCase()) >= 0\n\t}).forEach(function(k) {\n\t\t_obj[k.toLowerCase()] = obj[k]\n\t});\n\n\tObject.keys(_obj).forEach(function(k) {\n\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Fix_Script._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tdelete _obj[k];\n\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Fix_Script._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t}\n\t});\n\n\tlet _this = null;\n\tif (obj.__keys) {\n\t\tlet kObj = {};\n\t\tkObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(_obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))));\n\t\tobj.__keys.forEach(function(k) {\n\t\t\tkObj[k] = _obj[k]\n\t\t});\n\t\t_this = new shs_arbfw_appd_Fix_Script()._fromDocument(kObj);\n\t} else {\n\t\t_this = new shs_arbfw_appd_Fix_Script()._fromDocument(_obj)._unique();\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Fix_Script._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\tdelete _obj.__idField;\n\n\ttry {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Fix_Script._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\tObject.keys(_obj).filter(function(k) {\n\t\t\treturn k.toLowerCase() != k;\n\t\t}).forEach(function(k) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Fix_Script._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tvar lk = k.toLowerCase();\n\t\t\t_obj[lk] = _obj[k];\n\t\t\tdelete _obj[k];\n\t\t});\n\n\t\tlet gq = new global.GlideQuery(obj.__type || 'sys_script_fix');\n\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Fix_Script._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\tif (_obj.sys_id) {\n\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t} else {\n\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\tgq = gq.insert(_obj);\n\t\t}\n\t\tlet _fObj = {};\n\t\t_fObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))));\n\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('sys_script_fix', ['*'])['sys_script_fix']))));\n\t} catch (ex) {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Fix_Script._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Fix_Script._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\treturn this;\n\t}\n\n\treturn this;\n}\n\n/************* Fix_Script.store() **********************/\nstore(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Fix_Script.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Fix_Script.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Fix_Script.store(): \" + \"executing locally \");\n\n\t\t// store locally\n\t\treturn this._save(this._toDocument());\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Fix_Script.findAll() **********************/\nfindAll(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Fix_Script.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Fix_Script.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Fix_Script.findAll(): \" + \"executing locally \");\n\n\t\t// findAll locally\n\t\tlet gr = new GlideRecord('sys_script_fix');\n\t\tgr.addEncodedQuery(this._toEQuery());\n\t\treturn this._fromDocument(gr);\n\n\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('sys_script_fix', ['*'])['sys_script_fix'])));\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Fix_Script.find() **********************/\nfind(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Fix_Script.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Fix_Script.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Fix_Script.find(): \" + \"executing locally \");\n\n\t\tlet ret = this.findAll();\n\t\treturn ret.length ? ret[0] : null;\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"scriptFile_Script_Compatibilitys":[{"active":true,"enabled":true}],"client_callable":true,"sys_name":"shs_arbfw_appd_Table","api_name":"x_1790593_arboard.shs_arbfw_appd_Table","name":"shs_arbfw_appd_Table","script":"class shs_arbfw_appd_Table extends global.AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"Application Designer\";\n\t\tthis.__type = \"shs_arbfw_appd_Table\";\n\t\tthis.__alias = \"shs_arbfw_appd\";\n\t\tthis.__scope = \"shs_arbfw\";\n\t}\n\n\t/************* Table.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Table.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Table.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Table.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Table.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//(typeof(window)!=='undefined'?alert:gs.info)(\"Table.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Table.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Table.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Table.application GETTERS AND SETTERS **********************/\n\tapplication(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._application = v;\n\t\t\tthis._application_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._application;\n\t\t}\n\t}\n\n\t/************* Table.table_Columns GETTERS AND SETTERS **********************/\n\ttable_Columns(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._table_Columns = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._table_Columns_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._table_Columns;\n\t\t}\n\t}\n\n\t/************* Table.reference_Columns GETTERS AND SETTERS **********************/\n\treference_Columns(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._reference_Columns = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._reference_Columns_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._reference_Columns;\n\t\t}\n\t}\n\n\t/************* Table.table_Save_Subscriptions GETTERS AND SETTERS **********************/\n\ttable_Save_Subscriptions(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._table_Save_Subscriptions = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._table_Save_Subscriptions_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._table_Save_Subscriptions;\n\t\t}\n\t}\n\n\t/************* Table.reference_Flow_Inputs GETTERS AND SETTERS **********************/\n\treference_Flow_Inputs(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._reference_Flow_Inputs = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._reference_Flow_Inputs_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._reference_Flow_Inputs;\n\t\t}\n\t}\n\n\t/************* Table.reference_Flow_Outputs GETTERS AND SETTERS **********************/\n\treference_Flow_Outputs(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._reference_Flow_Outputs = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._reference_Flow_Outputs_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._reference_Flow_Outputs;\n\t\t}\n\t}\n\n\t/************* Table.reference_Flow_Variables GETTERS AND SETTERS **********************/\n\treference_Flow_Variables(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._reference_Flow_Variables = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._reference_Flow_Variables_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._reference_Flow_Variables;\n\t\t}\n\t}\n\n\t/************* Table.reference_Flow_Instance_Inputs GETTERS AND SETTERS **********************/\n\treference_Flow_Instance_Inputs(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._reference_Flow_Instance_Inputs = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._reference_Flow_Instance_Inputs_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._reference_Flow_Instance_Inputs;\n\t\t}\n\t}\n\n\t/************* Table.reference_Action_Inputs GETTERS AND SETTERS **********************/\n\treference_Action_Inputs(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._reference_Action_Inputs = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._reference_Action_Inputs_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._reference_Action_Inputs;\n\t\t}\n\t}\n\n\t/************* Table.reference_Flow_Data_Variables GETTERS AND SETTERS **********************/\n\treference_Flow_Data_Variables(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._reference_Flow_Data_Variables = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._reference_Flow_Data_Variables_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._reference_Flow_Data_Variables;\n\t\t}\n\t}\n\n\t/************* Table.extends EF: GETTERS AND SETTERS **********************/\n\textends() {\n\t\treturn /*this.ef_extends = */ ((\n\t\t\tfunction() {\n\t\t\t\ttry {\n\n\t\t\t\t\tlet __ret = undefined;\n\n\t\t\t\t\t__ret = (_this) => _this._map('class.extends', false, '_toJSON', undefined, undefined, undefined, _this.name());\n\n\t\t\t\t\tif (typeof(__ret) === 'string' && __ret.startsWith(\"s(\") && __ret.endsWith(\")\")) {\n\t\t\t\t\t\t__ret = this.runScript(__ret.slice(2, -1));\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof(__ret) === \"function\") {\n\t\t\t\t\t\t__ret = __ret(this);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn __ret;\n\n\t\t\t\t} catch (_vOfEx) {\n\t\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Table.extends(): \" + 'valueOf', _vOfEx, JSON.parse(((typeof(this) !== \"undefined\" && typeof(this._atob) !== \"undefined\") ? this._atob : (typeof(_FrEMD) !== \"undefined\" ? _FrEMD._atob : atob))(`eyJTZXJ2aWNlTm93IjoiKF90aGlzKSA9PiBfdGhpcy5fbWFwKCdjbGFzcy5leHRlbmRzJywgZmFsc2UsICdfdG9KU09OJywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgX3RoaXMubmFtZSgpKSJ9`), (key, value) => {\n\t\t\t\t\t\tif (typeof(value) === \"string\" && value.indexOf(\"=>\") > 0) return eval(\"(\" + value + \")\");\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t}\n\t\t)());\n\t}\n\n\t/************* Table.__idField EF: GETTERS AND SETTERS **********************/\n\t__idField() {\n\t\treturn /*this.ef___idField = */ ((\n\t\t\tfunction() {\n\t\t\t\ttry {\n\n\t\t\t\t\tlet __ret = undefined;\n\n\t\t\t\t\t__ret = \"name\";\n\n\t\t\t\t\tif (typeof(__ret) === 'string' && __ret.startsWith(\"s(\") && __ret.endsWith(\")\")) {\n\t\t\t\t\t\t__ret = this.runScript(__ret.slice(2, -1));\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof(__ret) === \"function\") {\n\t\t\t\t\t\t__ret = __ret(this);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn __ret;\n\n\t\t\t\t} catch (_vOfEx) {\n\t\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Table.__idField(): \" + 'valueOf', _vOfEx, JSON.parse(((typeof(this) !== \"undefined\" && typeof(this._atob) !== \"undefined\") ? this._atob : (typeof(_FrEMD) !== \"undefined\" ? _FrEMD._atob : atob))(`eyJTZXJ2aWNlTm93IjoibmFtZSJ9`), (key, value) => {\n\t\t\t\t\t\tif (typeof(value) === \"string\" && value.indexOf(\"=>\") > 0) return eval(\"(\" + value + \")\");\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t}\n\t\t)());\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = undefined || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\tif (this._application) ret += /*(this._application_coop || '=') + */ this.application()._toEQuery(sPath + 'application.');\n\n\t\t(this.table_Columns() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYColumn.table,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(this.reference_Columns() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYColumn.reference,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(this.table_Save_Subscriptions() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYSave_Subscription.table,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(this.reference_Flow_Inputs() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYFlow_Input.reference,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(this.reference_Flow_Outputs() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYFlow_Output.reference,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(this.reference_Flow_Variables() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYFlow_Variable.reference,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(this.reference_Flow_Instance_Inputs() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYFlow_Instance_Input.reference,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(this.reference_Action_Inputs() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYAction_Input.reference,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(this.reference_Flow_Data_Variables() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYFlow_Data_Variable.reference,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Table._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn new shs_arbfw_appd_Table()._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Table._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Table._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromGlideRecord(obj) {\n\t\tif (!obj) return null;\n\t\tif (obj.isValidRecord()) {\n\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Table\" != 'ecc_queue' && obj.source == \"shs_arbfw_appd_Table\") {\n\t\t\t\tobj.state = \"processing\";\n\t\t\t\tobj.update();\n\n\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\tresp.queue = 'output';\n\t\t\t\tresp.agent = obj.agent;\n\t\t\t\tresp.topic = obj.topic;\n\t\t\t\tresp.name = obj.name;\n\t\t\t\tresp.source = obj.source;\n\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\tlet ret = new shs_arbfw_appd_Table()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t});\n\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t}\n\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\tresp.insert();\n\n\t\t\t\tobj.state = \"processed\";\n\t\t\t\tobj.update();\n\t\t\t\treturn resp;\n\t\t\t} else {\n\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\tapplication: obj.getValue(\"application\"),\n\n\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tobj.query();\n\t\t\tlet grRet = [];\n\t\t\twhile (obj.next()) grRet.push(this._fromGlideRecord(obj));\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Table._fromGlideRecord(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\treturn grRet;\n\t\t}\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\tundefined\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_appd_Table()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\tif (/((([A-Za-z]{3,9}:(?:/ / ) ? )( ? : [-;: &= +$, w] + @) ? [A - Za - z0 - 9. - ] + | ( ? : www. | [-;: &= +$, w] + @)[A - Za - z0 - 9. - ] + )(( ? : /[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)/g.test(obj)) {\n\t\t\tvar msg = new sn_ws.RESTMessageV2();\n\t\t\tmsg.setEndpoint(obj);\n\t\t\tmsg.setRequestHeader('Content-Type', 'application/json');\n\t\t\tmsg.setHttpMethod('get');\n\t\t\treturn this._fromDocument(msg.execute().getBody());\n\t\t}\n\n\t\ttry {\n\t\t\tobj = JSON.parse(obj);\n\t\t} catch (ex) {\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Table._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\tlet _obj = {\n\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))\n\t\t\t};\n\t\t\t_obj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(this))] = obj;\n\t\t\tobj = _obj;\n\t\t}\n\t\treturn this._fromDocument(obj);\n\t}\n\telse if (typeof(obj) === 'object') {\n\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\treturn this._fromGlideRecord(obj);\n\t\t} else if (obj._fromDocument) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Table._fromDocument(): \" + \"redundent call\");\n\t\t\treturn obj;\n\t\t} else if (Array.isArray(obj)) {\n\t\t\treturn obj.map(function(o) {\n\t\t\t\treturn new shs_arbfw_appd_Table()._fromDocument(o)\n\t\t\t});\n\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(obj))));\n\n\t\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Table._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.application) !== 'undefined') {\n\n\t\t\t\t\tthis.application(new shs_arbfw_appd_Application()._fromDocument(obj.application));\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.table_Columns) !== 'undefined') this.table_Columns(new shs_arbfw_appd_Column()._fromDocument(obj.table_Columns));\n\n\t\t\t\tif (typeof(obj.reference_Columns) !== 'undefined') this.reference_Columns(new shs_arbfw_appd_Column()._fromDocument(obj.reference_Columns));\n\n\t\t\t\tif (typeof(obj.table_Save_Subscriptions) !== 'undefined') this.table_Save_Subscriptions(new shs_arbfw_appd_Save_Subscription()._fromDocument(obj.table_Save_Subscriptions));\n\n\t\t\t\tif (typeof(obj.reference_Flow_Inputs) !== 'undefined') this.reference_Flow_Inputs(new shs_arbfw_appd_Flow_Input()._fromDocument(obj.reference_Flow_Inputs));\n\n\t\t\t\tif (typeof(obj.reference_Flow_Outputs) !== 'undefined') this.reference_Flow_Outputs(new shs_arbfw_appd_Flow_Output()._fromDocument(obj.reference_Flow_Outputs));\n\n\t\t\t\tif (typeof(obj.reference_Flow_Variables) !== 'undefined') this.reference_Flow_Variables(new shs_arbfw_appd_Flow_Variable()._fromDocument(obj.reference_Flow_Variables));\n\n\t\t\t\tif (typeof(obj.reference_Flow_Instance_Inputs) !== 'undefined') this.reference_Flow_Instance_Inputs(new shs_arbfw_appd_Flow_Instance_Input()._fromDocument(obj.reference_Flow_Instance_Inputs));\n\n\t\t\t\tif (typeof(obj.reference_Action_Inputs) !== 'undefined') this.reference_Action_Inputs(new shs_arbfw_appd_Action_Input()._fromDocument(obj.reference_Action_Inputs));\n\n\t\t\t\tif (typeof(obj.reference_Flow_Data_Variables) !== 'undefined') this.reference_Flow_Data_Variables(new shs_arbfw_appd_Flow_Data_Variable()._fromDocument(obj.reference_Flow_Data_Variables));\n\n\t\t\t} else { // if(obj.constructor.name==\"Table\"){\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Table._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t}\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Table._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\treturn null;\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Table._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Table._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Table._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\treturn this;\n}\n\n_insertAssert() {\n\treturn true;\n}\n\n_updateAssert() {\n\treturn true;\n}\n\n_storeAssert() {\n\treturn true;\n}\n\n_findAssert() {\n\treturn true;\n}\n\n_new(c) {\n\n\treturn new shs_arbfw_appd_Platform._new(c);\n\n}\n\n_toDocument(arFields) {\n\n\tlet ret = undefined || {};\n\n\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tret.active = this.active();\n\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tret.enabled = this.enabled();\n\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tret.code = this.code();\n\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tret.order = this.order();\n\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tret.date = this.date();\n\n\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tret.name = this.name();\n\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tret.remark = this.remark();\n\n\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t}\n\n\tif (typeof(this._application) !== 'undefined') {\n\t\tret.application = this.application();\n\n\t\tif (ret.application) {\n\t\t\tret.application = ret.application._toDocument();\n\t\t\tif (typeof(ret.application) === 'object' && !Object.keys(ret.application).length) ret.application = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this.table_Columns()) !== 'undefined') ret.table_Columns = this.table_Columns().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (typeof(this.reference_Columns()) !== 'undefined') ret.reference_Columns = this.reference_Columns().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (typeof(this.table_Save_Subscriptions()) !== 'undefined') ret.table_Save_Subscriptions = this.table_Save_Subscriptions().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (typeof(this.reference_Flow_Inputs()) !== 'undefined') ret.reference_Flow_Inputs = this.reference_Flow_Inputs().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (typeof(this.reference_Flow_Outputs()) !== 'undefined') ret.reference_Flow_Outputs = this.reference_Flow_Outputs().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (typeof(this.reference_Flow_Variables()) !== 'undefined') ret.reference_Flow_Variables = this.reference_Flow_Variables().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (typeof(this.reference_Flow_Instance_Inputs()) !== 'undefined') ret.reference_Flow_Instance_Inputs = this.reference_Flow_Instance_Inputs().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (typeof(this.reference_Action_Inputs()) !== 'undefined') ret.reference_Action_Inputs = this.reference_Action_Inputs().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (typeof(this.reference_Flow_Data_Variables()) !== 'undefined') ret.reference_Flow_Data_Variables = this.reference_Flow_Data_Variables().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (typeof(this.extends()) !== 'undefined') ret.extends = this.extends();\n\n\tif (typeof(this.__idField()) !== 'undefined') ret.__idField = this.__idField();\n\n\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\treturn !arFields.find(function(_k) {\n\t\t\treturn _k == k;\n\t\t});\n\t}).forEach(function(k) {\n\t\tdelete ret[k];\n\t});\n\n\treturn ret;\n}\n\n_unique(keys, ret) {\n\tret = ret || new shs_arbfw_appd_Table();\n\n\tundefined\n\n\t// if(this.Id) ret.Id = this.Id;\n\tif (!keys) {\n\n\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (typeof(this.application()) !== 'undefined') ret.application(this.application()._unique());\n\n\t} else {\n\n\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t\tif (keys.indexOf(\"application\") >= 0 && typeof(this.application()) !== 'undefined') ret.application(this.application()._unique());\n\n\t}\n\n\treturn ret;\n}\n\n_query(gq) {\n\tlet arFields = Object.keys(global.Schema.of('sys_db_object', ['*'])['sys_db_object']);\n\n\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('sys_db_object');\n\n\tundefined\n\n\tlet idf = ((function(r) {\n\t\tlet ret = 'sys_id';\n\t\tif (typeof(r.__idField) === 'function') {\n\t\t\tret = r.__idField();\n\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\tret = r.__idField || this.__idField();\n\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\tret = 'Id';\n\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\tret = 'sys_id';\n\t\t}\n\t\treturn ret;\n\t})(this));\n\tif (idf == 'Id') idf = 'sys_id';\n\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tlet coop = this._active_coop || '=';\n\n\t\tlet v = this.active();\n\n\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Table._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tlet coop = this._enabled_coop || '=';\n\n\t\tlet v = this.enabled();\n\n\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Table._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tlet coop = this._code_coop || '=';\n\n\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.code();\n\n\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Table._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tlet coop = this._order_coop || '=';\n\n\t\tlet v = this.order();\n\n\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Table._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tlet coop = this._date_coop || '=';\n\n\t\tlet v = this.date();\n\n\t\tif (v) {\n\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t}\n\n\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Table._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tlet coop = this._name_coop || '=';\n\n\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.name();\n\n\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Table._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tlet coop = this._remark_coop || '=';\n\n\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.remark();\n\n\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Table._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._application) !== 'undefined') {\n\t\tlet coop = this._application_coop || '=';\n\n\t\tlet v = this.application();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Table\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Table._query(): \"+ \"application \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Table._query(): \" + \"application[application] resuled in undefined: \" + JSON.stringify(this.application()));\n\t\t}\n\n\t\tif (arFields.indexOf('application') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Table._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('application');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('application');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('application', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Table._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\treturn this._queryGQ;\n}\n\n_save(obj) {\n\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\treturn new shs_arbfw_appd_Table()._save(o)\n\t});\n\n\tlet _obj = {};\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Table._save(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\tObject.keys(obj).filter(function(k) {\n\t\treturn Object.keys(global.Schema.of('sys_db_object', ['*'])['sys_db_object']).filter(function(_k) {\n\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t}).indexOf(k.toLowerCase()) >= 0\n\t}).forEach(function(k) {\n\t\t_obj[k.toLowerCase()] = obj[k]\n\t});\n\n\tObject.keys(_obj).forEach(function(k) {\n\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Table._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tdelete _obj[k];\n\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Table._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t}\n\t});\n\n\tlet _this = null;\n\tif (obj.__keys) {\n\t\tlet kObj = {};\n\t\tkObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(_obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))));\n\t\tobj.__keys.forEach(function(k) {\n\t\t\tkObj[k] = _obj[k]\n\t\t});\n\t\t_this = new shs_arbfw_appd_Table()._fromDocument(kObj);\n\t} else {\n\t\t_this = new shs_arbfw_appd_Table()._fromDocument(_obj)._unique();\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Table._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\tdelete _obj.__idField;\n\n\ttry {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Table._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\tObject.keys(_obj).filter(function(k) {\n\t\t\treturn k.toLowerCase() != k;\n\t\t}).forEach(function(k) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Table._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tvar lk = k.toLowerCase();\n\t\t\t_obj[lk] = _obj[k];\n\t\t\tdelete _obj[k];\n\t\t});\n\n\t\tlet gq = new global.GlideQuery(obj.__type || 'sys_db_object');\n\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Table._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\tif (_obj.sys_id) {\n\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t} else {\n\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\tgq = gq.insert(_obj);\n\t\t}\n\t\tlet _fObj = {};\n\t\t_fObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))));\n\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('sys_db_object', ['*'])['sys_db_object']))));\n\t} catch (ex) {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Table._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Table._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\treturn this;\n\t}\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Table._save(): \" + \"obj.table_Columns: \" + JSON.stringify(obj.table_Columns, null, 4));\n\tif (Array.isArray(obj.table_Columns)) this.table_Columns(obj.table_Columns.map(function(ta) {\n\t\treturn new shs_arbfw_appd_Column()._save(ta)\n\t}));\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Table._save(): \" + \"obj.reference_Columns: \" + JSON.stringify(obj.reference_Columns, null, 4));\n\tif (Array.isArray(obj.reference_Columns)) this.reference_Columns(obj.reference_Columns.map(function(ta) {\n\t\treturn new shs_arbfw_appd_Column()._save(ta)\n\t}));\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Table._save(): \" + \"obj.table_Save_Subscriptions: \" + JSON.stringify(obj.table_Save_Subscriptions, null, 4));\n\tif (Array.isArray(obj.table_Save_Subscriptions)) this.table_Save_Subscriptions(obj.table_Save_Subscriptions.map(function(ta) {\n\t\treturn new shs_arbfw_appd_Save_Subscription()._save(ta)\n\t}));\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Table._save(): \" + \"obj.reference_Flow_Inputs: \" + JSON.stringify(obj.reference_Flow_Inputs, null, 4));\n\tif (Array.isArray(obj.reference_Flow_Inputs)) this.reference_Flow_Inputs(obj.reference_Flow_Inputs.map(function(ta) {\n\t\treturn new shs_arbfw_appd_Flow_Input()._save(ta)\n\t}));\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Table._save(): \" + \"obj.reference_Flow_Outputs: \" + JSON.stringify(obj.reference_Flow_Outputs, null, 4));\n\tif (Array.isArray(obj.reference_Flow_Outputs)) this.reference_Flow_Outputs(obj.reference_Flow_Outputs.map(function(ta) {\n\t\treturn new shs_arbfw_appd_Flow_Output()._save(ta)\n\t}));\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Table._save(): \" + \"obj.reference_Flow_Variables: \" + JSON.stringify(obj.reference_Flow_Variables, null, 4));\n\tif (Array.isArray(obj.reference_Flow_Variables)) this.reference_Flow_Variables(obj.reference_Flow_Variables.map(function(ta) {\n\t\treturn new shs_arbfw_appd_Flow_Variable()._save(ta)\n\t}));\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Table._save(): \" + \"obj.reference_Flow_Instance_Inputs: \" + JSON.stringify(obj.reference_Flow_Instance_Inputs, null, 4));\n\tif (Array.isArray(obj.reference_Flow_Instance_Inputs)) this.reference_Flow_Instance_Inputs(obj.reference_Flow_Instance_Inputs.map(function(ta) {\n\t\treturn new shs_arbfw_appd_Flow_Instance_Input()._save(ta)\n\t}));\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Table._save(): \" + \"obj.reference_Action_Inputs: \" + JSON.stringify(obj.reference_Action_Inputs, null, 4));\n\tif (Array.isArray(obj.reference_Action_Inputs)) this.reference_Action_Inputs(obj.reference_Action_Inputs.map(function(ta) {\n\t\treturn new shs_arbfw_appd_Action_Input()._save(ta)\n\t}));\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Table._save(): \" + \"obj.reference_Flow_Data_Variables: \" + JSON.stringify(obj.reference_Flow_Data_Variables, null, 4));\n\tif (Array.isArray(obj.reference_Flow_Data_Variables)) this.reference_Flow_Data_Variables(obj.reference_Flow_Data_Variables.map(function(ta) {\n\t\treturn new shs_arbfw_appd_Flow_Data_Variable()._save(ta)\n\t}));\n\n\treturn this;\n}\n\n/************* Table.store() **********************/\nstore(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Table.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Table.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Table.store(): \" + \"executing locally \");\n\n\t\t// store locally\n\t\treturn this._save(this._toDocument());\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Table.findAll() **********************/\nfindAll(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Table.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Table.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Table.findAll(): \" + \"executing locally \");\n\n\t\t// findAll locally\n\t\tlet gr = new GlideRecord('sys_db_object');\n\t\tgr.addEncodedQuery(this._toEQuery());\n\t\treturn this._fromDocument(gr);\n\n\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('sys_db_object', ['*'])['sys_db_object'])));\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Table.find() **********************/\nfind(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Table.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Table.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Table.find(): \" + \"executing locally \");\n\n\t\tlet ret = this.findAll();\n\t\treturn ret.length ? ret[0] : null;\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"scriptFile_Script_Compatibilitys":[{"active":true,"enabled":true}],"client_callable":true,"sys_name":"shs_arbfw_appd_Element_Mapping","api_name":"x_1790593_arboard.shs_arbfw_appd_Element_Mapping","name":"shs_arbfw_appd_Element_Mapping","script":"class shs_arbfw_appd_Element_Mapping extends global.AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"Application Designer\";\n\t\tthis.__type = \"shs_arbfw_appd_Element_Mapping\";\n\t\tthis.__alias = \"shs_arbfw_appd\";\n\t\tthis.__scope = \"shs_arbfw\";\n\t}\n\n\t/************* Element_Mapping.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Element_Mapping.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Element_Mapping.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Element_Mapping.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Element_Mapping.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//(typeof(window)!=='undefined'?alert:gs.info)(\"Element_Mapping.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Element_Mapping.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Element_Mapping.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Element_Mapping.value GETTERS AND SETTERS **********************/\n\tvalue(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._value = v;\n\t\t\tthis._value_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._value;\n\t\t}\n\t}\n\n\t/************* Element_Mapping.block GETTERS AND SETTERS **********************/\n\tblock(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._block = v;\n\t\t\tthis._block_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._block;\n\t\t}\n\t}\n\n\t/************* Element_Mapping.mapping_Variable_Values GETTERS AND SETTERS **********************/\n\tmapping_Variable_Values(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._mapping_Variable_Values = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._mapping_Variable_Values_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._mapping_Variable_Values;\n\t\t}\n\t}\n\n\t/************* Element_Mapping.elementMapping_Pill_Compounds GETTERS AND SETTERS **********************/\n\telementMapping_Pill_Compounds(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._elementMapping_Pill_Compounds = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._elementMapping_Pill_Compounds_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._elementMapping_Pill_Compounds;\n\t\t}\n\t}\n\n\t/************* Element_Mapping.__keys EF: GETTERS AND SETTERS **********************/\n\t__keys() {\n\t\treturn /*this.ef___keys = */ ((\n\t\t\tfunction() {\n\t\t\t\ttry {\n\n\t\t\t\t\tlet __ret = undefined;\n\n\t\t\t\t\t__ret = \"['id', 'field', 'table']\";\n\n\t\t\t\t\tif (typeof(__ret) === 'string' && __ret.startsWith(\"s(\") && __ret.endsWith(\")\")) {\n\t\t\t\t\t\t__ret = this.runScript(__ret.slice(2, -1));\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof(__ret) === \"function\") {\n\t\t\t\t\t\t__ret = __ret(this);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn __ret;\n\n\t\t\t\t} catch (_vOfEx) {\n\t\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Element_Mapping.__keys(): \" + 'valueOf', _vOfEx, JSON.parse(((typeof(this) !== \"undefined\" && typeof(this._atob) !== \"undefined\") ? this._atob : (typeof(_FrEMD) !== \"undefined\" ? _FrEMD._atob : atob))(`eyJTZXJ2aWNlTm93IjoiWydpZCcsICdmaWVsZCcsICd0YWJsZSddIn0=`), (key, value) => {\n\t\t\t\t\t\tif (typeof(value) === \"string\" && value.indexOf(\"=>\") > 0) return eval(\"(\" + value + \")\");\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t}\n\t\t)());\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = undefined || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\tif (this._value) ret += '^' + sPath + 'value' + (this._value_coop || '=') + this.value();\n\n\t\tif (this._block) ret += /*(this._block_coop || '=') + */ this.block()._toEQuery(sPath + 'block.');\n\n\t\t(this.mapping_Variable_Values() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYVariable_Value.mapping,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(this.elementMapping_Pill_Compounds() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYPill_Compound.elementMapping,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Element_Mapping._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn new shs_arbfw_appd_Element_Mapping()._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Element_Mapping._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Element_Mapping._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromGlideRecord(obj) {\n\t\tif (!obj) return null;\n\t\tif (obj.isValidRecord()) {\n\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Element_Mapping\" != 'ecc_queue' && obj.source == \"shs_arbfw_appd_Element_Mapping\") {\n\t\t\t\tobj.state = \"processing\";\n\t\t\t\tobj.update();\n\n\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\tresp.queue = 'output';\n\t\t\t\tresp.agent = obj.agent;\n\t\t\t\tresp.topic = obj.topic;\n\t\t\t\tresp.name = obj.name;\n\t\t\t\tresp.source = obj.source;\n\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\tlet ret = new shs_arbfw_appd_Element_Mapping()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t});\n\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t}\n\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\tresp.insert();\n\n\t\t\t\tobj.state = \"processed\";\n\t\t\t\tobj.update();\n\t\t\t\treturn resp;\n\t\t\t} else {\n\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\tvalue: obj.getValue(\"value\"),\n\n\t\t\t\t\tblock: obj.getValue(\"block\"),\n\n\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tobj.query();\n\t\t\tlet grRet = [];\n\t\t\twhile (obj.next()) grRet.push(this._fromGlideRecord(obj));\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Element_Mapping._fromGlideRecord(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\treturn grRet;\n\t\t}\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\tundefined\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_appd_Element_Mapping()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\tif (/((([A-Za-z]{3,9}:(?:/ / ) ? )( ? : [-;: &= +$, w] + @) ? [A - Za - z0 - 9. - ] + | ( ? : www. | [-;: &= +$, w] + @)[A - Za - z0 - 9. - ] + )(( ? : /[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)/g.test(obj)) {\n\t\t\tvar msg = new sn_ws.RESTMessageV2();\n\t\t\tmsg.setEndpoint(obj);\n\t\t\tmsg.setRequestHeader('Content-Type', 'application/json');\n\t\t\tmsg.setHttpMethod('get');\n\t\t\treturn this._fromDocument(msg.execute().getBody());\n\t\t}\n\n\t\ttry {\n\t\t\tobj = JSON.parse(obj);\n\t\t} catch (ex) {\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Element_Mapping._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\tlet _obj = {\n\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))\n\t\t\t};\n\t\t\t_obj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(this))] = obj;\n\t\t\tobj = _obj;\n\t\t}\n\t\treturn this._fromDocument(obj);\n\t}\n\telse if (typeof(obj) === 'object') {\n\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\treturn this._fromGlideRecord(obj);\n\t\t} else if (obj._fromDocument) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Element_Mapping._fromDocument(): \" + \"redundent call\");\n\t\t\treturn obj;\n\t\t} else if (Array.isArray(obj)) {\n\t\t\treturn obj.map(function(o) {\n\t\t\t\treturn new shs_arbfw_appd_Element_Mapping()._fromDocument(o)\n\t\t\t});\n\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(obj))));\n\n\t\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Element_Mapping._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.value) !== 'undefined') {\n\n\t\t\t\t\tthis.value(obj.value);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.block) !== 'undefined') {\n\n\t\t\t\t\tthis.block(new shs_arbfw_appd_Flow_Block()._fromDocument(obj.block));\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.mapping_Variable_Values) !== 'undefined') this.mapping_Variable_Values(new shs_arbfw_appd_Variable_Value()._fromDocument(obj.mapping_Variable_Values));\n\n\t\t\t\tif (typeof(obj.elementMapping_Pill_Compounds) !== 'undefined') this.elementMapping_Pill_Compounds(new shs_arbfw_appd_Pill_Compound()._fromDocument(obj.elementMapping_Pill_Compounds));\n\n\t\t\t} else { // if(obj.constructor.name==\"Element_Mapping\"){\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Element_Mapping._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t}\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Element_Mapping._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\treturn null;\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Element_Mapping._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Element_Mapping._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Element_Mapping._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\treturn this;\n}\n\n_insertAssert() {\n\treturn true;\n}\n\n_updateAssert() {\n\treturn true;\n}\n\n_storeAssert() {\n\treturn true;\n}\n\n_findAssert() {\n\treturn true;\n}\n\n_new(c) {\n\n\treturn new shs_arbfw_appd_Platform._new(c);\n\n}\n\n_toDocument(arFields) {\n\n\tlet ret = undefined || {};\n\n\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tret.active = this.active();\n\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tret.enabled = this.enabled();\n\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tret.code = this.code();\n\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tret.order = this.order();\n\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tret.date = this.date();\n\n\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tret.name = this.name();\n\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tret.remark = this.remark();\n\n\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t}\n\n\tif (typeof(this._value) !== 'undefined') {\n\t\tret.value = this.value();\n\n\t}\n\n\tif (typeof(this._block) !== 'undefined') {\n\t\tret.block = this.block();\n\n\t\tif (ret.block) {\n\t\t\tret.block = ret.block._toDocument();\n\t\t\tif (typeof(ret.block) === 'object' && !Object.keys(ret.block).length) ret.block = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this.mapping_Variable_Values()) !== 'undefined') ret.mapping_Variable_Values = this.mapping_Variable_Values().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (typeof(this.elementMapping_Pill_Compounds()) !== 'undefined') ret.elementMapping_Pill_Compounds = this.elementMapping_Pill_Compounds().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (typeof(this.__keys()) !== 'undefined') ret.__keys = this.__keys();\n\n\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\treturn !arFields.find(function(_k) {\n\t\t\treturn _k == k;\n\t\t});\n\t}).forEach(function(k) {\n\t\tdelete ret[k];\n\t});\n\n\treturn ret;\n}\n\n_unique(keys, ret) {\n\tret = ret || new shs_arbfw_appd_Element_Mapping();\n\n\tundefined\n\n\t// if(this.Id) ret.Id = this.Id;\n\tif (!keys) {\n\n\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t} else {\n\n\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t\tif (keys.indexOf(\"value\") >= 0 && typeof(this.value()) !== 'undefined') ret.value(this.value());\n\n\t\tif (keys.indexOf(\"block\") >= 0 && typeof(this.block()) !== 'undefined') ret.block(this.block()._unique());\n\n\t}\n\n\treturn ret;\n}\n\n_query(gq) {\n\tlet arFields = Object.keys(global.Schema.of('sys_element_mapping', ['*'])['sys_element_mapping']);\n\n\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('sys_element_mapping');\n\n\tundefined\n\n\tlet idf = ((function(r) {\n\t\tlet ret = 'sys_id';\n\t\tif (typeof(r.__idField) === 'function') {\n\t\t\tret = r.__idField();\n\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\tret = r.__idField || this.__idField();\n\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\tret = 'Id';\n\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\tret = 'sys_id';\n\t\t}\n\t\treturn ret;\n\t})(this));\n\tif (idf == 'Id') idf = 'sys_id';\n\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tlet coop = this._active_coop || '=';\n\n\t\tlet v = this.active();\n\n\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Element_Mapping._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tlet coop = this._enabled_coop || '=';\n\n\t\tlet v = this.enabled();\n\n\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Element_Mapping._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tlet coop = this._code_coop || '=';\n\n\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.code();\n\n\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Element_Mapping._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tlet coop = this._order_coop || '=';\n\n\t\tlet v = this.order();\n\n\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Element_Mapping._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tlet coop = this._date_coop || '=';\n\n\t\tlet v = this.date();\n\n\t\tif (v) {\n\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t}\n\n\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Element_Mapping._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tlet coop = this._name_coop || '=';\n\n\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.name();\n\n\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Element_Mapping._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tlet coop = this._remark_coop || '=';\n\n\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.remark();\n\n\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Element_Mapping._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._value) !== 'undefined') {\n\t\tlet coop = this._value_coop || '=';\n\n\t\tif (!this._value_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.value();\n\n\t\tif (arFields.indexOf('value') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Element_Mapping._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('value');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('value');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('value', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._block) !== 'undefined') {\n\t\tlet coop = this._block_coop || '=';\n\n\t\tlet v = this.block();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Element Mapping\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Element_Mapping._query(): \"+ \"block \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Element_Mapping._query(): \" + \"block[block] resuled in undefined: \" + JSON.stringify(this.block()));\n\t\t}\n\n\t\tif (arFields.indexOf('block') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Element_Mapping._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('block');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('block');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('block', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Element_Mapping._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\treturn this._queryGQ;\n}\n\n_save(obj) {\n\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\treturn new shs_arbfw_appd_Element_Mapping()._save(o)\n\t});\n\n\tlet _obj = {};\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Element_Mapping._save(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\tObject.keys(obj).filter(function(k) {\n\t\treturn Object.keys(global.Schema.of('sys_element_mapping', ['*'])['sys_element_mapping']).filter(function(_k) {\n\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t}).indexOf(k.toLowerCase()) >= 0\n\t}).forEach(function(k) {\n\t\t_obj[k.toLowerCase()] = obj[k]\n\t});\n\n\tObject.keys(_obj).forEach(function(k) {\n\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Element_Mapping._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tdelete _obj[k];\n\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Element_Mapping._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t}\n\t});\n\n\tlet _this = null;\n\tif (obj.__keys) {\n\t\tlet kObj = {};\n\t\tkObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(_obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))));\n\t\tobj.__keys.forEach(function(k) {\n\t\t\tkObj[k] = _obj[k]\n\t\t});\n\t\t_this = new shs_arbfw_appd_Element_Mapping()._fromDocument(kObj);\n\t} else {\n\t\t_this = new shs_arbfw_appd_Element_Mapping()._fromDocument(_obj)._unique();\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Element_Mapping._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\tdelete _obj.__idField;\n\n\ttry {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Element_Mapping._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\tObject.keys(_obj).filter(function(k) {\n\t\t\treturn k.toLowerCase() != k;\n\t\t}).forEach(function(k) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Element_Mapping._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tvar lk = k.toLowerCase();\n\t\t\t_obj[lk] = _obj[k];\n\t\t\tdelete _obj[k];\n\t\t});\n\n\t\tlet gq = new global.GlideQuery(obj.__type || 'sys_element_mapping');\n\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Element_Mapping._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\tif (_obj.sys_id) {\n\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t} else {\n\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\tgq = gq.insert(_obj);\n\t\t}\n\t\tlet _fObj = {};\n\t\t_fObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))));\n\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('sys_element_mapping', ['*'])['sys_element_mapping']))));\n\t} catch (ex) {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Element_Mapping._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Element_Mapping._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\treturn this;\n\t}\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Element_Mapping._save(): \" + \"obj.mapping_Variable_Values: \" + JSON.stringify(obj.mapping_Variable_Values, null, 4));\n\tif (Array.isArray(obj.mapping_Variable_Values)) this.mapping_Variable_Values(obj.mapping_Variable_Values.map(function(ta) {\n\t\treturn new shs_arbfw_appd_Variable_Value()._save(ta)\n\t}));\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Element_Mapping._save(): \" + \"obj.elementMapping_Pill_Compounds: \" + JSON.stringify(obj.elementMapping_Pill_Compounds, null, 4));\n\tif (Array.isArray(obj.elementMapping_Pill_Compounds)) this.elementMapping_Pill_Compounds(obj.elementMapping_Pill_Compounds.map(function(ta) {\n\t\treturn new shs_arbfw_appd_Pill_Compound()._save(ta)\n\t}));\n\n\treturn this;\n}\n\n/************* Element_Mapping.store() **********************/\nstore(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Element_Mapping.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Element_Mapping.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Element_Mapping.store(): \" + \"executing locally \");\n\n\t\t// store locally\n\t\treturn this._save(this._toDocument());\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Element_Mapping.findAll() **********************/\nfindAll(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Element_Mapping.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Element_Mapping.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Element_Mapping.findAll(): \" + \"executing locally \");\n\n\t\t// findAll locally\n\t\tlet gr = new GlideRecord('sys_element_mapping');\n\t\tgr.addEncodedQuery(this._toEQuery());\n\t\treturn this._fromDocument(gr);\n\n\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('sys_element_mapping', ['*'])['sys_element_mapping'])));\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Element_Mapping.find() **********************/\nfind(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Element_Mapping.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Element_Mapping.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Element_Mapping.find(): \" + \"executing locally \");\n\n\t\tlet ret = this.findAll();\n\t\treturn ret.length ? ret[0] : null;\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"scriptFile_Script_Compatibilitys":[{"active":true,"enabled":true}],"client_callable":true,"sys_name":"shs_arbfw_appd_Action_Type","api_name":"x_1790593_arboard.shs_arbfw_appd_Action_Type","name":"shs_arbfw_appd_Action_Type","script":"class shs_arbfw_appd_Action_Type extends global.AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"Application Designer\";\n\t\tthis.__type = \"shs_arbfw_appd_Action_Type\";\n\t\tthis.__alias = \"shs_arbfw_appd\";\n\t\tthis.__scope = \"shs_arbfw\";\n\t}\n\n\t/************* Action_Type.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Action_Type.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Action_Type.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Action_Type.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Action_Type.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//(typeof(window)!=='undefined'?alert:gs.info)(\"Action_Type.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Action_Type.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Action_Type.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Action_Type.application GETTERS AND SETTERS **********************/\n\tapplication(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._application = v;\n\t\t\tthis._application_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._application;\n\t\t}\n\t}\n\n\t/************* Action_Type.action_Action_Instances GETTERS AND SETTERS **********************/\n\taction_Action_Instances(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._action_Action_Instances = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._action_Action_Instances_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._action_Action_Instances;\n\t\t}\n\t}\n\n\t/************* Action_Type.action_Action_Inputs GETTERS AND SETTERS **********************/\n\taction_Action_Inputs(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._action_Action_Inputs = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._action_Action_Inputs_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._action_Action_Inputs;\n\t\t}\n\t}\n\n\t/************* Action_Type.action_Action_Steps GETTERS AND SETTERS **********************/\n\taction_Action_Steps(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._action_Action_Steps = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._action_Action_Steps_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._action_Action_Steps;\n\t\t}\n\t}\n\n\t/************* Action_Type.action_Action_Step_Inputs GETTERS AND SETTERS **********************/\n\taction_Action_Step_Inputs(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._action_Action_Step_Inputs = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._action_Action_Step_Inputs_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._action_Action_Step_Inputs;\n\t\t}\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = undefined || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\tif (this._application) ret += /*(this._application_coop || '=') + */ this.application()._toEQuery(sPath + 'application.');\n\n\t\t(this.action_Action_Instances() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYAction_Instance.action,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(this.action_Action_Inputs() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYAction_Input.action,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(this.action_Action_Steps() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYAction_Step.action,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(this.action_Action_Step_Inputs() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYAction_Step_Input.action,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Type._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn new shs_arbfw_appd_Action_Type()._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Type._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Type._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromGlideRecord(obj) {\n\t\tif (!obj) return null;\n\t\tif (obj.isValidRecord()) {\n\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Action_Type\" != 'ecc_queue' && obj.source == \"shs_arbfw_appd_Action_Type\") {\n\t\t\t\tobj.state = \"processing\";\n\t\t\t\tobj.update();\n\n\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\tresp.queue = 'output';\n\t\t\t\tresp.agent = obj.agent;\n\t\t\t\tresp.topic = obj.topic;\n\t\t\t\tresp.name = obj.name;\n\t\t\t\tresp.source = obj.source;\n\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\tlet ret = new shs_arbfw_appd_Action_Type()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t});\n\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t}\n\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\tresp.insert();\n\n\t\t\t\tobj.state = \"processed\";\n\t\t\t\tobj.update();\n\t\t\t\treturn resp;\n\t\t\t} else {\n\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\tapplication: obj.getValue(\"application\"),\n\n\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tobj.query();\n\t\t\tlet grRet = [];\n\t\t\twhile (obj.next()) grRet.push(this._fromGlideRecord(obj));\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Action_Type._fromGlideRecord(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\treturn grRet;\n\t\t}\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\tundefined\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_appd_Action_Type()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\tif (/((([A-Za-z]{3,9}:(?:/ / ) ? )( ? : [-;: &= +$, w] + @) ? [A - Za - z0 - 9. - ] + | ( ? : www. | [-;: &= +$, w] + @)[A - Za - z0 - 9. - ] + )(( ? : /[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)/g.test(obj)) {\n\t\t\tvar msg = new sn_ws.RESTMessageV2();\n\t\t\tmsg.setEndpoint(obj);\n\t\t\tmsg.setRequestHeader('Content-Type', 'application/json');\n\t\t\tmsg.setHttpMethod('get');\n\t\t\treturn this._fromDocument(msg.execute().getBody());\n\t\t}\n\n\t\ttry {\n\t\t\tobj = JSON.parse(obj);\n\t\t} catch (ex) {\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Action_Type._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\tlet _obj = {\n\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))\n\t\t\t};\n\t\t\t_obj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(this))] = obj;\n\t\t\tobj = _obj;\n\t\t}\n\t\treturn this._fromDocument(obj);\n\t}\n\telse if (typeof(obj) === 'object') {\n\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\treturn this._fromGlideRecord(obj);\n\t\t} else if (obj._fromDocument) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Type._fromDocument(): \" + \"redundent call\");\n\t\t\treturn obj;\n\t\t} else if (Array.isArray(obj)) {\n\t\t\treturn obj.map(function(o) {\n\t\t\t\treturn new shs_arbfw_appd_Action_Type()._fromDocument(o)\n\t\t\t});\n\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(obj))));\n\n\t\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Action_Type._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.application) !== 'undefined') {\n\n\t\t\t\t\tthis.application(new shs_arbfw_appd_Application()._fromDocument(obj.application));\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.action_Action_Instances) !== 'undefined') this.action_Action_Instances(new shs_arbfw_appd_Action_Instance()._fromDocument(obj.action_Action_Instances));\n\n\t\t\t\tif (typeof(obj.action_Action_Inputs) !== 'undefined') this.action_Action_Inputs(new shs_arbfw_appd_Action_Input()._fromDocument(obj.action_Action_Inputs));\n\n\t\t\t\tif (typeof(obj.action_Action_Steps) !== 'undefined') this.action_Action_Steps(new shs_arbfw_appd_Action_Step()._fromDocument(obj.action_Action_Steps));\n\n\t\t\t\tif (typeof(obj.action_Action_Step_Inputs) !== 'undefined') this.action_Action_Step_Inputs(new shs_arbfw_appd_Action_Step_Input()._fromDocument(obj.action_Action_Step_Inputs));\n\n\t\t\t} else { // if(obj.constructor.name==\"Action_Type\"){\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Type._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t}\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Type._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\treturn null;\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Type._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Action_Type._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Action_Type._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\treturn this;\n}\n\n_insertAssert() {\n\treturn true;\n}\n\n_updateAssert() {\n\treturn true;\n}\n\n_storeAssert() {\n\treturn true;\n}\n\n_findAssert() {\n\treturn true;\n}\n\n_new(c) {\n\n\treturn new shs_arbfw_appd_Platform._new(c);\n\n}\n\n_toDocument(arFields) {\n\n\tlet ret = undefined || {};\n\n\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tret.active = this.active();\n\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tret.enabled = this.enabled();\n\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tret.code = this.code();\n\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tret.order = this.order();\n\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tret.date = this.date();\n\n\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tret.name = this.name();\n\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tret.remark = this.remark();\n\n\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t}\n\n\tif (typeof(this._application) !== 'undefined') {\n\t\tret.application = this.application();\n\n\t\tif (ret.application) {\n\t\t\tret.application = ret.application._toDocument();\n\t\t\tif (typeof(ret.application) === 'object' && !Object.keys(ret.application).length) ret.application = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this.action_Action_Instances()) !== 'undefined') ret.action_Action_Instances = this.action_Action_Instances().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (typeof(this.action_Action_Inputs()) !== 'undefined') ret.action_Action_Inputs = this.action_Action_Inputs().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (typeof(this.action_Action_Steps()) !== 'undefined') ret.action_Action_Steps = this.action_Action_Steps().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (typeof(this.action_Action_Step_Inputs()) !== 'undefined') ret.action_Action_Step_Inputs = this.action_Action_Step_Inputs().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\treturn !arFields.find(function(_k) {\n\t\t\treturn _k == k;\n\t\t});\n\t}).forEach(function(k) {\n\t\tdelete ret[k];\n\t});\n\n\treturn ret;\n}\n\n_unique(keys, ret) {\n\tret = ret || new shs_arbfw_appd_Action_Type();\n\n\tundefined\n\n\t// if(this.Id) ret.Id = this.Id;\n\tif (!keys) {\n\n\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (typeof(this.application()) !== 'undefined') ret.application(this.application()._unique());\n\n\t} else {\n\n\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t\tif (keys.indexOf(\"application\") >= 0 && typeof(this.application()) !== 'undefined') ret.application(this.application()._unique());\n\n\t}\n\n\treturn ret;\n}\n\n_query(gq) {\n\tlet arFields = Object.keys(global.Schema.of('sys_hub_action_type_definition', ['*'])['sys_hub_action_type_definition']);\n\n\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('sys_hub_action_type_definition');\n\n\tundefined\n\n\tlet idf = ((function(r) {\n\t\tlet ret = 'sys_id';\n\t\tif (typeof(r.__idField) === 'function') {\n\t\t\tret = r.__idField();\n\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\tret = r.__idField || this.__idField();\n\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\tret = 'Id';\n\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\tret = 'sys_id';\n\t\t}\n\t\treturn ret;\n\t})(this));\n\tif (idf == 'Id') idf = 'sys_id';\n\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tlet coop = this._active_coop || '=';\n\n\t\tlet v = this.active();\n\n\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Action_Type._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tlet coop = this._enabled_coop || '=';\n\n\t\tlet v = this.enabled();\n\n\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Action_Type._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tlet coop = this._code_coop || '=';\n\n\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.code();\n\n\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Action_Type._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tlet coop = this._order_coop || '=';\n\n\t\tlet v = this.order();\n\n\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Action_Type._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tlet coop = this._date_coop || '=';\n\n\t\tlet v = this.date();\n\n\t\tif (v) {\n\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t}\n\n\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Action_Type._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tlet coop = this._name_coop || '=';\n\n\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.name();\n\n\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Action_Type._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tlet coop = this._remark_coop || '=';\n\n\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.remark();\n\n\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Action_Type._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._application) !== 'undefined') {\n\t\tlet coop = this._application_coop || '=';\n\n\t\tlet v = this.application();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Action Type\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Action_Type._query(): \"+ \"application \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Type._query(): \" + \"application[application] resuled in undefined: \" + JSON.stringify(this.application()));\n\t\t}\n\n\t\tif (arFields.indexOf('application') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Action_Type._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('application');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('application');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('application', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Action_Type._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\treturn this._queryGQ;\n}\n\n_save(obj) {\n\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\treturn new shs_arbfw_appd_Action_Type()._save(o)\n\t});\n\n\tlet _obj = {};\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Action_Type._save(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\tObject.keys(obj).filter(function(k) {\n\t\treturn Object.keys(global.Schema.of('sys_hub_action_type_definition', ['*'])['sys_hub_action_type_definition']).filter(function(_k) {\n\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t}).indexOf(k.toLowerCase()) >= 0\n\t}).forEach(function(k) {\n\t\t_obj[k.toLowerCase()] = obj[k]\n\t});\n\n\tObject.keys(_obj).forEach(function(k) {\n\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Type._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tdelete _obj[k];\n\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Type._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t}\n\t});\n\n\tlet _this = null;\n\tif (obj.__keys) {\n\t\tlet kObj = {};\n\t\tkObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(_obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))));\n\t\tobj.__keys.forEach(function(k) {\n\t\t\tkObj[k] = _obj[k]\n\t\t});\n\t\t_this = new shs_arbfw_appd_Action_Type()._fromDocument(kObj);\n\t} else {\n\t\t_this = new shs_arbfw_appd_Action_Type()._fromDocument(_obj)._unique();\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Action_Type._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\tdelete _obj.__idField;\n\n\ttry {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Type._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\tObject.keys(_obj).filter(function(k) {\n\t\t\treturn k.toLowerCase() != k;\n\t\t}).forEach(function(k) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Type._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tvar lk = k.toLowerCase();\n\t\t\t_obj[lk] = _obj[k];\n\t\t\tdelete _obj[k];\n\t\t});\n\n\t\tlet gq = new global.GlideQuery(obj.__type || 'sys_hub_action_type_definition');\n\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Action_Type._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\tif (_obj.sys_id) {\n\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t} else {\n\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\tgq = gq.insert(_obj);\n\t\t}\n\t\tlet _fObj = {};\n\t\t_fObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))));\n\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('sys_hub_action_type_definition', ['*'])['sys_hub_action_type_definition']))));\n\t} catch (ex) {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Type._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Type._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\treturn this;\n\t}\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Type._save(): \" + \"obj.action_Action_Instances: \" + JSON.stringify(obj.action_Action_Instances, null, 4));\n\tif (Array.isArray(obj.action_Action_Instances)) this.action_Action_Instances(obj.action_Action_Instances.map(function(ta) {\n\t\treturn new shs_arbfw_appd_Action_Instance()._save(ta)\n\t}));\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Type._save(): \" + \"obj.action_Action_Inputs: \" + JSON.stringify(obj.action_Action_Inputs, null, 4));\n\tif (Array.isArray(obj.action_Action_Inputs)) this.action_Action_Inputs(obj.action_Action_Inputs.map(function(ta) {\n\t\treturn new shs_arbfw_appd_Action_Input()._save(ta)\n\t}));\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Type._save(): \" + \"obj.action_Action_Steps: \" + JSON.stringify(obj.action_Action_Steps, null, 4));\n\tif (Array.isArray(obj.action_Action_Steps)) this.action_Action_Steps(obj.action_Action_Steps.map(function(ta) {\n\t\treturn new shs_arbfw_appd_Action_Step()._save(ta)\n\t}));\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Type._save(): \" + \"obj.action_Action_Step_Inputs: \" + JSON.stringify(obj.action_Action_Step_Inputs, null, 4));\n\tif (Array.isArray(obj.action_Action_Step_Inputs)) this.action_Action_Step_Inputs(obj.action_Action_Step_Inputs.map(function(ta) {\n\t\treturn new shs_arbfw_appd_Action_Step_Input()._save(ta)\n\t}));\n\n\treturn this;\n}\n\n/************* Action_Type.store() **********************/\nstore(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Type.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Type.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Type.store(): \" + \"executing locally \");\n\n\t\t// store locally\n\t\treturn this._save(this._toDocument());\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Action_Type.findAll() **********************/\nfindAll(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Type.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Type.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Type.findAll(): \" + \"executing locally \");\n\n\t\t// findAll locally\n\t\tlet gr = new GlideRecord('sys_hub_action_type_definition');\n\t\tgr.addEncodedQuery(this._toEQuery());\n\t\treturn this._fromDocument(gr);\n\n\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('sys_hub_action_type_definition', ['*'])['sys_hub_action_type_definition'])));\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Action_Type.find() **********************/\nfind(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Type.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Type.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Action_Type.find(): \" + \"executing locally \");\n\n\t\tlet ret = this.findAll();\n\t\treturn ret.length ? ret[0] : null;\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"scriptFile_Script_Compatibilitys":[{"active":true,"enabled":true}],"client_callable":true,"sys_name":"shs_arbfw_appd_Transform_Composition","api_name":"x_1790593_arboard.shs_arbfw_appd_Transform_Composition","name":"shs_arbfw_appd_Transform_Composition","script":"class shs_arbfw_appd_Transform_Composition extends global.AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"Application Designer\";\n\t\tthis.__type = \"shs_arbfw_appd_Transform_Composition\";\n\t\tthis.__alias = \"shs_arbfw_appd\";\n\t\tthis.__scope = \"shs_arbfw\";\n\t}\n\n\t/************* Transform_Composition.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Transform_Composition.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Transform_Composition.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Transform_Composition.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Transform_Composition.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//(typeof(window)!=='undefined'?alert:gs.info)(\"Transform_Composition.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Transform_Composition.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Transform_Composition.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Transform_Composition.transform GETTERS AND SETTERS **********************/\n\ttransform(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._transform = v;\n\t\t\tthis._transform_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._transform;\n\t\t}\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = undefined || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\tif (this._transform) ret += /*(this._transform_coop || '=') + */ this.transform()._toEQuery(sPath + 'transform.');\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Transform_Composition._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn new shs_arbfw_appd_Transform_Composition()._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Transform_Composition._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Transform_Composition._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromGlideRecord(obj) {\n\t\tif (!obj) return null;\n\t\tif (obj.isValidRecord()) {\n\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Transform_Composition\" != 'ecc_queue' && obj.source == \"shs_arbfw_appd_Transform_Composition\") {\n\t\t\t\tobj.state = \"processing\";\n\t\t\t\tobj.update();\n\n\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\tresp.queue = 'output';\n\t\t\t\tresp.agent = obj.agent;\n\t\t\t\tresp.topic = obj.topic;\n\t\t\t\tresp.name = obj.name;\n\t\t\t\tresp.source = obj.source;\n\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\tlet ret = new shs_arbfw_appd_Transform_Composition()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t});\n\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t}\n\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\tresp.insert();\n\n\t\t\t\tobj.state = \"processed\";\n\t\t\t\tobj.update();\n\t\t\t\treturn resp;\n\t\t\t} else {\n\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\ttransform: obj.getValue(\"transform\"),\n\n\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tobj.query();\n\t\t\tlet grRet = [];\n\t\t\twhile (obj.next()) grRet.push(this._fromGlideRecord(obj));\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Transform_Composition._fromGlideRecord(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\treturn grRet;\n\t\t}\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\tundefined\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_appd_Transform_Composition()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\tif (/((([A-Za-z]{3,9}:(?:/ / ) ? )( ? : [-;: &= +$, w] + @) ? [A - Za - z0 - 9. - ] + | ( ? : www. | [-;: &= +$, w] + @)[A - Za - z0 - 9. - ] + )(( ? : /[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)/g.test(obj)) {\n\t\t\tvar msg = new sn_ws.RESTMessageV2();\n\t\t\tmsg.setEndpoint(obj);\n\t\t\tmsg.setRequestHeader('Content-Type', 'application/json');\n\t\t\tmsg.setHttpMethod('get');\n\t\t\treturn this._fromDocument(msg.execute().getBody());\n\t\t}\n\n\t\ttry {\n\t\t\tobj = JSON.parse(obj);\n\t\t} catch (ex) {\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Transform_Composition._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\tlet _obj = {\n\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))\n\t\t\t};\n\t\t\t_obj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(this))] = obj;\n\t\t\tobj = _obj;\n\t\t}\n\t\treturn this._fromDocument(obj);\n\t}\n\telse if (typeof(obj) === 'object') {\n\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\treturn this._fromGlideRecord(obj);\n\t\t} else if (obj._fromDocument) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Transform_Composition._fromDocument(): \" + \"redundent call\");\n\t\t\treturn obj;\n\t\t} else if (Array.isArray(obj)) {\n\t\t\treturn obj.map(function(o) {\n\t\t\t\treturn new shs_arbfw_appd_Transform_Composition()._fromDocument(o)\n\t\t\t});\n\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(obj))));\n\n\t\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Transform_Composition._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.transform) !== 'undefined') {\n\n\t\t\t\t\tthis.transform(new shs_arbfw_appd_Transform()._fromDocument(obj.transform));\n\t\t\t\t}\n\n\t\t\t} else { // if(obj.constructor.name==\"Transform_Composition\"){\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Transform_Composition._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t}\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Transform_Composition._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\treturn null;\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Transform_Composition._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Transform_Composition._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Transform_Composition._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\treturn this;\n}\n\n_insertAssert() {\n\treturn true;\n}\n\n_updateAssert() {\n\treturn true;\n}\n\n_storeAssert() {\n\treturn true;\n}\n\n_findAssert() {\n\treturn true;\n}\n\n_new(c) {\n\n\treturn new shs_arbfw_appd_Platform._new(c);\n\n}\n\n_toDocument(arFields) {\n\n\tlet ret = undefined || {};\n\n\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tret.active = this.active();\n\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tret.enabled = this.enabled();\n\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tret.code = this.code();\n\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tret.order = this.order();\n\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tret.date = this.date();\n\n\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tret.name = this.name();\n\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tret.remark = this.remark();\n\n\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t}\n\n\tif (typeof(this._transform) !== 'undefined') {\n\t\tret.transform = this.transform();\n\n\t\tif (ret.transform) {\n\t\t\tret.transform = ret.transform._toDocument();\n\t\t\tif (typeof(ret.transform) === 'object' && !Object.keys(ret.transform).length) ret.transform = null;\n\t\t}\n\n\t}\n\n\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\treturn !arFields.find(function(_k) {\n\t\t\treturn _k == k;\n\t\t});\n\t}).forEach(function(k) {\n\t\tdelete ret[k];\n\t});\n\n\treturn ret;\n}\n\n_unique(keys, ret) {\n\tret = ret || new shs_arbfw_appd_Transform_Composition();\n\n\tundefined\n\n\t// if(this.Id) ret.Id = this.Id;\n\tif (!keys) {\n\n\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (typeof(this.transform()) !== 'undefined') ret.transform(this.transform()._unique());\n\n\t} else {\n\n\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t\tif (keys.indexOf(\"transform\") >= 0 && typeof(this.transform()) !== 'undefined') ret.transform(this.transform()._unique());\n\n\t}\n\n\treturn ret;\n}\n\n_query(gq) {\n\tlet arFields = Object.keys(global.Schema.of('sys_transform_composition', ['*'])['sys_transform_composition']);\n\n\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('sys_transform_composition');\n\n\tundefined\n\n\tlet idf = ((function(r) {\n\t\tlet ret = 'sys_id';\n\t\tif (typeof(r.__idField) === 'function') {\n\t\t\tret = r.__idField();\n\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\tret = r.__idField || this.__idField();\n\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\tret = 'Id';\n\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\tret = 'sys_id';\n\t\t}\n\t\treturn ret;\n\t})(this));\n\tif (idf == 'Id') idf = 'sys_id';\n\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tlet coop = this._active_coop || '=';\n\n\t\tlet v = this.active();\n\n\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Transform_Composition._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tlet coop = this._enabled_coop || '=';\n\n\t\tlet v = this.enabled();\n\n\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Transform_Composition._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tlet coop = this._code_coop || '=';\n\n\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.code();\n\n\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Transform_Composition._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tlet coop = this._order_coop || '=';\n\n\t\tlet v = this.order();\n\n\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Transform_Composition._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tlet coop = this._date_coop || '=';\n\n\t\tlet v = this.date();\n\n\t\tif (v) {\n\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t}\n\n\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Transform_Composition._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tlet coop = this._name_coop || '=';\n\n\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.name();\n\n\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Transform_Composition._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tlet coop = this._remark_coop || '=';\n\n\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.remark();\n\n\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Transform_Composition._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._transform) !== 'undefined') {\n\t\tlet coop = this._transform_coop || '=';\n\n\t\tlet v = this.transform();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Transform Composition\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Transform_Composition._query(): \"+ \"transform \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Transform_Composition._query(): \" + \"transform[transform] resuled in undefined: \" + JSON.stringify(this.transform()));\n\t\t}\n\n\t\tif (arFields.indexOf('transform') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Transform_Composition._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('transform');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('transform');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('transform', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Transform_Composition._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\treturn this._queryGQ;\n}\n\n_save(obj) {\n\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\treturn new shs_arbfw_appd_Transform_Composition()._save(o)\n\t});\n\n\tlet _obj = {};\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Transform_Composition._save(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\tObject.keys(obj).filter(function(k) {\n\t\treturn Object.keys(global.Schema.of('sys_transform_composition', ['*'])['sys_transform_composition']).filter(function(_k) {\n\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t}).indexOf(k.toLowerCase()) >= 0\n\t}).forEach(function(k) {\n\t\t_obj[k.toLowerCase()] = obj[k]\n\t});\n\n\tObject.keys(_obj).forEach(function(k) {\n\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Transform_Composition._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tdelete _obj[k];\n\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Transform_Composition._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t}\n\t});\n\n\tlet _this = null;\n\tif (obj.__keys) {\n\t\tlet kObj = {};\n\t\tkObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(_obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))));\n\t\tobj.__keys.forEach(function(k) {\n\t\t\tkObj[k] = _obj[k]\n\t\t});\n\t\t_this = new shs_arbfw_appd_Transform_Composition()._fromDocument(kObj);\n\t} else {\n\t\t_this = new shs_arbfw_appd_Transform_Composition()._fromDocument(_obj)._unique();\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Transform_Composition._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\tdelete _obj.__idField;\n\n\ttry {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Transform_Composition._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\tObject.keys(_obj).filter(function(k) {\n\t\t\treturn k.toLowerCase() != k;\n\t\t}).forEach(function(k) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Transform_Composition._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tvar lk = k.toLowerCase();\n\t\t\t_obj[lk] = _obj[k];\n\t\t\tdelete _obj[k];\n\t\t});\n\n\t\tlet gq = new global.GlideQuery(obj.__type || 'sys_transform_composition');\n\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Transform_Composition._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\tif (_obj.sys_id) {\n\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t} else {\n\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\tgq = gq.insert(_obj);\n\t\t}\n\t\tlet _fObj = {};\n\t\t_fObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))));\n\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('sys_transform_composition', ['*'])['sys_transform_composition']))));\n\t} catch (ex) {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Transform_Composition._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Transform_Composition._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\treturn this;\n\t}\n\n\treturn this;\n}\n\n/************* Transform_Composition.store() **********************/\nstore(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Transform_Composition.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Transform_Composition.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Transform_Composition.store(): \" + \"executing locally \");\n\n\t\t// store locally\n\t\treturn this._save(this._toDocument());\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Transform_Composition.findAll() **********************/\nfindAll(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Transform_Composition.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Transform_Composition.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Transform_Composition.findAll(): \" + \"executing locally \");\n\n\t\t// findAll locally\n\t\tlet gr = new GlideRecord('sys_transform_composition');\n\t\tgr.addEncodedQuery(this._toEQuery());\n\t\treturn this._fromDocument(gr);\n\n\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('sys_transform_composition', ['*'])['sys_transform_composition'])));\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Transform_Composition.find() **********************/\nfind(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Transform_Composition.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Transform_Composition.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Transform_Composition.find(): \" + \"executing locally \");\n\n\t\tlet ret = this.findAll();\n\t\treturn ret.length ? ret[0] : null;\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"scriptFile_Script_Compatibilitys":[{"active":true,"enabled":true}],"client_callable":true,"sys_name":"shs_arbfw_appd_Flow_Data","api_name":"x_1790593_arboard.shs_arbfw_appd_Flow_Data","name":"shs_arbfw_appd_Flow_Data","script":"class shs_arbfw_appd_Flow_Data extends global.AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"Application Designer\";\n\t\tthis.__type = \"shs_arbfw_appd_Flow_Data\";\n\t\tthis.__alias = \"shs_arbfw_appd\";\n\t\tthis.__scope = \"shs_arbfw\";\n\t}\n\n\t/************* Flow_Data.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Flow_Data.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Flow_Data.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Flow_Data.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Flow_Data.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Data.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Flow_Data.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Flow_Data.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Flow_Data.definition GETTERS AND SETTERS **********************/\n\tdefinition(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._definition = v;\n\t\t\tthis._definition_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._definition;\n\t\t}\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = undefined || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\tif (this._definition) ret += /*(this._definition_coop || '=') + */ this.definition()._toEQuery(sPath + 'definition.');\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Data._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn new shs_arbfw_appd_Flow_Data()._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Data._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Data._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromGlideRecord(obj) {\n\t\tif (!obj) return null;\n\t\tif (obj.isValidRecord()) {\n\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Flow_Data\" != 'ecc_queue' && obj.source == \"shs_arbfw_appd_Flow_Data\") {\n\t\t\t\tobj.state = \"processing\";\n\t\t\t\tobj.update();\n\n\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\tresp.queue = 'output';\n\t\t\t\tresp.agent = obj.agent;\n\t\t\t\tresp.topic = obj.topic;\n\t\t\t\tresp.name = obj.name;\n\t\t\t\tresp.source = obj.source;\n\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\tlet ret = new shs_arbfw_appd_Flow_Data()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t});\n\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t}\n\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\tresp.insert();\n\n\t\t\t\tobj.state = \"processed\";\n\t\t\t\tobj.update();\n\t\t\t\treturn resp;\n\t\t\t} else {\n\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\tdefinition: obj.getValue(\"definition\"),\n\n\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tobj.query();\n\t\t\tlet grRet = [];\n\t\t\twhile (obj.next()) grRet.push(this._fromGlideRecord(obj));\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Data._fromGlideRecord(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\treturn grRet;\n\t\t}\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\tundefined\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_appd_Flow_Data()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\tif (/((([A-Za-z]{3,9}:(?:/ / ) ? )( ? : [-;: &= +$, w] + @) ? [A - Za - z0 - 9. - ] + | ( ? : www. | [-;: &= +$, w] + @)[A - Za - z0 - 9. - ] + )(( ? : /[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)/g.test(obj)) {\n\t\t\tvar msg = new sn_ws.RESTMessageV2();\n\t\t\tmsg.setEndpoint(obj);\n\t\t\tmsg.setRequestHeader('Content-Type', 'application/json');\n\t\t\tmsg.setHttpMethod('get');\n\t\t\treturn this._fromDocument(msg.execute().getBody());\n\t\t}\n\n\t\ttry {\n\t\t\tobj = JSON.parse(obj);\n\t\t} catch (ex) {\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Data._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\tlet _obj = {\n\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))\n\t\t\t};\n\t\t\t_obj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(this))] = obj;\n\t\t\tobj = _obj;\n\t\t}\n\t\treturn this._fromDocument(obj);\n\t}\n\telse if (typeof(obj) === 'object') {\n\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\treturn this._fromGlideRecord(obj);\n\t\t} else if (obj._fromDocument) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Data._fromDocument(): \" + \"redundent call\");\n\t\t\treturn obj;\n\t\t} else if (Array.isArray(obj)) {\n\t\t\treturn obj.map(function(o) {\n\t\t\t\treturn new shs_arbfw_appd_Flow_Data()._fromDocument(o)\n\t\t\t});\n\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(obj))));\n\n\t\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Data._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.definition) !== 'undefined') {\n\n\t\t\t\t\tthis.definition(new shs_arbfw_appd_Data_Definition()._fromDocument(obj.definition));\n\t\t\t\t}\n\n\t\t\t} else { // if(obj.constructor.name==\"Flow_Data\"){\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Data._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t}\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Data._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\treturn null;\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Data._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Data._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Data._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\treturn this;\n}\n\n_insertAssert() {\n\treturn true;\n}\n\n_updateAssert() {\n\treturn true;\n}\n\n_storeAssert() {\n\treturn true;\n}\n\n_findAssert() {\n\treturn true;\n}\n\n_new(c) {\n\n\treturn new shs_arbfw_appd_Platform._new(c);\n\n}\n\n_toDocument(arFields) {\n\n\tlet ret = undefined || {};\n\n\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tret.active = this.active();\n\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tret.enabled = this.enabled();\n\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tret.code = this.code();\n\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tret.order = this.order();\n\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tret.date = this.date();\n\n\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tret.name = this.name();\n\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tret.remark = this.remark();\n\n\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t}\n\n\tif (typeof(this._definition) !== 'undefined') {\n\t\tret.definition = this.definition();\n\n\t\tif (ret.definition) {\n\t\t\tret.definition = ret.definition._toDocument();\n\t\t\tif (typeof(ret.definition) === 'object' && !Object.keys(ret.definition).length) ret.definition = null;\n\t\t}\n\n\t}\n\n\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\treturn !arFields.find(function(_k) {\n\t\t\treturn _k == k;\n\t\t});\n\t}).forEach(function(k) {\n\t\tdelete ret[k];\n\t});\n\n\treturn ret;\n}\n\n_unique(keys, ret) {\n\tret = ret || new shs_arbfw_appd_Flow_Data();\n\n\tundefined\n\n\t// if(this.Id) ret.Id = this.Id;\n\tif (!keys) {\n\n\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t} else {\n\n\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t\tif (keys.indexOf(\"definition\") >= 0 && typeof(this.definition()) !== 'undefined') ret.definition(this.definition()._unique());\n\n\t}\n\n\treturn ret;\n}\n\n_query(gq) {\n\tlet arFields = Object.keys(global.Schema.of('sys_flow_data', ['*'])['sys_flow_data']);\n\n\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('sys_flow_data');\n\n\tundefined\n\n\tlet idf = ((function(r) {\n\t\tlet ret = 'sys_id';\n\t\tif (typeof(r.__idField) === 'function') {\n\t\t\tret = r.__idField();\n\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\tret = r.__idField || this.__idField();\n\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\tret = 'Id';\n\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\tret = 'sys_id';\n\t\t}\n\t\treturn ret;\n\t})(this));\n\tif (idf == 'Id') idf = 'sys_id';\n\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tlet coop = this._active_coop || '=';\n\n\t\tlet v = this.active();\n\n\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Data._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tlet coop = this._enabled_coop || '=';\n\n\t\tlet v = this.enabled();\n\n\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Data._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tlet coop = this._code_coop || '=';\n\n\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.code();\n\n\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Data._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tlet coop = this._order_coop || '=';\n\n\t\tlet v = this.order();\n\n\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Data._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tlet coop = this._date_coop || '=';\n\n\t\tlet v = this.date();\n\n\t\tif (v) {\n\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t}\n\n\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Data._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tlet coop = this._name_coop || '=';\n\n\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.name();\n\n\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Data._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tlet coop = this._remark_coop || '=';\n\n\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.remark();\n\n\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Data._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._definition) !== 'undefined') {\n\t\tlet coop = this._definition_coop || '=';\n\n\t\tlet v = this.definition();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Flow Data\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Data._query(): \"+ \"definition \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Data._query(): \" + \"definition[definition] resuled in undefined: \" + JSON.stringify(this.definition()));\n\t\t}\n\n\t\tif (arFields.indexOf('definition') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Data._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('definition');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('definition');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('definition', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Data._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\treturn this._queryGQ;\n}\n\n_save(obj) {\n\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\treturn new shs_arbfw_appd_Flow_Data()._save(o)\n\t});\n\n\tlet _obj = {};\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Data._save(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\tObject.keys(obj).filter(function(k) {\n\t\treturn Object.keys(global.Schema.of('sys_flow_data', ['*'])['sys_flow_data']).filter(function(_k) {\n\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t}).indexOf(k.toLowerCase()) >= 0\n\t}).forEach(function(k) {\n\t\t_obj[k.toLowerCase()] = obj[k]\n\t});\n\n\tObject.keys(_obj).forEach(function(k) {\n\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Data._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tdelete _obj[k];\n\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Data._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t}\n\t});\n\n\tlet _this = null;\n\tif (obj.__keys) {\n\t\tlet kObj = {};\n\t\tkObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(_obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))));\n\t\tobj.__keys.forEach(function(k) {\n\t\t\tkObj[k] = _obj[k]\n\t\t});\n\t\t_this = new shs_arbfw_appd_Flow_Data()._fromDocument(kObj);\n\t} else {\n\t\t_this = new shs_arbfw_appd_Flow_Data()._fromDocument(_obj)._unique();\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Data._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\tdelete _obj.__idField;\n\n\ttry {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Data._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\tObject.keys(_obj).filter(function(k) {\n\t\t\treturn k.toLowerCase() != k;\n\t\t}).forEach(function(k) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Data._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tvar lk = k.toLowerCase();\n\t\t\t_obj[lk] = _obj[k];\n\t\t\tdelete _obj[k];\n\t\t});\n\n\t\tlet gq = new global.GlideQuery(obj.__type || 'sys_flow_data');\n\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Data._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\tif (_obj.sys_id) {\n\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t} else {\n\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\tgq = gq.insert(_obj);\n\t\t}\n\t\tlet _fObj = {};\n\t\t_fObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))));\n\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('sys_flow_data', ['*'])['sys_flow_data']))));\n\t} catch (ex) {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Data._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Data._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\treturn this;\n\t}\n\n\treturn this;\n}\n\n/************* Flow_Data.store() **********************/\nstore(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Data.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Data.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Data.store(): \" + \"executing locally \");\n\n\t\t// store locally\n\t\treturn this._save(this._toDocument());\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Flow_Data.findAll() **********************/\nfindAll(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Data.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Data.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Data.findAll(): \" + \"executing locally \");\n\n\t\t// findAll locally\n\t\tlet gr = new GlideRecord('sys_flow_data');\n\t\tgr.addEncodedQuery(this._toEQuery());\n\t\treturn this._fromDocument(gr);\n\n\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('sys_flow_data', ['*'])['sys_flow_data'])));\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Flow_Data.find() **********************/\nfind(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Data.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Data.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Data.find(): \" + \"executing locally \");\n\n\t\tlet ret = this.findAll();\n\t\treturn ret.length ? ret[0] : null;\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"scriptFile_Script_Compatibilitys":[{"active":true,"enabled":true}],"client_callable":true,"sys_name":"shs_arbfw_appd_Security_Type","api_name":"x_1790593_arboard.shs_arbfw_appd_Security_Type","name":"shs_arbfw_appd_Security_Type","script":"class shs_arbfw_appd_Security_Type extends global.AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"Application Designer\";\n\t\tthis.__type = \"shs_arbfw_appd_Security_Type\";\n\t\tthis.__alias = \"shs_arbfw_appd\";\n\t\tthis.__scope = \"shs_arbfw\";\n\t}\n\n\t/************* Security_Type.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Security_Type.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Security_Type.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Security_Type.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Security_Type.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//(typeof(window)!=='undefined'?alert:gs.info)(\"Security_Type.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Security_Type.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Security_Type.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Security_Type.application GETTERS AND SETTERS **********************/\n\tapplication(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._application = v;\n\t\t\tthis._application_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._application;\n\t\t}\n\t}\n\n\t/************* Security_Type.type_Security_Controls GETTERS AND SETTERS **********************/\n\ttype_Security_Controls(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._type_Security_Controls = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._type_Security_Controls_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._type_Security_Controls;\n\t\t}\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = undefined || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\tif (this._application) ret += /*(this._application_coop || '=') + */ this.application()._toEQuery(sPath + 'application.');\n\n\t\t(this.type_Security_Controls() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYSecurity_Control.type,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Security_Type._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn new shs_arbfw_appd_Security_Type()._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Security_Type._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Security_Type._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromGlideRecord(obj) {\n\t\tif (!obj) return null;\n\t\tif (obj.isValidRecord()) {\n\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Security_Type\" != 'ecc_queue' && obj.source == \"shs_arbfw_appd_Security_Type\") {\n\t\t\t\tobj.state = \"processing\";\n\t\t\t\tobj.update();\n\n\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\tresp.queue = 'output';\n\t\t\t\tresp.agent = obj.agent;\n\t\t\t\tresp.topic = obj.topic;\n\t\t\t\tresp.name = obj.name;\n\t\t\t\tresp.source = obj.source;\n\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\tlet ret = new shs_arbfw_appd_Security_Type()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t});\n\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t}\n\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\tresp.insert();\n\n\t\t\t\tobj.state = \"processed\";\n\t\t\t\tobj.update();\n\t\t\t\treturn resp;\n\t\t\t} else {\n\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\tapplication: obj.getValue(\"application\"),\n\n\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tobj.query();\n\t\t\tlet grRet = [];\n\t\t\twhile (obj.next()) grRet.push(this._fromGlideRecord(obj));\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Security_Type._fromGlideRecord(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\treturn grRet;\n\t\t}\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\tundefined\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_appd_Security_Type()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\tif (/((([A-Za-z]{3,9}:(?:/ / ) ? )( ? : [-;: &= +$, w] + @) ? [A - Za - z0 - 9. - ] + | ( ? : www. | [-;: &= +$, w] + @)[A - Za - z0 - 9. - ] + )(( ? : /[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)/g.test(obj)) {\n\t\t\tvar msg = new sn_ws.RESTMessageV2();\n\t\t\tmsg.setEndpoint(obj);\n\t\t\tmsg.setRequestHeader('Content-Type', 'application/json');\n\t\t\tmsg.setHttpMethod('get');\n\t\t\treturn this._fromDocument(msg.execute().getBody());\n\t\t}\n\n\t\ttry {\n\t\t\tobj = JSON.parse(obj);\n\t\t} catch (ex) {\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Security_Type._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\tlet _obj = {\n\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))\n\t\t\t};\n\t\t\t_obj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(this))] = obj;\n\t\t\tobj = _obj;\n\t\t}\n\t\treturn this._fromDocument(obj);\n\t}\n\telse if (typeof(obj) === 'object') {\n\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\treturn this._fromGlideRecord(obj);\n\t\t} else if (obj._fromDocument) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Security_Type._fromDocument(): \" + \"redundent call\");\n\t\t\treturn obj;\n\t\t} else if (Array.isArray(obj)) {\n\t\t\treturn obj.map(function(o) {\n\t\t\t\treturn new shs_arbfw_appd_Security_Type()._fromDocument(o)\n\t\t\t});\n\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(obj))));\n\n\t\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Security_Type._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.application) !== 'undefined') {\n\n\t\t\t\t\tthis.application(new shs_arbfw_appd_Application()._fromDocument(obj.application));\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.type_Security_Controls) !== 'undefined') this.type_Security_Controls(new shs_arbfw_appd_Security_Control()._fromDocument(obj.type_Security_Controls));\n\n\t\t\t} else { // if(obj.constructor.name==\"Security_Type\"){\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Security_Type._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t}\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Security_Type._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\treturn null;\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Security_Type._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Security_Type._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Security_Type._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\treturn this;\n}\n\n_insertAssert() {\n\treturn true;\n}\n\n_updateAssert() {\n\treturn true;\n}\n\n_storeAssert() {\n\treturn true;\n}\n\n_findAssert() {\n\treturn true;\n}\n\n_new(c) {\n\n\treturn new shs_arbfw_appd_Platform._new(c);\n\n}\n\n_toDocument(arFields) {\n\n\tlet ret = undefined || {};\n\n\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tret.active = this.active();\n\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tret.enabled = this.enabled();\n\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tret.code = this.code();\n\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tret.order = this.order();\n\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tret.date = this.date();\n\n\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tret.name = this.name();\n\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tret.remark = this.remark();\n\n\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t}\n\n\tif (typeof(this._application) !== 'undefined') {\n\t\tret.application = this.application();\n\n\t\tif (ret.application) {\n\t\t\tret.application = ret.application._toDocument();\n\t\t\tif (typeof(ret.application) === 'object' && !Object.keys(ret.application).length) ret.application = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this.type_Security_Controls()) !== 'undefined') ret.type_Security_Controls = this.type_Security_Controls().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\treturn !arFields.find(function(_k) {\n\t\t\treturn _k == k;\n\t\t});\n\t}).forEach(function(k) {\n\t\tdelete ret[k];\n\t});\n\n\treturn ret;\n}\n\n_unique(keys, ret) {\n\tret = ret || new shs_arbfw_appd_Security_Type();\n\n\tundefined\n\n\t// if(this.Id) ret.Id = this.Id;\n\tif (!keys) {\n\n\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (typeof(this.application()) !== 'undefined') ret.application(this.application()._unique());\n\n\t} else {\n\n\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t\tif (keys.indexOf(\"application\") >= 0 && typeof(this.application()) !== 'undefined') ret.application(this.application()._unique());\n\n\t}\n\n\treturn ret;\n}\n\n_query(gq) {\n\tlet arFields = Object.keys(global.Schema.of('sys_security_type', ['*'])['sys_security_type']);\n\n\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('sys_security_type');\n\n\tundefined\n\n\tlet idf = ((function(r) {\n\t\tlet ret = 'sys_id';\n\t\tif (typeof(r.__idField) === 'function') {\n\t\t\tret = r.__idField();\n\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\tret = r.__idField || this.__idField();\n\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\tret = 'Id';\n\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\tret = 'sys_id';\n\t\t}\n\t\treturn ret;\n\t})(this));\n\tif (idf == 'Id') idf = 'sys_id';\n\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tlet coop = this._active_coop || '=';\n\n\t\tlet v = this.active();\n\n\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Security_Type._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tlet coop = this._enabled_coop || '=';\n\n\t\tlet v = this.enabled();\n\n\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Security_Type._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tlet coop = this._code_coop || '=';\n\n\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.code();\n\n\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Security_Type._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tlet coop = this._order_coop || '=';\n\n\t\tlet v = this.order();\n\n\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Security_Type._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tlet coop = this._date_coop || '=';\n\n\t\tlet v = this.date();\n\n\t\tif (v) {\n\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t}\n\n\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Security_Type._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tlet coop = this._name_coop || '=';\n\n\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.name();\n\n\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Security_Type._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tlet coop = this._remark_coop || '=';\n\n\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.remark();\n\n\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Security_Type._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._application) !== 'undefined') {\n\t\tlet coop = this._application_coop || '=';\n\n\t\tlet v = this.application();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Security Type\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Security_Type._query(): \"+ \"application \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Security_Type._query(): \" + \"application[application] resuled in undefined: \" + JSON.stringify(this.application()));\n\t\t}\n\n\t\tif (arFields.indexOf('application') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Security_Type._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('application');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('application');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('application', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Security_Type._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\treturn this._queryGQ;\n}\n\n_save(obj) {\n\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\treturn new shs_arbfw_appd_Security_Type()._save(o)\n\t});\n\n\tlet _obj = {};\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Security_Type._save(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\tObject.keys(obj).filter(function(k) {\n\t\treturn Object.keys(global.Schema.of('sys_security_type', ['*'])['sys_security_type']).filter(function(_k) {\n\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t}).indexOf(k.toLowerCase()) >= 0\n\t}).forEach(function(k) {\n\t\t_obj[k.toLowerCase()] = obj[k]\n\t});\n\n\tObject.keys(_obj).forEach(function(k) {\n\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Security_Type._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tdelete _obj[k];\n\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Security_Type._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t}\n\t});\n\n\tlet _this = null;\n\tif (obj.__keys) {\n\t\tlet kObj = {};\n\t\tkObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(_obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))));\n\t\tobj.__keys.forEach(function(k) {\n\t\t\tkObj[k] = _obj[k]\n\t\t});\n\t\t_this = new shs_arbfw_appd_Security_Type()._fromDocument(kObj);\n\t} else {\n\t\t_this = new shs_arbfw_appd_Security_Type()._fromDocument(_obj)._unique();\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Security_Type._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\tdelete _obj.__idField;\n\n\ttry {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Security_Type._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\tObject.keys(_obj).filter(function(k) {\n\t\t\treturn k.toLowerCase() != k;\n\t\t}).forEach(function(k) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Security_Type._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tvar lk = k.toLowerCase();\n\t\t\t_obj[lk] = _obj[k];\n\t\t\tdelete _obj[k];\n\t\t});\n\n\t\tlet gq = new global.GlideQuery(obj.__type || 'sys_security_type');\n\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Security_Type._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\tif (_obj.sys_id) {\n\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t} else {\n\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\tgq = gq.insert(_obj);\n\t\t}\n\t\tlet _fObj = {};\n\t\t_fObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))));\n\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('sys_security_type', ['*'])['sys_security_type']))));\n\t} catch (ex) {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Security_Type._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Security_Type._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\treturn this;\n\t}\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Security_Type._save(): \" + \"obj.type_Security_Controls: \" + JSON.stringify(obj.type_Security_Controls, null, 4));\n\tif (Array.isArray(obj.type_Security_Controls)) this.type_Security_Controls(obj.type_Security_Controls.map(function(ta) {\n\t\treturn new shs_arbfw_appd_Security_Control()._save(ta)\n\t}));\n\n\treturn this;\n}\n\n/************* Security_Type.store() **********************/\nstore(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Security_Type.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Security_Type.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Security_Type.store(): \" + \"executing locally \");\n\n\t\t// store locally\n\t\treturn this._save(this._toDocument());\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Security_Type.findAll() **********************/\nfindAll(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Security_Type.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Security_Type.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Security_Type.findAll(): \" + \"executing locally \");\n\n\t\t// findAll locally\n\t\tlet gr = new GlideRecord('sys_security_type');\n\t\tgr.addEncodedQuery(this._toEQuery());\n\t\treturn this._fromDocument(gr);\n\n\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('sys_security_type', ['*'])['sys_security_type'])));\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Security_Type.find() **********************/\nfind(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Security_Type.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Security_Type.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Security_Type.find(): \" + \"executing locally \");\n\n\t\tlet ret = this.findAll();\n\t\treturn ret.length ? ret[0] : null;\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"scriptFile_Script_Compatibilitys":[{"active":true,"enabled":true}],"client_callable":true,"sys_name":"shs_arbfw_appd_Security_Operation","api_name":"x_1790593_arboard.shs_arbfw_appd_Security_Operation","name":"shs_arbfw_appd_Security_Operation","script":"class shs_arbfw_appd_Security_Operation extends global.AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"Application Designer\";\n\t\tthis.__type = \"shs_arbfw_appd_Security_Operation\";\n\t\tthis.__alias = \"shs_arbfw_appd\";\n\t\tthis.__scope = \"shs_arbfw\";\n\t}\n\n\t/************* Security_Operation.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Security_Operation.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Security_Operation.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Security_Operation.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Security_Operation.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//(typeof(window)!=='undefined'?alert:gs.info)(\"Security_Operation.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Security_Operation.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Security_Operation.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Security_Operation.application GETTERS AND SETTERS **********************/\n\tapplication(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._application = v;\n\t\t\tthis._application_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._application;\n\t\t}\n\t}\n\n\t/************* Security_Operation.operation_Security_Controls GETTERS AND SETTERS **********************/\n\toperation_Security_Controls(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._operation_Security_Controls = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._operation_Security_Controls_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._operation_Security_Controls;\n\t\t}\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = undefined || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\tif (this._application) ret += /*(this._application_coop || '=') + */ this.application()._toEQuery(sPath + 'application.');\n\n\t\t(this.operation_Security_Controls() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYSecurity_Control.operation,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Security_Operation._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn new shs_arbfw_appd_Security_Operation()._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Security_Operation._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Security_Operation._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromGlideRecord(obj) {\n\t\tif (!obj) return null;\n\t\tif (obj.isValidRecord()) {\n\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Security_Operation\" != 'ecc_queue' && obj.source == \"shs_arbfw_appd_Security_Operation\") {\n\t\t\t\tobj.state = \"processing\";\n\t\t\t\tobj.update();\n\n\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\tresp.queue = 'output';\n\t\t\t\tresp.agent = obj.agent;\n\t\t\t\tresp.topic = obj.topic;\n\t\t\t\tresp.name = obj.name;\n\t\t\t\tresp.source = obj.source;\n\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\tlet ret = new shs_arbfw_appd_Security_Operation()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t});\n\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t}\n\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\tresp.insert();\n\n\t\t\t\tobj.state = \"processed\";\n\t\t\t\tobj.update();\n\t\t\t\treturn resp;\n\t\t\t} else {\n\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\tapplication: obj.getValue(\"application\"),\n\n\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tobj.query();\n\t\t\tlet grRet = [];\n\t\t\twhile (obj.next()) grRet.push(this._fromGlideRecord(obj));\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Security_Operation._fromGlideRecord(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\treturn grRet;\n\t\t}\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\tundefined\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_appd_Security_Operation()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\tif (/((([A-Za-z]{3,9}:(?:/ / ) ? )( ? : [-;: &= +$, w] + @) ? [A - Za - z0 - 9. - ] + | ( ? : www. | [-;: &= +$, w] + @)[A - Za - z0 - 9. - ] + )(( ? : /[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)/g.test(obj)) {\n\t\t\tvar msg = new sn_ws.RESTMessageV2();\n\t\t\tmsg.setEndpoint(obj);\n\t\t\tmsg.setRequestHeader('Content-Type', 'application/json');\n\t\t\tmsg.setHttpMethod('get');\n\t\t\treturn this._fromDocument(msg.execute().getBody());\n\t\t}\n\n\t\ttry {\n\t\t\tobj = JSON.parse(obj);\n\t\t} catch (ex) {\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Security_Operation._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\tlet _obj = {\n\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))\n\t\t\t};\n\t\t\t_obj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(this))] = obj;\n\t\t\tobj = _obj;\n\t\t}\n\t\treturn this._fromDocument(obj);\n\t}\n\telse if (typeof(obj) === 'object') {\n\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\treturn this._fromGlideRecord(obj);\n\t\t} else if (obj._fromDocument) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Security_Operation._fromDocument(): \" + \"redundent call\");\n\t\t\treturn obj;\n\t\t} else if (Array.isArray(obj)) {\n\t\t\treturn obj.map(function(o) {\n\t\t\t\treturn new shs_arbfw_appd_Security_Operation()._fromDocument(o)\n\t\t\t});\n\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(obj))));\n\n\t\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Security_Operation._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.application) !== 'undefined') {\n\n\t\t\t\t\tthis.application(new shs_arbfw_appd_Application()._fromDocument(obj.application));\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.operation_Security_Controls) !== 'undefined') this.operation_Security_Controls(new shs_arbfw_appd_Security_Control()._fromDocument(obj.operation_Security_Controls));\n\n\t\t\t} else { // if(obj.constructor.name==\"Security_Operation\"){\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Security_Operation._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t}\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Security_Operation._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\treturn null;\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Security_Operation._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Security_Operation._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Security_Operation._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\treturn this;\n}\n\n_insertAssert() {\n\treturn true;\n}\n\n_updateAssert() {\n\treturn true;\n}\n\n_storeAssert() {\n\treturn true;\n}\n\n_findAssert() {\n\treturn true;\n}\n\n_new(c) {\n\n\treturn new shs_arbfw_appd_Platform._new(c);\n\n}\n\n_toDocument(arFields) {\n\n\tlet ret = undefined || {};\n\n\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tret.active = this.active();\n\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tret.enabled = this.enabled();\n\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tret.code = this.code();\n\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tret.order = this.order();\n\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tret.date = this.date();\n\n\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tret.name = this.name();\n\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tret.remark = this.remark();\n\n\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t}\n\n\tif (typeof(this._application) !== 'undefined') {\n\t\tret.application = this.application();\n\n\t\tif (ret.application) {\n\t\t\tret.application = ret.application._toDocument();\n\t\t\tif (typeof(ret.application) === 'object' && !Object.keys(ret.application).length) ret.application = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this.operation_Security_Controls()) !== 'undefined') ret.operation_Security_Controls = this.operation_Security_Controls().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\treturn !arFields.find(function(_k) {\n\t\t\treturn _k == k;\n\t\t});\n\t}).forEach(function(k) {\n\t\tdelete ret[k];\n\t});\n\n\treturn ret;\n}\n\n_unique(keys, ret) {\n\tret = ret || new shs_arbfw_appd_Security_Operation();\n\n\tundefined\n\n\t// if(this.Id) ret.Id = this.Id;\n\tif (!keys) {\n\n\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (typeof(this.application()) !== 'undefined') ret.application(this.application()._unique());\n\n\t} else {\n\n\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t\tif (keys.indexOf(\"application\") >= 0 && typeof(this.application()) !== 'undefined') ret.application(this.application()._unique());\n\n\t}\n\n\treturn ret;\n}\n\n_query(gq) {\n\tlet arFields = Object.keys(global.Schema.of('sys_security_operation', ['*'])['sys_security_operation']);\n\n\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('sys_security_operation');\n\n\tundefined\n\n\tlet idf = ((function(r) {\n\t\tlet ret = 'sys_id';\n\t\tif (typeof(r.__idField) === 'function') {\n\t\t\tret = r.__idField();\n\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\tret = r.__idField || this.__idField();\n\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\tret = 'Id';\n\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\tret = 'sys_id';\n\t\t}\n\t\treturn ret;\n\t})(this));\n\tif (idf == 'Id') idf = 'sys_id';\n\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tlet coop = this._active_coop || '=';\n\n\t\tlet v = this.active();\n\n\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Security_Operation._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tlet coop = this._enabled_coop || '=';\n\n\t\tlet v = this.enabled();\n\n\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Security_Operation._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tlet coop = this._code_coop || '=';\n\n\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.code();\n\n\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Security_Operation._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tlet coop = this._order_coop || '=';\n\n\t\tlet v = this.order();\n\n\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Security_Operation._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tlet coop = this._date_coop || '=';\n\n\t\tlet v = this.date();\n\n\t\tif (v) {\n\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t}\n\n\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Security_Operation._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tlet coop = this._name_coop || '=';\n\n\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.name();\n\n\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Security_Operation._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tlet coop = this._remark_coop || '=';\n\n\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.remark();\n\n\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Security_Operation._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._application) !== 'undefined') {\n\t\tlet coop = this._application_coop || '=';\n\n\t\tlet v = this.application();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Security Operation\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Security_Operation._query(): \"+ \"application \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Security_Operation._query(): \" + \"application[application] resuled in undefined: \" + JSON.stringify(this.application()));\n\t\t}\n\n\t\tif (arFields.indexOf('application') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Security_Operation._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('application');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('application');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('application', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Security_Operation._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\treturn this._queryGQ;\n}\n\n_save(obj) {\n\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\treturn new shs_arbfw_appd_Security_Operation()._save(o)\n\t});\n\n\tlet _obj = {};\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Security_Operation._save(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\tObject.keys(obj).filter(function(k) {\n\t\treturn Object.keys(global.Schema.of('sys_security_operation', ['*'])['sys_security_operation']).filter(function(_k) {\n\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t}).indexOf(k.toLowerCase()) >= 0\n\t}).forEach(function(k) {\n\t\t_obj[k.toLowerCase()] = obj[k]\n\t});\n\n\tObject.keys(_obj).forEach(function(k) {\n\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Security_Operation._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tdelete _obj[k];\n\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Security_Operation._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t}\n\t});\n\n\tlet _this = null;\n\tif (obj.__keys) {\n\t\tlet kObj = {};\n\t\tkObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(_obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))));\n\t\tobj.__keys.forEach(function(k) {\n\t\t\tkObj[k] = _obj[k]\n\t\t});\n\t\t_this = new shs_arbfw_appd_Security_Operation()._fromDocument(kObj);\n\t} else {\n\t\t_this = new shs_arbfw_appd_Security_Operation()._fromDocument(_obj)._unique();\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Security_Operation._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\tdelete _obj.__idField;\n\n\ttry {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Security_Operation._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\tObject.keys(_obj).filter(function(k) {\n\t\t\treturn k.toLowerCase() != k;\n\t\t}).forEach(function(k) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Security_Operation._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tvar lk = k.toLowerCase();\n\t\t\t_obj[lk] = _obj[k];\n\t\t\tdelete _obj[k];\n\t\t});\n\n\t\tlet gq = new global.GlideQuery(obj.__type || 'sys_security_operation');\n\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Security_Operation._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\tif (_obj.sys_id) {\n\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t} else {\n\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\tgq = gq.insert(_obj);\n\t\t}\n\t\tlet _fObj = {};\n\t\t_fObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))));\n\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('sys_security_operation', ['*'])['sys_security_operation']))));\n\t} catch (ex) {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Security_Operation._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Security_Operation._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\treturn this;\n\t}\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Security_Operation._save(): \" + \"obj.operation_Security_Controls: \" + JSON.stringify(obj.operation_Security_Controls, null, 4));\n\tif (Array.isArray(obj.operation_Security_Controls)) this.operation_Security_Controls(obj.operation_Security_Controls.map(function(ta) {\n\t\treturn new shs_arbfw_appd_Security_Control()._save(ta)\n\t}));\n\n\treturn this;\n}\n\n/************* Security_Operation.store() **********************/\nstore(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Security_Operation.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Security_Operation.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Security_Operation.store(): \" + \"executing locally \");\n\n\t\t// store locally\n\t\treturn this._save(this._toDocument());\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Security_Operation.findAll() **********************/\nfindAll(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Security_Operation.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Security_Operation.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Security_Operation.findAll(): \" + \"executing locally \");\n\n\t\t// findAll locally\n\t\tlet gr = new GlideRecord('sys_security_operation');\n\t\tgr.addEncodedQuery(this._toEQuery());\n\t\treturn this._fromDocument(gr);\n\n\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('sys_security_operation', ['*'])['sys_security_operation'])));\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Security_Operation.find() **********************/\nfind(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Security_Operation.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Security_Operation.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Security_Operation.find(): \" + \"executing locally \");\n\n\t\tlet ret = this.findAll();\n\t\treturn ret.length ? ret[0] : null;\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"scriptFile_Script_Compatibilitys":[{"active":true,"enabled":true}],"client_callable":true,"sys_name":"shs_arbfw_Platform","api_name":"x_1790593_arboard.shs_arbfw_Platform","name":"shs_arbfw_Platform","script":"class shs_arbfw_Platform extends global.AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"\";\n\t\tthis.__type = \"shs_arbfw_Platform\";\n\t\tthis.__alias = \"shs_arbfw\";\n\t\tthis.__scope = \"shs_arbfw\";\n\t}\n\n\t/************* Platform.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Platform.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Platform.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Platform.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Platform.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//(typeof(window)!=='undefined'?alert:gs.info)(\"Platform.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Platform.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Platform.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Platform.platform_Modules GETTERS AND SETTERS **********************/\n\tplatform_Modules(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._platform_Modules = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._platform_Modules_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._platform_Modules;\n\t\t}\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = undefined || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\t(this.platform_Modules() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYModule.platform,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Platform._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn new shs_arbfw_Platform()._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Platform._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tcase \"init\": {\n\t\t\t\treturn this.init();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Platform._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromGlideRecord(obj) {\n\t\tif (!obj) return null;\n\t\tif (obj.isValidRecord()) {\n\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Platform\" != 'ecc_queue' && obj.source == \"shs_arbfw_Platform\") {\n\t\t\t\tobj.state = \"processing\";\n\t\t\t\tobj.update();\n\n\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\tresp.queue = 'output';\n\t\t\t\tresp.agent = obj.agent;\n\t\t\t\tresp.topic = obj.topic;\n\t\t\t\tresp.name = obj.name;\n\t\t\t\tresp.source = obj.source;\n\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\tlet ret = new shs_arbfw_Platform()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t});\n\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t}\n\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\tresp.insert();\n\n\t\t\t\tobj.state = \"processed\";\n\t\t\t\tobj.update();\n\t\t\t\treturn resp;\n\t\t\t} else {\n\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tobj.query();\n\t\t\tlet grRet = [];\n\t\t\twhile (obj.next()) grRet.push(this._fromGlideRecord(obj));\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Platform._fromGlideRecord(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\treturn grRet;\n\t\t}\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\tundefined\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_Platform()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\tif (/((([A-Za-z]{3,9}:(?:/ / ) ? )( ? : [-;: &= +$, w] + @) ? [A - Za - z0 - 9. - ] + | ( ? : www. | [-;: &= +$, w] + @)[A - Za - z0 - 9. - ] + )(( ? : /[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)/g.test(obj)) {\n\t\t\tvar msg = new sn_ws.RESTMessageV2();\n\t\t\tmsg.setEndpoint(obj);\n\t\t\tmsg.setRequestHeader('Content-Type', 'application/json');\n\t\t\tmsg.setHttpMethod('get');\n\t\t\treturn this._fromDocument(msg.execute().getBody());\n\t\t}\n\n\t\ttry {\n\t\t\tobj = JSON.parse(obj);\n\t\t} catch (ex) {\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Platform._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\tlet _obj = {\n\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))\n\t\t\t};\n\t\t\t_obj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(this))] = obj;\n\t\t\tobj = _obj;\n\t\t}\n\t\treturn this._fromDocument(obj);\n\t}\n\telse if (typeof(obj) === 'object') {\n\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\treturn this._fromGlideRecord(obj);\n\t\t} else if (obj._fromDocument) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Platform._fromDocument(): \" + \"redundent call\");\n\t\t\treturn obj;\n\t\t} else if (Array.isArray(obj)) {\n\t\t\treturn obj.map(function(o) {\n\t\t\t\treturn new shs_arbfw_Platform()._fromDocument(o)\n\t\t\t});\n\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(obj))));\n\n\t\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Platform._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.platform_Modules) !== 'undefined') this.platform_Modules(new shs_arbfw_Module()._fromDocument(obj.platform_Modules));\n\n\t\t\t} else { // if(obj.constructor.name==\"Platform\"){\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Platform._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t}\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Platform._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\treturn null;\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Platform._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Platform._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Platform._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\treturn this;\n}\n\n_insertAssert() {\n\treturn true;\n}\n\n_updateAssert() {\n\treturn true;\n}\n\n_storeAssert() {\n\treturn true;\n}\n\n_findAssert() {\n\treturn true;\n}\n\n_new(c) {\n\n\tif (!c) c = this.__type;\n\tif (c.indexOf('shs_arbfw_') != 0) c = ({\n\t\tPlatform: \"shs_arbfw_Platform\",\n\t\tUser: \"shs_arbfw_User\",\n\t\tRequirement: \"shs_arbfw_Requirement\",\n\t\tEffort_Estimate: \"shs_arbfw_Effort_Estimate\",\n\t\tEffort: \"shs_arbfw_Effort\",\n\t\tBudget: \"shs_arbfw_Budget\",\n\t\tTask: \"shs_arbfw_Task\",\n\t\tSolution_Design: \"shs_arbfw_Solution_Design\",\n\t\tVersion_History: \"shs_arbfw_Version_History\",\n\t\tSolution_Section: \"shs_arbfw_Solution_Section\",\n\t\tSection_Type: \"shs_arbfw_Section_Type\",\n\t\tSolution_Storage: \"shs_arbfw_Solution_Storage\",\n\t\tSolution_Storage_Mapping: \"shs_arbfw_Solution_Storage_Mapping\",\n\t\tSolution_Appendix: \"shs_arbfw_Solution_Appendix\",\n\t\tAgenda_Item: \"shs_arbfw_Agenda_Item\",\n\t\tMeeting_Agenda: \"shs_arbfw_Meeting_Agenda\",\n\t\tDecision_Option: \"shs_arbfw_Decision_Option\",\n\t\tDecision: \"shs_arbfw_Decision\",\n\t\tMeeting_Minute: \"shs_arbfw_Meeting_Minute\",\n\t\tMeeting_Series: \"shs_arbfw_Meeting_Series\",\n\t\tMeeting: \"shs_arbfw_Meeting\",\n\t\tBoard: \"shs_arbfw_Board\",\n\t\tBoard_Member: \"shs_arbfw_Board_Member\",\n\t\tFrequency: \"shs_arbfw_Frequency\",\n\t\tModule: \"shs_arbfw_Module\",\n\t\tCapability: \"shs_arbfw_Capability\",\n\t\tTeam: \"shs_arbfw_Team\",\n\t\tProject: \"shs_arbfw_Project\",\n\t\tTeam_Member: \"shs_arbfw_Team_Member\",\n\t\tRole: \"shs_arbfw_Role\",\n\t\tApplication: \"shs_arbfw_appd_Application\",\n\t\tRollback_Context: \"shs_arbfw_appd_Rollback_Context\",\n\t\tQueue: \"shs_arbfw_appd_Queue\",\n\t\tScript_File: \"shs_arbfw_appd_Script_File\",\n\t\tScript_Compatibility: \"shs_arbfw_appd_Script_Compatibility\",\n\t\tFix_Script: \"shs_arbfw_appd_Fix_Script\",\n\t\tTable: \"shs_arbfw_appd_Table\",\n\t\tColumn: \"shs_arbfw_appd_Column\",\n\t\tConnection: \"shs_arbfw_appd_Connection\",\n\t\tSubscription_Trigger: \"shs_arbfw_appd_Subscription_Trigger\",\n\t\tSave_Subscription: \"shs_arbfw_appd_Save_Subscription\",\n\t\tFlow: \"shs_arbfw_appd_Flow\",\n\t\tFlow_Input: \"shs_arbfw_appd_Flow_Input\",\n\t\tFlow_Output: \"shs_arbfw_appd_Flow_Output\",\n\t\tFlow_Variable: \"shs_arbfw_appd_Flow_Variable\",\n\t\tField_Label: \"shs_arbfw_appd_Field_Label\",\n\t\tLogic_Definition: \"shs_arbfw_appd_Logic_Definition\",\n\t\tFlow_Logic: \"shs_arbfw_appd_Flow_Logic\",\n\t\tFlow_Instance: \"shs_arbfw_appd_Flow_Instance\",\n\t\tFlow_Instance_Input: \"shs_arbfw_appd_Flow_Instance_Input\",\n\t\tAction_Instance: \"shs_arbfw_appd_Action_Instance\",\n\t\tVariable_Value: \"shs_arbfw_appd_Variable_Value\",\n\t\tFlow_Block: \"shs_arbfw_appd_Flow_Block\",\n\t\tElement_Mapping: \"shs_arbfw_appd_Element_Mapping\",\n\t\tFlow_Input_Script: \"shs_arbfw_appd_Flow_Input_Script\",\n\t\tAction_Type: \"shs_arbfw_appd_Action_Type\",\n\t\tAction_Input: \"shs_arbfw_appd_Action_Input\",\n\t\tAction_Step: \"shs_arbfw_appd_Action_Step\",\n\t\tAction_Step_Input: \"shs_arbfw_appd_Action_Step_Input\",\n\t\tFlow_Plan: \"shs_arbfw_appd_Flow_Plan\",\n\t\tFlow_Setting: \"shs_arbfw_appd_Flow_Setting\",\n\t\tFlow_Snapshot: \"shs_arbfw_appd_Flow_Snapshot\",\n\t\tPill_Compound: \"shs_arbfw_appd_Pill_Compound\",\n\t\tTransform: \"shs_arbfw_appd_Transform\",\n\t\tTransform_Composition: \"shs_arbfw_appd_Transform_Composition\",\n\t\tData_Definition: \"shs_arbfw_appd_Data_Definition\",\n\t\tFlow_Data: \"shs_arbfw_appd_Flow_Data\",\n\t\tFlow_Data_Variable: \"shs_arbfw_appd_Flow_Data_Variable\",\n\t\tSecurity_Control: \"shs_arbfw_appd_Security_Control\",\n\t\tSecurity_Type: \"shs_arbfw_appd_Security_Type\",\n\t\tSecurity_Operation: \"shs_arbfw_appd_Security_Operation\",\n\t})[c];\n\treturn new(gs.getCurrentScopeName() == 'rhino.global' ? global : x_1790593_arboard)[c]();\n\n}\n\n_toDocument(arFields) {\n\n\tlet ret = undefined || {};\n\n\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tret.active = this.active();\n\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tret.enabled = this.enabled();\n\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tret.code = this.code();\n\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tret.order = this.order();\n\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tret.date = this.date();\n\n\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tret.name = this.name();\n\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tret.remark = this.remark();\n\n\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t}\n\n\tif (typeof(this.platform_Modules()) !== 'undefined') ret.platform_Modules = this.platform_Modules().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\treturn !arFields.find(function(_k) {\n\t\t\treturn _k == k;\n\t\t});\n\t}).forEach(function(k) {\n\t\tdelete ret[k];\n\t});\n\n\treturn ret;\n}\n\n_unique(keys, ret) {\n\tret = ret || new shs_arbfw_Platform();\n\n\tundefined\n\n\t// if(this.Id) ret.Id = this.Id;\n\tif (!keys) {\n\n\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t} else {\n\n\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t}\n\n\treturn ret;\n}\n\n_query(gq) {\n\tlet arFields = Object.keys(global.Schema.of('x_1790593_arboard_platform', ['*'])['x_1790593_arboard_platform']);\n\n\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('x_1790593_arboard_platform');\n\n\tundefined\n\n\tlet idf = ((function(r) {\n\t\tlet ret = 'sys_id';\n\t\tif (typeof(r.__idField) === 'function') {\n\t\t\tret = r.__idField();\n\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\tret = r.__idField || this.__idField();\n\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\tret = 'Id';\n\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\tret = 'sys_id';\n\t\t}\n\t\treturn ret;\n\t})(this));\n\tif (idf == 'Id') idf = 'sys_id';\n\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tlet coop = this._active_coop || '=';\n\n\t\tlet v = this.active();\n\n\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Platform._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tlet coop = this._enabled_coop || '=';\n\n\t\tlet v = this.enabled();\n\n\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Platform._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tlet coop = this._code_coop || '=';\n\n\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.code();\n\n\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Platform._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tlet coop = this._order_coop || '=';\n\n\t\tlet v = this.order();\n\n\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Platform._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tlet coop = this._date_coop || '=';\n\n\t\tlet v = this.date();\n\n\t\tif (v) {\n\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t}\n\n\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Platform._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tlet coop = this._name_coop || '=';\n\n\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.name();\n\n\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Platform._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tlet coop = this._remark_coop || '=';\n\n\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.remark();\n\n\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Platform._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Platform._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\treturn this._queryGQ;\n}\n\n_save(obj) {\n\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\treturn new shs_arbfw_Platform()._save(o)\n\t});\n\n\tlet _obj = {};\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Platform._save(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\tObject.keys(obj).filter(function(k) {\n\t\treturn Object.keys(global.Schema.of('x_1790593_arboard_platform', ['*'])['x_1790593_arboard_platform']).filter(function(_k) {\n\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t}).indexOf(k.toLowerCase()) >= 0\n\t}).forEach(function(k) {\n\t\t_obj[k.toLowerCase()] = obj[k]\n\t});\n\n\tObject.keys(_obj).forEach(function(k) {\n\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Platform._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tdelete _obj[k];\n\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Platform._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t}\n\t});\n\n\tlet _this = null;\n\tif (obj.__keys) {\n\t\tlet kObj = {};\n\t\tkObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(_obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))));\n\t\tobj.__keys.forEach(function(k) {\n\t\t\tkObj[k] = _obj[k]\n\t\t});\n\t\t_this = new shs_arbfw_Platform()._fromDocument(kObj);\n\t} else {\n\t\t_this = new shs_arbfw_Platform()._fromDocument(_obj)._unique();\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Platform._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\tdelete _obj.__idField;\n\n\ttry {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Platform._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\tObject.keys(_obj).filter(function(k) {\n\t\t\treturn k.toLowerCase() != k;\n\t\t}).forEach(function(k) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Platform._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tvar lk = k.toLowerCase();\n\t\t\t_obj[lk] = _obj[k];\n\t\t\tdelete _obj[k];\n\t\t});\n\n\t\tlet gq = new global.GlideQuery(obj.__type || 'x_1790593_arboard_platform');\n\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Platform._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\tif (_obj.sys_id) {\n\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t} else {\n\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\tgq = gq.insert(_obj);\n\t\t}\n\t\tlet _fObj = {};\n\t\t_fObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))));\n\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('x_1790593_arboard_platform', ['*'])['x_1790593_arboard_platform']))));\n\t} catch (ex) {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Platform._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Platform._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\treturn this;\n\t}\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Platform._save(): \" + \"obj.platform_Modules: \" + JSON.stringify(obj.platform_Modules, null, 4));\n\tif (Array.isArray(obj.platform_Modules)) this.platform_Modules(obj.platform_Modules.map(function(ta) {\n\t\treturn new shs_arbfw_Module()._save(ta)\n\t}));\n\n\treturn this;\n}\n\n/************* Platform.store() **********************/\nstore(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Platform.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Platform.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Platform.store(): \" + \"executing locally \");\n\n\t\t// store locally\n\t\treturn this._save(this._toDocument());\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Platform.findAll() **********************/\nfindAll(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Platform.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Platform.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Platform.findAll(): \" + \"executing locally \");\n\n\t\t// findAll locally\n\t\tlet gr = new GlideRecord('x_1790593_arboard_platform');\n\t\tgr.addEncodedQuery(this._toEQuery());\n\t\treturn this._fromDocument(gr);\n\n\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('x_1790593_arboard_platform', ['*'])['x_1790593_arboard_platform'])));\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Platform.find() **********************/\nfind(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Platform.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Platform.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Platform.find(): \" + \"executing locally \");\n\n\t\tlet ret = this.findAll();\n\t\treturn ret.length ? ret[0] : null;\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Platform.init() **********************/\ninit(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Platform.init(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Platform.init(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = evJSON;\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Platform.init(): \" + \"executing locally \");\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(str(answer));\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"scriptFile_Script_Compatibilitys":[{"active":true,"enabled":true}],"client_callable":true,"sys_name":"shs_arbfw_User","api_name":"x_1790593_arboard.shs_arbfw_User","name":"shs_arbfw_User","script":"class shs_arbfw_User extends global.AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"\";\n\t\tthis.__type = \"shs_arbfw_User\";\n\t\tthis.__alias = \"shs_arbfw\";\n\t\tthis.__scope = \"shs_arbfw\";\n\t}\n\n\t/************* User.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* User.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* User.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* User.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* User.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//(typeof(window)!=='undefined'?alert:gs.info)(\"User.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* User.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* User.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* User.editor_Version_Historys GETTERS AND SETTERS **********************/\n\teditor_Version_Historys(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._editor_Version_Historys = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._editor_Version_Historys_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._editor_Version_Historys;\n\t\t}\n\t}\n\n\t/************* User.organizer_Meetings GETTERS AND SETTERS **********************/\n\torganizer_Meetings(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._organizer_Meetings = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._organizer_Meetings_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._organizer_Meetings;\n\t\t}\n\t}\n\n\t/************* User.moderator_Meetings GETTERS AND SETTERS **********************/\n\tmoderator_Meetings(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._moderator_Meetings = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._moderator_Meetings_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._moderator_Meetings;\n\t\t}\n\t}\n\n\t/************* User.member_Board_Members GETTERS AND SETTERS **********************/\n\tmember_Board_Members(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._member_Board_Members = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._member_Board_Members_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._member_Board_Members;\n\t\t}\n\t}\n\n\t/************* User.member_Team_Members GETTERS AND SETTERS **********************/\n\tmember_Team_Members(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._member_Team_Members = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._member_Team_Members_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._member_Team_Members;\n\t\t}\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = undefined || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\t(this.editor_Version_Historys() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYVersion_History.editor,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(this.organizer_Meetings() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYMeeting.organizer,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(this.moderator_Meetings() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYMeeting.moderator,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(this.member_Board_Members() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYBoard_Member.member,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(this.member_Team_Members() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYTeam_Member.member,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"User._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn new shs_arbfw_User()._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"User._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"User._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromGlideRecord(obj) {\n\t\tif (!obj) return null;\n\t\tif (obj.isValidRecord()) {\n\t\t\tif (obj.getTableName() == 'ecc_queue' && \"User\" != 'ecc_queue' && obj.source == \"shs_arbfw_User\") {\n\t\t\t\tobj.state = \"processing\";\n\t\t\t\tobj.update();\n\n\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\tresp.queue = 'output';\n\t\t\t\tresp.agent = obj.agent;\n\t\t\t\tresp.topic = obj.topic;\n\t\t\t\tresp.name = obj.name;\n\t\t\t\tresp.source = obj.source;\n\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\tlet ret = new shs_arbfw_User()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t});\n\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t}\n\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\tresp.insert();\n\n\t\t\t\tobj.state = \"processed\";\n\t\t\t\tobj.update();\n\t\t\t\treturn resp;\n\t\t\t} else {\n\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tobj.query();\n\t\t\tlet grRet = [];\n\t\t\twhile (obj.next()) grRet.push(this._fromGlideRecord(obj));\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"User._fromGlideRecord(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\treturn grRet;\n\t\t}\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\tundefined\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_User()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\tif (/((([A-Za-z]{3,9}:(?:/ / ) ? )( ? : [-;: &= +$, w] + @) ? [A - Za - z0 - 9. - ] + | ( ? : www. | [-;: &= +$, w] + @)[A - Za - z0 - 9. - ] + )(( ? : /[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)/g.test(obj)) {\n\t\t\tvar msg = new sn_ws.RESTMessageV2();\n\t\t\tmsg.setEndpoint(obj);\n\t\t\tmsg.setRequestHeader('Content-Type', 'application/json');\n\t\t\tmsg.setHttpMethod('get');\n\t\t\treturn this._fromDocument(msg.execute().getBody());\n\t\t}\n\n\t\ttry {\n\t\t\tobj = JSON.parse(obj);\n\t\t} catch (ex) {\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"User._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\tlet _obj = {\n\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))\n\t\t\t};\n\t\t\t_obj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(this))] = obj;\n\t\t\tobj = _obj;\n\t\t}\n\t\treturn this._fromDocument(obj);\n\t}\n\telse if (typeof(obj) === 'object') {\n\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\treturn this._fromGlideRecord(obj);\n\t\t} else if (obj._fromDocument) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"User._fromDocument(): \" + \"redundent call\");\n\t\t\treturn obj;\n\t\t} else if (Array.isArray(obj)) {\n\t\t\treturn obj.map(function(o) {\n\t\t\t\treturn new shs_arbfw_User()._fromDocument(o)\n\t\t\t});\n\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(obj))));\n\n\t\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"User._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.editor_Version_Historys) !== 'undefined') this.editor_Version_Historys(new shs_arbfw_Version_History()._fromDocument(obj.editor_Version_Historys));\n\n\t\t\t\tif (typeof(obj.organizer_Meetings) !== 'undefined') this.organizer_Meetings(new shs_arbfw_Meeting()._fromDocument(obj.organizer_Meetings));\n\n\t\t\t\tif (typeof(obj.moderator_Meetings) !== 'undefined') this.moderator_Meetings(new shs_arbfw_Meeting()._fromDocument(obj.moderator_Meetings));\n\n\t\t\t\tif (typeof(obj.member_Board_Members) !== 'undefined') this.member_Board_Members(new shs_arbfw_Board_Member()._fromDocument(obj.member_Board_Members));\n\n\t\t\t\tif (typeof(obj.member_Team_Members) !== 'undefined') this.member_Team_Members(new shs_arbfw_Team_Member()._fromDocument(obj.member_Team_Members));\n\n\t\t\t} else { // if(obj.constructor.name==\"User\"){\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"User._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t}\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"User._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\treturn null;\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"User._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"User._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"User._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\treturn this;\n}\n\n_insertAssert() {\n\treturn true;\n}\n\n_updateAssert() {\n\treturn true;\n}\n\n_storeAssert() {\n\treturn true;\n}\n\n_findAssert() {\n\treturn true;\n}\n\n_new(c) {\n\n\treturn new shs_arbfw_Platform._new(c);\n\n}\n\n_toDocument(arFields) {\n\n\tlet ret = undefined || {};\n\n\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tret.active = this.active();\n\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tret.enabled = this.enabled();\n\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tret.code = this.code();\n\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tret.order = this.order();\n\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tret.date = this.date();\n\n\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tret.name = this.name();\n\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tret.remark = this.remark();\n\n\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t}\n\n\tif (typeof(this.editor_Version_Historys()) !== 'undefined') ret.editor_Version_Historys = this.editor_Version_Historys().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (typeof(this.organizer_Meetings()) !== 'undefined') ret.organizer_Meetings = this.organizer_Meetings().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (typeof(this.moderator_Meetings()) !== 'undefined') ret.moderator_Meetings = this.moderator_Meetings().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (typeof(this.member_Board_Members()) !== 'undefined') ret.member_Board_Members = this.member_Board_Members().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (typeof(this.member_Team_Members()) !== 'undefined') ret.member_Team_Members = this.member_Team_Members().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\treturn !arFields.find(function(_k) {\n\t\t\treturn _k == k;\n\t\t});\n\t}).forEach(function(k) {\n\t\tdelete ret[k];\n\t});\n\n\treturn ret;\n}\n\n_unique(keys, ret) {\n\tret = ret || new shs_arbfw_User();\n\n\tundefined\n\n\t// if(this.Id) ret.Id = this.Id;\n\tif (!keys) {\n\n\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t} else {\n\n\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t}\n\n\treturn ret;\n}\n\n_query(gq) {\n\tlet arFields = Object.keys(global.Schema.of('sys_user', ['*'])['sys_user']);\n\n\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('sys_user');\n\n\tundefined\n\n\tlet idf = ((function(r) {\n\t\tlet ret = 'sys_id';\n\t\tif (typeof(r.__idField) === 'function') {\n\t\t\tret = r.__idField();\n\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\tret = r.__idField || this.__idField();\n\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\tret = 'Id';\n\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\tret = 'sys_id';\n\t\t}\n\t\treturn ret;\n\t})(this));\n\tif (idf == 'Id') idf = 'sys_id';\n\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tlet coop = this._active_coop || '=';\n\n\t\tlet v = this.active();\n\n\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"User._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tlet coop = this._enabled_coop || '=';\n\n\t\tlet v = this.enabled();\n\n\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"User._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tlet coop = this._code_coop || '=';\n\n\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.code();\n\n\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"User._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tlet coop = this._order_coop || '=';\n\n\t\tlet v = this.order();\n\n\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"User._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tlet coop = this._date_coop || '=';\n\n\t\tlet v = this.date();\n\n\t\tif (v) {\n\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t}\n\n\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"User._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tlet coop = this._name_coop || '=';\n\n\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.name();\n\n\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"User._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tlet coop = this._remark_coop || '=';\n\n\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.remark();\n\n\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"User._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"User._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\treturn this._queryGQ;\n}\n\n_save(obj) {\n\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\treturn new shs_arbfw_User()._save(o)\n\t});\n\n\tlet _obj = {};\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"User._save(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\tObject.keys(obj).filter(function(k) {\n\t\treturn Object.keys(global.Schema.of('sys_user', ['*'])['sys_user']).filter(function(_k) {\n\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t}).indexOf(k.toLowerCase()) >= 0\n\t}).forEach(function(k) {\n\t\t_obj[k.toLowerCase()] = obj[k]\n\t});\n\n\tObject.keys(_obj).forEach(function(k) {\n\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"User._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tdelete _obj[k];\n\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"User._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t}\n\t});\n\n\tlet _this = null;\n\tif (obj.__keys) {\n\t\tlet kObj = {};\n\t\tkObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(_obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))));\n\t\tobj.__keys.forEach(function(k) {\n\t\t\tkObj[k] = _obj[k]\n\t\t});\n\t\t_this = new shs_arbfw_User()._fromDocument(kObj);\n\t} else {\n\t\t_this = new shs_arbfw_User()._fromDocument(_obj)._unique();\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"User._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\tdelete _obj.__idField;\n\n\ttry {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"User._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\tObject.keys(_obj).filter(function(k) {\n\t\t\treturn k.toLowerCase() != k;\n\t\t}).forEach(function(k) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"User._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tvar lk = k.toLowerCase();\n\t\t\t_obj[lk] = _obj[k];\n\t\t\tdelete _obj[k];\n\t\t});\n\n\t\tlet gq = new global.GlideQuery(obj.__type || 'sys_user');\n\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"User._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\tif (_obj.sys_id) {\n\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t} else {\n\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\tgq = gq.insert(_obj);\n\t\t}\n\t\tlet _fObj = {};\n\t\t_fObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))));\n\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('sys_user', ['*'])['sys_user']))));\n\t} catch (ex) {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"User._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"User._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\treturn this;\n\t}\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"User._save(): \" + \"obj.editor_Version_Historys: \" + JSON.stringify(obj.editor_Version_Historys, null, 4));\n\tif (Array.isArray(obj.editor_Version_Historys)) this.editor_Version_Historys(obj.editor_Version_Historys.map(function(ta) {\n\t\treturn new shs_arbfw_Version_History()._save(ta)\n\t}));\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"User._save(): \" + \"obj.organizer_Meetings: \" + JSON.stringify(obj.organizer_Meetings, null, 4));\n\tif (Array.isArray(obj.organizer_Meetings)) this.organizer_Meetings(obj.organizer_Meetings.map(function(ta) {\n\t\treturn new shs_arbfw_Meeting()._save(ta)\n\t}));\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"User._save(): \" + \"obj.moderator_Meetings: \" + JSON.stringify(obj.moderator_Meetings, null, 4));\n\tif (Array.isArray(obj.moderator_Meetings)) this.moderator_Meetings(obj.moderator_Meetings.map(function(ta) {\n\t\treturn new shs_arbfw_Meeting()._save(ta)\n\t}));\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"User._save(): \" + \"obj.member_Board_Members: \" + JSON.stringify(obj.member_Board_Members, null, 4));\n\tif (Array.isArray(obj.member_Board_Members)) this.member_Board_Members(obj.member_Board_Members.map(function(ta) {\n\t\treturn new shs_arbfw_Board_Member()._save(ta)\n\t}));\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"User._save(): \" + \"obj.member_Team_Members: \" + JSON.stringify(obj.member_Team_Members, null, 4));\n\tif (Array.isArray(obj.member_Team_Members)) this.member_Team_Members(obj.member_Team_Members.map(function(ta) {\n\t\treturn new shs_arbfw_Team_Member()._save(ta)\n\t}));\n\n\treturn this;\n}\n\n/************* User.store() **********************/\nstore(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"User.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"User.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"User.store(): \" + \"executing locally \");\n\n\t\t// store locally\n\t\treturn this._save(this._toDocument());\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* User.findAll() **********************/\nfindAll(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"User.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"User.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"User.findAll(): \" + \"executing locally \");\n\n\t\t// findAll locally\n\t\tlet gr = new GlideRecord('sys_user');\n\t\tgr.addEncodedQuery(this._toEQuery());\n\t\treturn this._fromDocument(gr);\n\n\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('sys_user', ['*'])['sys_user'])));\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* User.find() **********************/\nfind(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"User.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"User.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"User.find(): \" + \"executing locally \");\n\n\t\tlet ret = this.findAll();\n\t\treturn ret.length ? ret[0] : null;\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"scriptFile_Script_Compatibilitys":[{"active":true,"enabled":true}],"client_callable":true,"sys_name":"shs_arbfw_Effort","api_name":"x_1790593_arboard.shs_arbfw_Effort","name":"shs_arbfw_Effort","script":"class shs_arbfw_Effort extends global.AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"\";\n\t\tthis.__type = \"shs_arbfw_Effort\";\n\t\tthis.__alias = \"shs_arbfw\";\n\t\tthis.__scope = \"shs_arbfw\";\n\t}\n\n\t/************* Effort.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Effort.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Effort.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Effort.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Effort.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//(typeof(window)!=='undefined'?alert:gs.info)(\"Effort.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Effort.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Effort.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Effort.effort_Effort_Estimates GETTERS AND SETTERS **********************/\n\teffort_Effort_Estimates(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._effort_Effort_Estimates = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._effort_Effort_Estimates_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._effort_Effort_Estimates;\n\t\t}\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = undefined || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\t(this.effort_Effort_Estimates() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYEffort_Estimate.effort,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Effort._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn new shs_arbfw_Effort()._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Effort._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Effort._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromGlideRecord(obj) {\n\t\tif (!obj) return null;\n\t\tif (obj.isValidRecord()) {\n\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Effort\" != 'ecc_queue' && obj.source == \"shs_arbfw_Effort\") {\n\t\t\t\tobj.state = \"processing\";\n\t\t\t\tobj.update();\n\n\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\tresp.queue = 'output';\n\t\t\t\tresp.agent = obj.agent;\n\t\t\t\tresp.topic = obj.topic;\n\t\t\t\tresp.name = obj.name;\n\t\t\t\tresp.source = obj.source;\n\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\tlet ret = new shs_arbfw_Effort()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t});\n\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t}\n\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\tresp.insert();\n\n\t\t\t\tobj.state = \"processed\";\n\t\t\t\tobj.update();\n\t\t\t\treturn resp;\n\t\t\t} else {\n\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tobj.query();\n\t\t\tlet grRet = [];\n\t\t\twhile (obj.next()) grRet.push(this._fromGlideRecord(obj));\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Effort._fromGlideRecord(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\treturn grRet;\n\t\t}\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\tundefined\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_Effort()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\tif (/((([A-Za-z]{3,9}:(?:/ / ) ? )( ? : [-;: &= +$, w] + @) ? [A - Za - z0 - 9. - ] + | ( ? : www. | [-;: &= +$, w] + @)[A - Za - z0 - 9. - ] + )(( ? : /[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)/g.test(obj)) {\n\t\t\tvar msg = new sn_ws.RESTMessageV2();\n\t\t\tmsg.setEndpoint(obj);\n\t\t\tmsg.setRequestHeader('Content-Type', 'application/json');\n\t\t\tmsg.setHttpMethod('get');\n\t\t\treturn this._fromDocument(msg.execute().getBody());\n\t\t}\n\n\t\ttry {\n\t\t\tobj = JSON.parse(obj);\n\t\t} catch (ex) {\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Effort._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\tlet _obj = {\n\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))\n\t\t\t};\n\t\t\t_obj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(this))] = obj;\n\t\t\tobj = _obj;\n\t\t}\n\t\treturn this._fromDocument(obj);\n\t}\n\telse if (typeof(obj) === 'object') {\n\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\treturn this._fromGlideRecord(obj);\n\t\t} else if (obj._fromDocument) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Effort._fromDocument(): \" + \"redundent call\");\n\t\t\treturn obj;\n\t\t} else if (Array.isArray(obj)) {\n\t\t\treturn obj.map(function(o) {\n\t\t\t\treturn new shs_arbfw_Effort()._fromDocument(o)\n\t\t\t});\n\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(obj))));\n\n\t\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Effort._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.effort_Effort_Estimates) !== 'undefined') this.effort_Effort_Estimates(new shs_arbfw_Effort_Estimate()._fromDocument(obj.effort_Effort_Estimates));\n\n\t\t\t} else { // if(obj.constructor.name==\"Effort\"){\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Effort._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t}\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Effort._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\treturn null;\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Effort._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Effort._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Effort._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\treturn this;\n}\n\n_insertAssert() {\n\treturn true;\n}\n\n_updateAssert() {\n\treturn true;\n}\n\n_storeAssert() {\n\treturn true;\n}\n\n_findAssert() {\n\treturn true;\n}\n\n_new(c) {\n\n\treturn new shs_arbfw_Platform._new(c);\n\n}\n\n_toDocument(arFields) {\n\n\tlet ret = undefined || {};\n\n\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tret.active = this.active();\n\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tret.enabled = this.enabled();\n\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tret.code = this.code();\n\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tret.order = this.order();\n\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tret.date = this.date();\n\n\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tret.name = this.name();\n\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tret.remark = this.remark();\n\n\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t}\n\n\tif (typeof(this.effort_Effort_Estimates()) !== 'undefined') ret.effort_Effort_Estimates = this.effort_Effort_Estimates().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\treturn !arFields.find(function(_k) {\n\t\t\treturn _k == k;\n\t\t});\n\t}).forEach(function(k) {\n\t\tdelete ret[k];\n\t});\n\n\treturn ret;\n}\n\n_unique(keys, ret) {\n\tret = ret || new shs_arbfw_Effort();\n\n\tundefined\n\n\t// if(this.Id) ret.Id = this.Id;\n\tif (!keys) {\n\n\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t} else {\n\n\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t}\n\n\treturn ret;\n}\n\n_query(gq) {\n\tlet arFields = Object.keys(global.Schema.of('x_1790593_arboard_effort', ['*'])['x_1790593_arboard_effort']);\n\n\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('x_1790593_arboard_effort');\n\n\tundefined\n\n\tlet idf = ((function(r) {\n\t\tlet ret = 'sys_id';\n\t\tif (typeof(r.__idField) === 'function') {\n\t\t\tret = r.__idField();\n\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\tret = r.__idField || this.__idField();\n\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\tret = 'Id';\n\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\tret = 'sys_id';\n\t\t}\n\t\treturn ret;\n\t})(this));\n\tif (idf == 'Id') idf = 'sys_id';\n\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tlet coop = this._active_coop || '=';\n\n\t\tlet v = this.active();\n\n\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Effort._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tlet coop = this._enabled_coop || '=';\n\n\t\tlet v = this.enabled();\n\n\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Effort._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tlet coop = this._code_coop || '=';\n\n\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.code();\n\n\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Effort._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tlet coop = this._order_coop || '=';\n\n\t\tlet v = this.order();\n\n\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Effort._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tlet coop = this._date_coop || '=';\n\n\t\tlet v = this.date();\n\n\t\tif (v) {\n\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t}\n\n\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Effort._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tlet coop = this._name_coop || '=';\n\n\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.name();\n\n\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Effort._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tlet coop = this._remark_coop || '=';\n\n\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.remark();\n\n\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Effort._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Effort._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\treturn this._queryGQ;\n}\n\n_save(obj) {\n\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\treturn new shs_arbfw_Effort()._save(o)\n\t});\n\n\tlet _obj = {};\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Effort._save(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\tObject.keys(obj).filter(function(k) {\n\t\treturn Object.keys(global.Schema.of('x_1790593_arboard_effort', ['*'])['x_1790593_arboard_effort']).filter(function(_k) {\n\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t}).indexOf(k.toLowerCase()) >= 0\n\t}).forEach(function(k) {\n\t\t_obj[k.toLowerCase()] = obj[k]\n\t});\n\n\tObject.keys(_obj).forEach(function(k) {\n\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Effort._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tdelete _obj[k];\n\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Effort._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t}\n\t});\n\n\tlet _this = null;\n\tif (obj.__keys) {\n\t\tlet kObj = {};\n\t\tkObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(_obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))));\n\t\tobj.__keys.forEach(function(k) {\n\t\t\tkObj[k] = _obj[k]\n\t\t});\n\t\t_this = new shs_arbfw_Effort()._fromDocument(kObj);\n\t} else {\n\t\t_this = new shs_arbfw_Effort()._fromDocument(_obj)._unique();\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Effort._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\tdelete _obj.__idField;\n\n\ttry {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Effort._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\tObject.keys(_obj).filter(function(k) {\n\t\t\treturn k.toLowerCase() != k;\n\t\t}).forEach(function(k) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Effort._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tvar lk = k.toLowerCase();\n\t\t\t_obj[lk] = _obj[k];\n\t\t\tdelete _obj[k];\n\t\t});\n\n\t\tlet gq = new global.GlideQuery(obj.__type || 'x_1790593_arboard_effort');\n\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Effort._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\tif (_obj.sys_id) {\n\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t} else {\n\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\tgq = gq.insert(_obj);\n\t\t}\n\t\tlet _fObj = {};\n\t\t_fObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))));\n\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('x_1790593_arboard_effort', ['*'])['x_1790593_arboard_effort']))));\n\t} catch (ex) {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Effort._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Effort._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\treturn this;\n\t}\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Effort._save(): \" + \"obj.effort_Effort_Estimates: \" + JSON.stringify(obj.effort_Effort_Estimates, null, 4));\n\tif (Array.isArray(obj.effort_Effort_Estimates)) this.effort_Effort_Estimates(obj.effort_Effort_Estimates.map(function(ta) {\n\t\treturn new shs_arbfw_Effort_Estimate()._save(ta)\n\t}));\n\n\treturn this;\n}\n\n/************* Effort.store() **********************/\nstore(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Effort.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Effort.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Effort.store(): \" + \"executing locally \");\n\n\t\t// store locally\n\t\treturn this._save(this._toDocument());\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Effort.findAll() **********************/\nfindAll(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Effort.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Effort.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Effort.findAll(): \" + \"executing locally \");\n\n\t\t// findAll locally\n\t\tlet gr = new GlideRecord('x_1790593_arboard_effort');\n\t\tgr.addEncodedQuery(this._toEQuery());\n\t\treturn this._fromDocument(gr);\n\n\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('x_1790593_arboard_effort', ['*'])['x_1790593_arboard_effort'])));\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Effort.find() **********************/\nfind(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Effort.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Effort.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Effort.find(): \" + \"executing locally \");\n\n\t\tlet ret = this.findAll();\n\t\treturn ret.length ? ret[0] : null;\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"scriptFile_Script_Compatibilitys":[{"active":true,"enabled":true}],"client_callable":true,"sys_name":"shs_arbfw_Budget","api_name":"x_1790593_arboard.shs_arbfw_Budget","name":"shs_arbfw_Budget","script":"class shs_arbfw_Budget extends global.AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"\";\n\t\tthis.__type = \"shs_arbfw_Budget\";\n\t\tthis.__alias = \"shs_arbfw\";\n\t\tthis.__scope = \"shs_arbfw\";\n\t}\n\n\t/************* Budget.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Budget.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Budget.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Budget.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Budget.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//(typeof(window)!=='undefined'?alert:gs.info)(\"Budget.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Budget.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Budget.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Budget.budget_Projects GETTERS AND SETTERS **********************/\n\tbudget_Projects(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._budget_Projects = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._budget_Projects_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._budget_Projects;\n\t\t}\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = undefined || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\t(this.budget_Projects() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYProject.budget,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Budget._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn new shs_arbfw_Budget()._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Budget._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Budget._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromGlideRecord(obj) {\n\t\tif (!obj) return null;\n\t\tif (obj.isValidRecord()) {\n\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Budget\" != 'ecc_queue' && obj.source == \"shs_arbfw_Budget\") {\n\t\t\t\tobj.state = \"processing\";\n\t\t\t\tobj.update();\n\n\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\tresp.queue = 'output';\n\t\t\t\tresp.agent = obj.agent;\n\t\t\t\tresp.topic = obj.topic;\n\t\t\t\tresp.name = obj.name;\n\t\t\t\tresp.source = obj.source;\n\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\tlet ret = new shs_arbfw_Budget()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t});\n\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t}\n\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\tresp.insert();\n\n\t\t\t\tobj.state = \"processed\";\n\t\t\t\tobj.update();\n\t\t\t\treturn resp;\n\t\t\t} else {\n\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tobj.query();\n\t\t\tlet grRet = [];\n\t\t\twhile (obj.next()) grRet.push(this._fromGlideRecord(obj));\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Budget._fromGlideRecord(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\treturn grRet;\n\t\t}\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\tundefined\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_Budget()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\tif (/((([A-Za-z]{3,9}:(?:/ / ) ? )( ? : [-;: &= +$, w] + @) ? [A - Za - z0 - 9. - ] + | ( ? : www. | [-;: &= +$, w] + @)[A - Za - z0 - 9. - ] + )(( ? : /[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)/g.test(obj)) {\n\t\t\tvar msg = new sn_ws.RESTMessageV2();\n\t\t\tmsg.setEndpoint(obj);\n\t\t\tmsg.setRequestHeader('Content-Type', 'application/json');\n\t\t\tmsg.setHttpMethod('get');\n\t\t\treturn this._fromDocument(msg.execute().getBody());\n\t\t}\n\n\t\ttry {\n\t\t\tobj = JSON.parse(obj);\n\t\t} catch (ex) {\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Budget._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\tlet _obj = {\n\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))\n\t\t\t};\n\t\t\t_obj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(this))] = obj;\n\t\t\tobj = _obj;\n\t\t}\n\t\treturn this._fromDocument(obj);\n\t}\n\telse if (typeof(obj) === 'object') {\n\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\treturn this._fromGlideRecord(obj);\n\t\t} else if (obj._fromDocument) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Budget._fromDocument(): \" + \"redundent call\");\n\t\t\treturn obj;\n\t\t} else if (Array.isArray(obj)) {\n\t\t\treturn obj.map(function(o) {\n\t\t\t\treturn new shs_arbfw_Budget()._fromDocument(o)\n\t\t\t});\n\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(obj))));\n\n\t\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Budget._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.budget_Projects) !== 'undefined') this.budget_Projects(new shs_arbfw_Project()._fromDocument(obj.budget_Projects));\n\n\t\t\t} else { // if(obj.constructor.name==\"Budget\"){\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Budget._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t}\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Budget._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\treturn null;\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Budget._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Budget._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Budget._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\treturn this;\n}\n\n_insertAssert() {\n\treturn true;\n}\n\n_updateAssert() {\n\treturn true;\n}\n\n_storeAssert() {\n\treturn true;\n}\n\n_findAssert() {\n\treturn true;\n}\n\n_new(c) {\n\n\treturn new shs_arbfw_Platform._new(c);\n\n}\n\n_toDocument(arFields) {\n\n\tlet ret = undefined || {};\n\n\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tret.active = this.active();\n\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tret.enabled = this.enabled();\n\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tret.code = this.code();\n\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tret.order = this.order();\n\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tret.date = this.date();\n\n\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tret.name = this.name();\n\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tret.remark = this.remark();\n\n\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t}\n\n\tif (typeof(this.budget_Projects()) !== 'undefined') ret.budget_Projects = this.budget_Projects().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\treturn !arFields.find(function(_k) {\n\t\t\treturn _k == k;\n\t\t});\n\t}).forEach(function(k) {\n\t\tdelete ret[k];\n\t});\n\n\treturn ret;\n}\n\n_unique(keys, ret) {\n\tret = ret || new shs_arbfw_Budget();\n\n\tundefined\n\n\t// if(this.Id) ret.Id = this.Id;\n\tif (!keys) {\n\n\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t} else {\n\n\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t}\n\n\treturn ret;\n}\n\n_query(gq) {\n\tlet arFields = Object.keys(global.Schema.of('x_1790593_arboard_budget', ['*'])['x_1790593_arboard_budget']);\n\n\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('x_1790593_arboard_budget');\n\n\tundefined\n\n\tlet idf = ((function(r) {\n\t\tlet ret = 'sys_id';\n\t\tif (typeof(r.__idField) === 'function') {\n\t\t\tret = r.__idField();\n\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\tret = r.__idField || this.__idField();\n\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\tret = 'Id';\n\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\tret = 'sys_id';\n\t\t}\n\t\treturn ret;\n\t})(this));\n\tif (idf == 'Id') idf = 'sys_id';\n\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tlet coop = this._active_coop || '=';\n\n\t\tlet v = this.active();\n\n\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Budget._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tlet coop = this._enabled_coop || '=';\n\n\t\tlet v = this.enabled();\n\n\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Budget._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tlet coop = this._code_coop || '=';\n\n\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.code();\n\n\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Budget._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tlet coop = this._order_coop || '=';\n\n\t\tlet v = this.order();\n\n\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Budget._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tlet coop = this._date_coop || '=';\n\n\t\tlet v = this.date();\n\n\t\tif (v) {\n\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t}\n\n\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Budget._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tlet coop = this._name_coop || '=';\n\n\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.name();\n\n\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Budget._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tlet coop = this._remark_coop || '=';\n\n\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.remark();\n\n\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Budget._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Budget._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\treturn this._queryGQ;\n}\n\n_save(obj) {\n\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\treturn new shs_arbfw_Budget()._save(o)\n\t});\n\n\tlet _obj = {};\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Budget._save(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\tObject.keys(obj).filter(function(k) {\n\t\treturn Object.keys(global.Schema.of('x_1790593_arboard_budget', ['*'])['x_1790593_arboard_budget']).filter(function(_k) {\n\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t}).indexOf(k.toLowerCase()) >= 0\n\t}).forEach(function(k) {\n\t\t_obj[k.toLowerCase()] = obj[k]\n\t});\n\n\tObject.keys(_obj).forEach(function(k) {\n\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Budget._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tdelete _obj[k];\n\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Budget._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t}\n\t});\n\n\tlet _this = null;\n\tif (obj.__keys) {\n\t\tlet kObj = {};\n\t\tkObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(_obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))));\n\t\tobj.__keys.forEach(function(k) {\n\t\t\tkObj[k] = _obj[k]\n\t\t});\n\t\t_this = new shs_arbfw_Budget()._fromDocument(kObj);\n\t} else {\n\t\t_this = new shs_arbfw_Budget()._fromDocument(_obj)._unique();\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Budget._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\tdelete _obj.__idField;\n\n\ttry {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Budget._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\tObject.keys(_obj).filter(function(k) {\n\t\t\treturn k.toLowerCase() != k;\n\t\t}).forEach(function(k) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Budget._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tvar lk = k.toLowerCase();\n\t\t\t_obj[lk] = _obj[k];\n\t\t\tdelete _obj[k];\n\t\t});\n\n\t\tlet gq = new global.GlideQuery(obj.__type || 'x_1790593_arboard_budget');\n\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Budget._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\tif (_obj.sys_id) {\n\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t} else {\n\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\tgq = gq.insert(_obj);\n\t\t}\n\t\tlet _fObj = {};\n\t\t_fObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))));\n\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('x_1790593_arboard_budget', ['*'])['x_1790593_arboard_budget']))));\n\t} catch (ex) {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Budget._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Budget._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\treturn this;\n\t}\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Budget._save(): \" + \"obj.budget_Projects: \" + JSON.stringify(obj.budget_Projects, null, 4));\n\tif (Array.isArray(obj.budget_Projects)) this.budget_Projects(obj.budget_Projects.map(function(ta) {\n\t\treturn new shs_arbfw_Project()._save(ta)\n\t}));\n\n\treturn this;\n}\n\n/************* Budget.store() **********************/\nstore(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Budget.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Budget.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Budget.store(): \" + \"executing locally \");\n\n\t\t// store locally\n\t\treturn this._save(this._toDocument());\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Budget.findAll() **********************/\nfindAll(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Budget.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Budget.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Budget.findAll(): \" + \"executing locally \");\n\n\t\t// findAll locally\n\t\tlet gr = new GlideRecord('x_1790593_arboard_budget');\n\t\tgr.addEncodedQuery(this._toEQuery());\n\t\treturn this._fromDocument(gr);\n\n\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('x_1790593_arboard_budget', ['*'])['x_1790593_arboard_budget'])));\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Budget.find() **********************/\nfind(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Budget.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Budget.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Budget.find(): \" + \"executing locally \");\n\n\t\tlet ret = this.findAll();\n\t\treturn ret.length ? ret[0] : null;\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"scriptFile_Script_Compatibilitys":[{"active":true,"enabled":true}],"client_callable":true,"sys_name":"shs_arbfw_Task","api_name":"x_1790593_arboard.shs_arbfw_Task","name":"shs_arbfw_Task","script":"class shs_arbfw_Task extends global.AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"\";\n\t\tthis.__type = \"shs_arbfw_Task\";\n\t\tthis.__alias = \"shs_arbfw\";\n\t\tthis.__scope = \"shs_arbfw\";\n\t}\n\n\t/************* Task.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Task.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Task.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Task.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Task.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//(typeof(window)!=='undefined'?alert:gs.info)(\"Task.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Task.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Task.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = undefined || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Task._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn new shs_arbfw_Task()._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Task._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Task._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromGlideRecord(obj) {\n\t\tif (!obj) return null;\n\t\tif (obj.isValidRecord()) {\n\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Task\" != 'ecc_queue' && obj.source == \"shs_arbfw_Task\") {\n\t\t\t\tobj.state = \"processing\";\n\t\t\t\tobj.update();\n\n\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\tresp.queue = 'output';\n\t\t\t\tresp.agent = obj.agent;\n\t\t\t\tresp.topic = obj.topic;\n\t\t\t\tresp.name = obj.name;\n\t\t\t\tresp.source = obj.source;\n\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\tlet ret = new shs_arbfw_Task()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t});\n\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t}\n\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\tresp.insert();\n\n\t\t\t\tobj.state = \"processed\";\n\t\t\t\tobj.update();\n\t\t\t\treturn resp;\n\t\t\t} else {\n\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tobj.query();\n\t\t\tlet grRet = [];\n\t\t\twhile (obj.next()) grRet.push(this._fromGlideRecord(obj));\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Task._fromGlideRecord(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\treturn grRet;\n\t\t}\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\tundefined\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_Task()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\tif (/((([A-Za-z]{3,9}:(?:/ / ) ? )( ? : [-;: &= +$, w] + @) ? [A - Za - z0 - 9. - ] + | ( ? : www. | [-;: &= +$, w] + @)[A - Za - z0 - 9. - ] + )(( ? : /[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)/g.test(obj)) {\n\t\t\tvar msg = new sn_ws.RESTMessageV2();\n\t\t\tmsg.setEndpoint(obj);\n\t\t\tmsg.setRequestHeader('Content-Type', 'application/json');\n\t\t\tmsg.setHttpMethod('get');\n\t\t\treturn this._fromDocument(msg.execute().getBody());\n\t\t}\n\n\t\ttry {\n\t\t\tobj = JSON.parse(obj);\n\t\t} catch (ex) {\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Task._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\tlet _obj = {\n\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))\n\t\t\t};\n\t\t\t_obj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(this))] = obj;\n\t\t\tobj = _obj;\n\t\t}\n\t\treturn this._fromDocument(obj);\n\t}\n\telse if (typeof(obj) === 'object') {\n\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\treturn this._fromGlideRecord(obj);\n\t\t} else if (obj._fromDocument) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Task._fromDocument(): \" + \"redundent call\");\n\t\t\treturn obj;\n\t\t} else if (Array.isArray(obj)) {\n\t\t\treturn obj.map(function(o) {\n\t\t\t\treturn new shs_arbfw_Task()._fromDocument(o)\n\t\t\t});\n\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(obj))));\n\n\t\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Task._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t}\n\n\t\t\t} else { // if(obj.constructor.name==\"Task\"){\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Task._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t}\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Task._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\treturn null;\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Task._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Task._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Task._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\treturn this;\n}\n\n_insertAssert() {\n\treturn true;\n}\n\n_updateAssert() {\n\treturn true;\n}\n\n_storeAssert() {\n\treturn true;\n}\n\n_findAssert() {\n\treturn true;\n}\n\n_new(c) {\n\n\treturn new shs_arbfw_Platform._new(c);\n\n}\n\n_toDocument(arFields) {\n\n\tlet ret = undefined || {};\n\n\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tret.active = this.active();\n\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tret.enabled = this.enabled();\n\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tret.code = this.code();\n\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tret.order = this.order();\n\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tret.date = this.date();\n\n\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tret.name = this.name();\n\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tret.remark = this.remark();\n\n\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t}\n\n\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\treturn !arFields.find(function(_k) {\n\t\t\treturn _k == k;\n\t\t});\n\t}).forEach(function(k) {\n\t\tdelete ret[k];\n\t});\n\n\treturn ret;\n}\n\n_unique(keys, ret) {\n\tret = ret || new shs_arbfw_Task();\n\n\tundefined\n\n\t// if(this.Id) ret.Id = this.Id;\n\tif (!keys) {\n\n\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t} else {\n\n\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t}\n\n\treturn ret;\n}\n\n_query(gq) {\n\tlet arFields = Object.keys(global.Schema.of('task', ['*'])['task']);\n\n\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('task');\n\n\tundefined\n\n\tlet idf = ((function(r) {\n\t\tlet ret = 'sys_id';\n\t\tif (typeof(r.__idField) === 'function') {\n\t\t\tret = r.__idField();\n\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\tret = r.__idField || this.__idField();\n\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\tret = 'Id';\n\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\tret = 'sys_id';\n\t\t}\n\t\treturn ret;\n\t})(this));\n\tif (idf == 'Id') idf = 'sys_id';\n\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tlet coop = this._active_coop || '=';\n\n\t\tlet v = this.active();\n\n\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Task._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tlet coop = this._enabled_coop || '=';\n\n\t\tlet v = this.enabled();\n\n\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Task._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tlet coop = this._code_coop || '=';\n\n\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.code();\n\n\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Task._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tlet coop = this._order_coop || '=';\n\n\t\tlet v = this.order();\n\n\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Task._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tlet coop = this._date_coop || '=';\n\n\t\tlet v = this.date();\n\n\t\tif (v) {\n\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t}\n\n\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Task._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tlet coop = this._name_coop || '=';\n\n\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.name();\n\n\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Task._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tlet coop = this._remark_coop || '=';\n\n\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.remark();\n\n\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Task._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Task._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\treturn this._queryGQ;\n}\n\n_save(obj) {\n\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\treturn new shs_arbfw_Task()._save(o)\n\t});\n\n\tlet _obj = {};\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Task._save(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\tObject.keys(obj).filter(function(k) {\n\t\treturn Object.keys(global.Schema.of('task', ['*'])['task']).filter(function(_k) {\n\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t}).indexOf(k.toLowerCase()) >= 0\n\t}).forEach(function(k) {\n\t\t_obj[k.toLowerCase()] = obj[k]\n\t});\n\n\tObject.keys(_obj).forEach(function(k) {\n\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Task._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tdelete _obj[k];\n\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Task._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t}\n\t});\n\n\tlet _this = null;\n\tif (obj.__keys) {\n\t\tlet kObj = {};\n\t\tkObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(_obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))));\n\t\tobj.__keys.forEach(function(k) {\n\t\t\tkObj[k] = _obj[k]\n\t\t});\n\t\t_this = new shs_arbfw_Task()._fromDocument(kObj);\n\t} else {\n\t\t_this = new shs_arbfw_Task()._fromDocument(_obj)._unique();\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Task._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\tdelete _obj.__idField;\n\n\ttry {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Task._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\tObject.keys(_obj).filter(function(k) {\n\t\t\treturn k.toLowerCase() != k;\n\t\t}).forEach(function(k) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Task._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tvar lk = k.toLowerCase();\n\t\t\t_obj[lk] = _obj[k];\n\t\t\tdelete _obj[k];\n\t\t});\n\n\t\tlet gq = new global.GlideQuery(obj.__type || 'task');\n\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Task._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\tif (_obj.sys_id) {\n\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t} else {\n\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\tgq = gq.insert(_obj);\n\t\t}\n\t\tlet _fObj = {};\n\t\t_fObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))));\n\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('task', ['*'])['task']))));\n\t} catch (ex) {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Task._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Task._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\treturn this;\n\t}\n\n\treturn this;\n}\n\n/************* Task.store() **********************/\nstore(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Task.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Task.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Task.store(): \" + \"executing locally \");\n\n\t\t// store locally\n\t\treturn this._save(this._toDocument());\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Task.findAll() **********************/\nfindAll(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Task.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Task.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Task.findAll(): \" + \"executing locally \");\n\n\t\t// findAll locally\n\t\tlet gr = new GlideRecord('task');\n\t\tgr.addEncodedQuery(this._toEQuery());\n\t\treturn this._fromDocument(gr);\n\n\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('task', ['*'])['task'])));\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Task.find() **********************/\nfind(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Task.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Task.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Task.find(): \" + \"executing locally \");\n\n\t\tlet ret = this.findAll();\n\t\treturn ret.length ? ret[0] : null;\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"scriptFile_Script_Compatibilitys":[{"active":true,"enabled":true}],"client_callable":true,"sys_name":"shs_arbfw_Section_Type","api_name":"x_1790593_arboard.shs_arbfw_Section_Type","name":"shs_arbfw_Section_Type","script":"class shs_arbfw_Section_Type extends global.AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"\";\n\t\tthis.__type = \"shs_arbfw_Section_Type\";\n\t\tthis.__alias = \"shs_arbfw\";\n\t\tthis.__scope = \"shs_arbfw\";\n\t}\n\n\t/************* Section_Type.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Section_Type.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Section_Type.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Section_Type.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Section_Type.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//(typeof(window)!=='undefined'?alert:gs.info)(\"Section_Type.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Section_Type.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Section_Type.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Section_Type.type_Solution_Sections GETTERS AND SETTERS **********************/\n\ttype_Solution_Sections(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._type_Solution_Sections = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._type_Solution_Sections_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._type_Solution_Sections;\n\t\t}\n\t}\n\n\t/************* Section_Type.type_Solution_Storage_Mappings GETTERS AND SETTERS **********************/\n\ttype_Solution_Storage_Mappings(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._type_Solution_Storage_Mappings = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._type_Solution_Storage_Mappings_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._type_Solution_Storage_Mappings;\n\t\t}\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = undefined || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\t(this.type_Solution_Sections() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYSolution_Section.type,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(this.type_Solution_Storage_Mappings() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYSolution_Storage_Mapping.type,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Section_Type._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn new shs_arbfw_Section_Type()._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Section_Type._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Section_Type._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromGlideRecord(obj) {\n\t\tif (!obj) return null;\n\t\tif (obj.isValidRecord()) {\n\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Section_Type\" != 'ecc_queue' && obj.source == \"shs_arbfw_Section_Type\") {\n\t\t\t\tobj.state = \"processing\";\n\t\t\t\tobj.update();\n\n\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\tresp.queue = 'output';\n\t\t\t\tresp.agent = obj.agent;\n\t\t\t\tresp.topic = obj.topic;\n\t\t\t\tresp.name = obj.name;\n\t\t\t\tresp.source = obj.source;\n\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\tlet ret = new shs_arbfw_Section_Type()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t});\n\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t}\n\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\tresp.insert();\n\n\t\t\t\tobj.state = \"processed\";\n\t\t\t\tobj.update();\n\t\t\t\treturn resp;\n\t\t\t} else {\n\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tobj.query();\n\t\t\tlet grRet = [];\n\t\t\twhile (obj.next()) grRet.push(this._fromGlideRecord(obj));\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Section_Type._fromGlideRecord(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\treturn grRet;\n\t\t}\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\tundefined\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_Section_Type()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\tif (/((([A-Za-z]{3,9}:(?:/ / ) ? )( ? : [-;: &= +$, w] + @) ? [A - Za - z0 - 9. - ] + | ( ? : www. | [-;: &= +$, w] + @)[A - Za - z0 - 9. - ] + )(( ? : /[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)/g.test(obj)) {\n\t\t\tvar msg = new sn_ws.RESTMessageV2();\n\t\t\tmsg.setEndpoint(obj);\n\t\t\tmsg.setRequestHeader('Content-Type', 'application/json');\n\t\t\tmsg.setHttpMethod('get');\n\t\t\treturn this._fromDocument(msg.execute().getBody());\n\t\t}\n\n\t\ttry {\n\t\t\tobj = JSON.parse(obj);\n\t\t} catch (ex) {\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Section_Type._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\tlet _obj = {\n\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))\n\t\t\t};\n\t\t\t_obj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(this))] = obj;\n\t\t\tobj = _obj;\n\t\t}\n\t\treturn this._fromDocument(obj);\n\t}\n\telse if (typeof(obj) === 'object') {\n\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\treturn this._fromGlideRecord(obj);\n\t\t} else if (obj._fromDocument) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Section_Type._fromDocument(): \" + \"redundent call\");\n\t\t\treturn obj;\n\t\t} else if (Array.isArray(obj)) {\n\t\t\treturn obj.map(function(o) {\n\t\t\t\treturn new shs_arbfw_Section_Type()._fromDocument(o)\n\t\t\t});\n\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(obj))));\n\n\t\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Section_Type._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.type_Solution_Sections) !== 'undefined') this.type_Solution_Sections(new shs_arbfw_Solution_Section()._fromDocument(obj.type_Solution_Sections));\n\n\t\t\t\tif (typeof(obj.type_Solution_Storage_Mappings) !== 'undefined') this.type_Solution_Storage_Mappings(new shs_arbfw_Solution_Storage_Mapping()._fromDocument(obj.type_Solution_Storage_Mappings));\n\n\t\t\t} else { // if(obj.constructor.name==\"Section_Type\"){\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Section_Type._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t}\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Section_Type._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\treturn null;\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Section_Type._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Section_Type._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Section_Type._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\treturn this;\n}\n\n_insertAssert() {\n\treturn true;\n}\n\n_updateAssert() {\n\treturn true;\n}\n\n_storeAssert() {\n\treturn true;\n}\n\n_findAssert() {\n\treturn true;\n}\n\n_new(c) {\n\n\treturn new shs_arbfw_Platform._new(c);\n\n}\n\n_toDocument(arFields) {\n\n\tlet ret = undefined || {};\n\n\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tret.active = this.active();\n\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tret.enabled = this.enabled();\n\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tret.code = this.code();\n\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tret.order = this.order();\n\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tret.date = this.date();\n\n\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tret.name = this.name();\n\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tret.remark = this.remark();\n\n\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t}\n\n\tif (typeof(this.type_Solution_Sections()) !== 'undefined') ret.type_Solution_Sections = this.type_Solution_Sections().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (typeof(this.type_Solution_Storage_Mappings()) !== 'undefined') ret.type_Solution_Storage_Mappings = this.type_Solution_Storage_Mappings().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\treturn !arFields.find(function(_k) {\n\t\t\treturn _k == k;\n\t\t});\n\t}).forEach(function(k) {\n\t\tdelete ret[k];\n\t});\n\n\treturn ret;\n}\n\n_unique(keys, ret) {\n\tret = ret || new shs_arbfw_Section_Type();\n\n\tundefined\n\n\t// if(this.Id) ret.Id = this.Id;\n\tif (!keys) {\n\n\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t} else {\n\n\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t}\n\n\treturn ret;\n}\n\n_query(gq) {\n\tlet arFields = Object.keys(global.Schema.of('x_1790593_arboard_section_type', ['*'])['x_1790593_arboard_section_type']);\n\n\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('x_1790593_arboard_section_type');\n\n\tundefined\n\n\tlet idf = ((function(r) {\n\t\tlet ret = 'sys_id';\n\t\tif (typeof(r.__idField) === 'function') {\n\t\t\tret = r.__idField();\n\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\tret = r.__idField || this.__idField();\n\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\tret = 'Id';\n\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\tret = 'sys_id';\n\t\t}\n\t\treturn ret;\n\t})(this));\n\tif (idf == 'Id') idf = 'sys_id';\n\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tlet coop = this._active_coop || '=';\n\n\t\tlet v = this.active();\n\n\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Section_Type._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tlet coop = this._enabled_coop || '=';\n\n\t\tlet v = this.enabled();\n\n\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Section_Type._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tlet coop = this._code_coop || '=';\n\n\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.code();\n\n\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Section_Type._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tlet coop = this._order_coop || '=';\n\n\t\tlet v = this.order();\n\n\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Section_Type._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tlet coop = this._date_coop || '=';\n\n\t\tlet v = this.date();\n\n\t\tif (v) {\n\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t}\n\n\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Section_Type._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tlet coop = this._name_coop || '=';\n\n\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.name();\n\n\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Section_Type._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tlet coop = this._remark_coop || '=';\n\n\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.remark();\n\n\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Section_Type._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Section_Type._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\treturn this._queryGQ;\n}\n\n_save(obj) {\n\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\treturn new shs_arbfw_Section_Type()._save(o)\n\t});\n\n\tlet _obj = {};\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Section_Type._save(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\tObject.keys(obj).filter(function(k) {\n\t\treturn Object.keys(global.Schema.of('x_1790593_arboard_section_type', ['*'])['x_1790593_arboard_section_type']).filter(function(_k) {\n\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t}).indexOf(k.toLowerCase()) >= 0\n\t}).forEach(function(k) {\n\t\t_obj[k.toLowerCase()] = obj[k]\n\t});\n\n\tObject.keys(_obj).forEach(function(k) {\n\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Section_Type._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tdelete _obj[k];\n\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Section_Type._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t}\n\t});\n\n\tlet _this = null;\n\tif (obj.__keys) {\n\t\tlet kObj = {};\n\t\tkObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(_obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))));\n\t\tobj.__keys.forEach(function(k) {\n\t\t\tkObj[k] = _obj[k]\n\t\t});\n\t\t_this = new shs_arbfw_Section_Type()._fromDocument(kObj);\n\t} else {\n\t\t_this = new shs_arbfw_Section_Type()._fromDocument(_obj)._unique();\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Section_Type._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\tdelete _obj.__idField;\n\n\ttry {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Section_Type._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\tObject.keys(_obj).filter(function(k) {\n\t\t\treturn k.toLowerCase() != k;\n\t\t}).forEach(function(k) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Section_Type._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tvar lk = k.toLowerCase();\n\t\t\t_obj[lk] = _obj[k];\n\t\t\tdelete _obj[k];\n\t\t});\n\n\t\tlet gq = new global.GlideQuery(obj.__type || 'x_1790593_arboard_section_type');\n\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Section_Type._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\tif (_obj.sys_id) {\n\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t} else {\n\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\tgq = gq.insert(_obj);\n\t\t}\n\t\tlet _fObj = {};\n\t\t_fObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))));\n\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('x_1790593_arboard_section_type', ['*'])['x_1790593_arboard_section_type']))));\n\t} catch (ex) {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Section_Type._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Section_Type._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\treturn this;\n\t}\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Section_Type._save(): \" + \"obj.type_Solution_Sections: \" + JSON.stringify(obj.type_Solution_Sections, null, 4));\n\tif (Array.isArray(obj.type_Solution_Sections)) this.type_Solution_Sections(obj.type_Solution_Sections.map(function(ta) {\n\t\treturn new shs_arbfw_Solution_Section()._save(ta)\n\t}));\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Section_Type._save(): \" + \"obj.type_Solution_Storage_Mappings: \" + JSON.stringify(obj.type_Solution_Storage_Mappings, null, 4));\n\tif (Array.isArray(obj.type_Solution_Storage_Mappings)) this.type_Solution_Storage_Mappings(obj.type_Solution_Storage_Mappings.map(function(ta) {\n\t\treturn new shs_arbfw_Solution_Storage_Mapping()._save(ta)\n\t}));\n\n\treturn this;\n}\n\n/************* Section_Type.store() **********************/\nstore(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Section_Type.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Section_Type.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Section_Type.store(): \" + \"executing locally \");\n\n\t\t// store locally\n\t\treturn this._save(this._toDocument());\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Section_Type.findAll() **********************/\nfindAll(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Section_Type.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Section_Type.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Section_Type.findAll(): \" + \"executing locally \");\n\n\t\t// findAll locally\n\t\tlet gr = new GlideRecord('x_1790593_arboard_section_type');\n\t\tgr.addEncodedQuery(this._toEQuery());\n\t\treturn this._fromDocument(gr);\n\n\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('x_1790593_arboard_section_type', ['*'])['x_1790593_arboard_section_type'])));\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Section_Type.find() **********************/\nfind(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Section_Type.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Section_Type.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Section_Type.find(): \" + \"executing locally \");\n\n\t\tlet ret = this.findAll();\n\t\treturn ret.length ? ret[0] : null;\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"scriptFile_Script_Compatibilitys":[{"active":true,"enabled":true}],"client_callable":true,"sys_name":"shs_arbfw_Solution_Storage","api_name":"x_1790593_arboard.shs_arbfw_Solution_Storage","name":"shs_arbfw_Solution_Storage","script":"class shs_arbfw_Solution_Storage extends global.AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"\";\n\t\tthis.__type = \"shs_arbfw_Solution_Storage\";\n\t\tthis.__alias = \"shs_arbfw\";\n\t\tthis.__scope = \"shs_arbfw\";\n\t}\n\n\t/************* Solution_Storage.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Solution_Storage.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Solution_Storage.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Solution_Storage.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Solution_Storage.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//(typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Storage.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Solution_Storage.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Solution_Storage.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Solution_Storage.storage_Solution_Storage_Mappings GETTERS AND SETTERS **********************/\n\tstorage_Solution_Storage_Mappings(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._storage_Solution_Storage_Mappings = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._storage_Solution_Storage_Mappings_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._storage_Solution_Storage_Mappings;\n\t\t}\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = undefined || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\t(this.storage_Solution_Storage_Mappings() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYSolution_Storage_Mapping.storage,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Storage._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn new shs_arbfw_Solution_Storage()._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Storage._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Storage._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromGlideRecord(obj) {\n\t\tif (!obj) return null;\n\t\tif (obj.isValidRecord()) {\n\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Solution_Storage\" != 'ecc_queue' && obj.source == \"shs_arbfw_Solution_Storage\") {\n\t\t\t\tobj.state = \"processing\";\n\t\t\t\tobj.update();\n\n\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\tresp.queue = 'output';\n\t\t\t\tresp.agent = obj.agent;\n\t\t\t\tresp.topic = obj.topic;\n\t\t\t\tresp.name = obj.name;\n\t\t\t\tresp.source = obj.source;\n\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\tlet ret = new shs_arbfw_Solution_Storage()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t});\n\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t}\n\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\tresp.insert();\n\n\t\t\t\tobj.state = \"processed\";\n\t\t\t\tobj.update();\n\t\t\t\treturn resp;\n\t\t\t} else {\n\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tobj.query();\n\t\t\tlet grRet = [];\n\t\t\twhile (obj.next()) grRet.push(this._fromGlideRecord(obj));\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Storage._fromGlideRecord(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\treturn grRet;\n\t\t}\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\tundefined\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_Solution_Storage()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\tif (/((([A-Za-z]{3,9}:(?:/ / ) ? )( ? : [-;: &= +$, w] + @) ? [A - Za - z0 - 9. - ] + | ( ? : www. | [-;: &= +$, w] + @)[A - Za - z0 - 9. - ] + )(( ? : /[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)/g.test(obj)) {\n\t\t\tvar msg = new sn_ws.RESTMessageV2();\n\t\t\tmsg.setEndpoint(obj);\n\t\t\tmsg.setRequestHeader('Content-Type', 'application/json');\n\t\t\tmsg.setHttpMethod('get');\n\t\t\treturn this._fromDocument(msg.execute().getBody());\n\t\t}\n\n\t\ttry {\n\t\t\tobj = JSON.parse(obj);\n\t\t} catch (ex) {\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Storage._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\tlet _obj = {\n\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))\n\t\t\t};\n\t\t\t_obj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(this))] = obj;\n\t\t\tobj = _obj;\n\t\t}\n\t\treturn this._fromDocument(obj);\n\t}\n\telse if (typeof(obj) === 'object') {\n\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\treturn this._fromGlideRecord(obj);\n\t\t} else if (obj._fromDocument) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Storage._fromDocument(): \" + \"redundent call\");\n\t\t\treturn obj;\n\t\t} else if (Array.isArray(obj)) {\n\t\t\treturn obj.map(function(o) {\n\t\t\t\treturn new shs_arbfw_Solution_Storage()._fromDocument(o)\n\t\t\t});\n\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(obj))));\n\n\t\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Storage._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.storage_Solution_Storage_Mappings) !== 'undefined') this.storage_Solution_Storage_Mappings(new shs_arbfw_Solution_Storage_Mapping()._fromDocument(obj.storage_Solution_Storage_Mappings));\n\n\t\t\t} else { // if(obj.constructor.name==\"Solution_Storage\"){\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Storage._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t}\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Storage._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\treturn null;\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Storage._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Storage._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Storage._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\treturn this;\n}\n\n_insertAssert() {\n\treturn true;\n}\n\n_updateAssert() {\n\treturn true;\n}\n\n_storeAssert() {\n\treturn true;\n}\n\n_findAssert() {\n\treturn true;\n}\n\n_new(c) {\n\n\treturn new shs_arbfw_Platform._new(c);\n\n}\n\n_toDocument(arFields) {\n\n\tlet ret = undefined || {};\n\n\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tret.active = this.active();\n\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tret.enabled = this.enabled();\n\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tret.code = this.code();\n\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tret.order = this.order();\n\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tret.date = this.date();\n\n\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tret.name = this.name();\n\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tret.remark = this.remark();\n\n\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t}\n\n\tif (typeof(this.storage_Solution_Storage_Mappings()) !== 'undefined') ret.storage_Solution_Storage_Mappings = this.storage_Solution_Storage_Mappings().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\treturn !arFields.find(function(_k) {\n\t\t\treturn _k == k;\n\t\t});\n\t}).forEach(function(k) {\n\t\tdelete ret[k];\n\t});\n\n\treturn ret;\n}\n\n_unique(keys, ret) {\n\tret = ret || new shs_arbfw_Solution_Storage();\n\n\tundefined\n\n\t// if(this.Id) ret.Id = this.Id;\n\tif (!keys) {\n\n\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t} else {\n\n\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t}\n\n\treturn ret;\n}\n\n_query(gq) {\n\tlet arFields = Object.keys(global.Schema.of('x_1790593_arboard_solution_storage', ['*'])['x_1790593_arboard_solution_storage']);\n\n\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('x_1790593_arboard_solution_storage');\n\n\tundefined\n\n\tlet idf = ((function(r) {\n\t\tlet ret = 'sys_id';\n\t\tif (typeof(r.__idField) === 'function') {\n\t\t\tret = r.__idField();\n\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\tret = r.__idField || this.__idField();\n\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\tret = 'Id';\n\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\tret = 'sys_id';\n\t\t}\n\t\treturn ret;\n\t})(this));\n\tif (idf == 'Id') idf = 'sys_id';\n\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tlet coop = this._active_coop || '=';\n\n\t\tlet v = this.active();\n\n\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Storage._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tlet coop = this._enabled_coop || '=';\n\n\t\tlet v = this.enabled();\n\n\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Storage._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tlet coop = this._code_coop || '=';\n\n\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.code();\n\n\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Storage._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tlet coop = this._order_coop || '=';\n\n\t\tlet v = this.order();\n\n\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Storage._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tlet coop = this._date_coop || '=';\n\n\t\tlet v = this.date();\n\n\t\tif (v) {\n\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t}\n\n\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Storage._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tlet coop = this._name_coop || '=';\n\n\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.name();\n\n\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Storage._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tlet coop = this._remark_coop || '=';\n\n\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.remark();\n\n\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Storage._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Storage._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\treturn this._queryGQ;\n}\n\n_save(obj) {\n\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\treturn new shs_arbfw_Solution_Storage()._save(o)\n\t});\n\n\tlet _obj = {};\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Storage._save(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\tObject.keys(obj).filter(function(k) {\n\t\treturn Object.keys(global.Schema.of('x_1790593_arboard_solution_storage', ['*'])['x_1790593_arboard_solution_storage']).filter(function(_k) {\n\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t}).indexOf(k.toLowerCase()) >= 0\n\t}).forEach(function(k) {\n\t\t_obj[k.toLowerCase()] = obj[k]\n\t});\n\n\tObject.keys(_obj).forEach(function(k) {\n\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Storage._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tdelete _obj[k];\n\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Storage._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t}\n\t});\n\n\tlet _this = null;\n\tif (obj.__keys) {\n\t\tlet kObj = {};\n\t\tkObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(_obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))));\n\t\tobj.__keys.forEach(function(k) {\n\t\t\tkObj[k] = _obj[k]\n\t\t});\n\t\t_this = new shs_arbfw_Solution_Storage()._fromDocument(kObj);\n\t} else {\n\t\t_this = new shs_arbfw_Solution_Storage()._fromDocument(_obj)._unique();\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Storage._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\tdelete _obj.__idField;\n\n\ttry {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Storage._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\tObject.keys(_obj).filter(function(k) {\n\t\t\treturn k.toLowerCase() != k;\n\t\t}).forEach(function(k) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Storage._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tvar lk = k.toLowerCase();\n\t\t\t_obj[lk] = _obj[k];\n\t\t\tdelete _obj[k];\n\t\t});\n\n\t\tlet gq = new global.GlideQuery(obj.__type || 'x_1790593_arboard_solution_storage');\n\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Storage._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\tif (_obj.sys_id) {\n\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t} else {\n\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\tgq = gq.insert(_obj);\n\t\t}\n\t\tlet _fObj = {};\n\t\t_fObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))));\n\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('x_1790593_arboard_solution_storage', ['*'])['x_1790593_arboard_solution_storage']))));\n\t} catch (ex) {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Storage._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Storage._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\treturn this;\n\t}\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Storage._save(): \" + \"obj.storage_Solution_Storage_Mappings: \" + JSON.stringify(obj.storage_Solution_Storage_Mappings, null, 4));\n\tif (Array.isArray(obj.storage_Solution_Storage_Mappings)) this.storage_Solution_Storage_Mappings(obj.storage_Solution_Storage_Mappings.map(function(ta) {\n\t\treturn new shs_arbfw_Solution_Storage_Mapping()._save(ta)\n\t}));\n\n\treturn this;\n}\n\n/************* Solution_Storage.store() **********************/\nstore(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Storage.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Storage.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Storage.store(): \" + \"executing locally \");\n\n\t\t// store locally\n\t\treturn this._save(this._toDocument());\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Solution_Storage.findAll() **********************/\nfindAll(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Storage.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Storage.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Storage.findAll(): \" + \"executing locally \");\n\n\t\t// findAll locally\n\t\tlet gr = new GlideRecord('x_1790593_arboard_solution_storage');\n\t\tgr.addEncodedQuery(this._toEQuery());\n\t\treturn this._fromDocument(gr);\n\n\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('x_1790593_arboard_solution_storage', ['*'])['x_1790593_arboard_solution_storage'])));\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Solution_Storage.find() **********************/\nfind(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Storage.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Storage.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Storage.find(): \" + \"executing locally \");\n\n\t\tlet ret = this.findAll();\n\t\treturn ret.length ? ret[0] : null;\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"scriptFile_Script_Compatibilitys":[{"active":true,"enabled":true}],"client_callable":true,"sys_name":"shs_arbfw_Decision","api_name":"x_1790593_arboard.shs_arbfw_Decision","name":"shs_arbfw_Decision","script":"class shs_arbfw_Decision extends global.AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"\";\n\t\tthis.__type = \"shs_arbfw_Decision\";\n\t\tthis.__alias = \"shs_arbfw\";\n\t\tthis.__scope = \"shs_arbfw\";\n\t}\n\n\t/************* Decision.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Decision.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Decision.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Decision.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Decision.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//(typeof(window)!=='undefined'?alert:gs.info)(\"Decision.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Decision.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Decision.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Decision.decision_Decision_Options GETTERS AND SETTERS **********************/\n\tdecision_Decision_Options(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._decision_Decision_Options = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._decision_Decision_Options_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._decision_Decision_Options;\n\t\t}\n\t}\n\n\t/************* Decision.decision_Meetings GETTERS AND SETTERS **********************/\n\tdecision_Meetings(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._decision_Meetings = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._decision_Meetings_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._decision_Meetings;\n\t\t}\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = undefined || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\t(this.decision_Decision_Options() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYDecision_Option.decision,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(this.decision_Meetings() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYMeeting.decision,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Decision._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn new shs_arbfw_Decision()._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Decision._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Decision._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromGlideRecord(obj) {\n\t\tif (!obj) return null;\n\t\tif (obj.isValidRecord()) {\n\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Decision\" != 'ecc_queue' && obj.source == \"shs_arbfw_Decision\") {\n\t\t\t\tobj.state = \"processing\";\n\t\t\t\tobj.update();\n\n\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\tresp.queue = 'output';\n\t\t\t\tresp.agent = obj.agent;\n\t\t\t\tresp.topic = obj.topic;\n\t\t\t\tresp.name = obj.name;\n\t\t\t\tresp.source = obj.source;\n\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\tlet ret = new shs_arbfw_Decision()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t});\n\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t}\n\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\tresp.insert();\n\n\t\t\t\tobj.state = \"processed\";\n\t\t\t\tobj.update();\n\t\t\t\treturn resp;\n\t\t\t} else {\n\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tobj.query();\n\t\t\tlet grRet = [];\n\t\t\twhile (obj.next()) grRet.push(this._fromGlideRecord(obj));\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Decision._fromGlideRecord(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\treturn grRet;\n\t\t}\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\tundefined\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_Decision()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\tif (/((([A-Za-z]{3,9}:(?:/ / ) ? )( ? : [-;: &= +$, w] + @) ? [A - Za - z0 - 9. - ] + | ( ? : www. | [-;: &= +$, w] + @)[A - Za - z0 - 9. - ] + )(( ? : /[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)/g.test(obj)) {\n\t\t\tvar msg = new sn_ws.RESTMessageV2();\n\t\t\tmsg.setEndpoint(obj);\n\t\t\tmsg.setRequestHeader('Content-Type', 'application/json');\n\t\t\tmsg.setHttpMethod('get');\n\t\t\treturn this._fromDocument(msg.execute().getBody());\n\t\t}\n\n\t\ttry {\n\t\t\tobj = JSON.parse(obj);\n\t\t} catch (ex) {\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Decision._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\tlet _obj = {\n\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))\n\t\t\t};\n\t\t\t_obj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(this))] = obj;\n\t\t\tobj = _obj;\n\t\t}\n\t\treturn this._fromDocument(obj);\n\t}\n\telse if (typeof(obj) === 'object') {\n\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\treturn this._fromGlideRecord(obj);\n\t\t} else if (obj._fromDocument) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Decision._fromDocument(): \" + \"redundent call\");\n\t\t\treturn obj;\n\t\t} else if (Array.isArray(obj)) {\n\t\t\treturn obj.map(function(o) {\n\t\t\t\treturn new shs_arbfw_Decision()._fromDocument(o)\n\t\t\t});\n\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(obj))));\n\n\t\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Decision._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.decision_Decision_Options) !== 'undefined') this.decision_Decision_Options(new shs_arbfw_Decision_Option()._fromDocument(obj.decision_Decision_Options));\n\n\t\t\t\tif (typeof(obj.decision_Meetings) !== 'undefined') this.decision_Meetings(new shs_arbfw_Meeting()._fromDocument(obj.decision_Meetings));\n\n\t\t\t} else { // if(obj.constructor.name==\"Decision\"){\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Decision._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t}\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Decision._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\treturn null;\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Decision._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Decision._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Decision._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\treturn this;\n}\n\n_insertAssert() {\n\treturn true;\n}\n\n_updateAssert() {\n\treturn true;\n}\n\n_storeAssert() {\n\treturn true;\n}\n\n_findAssert() {\n\treturn true;\n}\n\n_new(c) {\n\n\treturn new shs_arbfw_Platform._new(c);\n\n}\n\n_toDocument(arFields) {\n\n\tlet ret = undefined || {};\n\n\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tret.active = this.active();\n\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tret.enabled = this.enabled();\n\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tret.code = this.code();\n\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tret.order = this.order();\n\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tret.date = this.date();\n\n\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tret.name = this.name();\n\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tret.remark = this.remark();\n\n\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t}\n\n\tif (typeof(this.decision_Decision_Options()) !== 'undefined') ret.decision_Decision_Options = this.decision_Decision_Options().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (typeof(this.decision_Meetings()) !== 'undefined') ret.decision_Meetings = this.decision_Meetings().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\treturn !arFields.find(function(_k) {\n\t\t\treturn _k == k;\n\t\t});\n\t}).forEach(function(k) {\n\t\tdelete ret[k];\n\t});\n\n\treturn ret;\n}\n\n_unique(keys, ret) {\n\tret = ret || new shs_arbfw_Decision();\n\n\tundefined\n\n\t// if(this.Id) ret.Id = this.Id;\n\tif (!keys) {\n\n\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t} else {\n\n\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t}\n\n\treturn ret;\n}\n\n_query(gq) {\n\tlet arFields = Object.keys(global.Schema.of('x_1790593_arboard_decision', ['*'])['x_1790593_arboard_decision']);\n\n\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('x_1790593_arboard_decision');\n\n\tundefined\n\n\tlet idf = ((function(r) {\n\t\tlet ret = 'sys_id';\n\t\tif (typeof(r.__idField) === 'function') {\n\t\t\tret = r.__idField();\n\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\tret = r.__idField || this.__idField();\n\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\tret = 'Id';\n\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\tret = 'sys_id';\n\t\t}\n\t\treturn ret;\n\t})(this));\n\tif (idf == 'Id') idf = 'sys_id';\n\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tlet coop = this._active_coop || '=';\n\n\t\tlet v = this.active();\n\n\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Decision._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tlet coop = this._enabled_coop || '=';\n\n\t\tlet v = this.enabled();\n\n\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Decision._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tlet coop = this._code_coop || '=';\n\n\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.code();\n\n\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Decision._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tlet coop = this._order_coop || '=';\n\n\t\tlet v = this.order();\n\n\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Decision._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tlet coop = this._date_coop || '=';\n\n\t\tlet v = this.date();\n\n\t\tif (v) {\n\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t}\n\n\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Decision._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tlet coop = this._name_coop || '=';\n\n\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.name();\n\n\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Decision._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tlet coop = this._remark_coop || '=';\n\n\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.remark();\n\n\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Decision._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Decision._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\treturn this._queryGQ;\n}\n\n_save(obj) {\n\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\treturn new shs_arbfw_Decision()._save(o)\n\t});\n\n\tlet _obj = {};\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Decision._save(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\tObject.keys(obj).filter(function(k) {\n\t\treturn Object.keys(global.Schema.of('x_1790593_arboard_decision', ['*'])['x_1790593_arboard_decision']).filter(function(_k) {\n\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t}).indexOf(k.toLowerCase()) >= 0\n\t}).forEach(function(k) {\n\t\t_obj[k.toLowerCase()] = obj[k]\n\t});\n\n\tObject.keys(_obj).forEach(function(k) {\n\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Decision._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tdelete _obj[k];\n\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Decision._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t}\n\t});\n\n\tlet _this = null;\n\tif (obj.__keys) {\n\t\tlet kObj = {};\n\t\tkObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(_obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))));\n\t\tobj.__keys.forEach(function(k) {\n\t\t\tkObj[k] = _obj[k]\n\t\t});\n\t\t_this = new shs_arbfw_Decision()._fromDocument(kObj);\n\t} else {\n\t\t_this = new shs_arbfw_Decision()._fromDocument(_obj)._unique();\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Decision._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\tdelete _obj.__idField;\n\n\ttry {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Decision._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\tObject.keys(_obj).filter(function(k) {\n\t\t\treturn k.toLowerCase() != k;\n\t\t}).forEach(function(k) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Decision._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tvar lk = k.toLowerCase();\n\t\t\t_obj[lk] = _obj[k];\n\t\t\tdelete _obj[k];\n\t\t});\n\n\t\tlet gq = new global.GlideQuery(obj.__type || 'x_1790593_arboard_decision');\n\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Decision._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\tif (_obj.sys_id) {\n\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t} else {\n\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\tgq = gq.insert(_obj);\n\t\t}\n\t\tlet _fObj = {};\n\t\t_fObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))));\n\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('x_1790593_arboard_decision', ['*'])['x_1790593_arboard_decision']))));\n\t} catch (ex) {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Decision._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Decision._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\treturn this;\n\t}\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Decision._save(): \" + \"obj.decision_Decision_Options: \" + JSON.stringify(obj.decision_Decision_Options, null, 4));\n\tif (Array.isArray(obj.decision_Decision_Options)) this.decision_Decision_Options(obj.decision_Decision_Options.map(function(ta) {\n\t\treturn new shs_arbfw_Decision_Option()._save(ta)\n\t}));\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Decision._save(): \" + \"obj.decision_Meetings: \" + JSON.stringify(obj.decision_Meetings, null, 4));\n\tif (Array.isArray(obj.decision_Meetings)) this.decision_Meetings(obj.decision_Meetings.map(function(ta) {\n\t\treturn new shs_arbfw_Meeting()._save(ta)\n\t}));\n\n\treturn this;\n}\n\n/************* Decision.store() **********************/\nstore(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Decision.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Decision.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Decision.store(): \" + \"executing locally \");\n\n\t\t// store locally\n\t\treturn this._save(this._toDocument());\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Decision.findAll() **********************/\nfindAll(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Decision.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Decision.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Decision.findAll(): \" + \"executing locally \");\n\n\t\t// findAll locally\n\t\tlet gr = new GlideRecord('x_1790593_arboard_decision');\n\t\tgr.addEncodedQuery(this._toEQuery());\n\t\treturn this._fromDocument(gr);\n\n\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('x_1790593_arboard_decision', ['*'])['x_1790593_arboard_decision'])));\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Decision.find() **********************/\nfind(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Decision.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Decision.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Decision.find(): \" + \"executing locally \");\n\n\t\tlet ret = this.findAll();\n\t\treturn ret.length ? ret[0] : null;\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"scriptFile_Script_Compatibilitys":[{"active":true,"enabled":true}],"client_callable":true,"sys_name":"shs_arbfw_Board","api_name":"x_1790593_arboard.shs_arbfw_Board","name":"shs_arbfw_Board","script":"class shs_arbfw_Board extends global.AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"\";\n\t\tthis.__type = \"shs_arbfw_Board\";\n\t\tthis.__alias = \"shs_arbfw\";\n\t\tthis.__scope = \"shs_arbfw\";\n\t}\n\n\t/************* Board.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Board.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Board.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Board.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Board.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//(typeof(window)!=='undefined'?alert:gs.info)(\"Board.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Board.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Board.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Board.board_Meetings GETTERS AND SETTERS **********************/\n\tboard_Meetings(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._board_Meetings = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._board_Meetings_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._board_Meetings;\n\t\t}\n\t}\n\n\t/************* Board.board_Board_Members GETTERS AND SETTERS **********************/\n\tboard_Board_Members(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._board_Board_Members = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._board_Board_Members_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._board_Board_Members;\n\t\t}\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = undefined || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\t(this.board_Meetings() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYMeeting.board,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(this.board_Board_Members() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYBoard_Member.board,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Board._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn new shs_arbfw_Board()._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Board._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Board._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromGlideRecord(obj) {\n\t\tif (!obj) return null;\n\t\tif (obj.isValidRecord()) {\n\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Board\" != 'ecc_queue' && obj.source == \"shs_arbfw_Board\") {\n\t\t\t\tobj.state = \"processing\";\n\t\t\t\tobj.update();\n\n\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\tresp.queue = 'output';\n\t\t\t\tresp.agent = obj.agent;\n\t\t\t\tresp.topic = obj.topic;\n\t\t\t\tresp.name = obj.name;\n\t\t\t\tresp.source = obj.source;\n\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\tlet ret = new shs_arbfw_Board()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t});\n\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t}\n\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\tresp.insert();\n\n\t\t\t\tobj.state = \"processed\";\n\t\t\t\tobj.update();\n\t\t\t\treturn resp;\n\t\t\t} else {\n\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tobj.query();\n\t\t\tlet grRet = [];\n\t\t\twhile (obj.next()) grRet.push(this._fromGlideRecord(obj));\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Board._fromGlideRecord(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\treturn grRet;\n\t\t}\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\tundefined\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_Board()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\tif (/((([A-Za-z]{3,9}:(?:/ / ) ? )( ? : [-;: &= +$, w] + @) ? [A - Za - z0 - 9. - ] + | ( ? : www. | [-;: &= +$, w] + @)[A - Za - z0 - 9. - ] + )(( ? : /[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)/g.test(obj)) {\n\t\t\tvar msg = new sn_ws.RESTMessageV2();\n\t\t\tmsg.setEndpoint(obj);\n\t\t\tmsg.setRequestHeader('Content-Type', 'application/json');\n\t\t\tmsg.setHttpMethod('get');\n\t\t\treturn this._fromDocument(msg.execute().getBody());\n\t\t}\n\n\t\ttry {\n\t\t\tobj = JSON.parse(obj);\n\t\t} catch (ex) {\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Board._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\tlet _obj = {\n\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))\n\t\t\t};\n\t\t\t_obj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(this))] = obj;\n\t\t\tobj = _obj;\n\t\t}\n\t\treturn this._fromDocument(obj);\n\t}\n\telse if (typeof(obj) === 'object') {\n\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\treturn this._fromGlideRecord(obj);\n\t\t} else if (obj._fromDocument) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Board._fromDocument(): \" + \"redundent call\");\n\t\t\treturn obj;\n\t\t} else if (Array.isArray(obj)) {\n\t\t\treturn obj.map(function(o) {\n\t\t\t\treturn new shs_arbfw_Board()._fromDocument(o)\n\t\t\t});\n\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(obj))));\n\n\t\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Board._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.board_Meetings) !== 'undefined') this.board_Meetings(new shs_arbfw_Meeting()._fromDocument(obj.board_Meetings));\n\n\t\t\t\tif (typeof(obj.board_Board_Members) !== 'undefined') this.board_Board_Members(new shs_arbfw_Board_Member()._fromDocument(obj.board_Board_Members));\n\n\t\t\t} else { // if(obj.constructor.name==\"Board\"){\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Board._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t}\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Board._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\treturn null;\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Board._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Board._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Board._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\treturn this;\n}\n\n_insertAssert() {\n\treturn true;\n}\n\n_updateAssert() {\n\treturn true;\n}\n\n_storeAssert() {\n\treturn true;\n}\n\n_findAssert() {\n\treturn true;\n}\n\n_new(c) {\n\n\treturn new shs_arbfw_Platform._new(c);\n\n}\n\n_toDocument(arFields) {\n\n\tlet ret = undefined || {};\n\n\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tret.active = this.active();\n\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tret.enabled = this.enabled();\n\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tret.code = this.code();\n\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tret.order = this.order();\n\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tret.date = this.date();\n\n\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tret.name = this.name();\n\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tret.remark = this.remark();\n\n\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t}\n\n\tif (typeof(this.board_Meetings()) !== 'undefined') ret.board_Meetings = this.board_Meetings().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (typeof(this.board_Board_Members()) !== 'undefined') ret.board_Board_Members = this.board_Board_Members().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\treturn !arFields.find(function(_k) {\n\t\t\treturn _k == k;\n\t\t});\n\t}).forEach(function(k) {\n\t\tdelete ret[k];\n\t});\n\n\treturn ret;\n}\n\n_unique(keys, ret) {\n\tret = ret || new shs_arbfw_Board();\n\n\tundefined\n\n\t// if(this.Id) ret.Id = this.Id;\n\tif (!keys) {\n\n\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t} else {\n\n\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t}\n\n\treturn ret;\n}\n\n_query(gq) {\n\tlet arFields = Object.keys(global.Schema.of('x_1790593_arboard_board', ['*'])['x_1790593_arboard_board']);\n\n\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('x_1790593_arboard_board');\n\n\tundefined\n\n\tlet idf = ((function(r) {\n\t\tlet ret = 'sys_id';\n\t\tif (typeof(r.__idField) === 'function') {\n\t\t\tret = r.__idField();\n\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\tret = r.__idField || this.__idField();\n\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\tret = 'Id';\n\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\tret = 'sys_id';\n\t\t}\n\t\treturn ret;\n\t})(this));\n\tif (idf == 'Id') idf = 'sys_id';\n\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tlet coop = this._active_coop || '=';\n\n\t\tlet v = this.active();\n\n\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Board._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tlet coop = this._enabled_coop || '=';\n\n\t\tlet v = this.enabled();\n\n\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Board._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tlet coop = this._code_coop || '=';\n\n\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.code();\n\n\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Board._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tlet coop = this._order_coop || '=';\n\n\t\tlet v = this.order();\n\n\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Board._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tlet coop = this._date_coop || '=';\n\n\t\tlet v = this.date();\n\n\t\tif (v) {\n\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t}\n\n\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Board._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tlet coop = this._name_coop || '=';\n\n\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.name();\n\n\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Board._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tlet coop = this._remark_coop || '=';\n\n\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.remark();\n\n\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Board._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Board._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\treturn this._queryGQ;\n}\n\n_save(obj) {\n\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\treturn new shs_arbfw_Board()._save(o)\n\t});\n\n\tlet _obj = {};\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Board._save(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\tObject.keys(obj).filter(function(k) {\n\t\treturn Object.keys(global.Schema.of('x_1790593_arboard_board', ['*'])['x_1790593_arboard_board']).filter(function(_k) {\n\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t}).indexOf(k.toLowerCase()) >= 0\n\t}).forEach(function(k) {\n\t\t_obj[k.toLowerCase()] = obj[k]\n\t});\n\n\tObject.keys(_obj).forEach(function(k) {\n\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Board._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tdelete _obj[k];\n\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Board._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t}\n\t});\n\n\tlet _this = null;\n\tif (obj.__keys) {\n\t\tlet kObj = {};\n\t\tkObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(_obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))));\n\t\tobj.__keys.forEach(function(k) {\n\t\t\tkObj[k] = _obj[k]\n\t\t});\n\t\t_this = new shs_arbfw_Board()._fromDocument(kObj);\n\t} else {\n\t\t_this = new shs_arbfw_Board()._fromDocument(_obj)._unique();\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Board._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\tdelete _obj.__idField;\n\n\ttry {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Board._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\tObject.keys(_obj).filter(function(k) {\n\t\t\treturn k.toLowerCase() != k;\n\t\t}).forEach(function(k) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Board._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tvar lk = k.toLowerCase();\n\t\t\t_obj[lk] = _obj[k];\n\t\t\tdelete _obj[k];\n\t\t});\n\n\t\tlet gq = new global.GlideQuery(obj.__type || 'x_1790593_arboard_board');\n\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Board._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\tif (_obj.sys_id) {\n\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t} else {\n\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\tgq = gq.insert(_obj);\n\t\t}\n\t\tlet _fObj = {};\n\t\t_fObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))));\n\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('x_1790593_arboard_board', ['*'])['x_1790593_arboard_board']))));\n\t} catch (ex) {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Board._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Board._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\treturn this;\n\t}\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Board._save(): \" + \"obj.board_Meetings: \" + JSON.stringify(obj.board_Meetings, null, 4));\n\tif (Array.isArray(obj.board_Meetings)) this.board_Meetings(obj.board_Meetings.map(function(ta) {\n\t\treturn new shs_arbfw_Meeting()._save(ta)\n\t}));\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Board._save(): \" + \"obj.board_Board_Members: \" + JSON.stringify(obj.board_Board_Members, null, 4));\n\tif (Array.isArray(obj.board_Board_Members)) this.board_Board_Members(obj.board_Board_Members.map(function(ta) {\n\t\treturn new shs_arbfw_Board_Member()._save(ta)\n\t}));\n\n\treturn this;\n}\n\n/************* Board.store() **********************/\nstore(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Board.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Board.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Board.store(): \" + \"executing locally \");\n\n\t\t// store locally\n\t\treturn this._save(this._toDocument());\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Board.findAll() **********************/\nfindAll(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Board.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Board.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Board.findAll(): \" + \"executing locally \");\n\n\t\t// findAll locally\n\t\tlet gr = new GlideRecord('x_1790593_arboard_board');\n\t\tgr.addEncodedQuery(this._toEQuery());\n\t\treturn this._fromDocument(gr);\n\n\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('x_1790593_arboard_board', ['*'])['x_1790593_arboard_board'])));\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Board.find() **********************/\nfind(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Board.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Board.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Board.find(): \" + \"executing locally \");\n\n\t\tlet ret = this.findAll();\n\t\treturn ret.length ? ret[0] : null;\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"scriptFile_Script_Compatibilitys":[{"active":true,"enabled":true}],"client_callable":true,"sys_name":"shs_arbfw_Frequency","api_name":"x_1790593_arboard.shs_arbfw_Frequency","name":"shs_arbfw_Frequency","script":"class shs_arbfw_Frequency extends global.AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"\";\n\t\tthis.__type = \"shs_arbfw_Frequency\";\n\t\tthis.__alias = \"shs_arbfw\";\n\t\tthis.__scope = \"shs_arbfw\";\n\t}\n\n\t/************* Frequency.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Frequency.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Frequency.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Frequency.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Frequency.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//(typeof(window)!=='undefined'?alert:gs.info)(\"Frequency.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Frequency.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Frequency.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Frequency.daily GETTERS AND SETTERS **********************/\n\tdaily(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._daily = v;\n\t\t\tthis._daily_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._daily;\n\t\t}\n\t}\n\n\t/************* Frequency.weekly GETTERS AND SETTERS **********************/\n\tweekly(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._weekly = v;\n\t\t\tthis._weekly_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._weekly;\n\t\t}\n\t}\n\n\t/************* Frequency.monthly GETTERS AND SETTERS **********************/\n\tmonthly(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._monthly = v;\n\t\t\tthis._monthly_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._monthly;\n\t\t}\n\t}\n\n\t/************* Frequency.quarterly GETTERS AND SETTERS **********************/\n\tquarterly(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._quarterly = v;\n\t\t\tthis._quarterly_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._quarterly;\n\t\t}\n\t}\n\n\t/************* Frequency.days GETTERS AND SETTERS **********************/\n\tdays(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._days = v;\n\t\t\tthis._days_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._days;\n\t\t}\n\t}\n\n\t/************* Frequency.monday GETTERS AND SETTERS **********************/\n\tmonday(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._monday = v;\n\t\t\tthis._monday_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._monday;\n\t\t}\n\t}\n\n\t/************* Frequency.tuesday GETTERS AND SETTERS **********************/\n\ttuesday(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._tuesday = v;\n\t\t\tthis._tuesday_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._tuesday;\n\t\t}\n\t}\n\n\t/************* Frequency.wednesday GETTERS AND SETTERS **********************/\n\twednesday(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._wednesday = v;\n\t\t\tthis._wednesday_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._wednesday;\n\t\t}\n\t}\n\n\t/************* Frequency.thursday GETTERS AND SETTERS **********************/\n\tthursday(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._thursday = v;\n\t\t\tthis._thursday_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._thursday;\n\t\t}\n\t}\n\n\t/************* Frequency.friday GETTERS AND SETTERS **********************/\n\tfriday(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._friday = v;\n\t\t\tthis._friday_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._friday;\n\t\t}\n\t}\n\n\t/************* Frequency.saturday GETTERS AND SETTERS **********************/\n\tsaturday(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._saturday = v;\n\t\t\tthis._saturday_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._saturday;\n\t\t}\n\t}\n\n\t/************* Frequency.sunday GETTERS AND SETTERS **********************/\n\tsunday(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._sunday = v;\n\t\t\tthis._sunday_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._sunday;\n\t\t}\n\t}\n\n\t/************* Frequency.frequency_Meeting_Seriess GETTERS AND SETTERS **********************/\n\tfrequency_Meeting_Seriess(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._frequency_Meeting_Seriess = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._frequency_Meeting_Seriess_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._frequency_Meeting_Seriess;\n\t\t}\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = undefined || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\tif (this._daily) ret += '^' + sPath + 'daily' + (this._daily_coop || '=') + this.daily();\n\n\t\tif (this._weekly) ret += '^' + sPath + 'weekly' + (this._weekly_coop || '=') + this.weekly();\n\n\t\tif (this._monthly) ret += '^' + sPath + 'monthly' + (this._monthly_coop || '=') + this.monthly();\n\n\t\tif (this._quarterly) ret += '^' + sPath + 'quarterly' + (this._quarterly_coop || '=') + this.quarterly();\n\n\t\tif (this._days) ret += '^' + sPath + 'days' + (this._days_coop || '=') + this.days();\n\n\t\tif (this._monday) ret += '^' + sPath + 'monday' + (this._monday_coop || '=') + this.monday();\n\n\t\tif (this._tuesday) ret += '^' + sPath + 'tuesday' + (this._tuesday_coop || '=') + this.tuesday();\n\n\t\tif (this._wednesday) ret += '^' + sPath + 'wednesday' + (this._wednesday_coop || '=') + this.wednesday();\n\n\t\tif (this._thursday) ret += '^' + sPath + 'thursday' + (this._thursday_coop || '=') + this.thursday();\n\n\t\tif (this._friday) ret += '^' + sPath + 'friday' + (this._friday_coop || '=') + this.friday();\n\n\t\tif (this._saturday) ret += '^' + sPath + 'saturday' + (this._saturday_coop || '=') + this.saturday();\n\n\t\tif (this._sunday) ret += '^' + sPath + 'sunday' + (this._sunday_coop || '=') + this.sunday();\n\n\t\t(this.frequency_Meeting_Seriess() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYMeeting_Series.frequency,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Frequency._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn new shs_arbfw_Frequency()._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Frequency._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Frequency._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromGlideRecord(obj) {\n\t\tif (!obj) return null;\n\t\tif (obj.isValidRecord()) {\n\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Frequency\" != 'ecc_queue' && obj.source == \"shs_arbfw_Frequency\") {\n\t\t\t\tobj.state = \"processing\";\n\t\t\t\tobj.update();\n\n\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\tresp.queue = 'output';\n\t\t\t\tresp.agent = obj.agent;\n\t\t\t\tresp.topic = obj.topic;\n\t\t\t\tresp.name = obj.name;\n\t\t\t\tresp.source = obj.source;\n\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\tlet ret = new shs_arbfw_Frequency()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t});\n\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t}\n\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\tresp.insert();\n\n\t\t\t\tobj.state = \"processed\";\n\t\t\t\tobj.update();\n\t\t\t\treturn resp;\n\t\t\t} else {\n\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\tdaily: obj.getValue(\"daily\"),\n\n\t\t\t\t\tweekly: obj.getValue(\"weekly\"),\n\n\t\t\t\t\tmonthly: obj.getValue(\"monthly\"),\n\n\t\t\t\t\tquarterly: obj.getValue(\"quarterly\"),\n\n\t\t\t\t\tdays: obj.getValue(\"days\"),\n\n\t\t\t\t\tmonday: obj.getValue(\"monday\"),\n\n\t\t\t\t\ttuesday: obj.getValue(\"tuesday\"),\n\n\t\t\t\t\twednesday: obj.getValue(\"wednesday\"),\n\n\t\t\t\t\tthursday: obj.getValue(\"thursday\"),\n\n\t\t\t\t\tfriday: obj.getValue(\"friday\"),\n\n\t\t\t\t\tsaturday: obj.getValue(\"saturday\"),\n\n\t\t\t\t\tsunday: obj.getValue(\"sunday\"),\n\n\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tobj.query();\n\t\t\tlet grRet = [];\n\t\t\twhile (obj.next()) grRet.push(this._fromGlideRecord(obj));\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Frequency._fromGlideRecord(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\treturn grRet;\n\t\t}\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\tundefined\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_Frequency()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\tif (/((([A-Za-z]{3,9}:(?:/ / ) ? )( ? : [-;: &= +$, w] + @) ? [A - Za - z0 - 9. - ] + | ( ? : www. | [-;: &= +$, w] + @)[A - Za - z0 - 9. - ] + )(( ? : /[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)/g.test(obj)) {\n\t\t\tvar msg = new sn_ws.RESTMessageV2();\n\t\t\tmsg.setEndpoint(obj);\n\t\t\tmsg.setRequestHeader('Content-Type', 'application/json');\n\t\t\tmsg.setHttpMethod('get');\n\t\t\treturn this._fromDocument(msg.execute().getBody());\n\t\t}\n\n\t\ttry {\n\t\t\tobj = JSON.parse(obj);\n\t\t} catch (ex) {\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Frequency._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\tlet _obj = {\n\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))\n\t\t\t};\n\t\t\t_obj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(this))] = obj;\n\t\t\tobj = _obj;\n\t\t}\n\t\treturn this._fromDocument(obj);\n\t}\n\telse if (typeof(obj) === 'object') {\n\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\treturn this._fromGlideRecord(obj);\n\t\t} else if (obj._fromDocument) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Frequency._fromDocument(): \" + \"redundent call\");\n\t\t\treturn obj;\n\t\t} else if (Array.isArray(obj)) {\n\t\t\treturn obj.map(function(o) {\n\t\t\t\treturn new shs_arbfw_Frequency()._fromDocument(o)\n\t\t\t});\n\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(obj))));\n\n\t\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Frequency._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.daily) !== 'undefined') {\n\n\t\t\t\t\tthis.daily(obj.daily);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.weekly) !== 'undefined') {\n\n\t\t\t\t\tthis.weekly(obj.weekly);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.monthly) !== 'undefined') {\n\n\t\t\t\t\tthis.monthly(obj.monthly);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.quarterly) !== 'undefined') {\n\n\t\t\t\t\tthis.quarterly(obj.quarterly);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.days) !== 'undefined') {\n\n\t\t\t\t\tthis.days(obj.days);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.monday) !== 'undefined') {\n\n\t\t\t\t\tthis.monday(obj.monday);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.tuesday) !== 'undefined') {\n\n\t\t\t\t\tthis.tuesday(obj.tuesday);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.wednesday) !== 'undefined') {\n\n\t\t\t\t\tthis.wednesday(obj.wednesday);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.thursday) !== 'undefined') {\n\n\t\t\t\t\tthis.thursday(obj.thursday);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.friday) !== 'undefined') {\n\n\t\t\t\t\tthis.friday(obj.friday);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.saturday) !== 'undefined') {\n\n\t\t\t\t\tthis.saturday(obj.saturday);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.sunday) !== 'undefined') {\n\n\t\t\t\t\tthis.sunday(obj.sunday);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.frequency_Meeting_Seriess) !== 'undefined') this.frequency_Meeting_Seriess(new shs_arbfw_Meeting_Series()._fromDocument(obj.frequency_Meeting_Seriess));\n\n\t\t\t} else { // if(obj.constructor.name==\"Frequency\"){\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Frequency._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t}\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Frequency._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\treturn null;\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Frequency._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Frequency._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Frequency._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\treturn this;\n}\n\n_insertAssert() {\n\treturn true;\n}\n\n_updateAssert() {\n\treturn true;\n}\n\n_storeAssert() {\n\treturn true;\n}\n\n_findAssert() {\n\treturn true;\n}\n\n_new(c) {\n\n\treturn new shs_arbfw_Platform._new(c);\n\n}\n\n_toDocument(arFields) {\n\n\tlet ret = undefined || {};\n\n\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tret.active = this.active();\n\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tret.enabled = this.enabled();\n\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tret.code = this.code();\n\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tret.order = this.order();\n\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tret.date = this.date();\n\n\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tret.name = this.name();\n\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tret.remark = this.remark();\n\n\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t}\n\n\tif (typeof(this._daily) !== 'undefined') {\n\t\tret.daily = this.daily();\n\n\t}\n\n\tif (typeof(this._weekly) !== 'undefined') {\n\t\tret.weekly = this.weekly();\n\n\t}\n\n\tif (typeof(this._monthly) !== 'undefined') {\n\t\tret.monthly = this.monthly();\n\n\t}\n\n\tif (typeof(this._quarterly) !== 'undefined') {\n\t\tret.quarterly = this.quarterly();\n\n\t}\n\n\tif (typeof(this._days) !== 'undefined') {\n\t\tret.days = this.days();\n\n\t}\n\n\tif (typeof(this._monday) !== 'undefined') {\n\t\tret.monday = this.monday();\n\n\t}\n\n\tif (typeof(this._tuesday) !== 'undefined') {\n\t\tret.tuesday = this.tuesday();\n\n\t}\n\n\tif (typeof(this._wednesday) !== 'undefined') {\n\t\tret.wednesday = this.wednesday();\n\n\t}\n\n\tif (typeof(this._thursday) !== 'undefined') {\n\t\tret.thursday = this.thursday();\n\n\t}\n\n\tif (typeof(this._friday) !== 'undefined') {\n\t\tret.friday = this.friday();\n\n\t}\n\n\tif (typeof(this._saturday) !== 'undefined') {\n\t\tret.saturday = this.saturday();\n\n\t}\n\n\tif (typeof(this._sunday) !== 'undefined') {\n\t\tret.sunday = this.sunday();\n\n\t}\n\n\tif (typeof(this.frequency_Meeting_Seriess()) !== 'undefined') ret.frequency_Meeting_Seriess = this.frequency_Meeting_Seriess().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\treturn !arFields.find(function(_k) {\n\t\t\treturn _k == k;\n\t\t});\n\t}).forEach(function(k) {\n\t\tdelete ret[k];\n\t});\n\n\treturn ret;\n}\n\n_unique(keys, ret) {\n\tret = ret || new shs_arbfw_Frequency();\n\n\tundefined\n\n\t// if(this.Id) ret.Id = this.Id;\n\tif (!keys) {\n\n\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t} else {\n\n\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t\tif (keys.indexOf(\"daily\") >= 0 && typeof(this.daily()) !== 'undefined') ret.daily(this.daily());\n\n\t\tif (keys.indexOf(\"weekly\") >= 0 && typeof(this.weekly()) !== 'undefined') ret.weekly(this.weekly());\n\n\t\tif (keys.indexOf(\"monthly\") >= 0 && typeof(this.monthly()) !== 'undefined') ret.monthly(this.monthly());\n\n\t\tif (keys.indexOf(\"quarterly\") >= 0 && typeof(this.quarterly()) !== 'undefined') ret.quarterly(this.quarterly());\n\n\t\tif (keys.indexOf(\"days\") >= 0 && typeof(this.days()) !== 'undefined') ret.days(this.days());\n\n\t\tif (keys.indexOf(\"monday\") >= 0 && typeof(this.monday()) !== 'undefined') ret.monday(this.monday());\n\n\t\tif (keys.indexOf(\"tuesday\") >= 0 && typeof(this.tuesday()) !== 'undefined') ret.tuesday(this.tuesday());\n\n\t\tif (keys.indexOf(\"wednesday\") >= 0 && typeof(this.wednesday()) !== 'undefined') ret.wednesday(this.wednesday());\n\n\t\tif (keys.indexOf(\"thursday\") >= 0 && typeof(this.thursday()) !== 'undefined') ret.thursday(this.thursday());\n\n\t\tif (keys.indexOf(\"friday\") >= 0 && typeof(this.friday()) !== 'undefined') ret.friday(this.friday());\n\n\t\tif (keys.indexOf(\"saturday\") >= 0 && typeof(this.saturday()) !== 'undefined') ret.saturday(this.saturday());\n\n\t\tif (keys.indexOf(\"sunday\") >= 0 && typeof(this.sunday()) !== 'undefined') ret.sunday(this.sunday());\n\n\t}\n\n\treturn ret;\n}\n\n_query(gq) {\n\tlet arFields = Object.keys(global.Schema.of('x_1790593_arboard_frequency', ['*'])['x_1790593_arboard_frequency']);\n\n\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('x_1790593_arboard_frequency');\n\n\tundefined\n\n\tlet idf = ((function(r) {\n\t\tlet ret = 'sys_id';\n\t\tif (typeof(r.__idField) === 'function') {\n\t\t\tret = r.__idField();\n\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\tret = r.__idField || this.__idField();\n\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\tret = 'Id';\n\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\tret = 'sys_id';\n\t\t}\n\t\treturn ret;\n\t})(this));\n\tif (idf == 'Id') idf = 'sys_id';\n\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tlet coop = this._active_coop || '=';\n\n\t\tlet v = this.active();\n\n\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Frequency._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tlet coop = this._enabled_coop || '=';\n\n\t\tlet v = this.enabled();\n\n\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Frequency._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tlet coop = this._code_coop || '=';\n\n\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.code();\n\n\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Frequency._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tlet coop = this._order_coop || '=';\n\n\t\tlet v = this.order();\n\n\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Frequency._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tlet coop = this._date_coop || '=';\n\n\t\tlet v = this.date();\n\n\t\tif (v) {\n\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t}\n\n\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Frequency._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tlet coop = this._name_coop || '=';\n\n\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.name();\n\n\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Frequency._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tlet coop = this._remark_coop || '=';\n\n\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.remark();\n\n\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Frequency._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._daily) !== 'undefined') {\n\t\tlet coop = this._daily_coop || '=';\n\n\t\tlet v = this.daily();\n\n\t\tif (arFields.indexOf('daily') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Frequency._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('daily');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('daily');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('daily', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._weekly) !== 'undefined') {\n\t\tlet coop = this._weekly_coop || '=';\n\n\t\tlet v = this.weekly();\n\n\t\tif (arFields.indexOf('weekly') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Frequency._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('weekly');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('weekly');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('weekly', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._monthly) !== 'undefined') {\n\t\tlet coop = this._monthly_coop || '=';\n\n\t\tlet v = this.monthly();\n\n\t\tif (arFields.indexOf('monthly') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Frequency._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('monthly');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('monthly');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('monthly', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._quarterly) !== 'undefined') {\n\t\tlet coop = this._quarterly_coop || '=';\n\n\t\tlet v = this.quarterly();\n\n\t\tif (arFields.indexOf('quarterly') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Frequency._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('quarterly');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('quarterly');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('quarterly', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._days) !== 'undefined') {\n\t\tlet coop = this._days_coop || '=';\n\n\t\tlet v = this.days();\n\n\t\tif (arFields.indexOf('days') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Frequency._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('days');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('days');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('days', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._monday) !== 'undefined') {\n\t\tlet coop = this._monday_coop || '=';\n\n\t\tlet v = this.monday();\n\n\t\tif (arFields.indexOf('monday') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Frequency._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('monday');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('monday');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('monday', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._tuesday) !== 'undefined') {\n\t\tlet coop = this._tuesday_coop || '=';\n\n\t\tlet v = this.tuesday();\n\n\t\tif (arFields.indexOf('tuesday') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Frequency._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('tuesday');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('tuesday');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('tuesday', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._wednesday) !== 'undefined') {\n\t\tlet coop = this._wednesday_coop || '=';\n\n\t\tlet v = this.wednesday();\n\n\t\tif (arFields.indexOf('wednesday') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Frequency._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('wednesday');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('wednesday');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('wednesday', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._thursday) !== 'undefined') {\n\t\tlet coop = this._thursday_coop || '=';\n\n\t\tlet v = this.thursday();\n\n\t\tif (arFields.indexOf('thursday') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Frequency._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('thursday');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('thursday');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('thursday', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._friday) !== 'undefined') {\n\t\tlet coop = this._friday_coop || '=';\n\n\t\tlet v = this.friday();\n\n\t\tif (arFields.indexOf('friday') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Frequency._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('friday');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('friday');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('friday', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._saturday) !== 'undefined') {\n\t\tlet coop = this._saturday_coop || '=';\n\n\t\tlet v = this.saturday();\n\n\t\tif (arFields.indexOf('saturday') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Frequency._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('saturday');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('saturday');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('saturday', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._sunday) !== 'undefined') {\n\t\tlet coop = this._sunday_coop || '=';\n\n\t\tlet v = this.sunday();\n\n\t\tif (arFields.indexOf('sunday') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Frequency._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('sunday');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('sunday');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('sunday', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Frequency._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\treturn this._queryGQ;\n}\n\n_save(obj) {\n\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\treturn new shs_arbfw_Frequency()._save(o)\n\t});\n\n\tlet _obj = {};\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Frequency._save(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\tObject.keys(obj).filter(function(k) {\n\t\treturn Object.keys(global.Schema.of('x_1790593_arboard_frequency', ['*'])['x_1790593_arboard_frequency']).filter(function(_k) {\n\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t}).indexOf(k.toLowerCase()) >= 0\n\t}).forEach(function(k) {\n\t\t_obj[k.toLowerCase()] = obj[k]\n\t});\n\n\tObject.keys(_obj).forEach(function(k) {\n\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Frequency._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tdelete _obj[k];\n\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Frequency._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t}\n\t});\n\n\tlet _this = null;\n\tif (obj.__keys) {\n\t\tlet kObj = {};\n\t\tkObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(_obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))));\n\t\tobj.__keys.forEach(function(k) {\n\t\t\tkObj[k] = _obj[k]\n\t\t});\n\t\t_this = new shs_arbfw_Frequency()._fromDocument(kObj);\n\t} else {\n\t\t_this = new shs_arbfw_Frequency()._fromDocument(_obj)._unique();\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Frequency._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\tdelete _obj.__idField;\n\n\ttry {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Frequency._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\tObject.keys(_obj).filter(function(k) {\n\t\t\treturn k.toLowerCase() != k;\n\t\t}).forEach(function(k) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Frequency._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tvar lk = k.toLowerCase();\n\t\t\t_obj[lk] = _obj[k];\n\t\t\tdelete _obj[k];\n\t\t});\n\n\t\tlet gq = new global.GlideQuery(obj.__type || 'x_1790593_arboard_frequency');\n\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Frequency._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\tif (_obj.sys_id) {\n\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t} else {\n\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\tgq = gq.insert(_obj);\n\t\t}\n\t\tlet _fObj = {};\n\t\t_fObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))));\n\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('x_1790593_arboard_frequency', ['*'])['x_1790593_arboard_frequency']))));\n\t} catch (ex) {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Frequency._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Frequency._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\treturn this;\n\t}\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Frequency._save(): \" + \"obj.frequency_Meeting_Seriess: \" + JSON.stringify(obj.frequency_Meeting_Seriess, null, 4));\n\tif (Array.isArray(obj.frequency_Meeting_Seriess)) this.frequency_Meeting_Seriess(obj.frequency_Meeting_Seriess.map(function(ta) {\n\t\treturn new shs_arbfw_Meeting_Series()._save(ta)\n\t}));\n\n\treturn this;\n}\n\n/************* Frequency.store() **********************/\nstore(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Frequency.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Frequency.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Frequency.store(): \" + \"executing locally \");\n\n\t\t// store locally\n\t\treturn this._save(this._toDocument());\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Frequency.findAll() **********************/\nfindAll(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Frequency.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Frequency.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Frequency.findAll(): \" + \"executing locally \");\n\n\t\t// findAll locally\n\t\tlet gr = new GlideRecord('x_1790593_arboard_frequency');\n\t\tgr.addEncodedQuery(this._toEQuery());\n\t\treturn this._fromDocument(gr);\n\n\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('x_1790593_arboard_frequency', ['*'])['x_1790593_arboard_frequency'])));\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Frequency.find() **********************/\nfind(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Frequency.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Frequency.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Frequency.find(): \" + \"executing locally \");\n\n\t\tlet ret = this.findAll();\n\t\treturn ret.length ? ret[0] : null;\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"scriptFile_Script_Compatibilitys":[{"active":true,"enabled":true}],"client_callable":true,"sys_name":"shs_arbfw_Team","api_name":"x_1790593_arboard.shs_arbfw_Team","name":"shs_arbfw_Team","script":"class shs_arbfw_Team extends global.AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"\";\n\t\tthis.__type = \"shs_arbfw_Team\";\n\t\tthis.__alias = \"shs_arbfw\";\n\t\tthis.__scope = \"shs_arbfw\";\n\t}\n\n\t/************* Team.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Team.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Team.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Team.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Team.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//(typeof(window)!=='undefined'?alert:gs.info)(\"Team.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Team.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Team.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Team.team_Projects GETTERS AND SETTERS **********************/\n\tteam_Projects(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._team_Projects = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._team_Projects_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._team_Projects;\n\t\t}\n\t}\n\n\t/************* Team.team_Team_Members GETTERS AND SETTERS **********************/\n\tteam_Team_Members(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._team_Team_Members = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._team_Team_Members_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._team_Team_Members;\n\t\t}\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = undefined || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\t(this.team_Projects() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYProject.team,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(this.team_Team_Members() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYTeam_Member.team,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Team._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn new shs_arbfw_Team()._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Team._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Team._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromGlideRecord(obj) {\n\t\tif (!obj) return null;\n\t\tif (obj.isValidRecord()) {\n\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Team\" != 'ecc_queue' && obj.source == \"shs_arbfw_Team\") {\n\t\t\t\tobj.state = \"processing\";\n\t\t\t\tobj.update();\n\n\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\tresp.queue = 'output';\n\t\t\t\tresp.agent = obj.agent;\n\t\t\t\tresp.topic = obj.topic;\n\t\t\t\tresp.name = obj.name;\n\t\t\t\tresp.source = obj.source;\n\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\tlet ret = new shs_arbfw_Team()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t});\n\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t}\n\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\tresp.insert();\n\n\t\t\t\tobj.state = \"processed\";\n\t\t\t\tobj.update();\n\t\t\t\treturn resp;\n\t\t\t} else {\n\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tobj.query();\n\t\t\tlet grRet = [];\n\t\t\twhile (obj.next()) grRet.push(this._fromGlideRecord(obj));\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Team._fromGlideRecord(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\treturn grRet;\n\t\t}\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\tundefined\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_Team()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\tif (/((([A-Za-z]{3,9}:(?:/ / ) ? )( ? : [-;: &= +$, w] + @) ? [A - Za - z0 - 9. - ] + | ( ? : www. | [-;: &= +$, w] + @)[A - Za - z0 - 9. - ] + )(( ? : /[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)/g.test(obj)) {\n\t\t\tvar msg = new sn_ws.RESTMessageV2();\n\t\t\tmsg.setEndpoint(obj);\n\t\t\tmsg.setRequestHeader('Content-Type', 'application/json');\n\t\t\tmsg.setHttpMethod('get');\n\t\t\treturn this._fromDocument(msg.execute().getBody());\n\t\t}\n\n\t\ttry {\n\t\t\tobj = JSON.parse(obj);\n\t\t} catch (ex) {\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Team._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\tlet _obj = {\n\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))\n\t\t\t};\n\t\t\t_obj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(this))] = obj;\n\t\t\tobj = _obj;\n\t\t}\n\t\treturn this._fromDocument(obj);\n\t}\n\telse if (typeof(obj) === 'object') {\n\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\treturn this._fromGlideRecord(obj);\n\t\t} else if (obj._fromDocument) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Team._fromDocument(): \" + \"redundent call\");\n\t\t\treturn obj;\n\t\t} else if (Array.isArray(obj)) {\n\t\t\treturn obj.map(function(o) {\n\t\t\t\treturn new shs_arbfw_Team()._fromDocument(o)\n\t\t\t});\n\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(obj))));\n\n\t\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Team._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.team_Projects) !== 'undefined') this.team_Projects(new shs_arbfw_Project()._fromDocument(obj.team_Projects));\n\n\t\t\t\tif (typeof(obj.team_Team_Members) !== 'undefined') this.team_Team_Members(new shs_arbfw_Team_Member()._fromDocument(obj.team_Team_Members));\n\n\t\t\t} else { // if(obj.constructor.name==\"Team\"){\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Team._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t}\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Team._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\treturn null;\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Team._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Team._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Team._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\treturn this;\n}\n\n_insertAssert() {\n\treturn true;\n}\n\n_updateAssert() {\n\treturn true;\n}\n\n_storeAssert() {\n\treturn true;\n}\n\n_findAssert() {\n\treturn true;\n}\n\n_new(c) {\n\n\treturn new shs_arbfw_Platform._new(c);\n\n}\n\n_toDocument(arFields) {\n\n\tlet ret = undefined || {};\n\n\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tret.active = this.active();\n\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tret.enabled = this.enabled();\n\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tret.code = this.code();\n\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tret.order = this.order();\n\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tret.date = this.date();\n\n\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tret.name = this.name();\n\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tret.remark = this.remark();\n\n\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t}\n\n\tif (typeof(this.team_Projects()) !== 'undefined') ret.team_Projects = this.team_Projects().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (typeof(this.team_Team_Members()) !== 'undefined') ret.team_Team_Members = this.team_Team_Members().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\treturn !arFields.find(function(_k) {\n\t\t\treturn _k == k;\n\t\t});\n\t}).forEach(function(k) {\n\t\tdelete ret[k];\n\t});\n\n\treturn ret;\n}\n\n_unique(keys, ret) {\n\tret = ret || new shs_arbfw_Team();\n\n\tundefined\n\n\t// if(this.Id) ret.Id = this.Id;\n\tif (!keys) {\n\n\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t} else {\n\n\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t}\n\n\treturn ret;\n}\n\n_query(gq) {\n\tlet arFields = Object.keys(global.Schema.of('x_1790593_arboard_team', ['*'])['x_1790593_arboard_team']);\n\n\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('x_1790593_arboard_team');\n\n\tundefined\n\n\tlet idf = ((function(r) {\n\t\tlet ret = 'sys_id';\n\t\tif (typeof(r.__idField) === 'function') {\n\t\t\tret = r.__idField();\n\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\tret = r.__idField || this.__idField();\n\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\tret = 'Id';\n\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\tret = 'sys_id';\n\t\t}\n\t\treturn ret;\n\t})(this));\n\tif (idf == 'Id') idf = 'sys_id';\n\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tlet coop = this._active_coop || '=';\n\n\t\tlet v = this.active();\n\n\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Team._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tlet coop = this._enabled_coop || '=';\n\n\t\tlet v = this.enabled();\n\n\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Team._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tlet coop = this._code_coop || '=';\n\n\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.code();\n\n\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Team._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tlet coop = this._order_coop || '=';\n\n\t\tlet v = this.order();\n\n\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Team._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tlet coop = this._date_coop || '=';\n\n\t\tlet v = this.date();\n\n\t\tif (v) {\n\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t}\n\n\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Team._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tlet coop = this._name_coop || '=';\n\n\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.name();\n\n\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Team._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tlet coop = this._remark_coop || '=';\n\n\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.remark();\n\n\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Team._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Team._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\treturn this._queryGQ;\n}\n\n_save(obj) {\n\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\treturn new shs_arbfw_Team()._save(o)\n\t});\n\n\tlet _obj = {};\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Team._save(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\tObject.keys(obj).filter(function(k) {\n\t\treturn Object.keys(global.Schema.of('x_1790593_arboard_team', ['*'])['x_1790593_arboard_team']).filter(function(_k) {\n\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t}).indexOf(k.toLowerCase()) >= 0\n\t}).forEach(function(k) {\n\t\t_obj[k.toLowerCase()] = obj[k]\n\t});\n\n\tObject.keys(_obj).forEach(function(k) {\n\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Team._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tdelete _obj[k];\n\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Team._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t}\n\t});\n\n\tlet _this = null;\n\tif (obj.__keys) {\n\t\tlet kObj = {};\n\t\tkObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(_obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))));\n\t\tobj.__keys.forEach(function(k) {\n\t\t\tkObj[k] = _obj[k]\n\t\t});\n\t\t_this = new shs_arbfw_Team()._fromDocument(kObj);\n\t} else {\n\t\t_this = new shs_arbfw_Team()._fromDocument(_obj)._unique();\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Team._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\tdelete _obj.__idField;\n\n\ttry {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Team._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\tObject.keys(_obj).filter(function(k) {\n\t\t\treturn k.toLowerCase() != k;\n\t\t}).forEach(function(k) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Team._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tvar lk = k.toLowerCase();\n\t\t\t_obj[lk] = _obj[k];\n\t\t\tdelete _obj[k];\n\t\t});\n\n\t\tlet gq = new global.GlideQuery(obj.__type || 'x_1790593_arboard_team');\n\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Team._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\tif (_obj.sys_id) {\n\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t} else {\n\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\tgq = gq.insert(_obj);\n\t\t}\n\t\tlet _fObj = {};\n\t\t_fObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))));\n\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('x_1790593_arboard_team', ['*'])['x_1790593_arboard_team']))));\n\t} catch (ex) {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Team._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Team._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\treturn this;\n\t}\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Team._save(): \" + \"obj.team_Projects: \" + JSON.stringify(obj.team_Projects, null, 4));\n\tif (Array.isArray(obj.team_Projects)) this.team_Projects(obj.team_Projects.map(function(ta) {\n\t\treturn new shs_arbfw_Project()._save(ta)\n\t}));\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Team._save(): \" + \"obj.team_Team_Members: \" + JSON.stringify(obj.team_Team_Members, null, 4));\n\tif (Array.isArray(obj.team_Team_Members)) this.team_Team_Members(obj.team_Team_Members.map(function(ta) {\n\t\treturn new shs_arbfw_Team_Member()._save(ta)\n\t}));\n\n\treturn this;\n}\n\n/************* Team.store() **********************/\nstore(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Team.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Team.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Team.store(): \" + \"executing locally \");\n\n\t\t// store locally\n\t\treturn this._save(this._toDocument());\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Team.findAll() **********************/\nfindAll(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Team.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Team.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Team.findAll(): \" + \"executing locally \");\n\n\t\t// findAll locally\n\t\tlet gr = new GlideRecord('x_1790593_arboard_team');\n\t\tgr.addEncodedQuery(this._toEQuery());\n\t\treturn this._fromDocument(gr);\n\n\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('x_1790593_arboard_team', ['*'])['x_1790593_arboard_team'])));\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Team.find() **********************/\nfind(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Team.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Team.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Team.find(): \" + \"executing locally \");\n\n\t\tlet ret = this.findAll();\n\t\treturn ret.length ? ret[0] : null;\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"scriptFile_Script_Compatibilitys":[{"active":true,"enabled":true}],"client_callable":true,"sys_name":"shs_arbfw_Role","api_name":"x_1790593_arboard.shs_arbfw_Role","name":"shs_arbfw_Role","script":"class shs_arbfw_Role extends global.AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"\";\n\t\tthis.__type = \"shs_arbfw_Role\";\n\t\tthis.__alias = \"shs_arbfw\";\n\t\tthis.__scope = \"shs_arbfw\";\n\t}\n\n\t/************* Role.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Role.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Role.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Role.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Role.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//(typeof(window)!=='undefined'?alert:gs.info)(\"Role.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Role.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Role.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Role.role_Effort_Estimates GETTERS AND SETTERS **********************/\n\trole_Effort_Estimates(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._role_Effort_Estimates = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._role_Effort_Estimates_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._role_Effort_Estimates;\n\t\t}\n\t}\n\n\t/************* Role.role_Team_Members GETTERS AND SETTERS **********************/\n\trole_Team_Members(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._role_Team_Members = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._role_Team_Members_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._role_Team_Members;\n\t\t}\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = undefined || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\t(this.role_Effort_Estimates() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYEffort_Estimate.role,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(this.role_Team_Members() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYTeam_Member.role,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Role._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn new shs_arbfw_Role()._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Role._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Role._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromGlideRecord(obj) {\n\t\tif (!obj) return null;\n\t\tif (obj.isValidRecord()) {\n\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Role\" != 'ecc_queue' && obj.source == \"shs_arbfw_Role\") {\n\t\t\t\tobj.state = \"processing\";\n\t\t\t\tobj.update();\n\n\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\tresp.queue = 'output';\n\t\t\t\tresp.agent = obj.agent;\n\t\t\t\tresp.topic = obj.topic;\n\t\t\t\tresp.name = obj.name;\n\t\t\t\tresp.source = obj.source;\n\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\tlet ret = new shs_arbfw_Role()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t});\n\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t}\n\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\tresp.insert();\n\n\t\t\t\tobj.state = \"processed\";\n\t\t\t\tobj.update();\n\t\t\t\treturn resp;\n\t\t\t} else {\n\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tobj.query();\n\t\t\tlet grRet = [];\n\t\t\twhile (obj.next()) grRet.push(this._fromGlideRecord(obj));\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Role._fromGlideRecord(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\treturn grRet;\n\t\t}\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\tundefined\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_Role()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\tif (/((([A-Za-z]{3,9}:(?:/ / ) ? )( ? : [-;: &= +$, w] + @) ? [A - Za - z0 - 9. - ] + | ( ? : www. | [-;: &= +$, w] + @)[A - Za - z0 - 9. - ] + )(( ? : /[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)/g.test(obj)) {\n\t\t\tvar msg = new sn_ws.RESTMessageV2();\n\t\t\tmsg.setEndpoint(obj);\n\t\t\tmsg.setRequestHeader('Content-Type', 'application/json');\n\t\t\tmsg.setHttpMethod('get');\n\t\t\treturn this._fromDocument(msg.execute().getBody());\n\t\t}\n\n\t\ttry {\n\t\t\tobj = JSON.parse(obj);\n\t\t} catch (ex) {\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Role._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\tlet _obj = {\n\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))\n\t\t\t};\n\t\t\t_obj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(this))] = obj;\n\t\t\tobj = _obj;\n\t\t}\n\t\treturn this._fromDocument(obj);\n\t}\n\telse if (typeof(obj) === 'object') {\n\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\treturn this._fromGlideRecord(obj);\n\t\t} else if (obj._fromDocument) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Role._fromDocument(): \" + \"redundent call\");\n\t\t\treturn obj;\n\t\t} else if (Array.isArray(obj)) {\n\t\t\treturn obj.map(function(o) {\n\t\t\t\treturn new shs_arbfw_Role()._fromDocument(o)\n\t\t\t});\n\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(obj))));\n\n\t\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Role._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.role_Effort_Estimates) !== 'undefined') this.role_Effort_Estimates(new shs_arbfw_Effort_Estimate()._fromDocument(obj.role_Effort_Estimates));\n\n\t\t\t\tif (typeof(obj.role_Team_Members) !== 'undefined') this.role_Team_Members(new shs_arbfw_Team_Member()._fromDocument(obj.role_Team_Members));\n\n\t\t\t} else { // if(obj.constructor.name==\"Role\"){\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Role._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t}\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Role._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\treturn null;\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Role._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Role._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Role._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\treturn this;\n}\n\n_insertAssert() {\n\treturn true;\n}\n\n_updateAssert() {\n\treturn true;\n}\n\n_storeAssert() {\n\treturn true;\n}\n\n_findAssert() {\n\treturn true;\n}\n\n_new(c) {\n\n\treturn new shs_arbfw_Platform._new(c);\n\n}\n\n_toDocument(arFields) {\n\n\tlet ret = undefined || {};\n\n\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tret.active = this.active();\n\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tret.enabled = this.enabled();\n\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tret.code = this.code();\n\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tret.order = this.order();\n\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tret.date = this.date();\n\n\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tret.name = this.name();\n\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tret.remark = this.remark();\n\n\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t}\n\n\tif (typeof(this.role_Effort_Estimates()) !== 'undefined') ret.role_Effort_Estimates = this.role_Effort_Estimates().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (typeof(this.role_Team_Members()) !== 'undefined') ret.role_Team_Members = this.role_Team_Members().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\treturn !arFields.find(function(_k) {\n\t\t\treturn _k == k;\n\t\t});\n\t}).forEach(function(k) {\n\t\tdelete ret[k];\n\t});\n\n\treturn ret;\n}\n\n_unique(keys, ret) {\n\tret = ret || new shs_arbfw_Role();\n\n\tundefined\n\n\t// if(this.Id) ret.Id = this.Id;\n\tif (!keys) {\n\n\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t} else {\n\n\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t}\n\n\treturn ret;\n}\n\n_query(gq) {\n\tlet arFields = Object.keys(global.Schema.of('x_1790593_arboard_role', ['*'])['x_1790593_arboard_role']);\n\n\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('x_1790593_arboard_role');\n\n\tundefined\n\n\tlet idf = ((function(r) {\n\t\tlet ret = 'sys_id';\n\t\tif (typeof(r.__idField) === 'function') {\n\t\t\tret = r.__idField();\n\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\tret = r.__idField || this.__idField();\n\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\tret = 'Id';\n\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\tret = 'sys_id';\n\t\t}\n\t\treturn ret;\n\t})(this));\n\tif (idf == 'Id') idf = 'sys_id';\n\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tlet coop = this._active_coop || '=';\n\n\t\tlet v = this.active();\n\n\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Role._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tlet coop = this._enabled_coop || '=';\n\n\t\tlet v = this.enabled();\n\n\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Role._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tlet coop = this._code_coop || '=';\n\n\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.code();\n\n\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Role._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tlet coop = this._order_coop || '=';\n\n\t\tlet v = this.order();\n\n\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Role._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tlet coop = this._date_coop || '=';\n\n\t\tlet v = this.date();\n\n\t\tif (v) {\n\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t}\n\n\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Role._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tlet coop = this._name_coop || '=';\n\n\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.name();\n\n\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Role._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tlet coop = this._remark_coop || '=';\n\n\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.remark();\n\n\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Role._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Role._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\treturn this._queryGQ;\n}\n\n_save(obj) {\n\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\treturn new shs_arbfw_Role()._save(o)\n\t});\n\n\tlet _obj = {};\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Role._save(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\tObject.keys(obj).filter(function(k) {\n\t\treturn Object.keys(global.Schema.of('x_1790593_arboard_role', ['*'])['x_1790593_arboard_role']).filter(function(_k) {\n\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t}).indexOf(k.toLowerCase()) >= 0\n\t}).forEach(function(k) {\n\t\t_obj[k.toLowerCase()] = obj[k]\n\t});\n\n\tObject.keys(_obj).forEach(function(k) {\n\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Role._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tdelete _obj[k];\n\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Role._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t}\n\t});\n\n\tlet _this = null;\n\tif (obj.__keys) {\n\t\tlet kObj = {};\n\t\tkObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(_obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))));\n\t\tobj.__keys.forEach(function(k) {\n\t\t\tkObj[k] = _obj[k]\n\t\t});\n\t\t_this = new shs_arbfw_Role()._fromDocument(kObj);\n\t} else {\n\t\t_this = new shs_arbfw_Role()._fromDocument(_obj)._unique();\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Role._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\tdelete _obj.__idField;\n\n\ttry {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Role._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\tObject.keys(_obj).filter(function(k) {\n\t\t\treturn k.toLowerCase() != k;\n\t\t}).forEach(function(k) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Role._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tvar lk = k.toLowerCase();\n\t\t\t_obj[lk] = _obj[k];\n\t\t\tdelete _obj[k];\n\t\t});\n\n\t\tlet gq = new global.GlideQuery(obj.__type || 'x_1790593_arboard_role');\n\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Role._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\tif (_obj.sys_id) {\n\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t} else {\n\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\tgq = gq.insert(_obj);\n\t\t}\n\t\tlet _fObj = {};\n\t\t_fObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))));\n\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('x_1790593_arboard_role', ['*'])['x_1790593_arboard_role']))));\n\t} catch (ex) {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Role._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Role._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\treturn this;\n\t}\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Role._save(): \" + \"obj.role_Effort_Estimates: \" + JSON.stringify(obj.role_Effort_Estimates, null, 4));\n\tif (Array.isArray(obj.role_Effort_Estimates)) this.role_Effort_Estimates(obj.role_Effort_Estimates.map(function(ta) {\n\t\treturn new shs_arbfw_Effort_Estimate()._save(ta)\n\t}));\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Role._save(): \" + \"obj.role_Team_Members: \" + JSON.stringify(obj.role_Team_Members, null, 4));\n\tif (Array.isArray(obj.role_Team_Members)) this.role_Team_Members(obj.role_Team_Members.map(function(ta) {\n\t\treturn new shs_arbfw_Team_Member()._save(ta)\n\t}));\n\n\treturn this;\n}\n\n/************* Role.store() **********************/\nstore(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Role.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Role.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Role.store(): \" + \"executing locally \");\n\n\t\t// store locally\n\t\treturn this._save(this._toDocument());\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Role.findAll() **********************/\nfindAll(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Role.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Role.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Role.findAll(): \" + \"executing locally \");\n\n\t\t// findAll locally\n\t\tlet gr = new GlideRecord('x_1790593_arboard_role');\n\t\tgr.addEncodedQuery(this._toEQuery());\n\t\treturn this._fromDocument(gr);\n\n\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('x_1790593_arboard_role', ['*'])['x_1790593_arboard_role'])));\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Role.find() **********************/\nfind(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Role.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Role.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Role.find(): \" + \"executing locally \");\n\n\t\tlet ret = this.findAll();\n\t\treturn ret.length ? ret[0] : null;\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"scriptFile_Script_Compatibilitys":[{"active":true,"enabled":true}],"client_callable":true,"sys_name":"shs_arbfw_appd_Application","api_name":"x_1790593_arboard.shs_arbfw_appd_Application","name":"shs_arbfw_appd_Application","script":"class shs_arbfw_appd_Application extends global.AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"Application Designer\";\n\t\tthis.__type = \"shs_arbfw_appd_Application\";\n\t\tthis.__alias = \"shs_arbfw_appd\";\n\t\tthis.__scope = \"shs_arbfw\";\n\t}\n\n\t/************* Application.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Application.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Application.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Application.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Application.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//(typeof(window)!=='undefined'?alert:gs.info)(\"Application.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Application.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Application.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Application.version GETTERS AND SETTERS **********************/\n\tversion(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._version = v;\n\t\t\tthis._version_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._version;\n\t\t}\n\t}\n\n\t/************* Application.application_Rollback_Contexts GETTERS AND SETTERS **********************/\n\tapplication_Rollback_Contexts(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._application_Rollback_Contexts = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._application_Rollback_Contexts_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._application_Rollback_Contexts;\n\t\t}\n\t}\n\n\t/************* Application.application_Script_Files GETTERS AND SETTERS **********************/\n\tapplication_Script_Files(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._application_Script_Files = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._application_Script_Files_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._application_Script_Files;\n\t\t}\n\t}\n\n\t/************* Application.application_Fix_Scripts GETTERS AND SETTERS **********************/\n\tapplication_Fix_Scripts(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._application_Fix_Scripts = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._application_Fix_Scripts_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._application_Fix_Scripts;\n\t\t}\n\t}\n\n\t/************* Application.application_Tables GETTERS AND SETTERS **********************/\n\tapplication_Tables(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._application_Tables = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._application_Tables_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._application_Tables;\n\t\t}\n\t}\n\n\t/************* Application.application_Save_Subscriptions GETTERS AND SETTERS **********************/\n\tapplication_Save_Subscriptions(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._application_Save_Subscriptions = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._application_Save_Subscriptions_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._application_Save_Subscriptions;\n\t\t}\n\t}\n\n\t/************* Application.application_Flows GETTERS AND SETTERS **********************/\n\tapplication_Flows(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._application_Flows = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._application_Flows_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._application_Flows;\n\t\t}\n\t}\n\n\t/************* Application.application_Field_Labels GETTERS AND SETTERS **********************/\n\tapplication_Field_Labels(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._application_Field_Labels = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._application_Field_Labels_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._application_Field_Labels;\n\t\t}\n\t}\n\n\t/************* Application.application_Flow_Logics GETTERS AND SETTERS **********************/\n\tapplication_Flow_Logics(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._application_Flow_Logics = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._application_Flow_Logics_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._application_Flow_Logics;\n\t\t}\n\t}\n\n\t/************* Application.application_Flow_Instances GETTERS AND SETTERS **********************/\n\tapplication_Flow_Instances(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._application_Flow_Instances = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._application_Flow_Instances_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._application_Flow_Instances;\n\t\t}\n\t}\n\n\t/************* Application.application_Action_Instances GETTERS AND SETTERS **********************/\n\tapplication_Action_Instances(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._application_Action_Instances = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._application_Action_Instances_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._application_Action_Instances;\n\t\t}\n\t}\n\n\t/************* Application.application_Action_Types GETTERS AND SETTERS **********************/\n\tapplication_Action_Types(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._application_Action_Types = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._application_Action_Types_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._application_Action_Types;\n\t\t}\n\t}\n\n\t/************* Application.application_Flow_Snapshots GETTERS AND SETTERS **********************/\n\tapplication_Flow_Snapshots(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._application_Flow_Snapshots = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._application_Flow_Snapshots_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._application_Flow_Snapshots;\n\t\t}\n\t}\n\n\t/************* Application.application_Pill_Compounds GETTERS AND SETTERS **********************/\n\tapplication_Pill_Compounds(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._application_Pill_Compounds = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._application_Pill_Compounds_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._application_Pill_Compounds;\n\t\t}\n\t}\n\n\t/************* Application.application_Security_Controls GETTERS AND SETTERS **********************/\n\tapplication_Security_Controls(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._application_Security_Controls = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._application_Security_Controls_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._application_Security_Controls;\n\t\t}\n\t}\n\n\t/************* Application.application_Security_Types GETTERS AND SETTERS **********************/\n\tapplication_Security_Types(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._application_Security_Types = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._application_Security_Types_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._application_Security_Types;\n\t\t}\n\t}\n\n\t/************* Application.application_Security_Operations GETTERS AND SETTERS **********************/\n\tapplication_Security_Operations(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._application_Security_Operations = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._application_Security_Operations_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._application_Security_Operations;\n\t\t}\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = undefined || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\tif (this._version) ret += '^' + sPath + 'version' + (this._version_coop || '=') + this.version();\n\n\t\t(this.application_Rollback_Contexts() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYRollback_Context.application,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(this.application_Script_Files() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYScript_File.application,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(this.application_Fix_Scripts() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYFix_Script.application,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(this.application_Tables() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYTable.application,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(this.application_Save_Subscriptions() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYSave_Subscription.application,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(this.application_Flows() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYFlow.application,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(this.application_Field_Labels() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYField_Label.application,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(this.application_Flow_Logics() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYFlow_Logic.application,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(this.application_Flow_Instances() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYFlow_Instance.application,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(this.application_Action_Instances() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYAction_Instance.application,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(this.application_Action_Types() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYAction_Type.application,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(this.application_Flow_Snapshots() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYFlow_Snapshot.application,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(this.application_Pill_Compounds() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYPill_Compound.application,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(this.application_Security_Controls() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYSecurity_Control.application,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(this.application_Security_Types() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYSecurity_Type.application,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(this.application_Security_Operations() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYSecurity_Operation.application,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Application._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn new shs_arbfw_appd_Application()._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Application._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Application._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromGlideRecord(obj) {\n\t\tif (!obj) return null;\n\t\tif (obj.isValidRecord()) {\n\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Application\" != 'ecc_queue' && obj.source == \"shs_arbfw_appd_Application\") {\n\t\t\t\tobj.state = \"processing\";\n\t\t\t\tobj.update();\n\n\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\tresp.queue = 'output';\n\t\t\t\tresp.agent = obj.agent;\n\t\t\t\tresp.topic = obj.topic;\n\t\t\t\tresp.name = obj.name;\n\t\t\t\tresp.source = obj.source;\n\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\tlet ret = new shs_arbfw_appd_Application()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t});\n\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t}\n\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\tresp.insert();\n\n\t\t\t\tobj.state = \"processed\";\n\t\t\t\tobj.update();\n\t\t\t\treturn resp;\n\t\t\t} else {\n\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\tversion: obj.getValue(\"version\"),\n\n\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tobj.query();\n\t\t\tlet grRet = [];\n\t\t\twhile (obj.next()) grRet.push(this._fromGlideRecord(obj));\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Application._fromGlideRecord(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\treturn grRet;\n\t\t}\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\tundefined\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_appd_Application()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\tif (/((([A-Za-z]{3,9}:(?:/ / ) ? )( ? : [-;: &= +$, w] + @) ? [A - Za - z0 - 9. - ] + | ( ? : www. | [-;: &= +$, w] + @)[A - Za - z0 - 9. - ] + )(( ? : /[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)/g.test(obj)) {\n\t\t\tvar msg = new sn_ws.RESTMessageV2();\n\t\t\tmsg.setEndpoint(obj);\n\t\t\tmsg.setRequestHeader('Content-Type', 'application/json');\n\t\t\tmsg.setHttpMethod('get');\n\t\t\treturn this._fromDocument(msg.execute().getBody());\n\t\t}\n\n\t\ttry {\n\t\t\tobj = JSON.parse(obj);\n\t\t} catch (ex) {\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Application._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\tlet _obj = {\n\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))\n\t\t\t};\n\t\t\t_obj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(this))] = obj;\n\t\t\tobj = _obj;\n\t\t}\n\t\treturn this._fromDocument(obj);\n\t}\n\telse if (typeof(obj) === 'object') {\n\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\treturn this._fromGlideRecord(obj);\n\t\t} else if (obj._fromDocument) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Application._fromDocument(): \" + \"redundent call\");\n\t\t\treturn obj;\n\t\t} else if (Array.isArray(obj)) {\n\t\t\treturn obj.map(function(o) {\n\t\t\t\treturn new shs_arbfw_appd_Application()._fromDocument(o)\n\t\t\t});\n\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(obj))));\n\n\t\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Application._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.version) !== 'undefined') {\n\n\t\t\t\t\tthis.version(obj.version);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.application_Rollback_Contexts) !== 'undefined') this.application_Rollback_Contexts(new shs_arbfw_appd_Rollback_Context()._fromDocument(obj.application_Rollback_Contexts));\n\n\t\t\t\tif (typeof(obj.application_Script_Files) !== 'undefined') this.application_Script_Files(new shs_arbfw_appd_Script_File()._fromDocument(obj.application_Script_Files));\n\n\t\t\t\tif (typeof(obj.application_Fix_Scripts) !== 'undefined') this.application_Fix_Scripts(new shs_arbfw_appd_Fix_Script()._fromDocument(obj.application_Fix_Scripts));\n\n\t\t\t\tif (typeof(obj.application_Tables) !== 'undefined') this.application_Tables(new shs_arbfw_appd_Table()._fromDocument(obj.application_Tables));\n\n\t\t\t\tif (typeof(obj.application_Save_Subscriptions) !== 'undefined') this.application_Save_Subscriptions(new shs_arbfw_appd_Save_Subscription()._fromDocument(obj.application_Save_Subscriptions));\n\n\t\t\t\tif (typeof(obj.application_Flows) !== 'undefined') this.application_Flows(new shs_arbfw_appd_Flow()._fromDocument(obj.application_Flows));\n\n\t\t\t\tif (typeof(obj.application_Field_Labels) !== 'undefined') this.application_Field_Labels(new shs_arbfw_appd_Field_Label()._fromDocument(obj.application_Field_Labels));\n\n\t\t\t\tif (typeof(obj.application_Flow_Logics) !== 'undefined') this.application_Flow_Logics(new shs_arbfw_appd_Flow_Logic()._fromDocument(obj.application_Flow_Logics));\n\n\t\t\t\tif (typeof(obj.application_Flow_Instances) !== 'undefined') this.application_Flow_Instances(new shs_arbfw_appd_Flow_Instance()._fromDocument(obj.application_Flow_Instances));\n\n\t\t\t\tif (typeof(obj.application_Action_Instances) !== 'undefined') this.application_Action_Instances(new shs_arbfw_appd_Action_Instance()._fromDocument(obj.application_Action_Instances));\n\n\t\t\t\tif (typeof(obj.application_Action_Types) !== 'undefined') this.application_Action_Types(new shs_arbfw_appd_Action_Type()._fromDocument(obj.application_Action_Types));\n\n\t\t\t\tif (typeof(obj.application_Flow_Snapshots) !== 'undefined') this.application_Flow_Snapshots(new shs_arbfw_appd_Flow_Snapshot()._fromDocument(obj.application_Flow_Snapshots));\n\n\t\t\t\tif (typeof(obj.application_Pill_Compounds) !== 'undefined') this.application_Pill_Compounds(new shs_arbfw_appd_Pill_Compound()._fromDocument(obj.application_Pill_Compounds));\n\n\t\t\t\tif (typeof(obj.application_Security_Controls) !== 'undefined') this.application_Security_Controls(new shs_arbfw_appd_Security_Control()._fromDocument(obj.application_Security_Controls));\n\n\t\t\t\tif (typeof(obj.application_Security_Types) !== 'undefined') this.application_Security_Types(new shs_arbfw_appd_Security_Type()._fromDocument(obj.application_Security_Types));\n\n\t\t\t\tif (typeof(obj.application_Security_Operations) !== 'undefined') this.application_Security_Operations(new shs_arbfw_appd_Security_Operation()._fromDocument(obj.application_Security_Operations));\n\n\t\t\t} else { // if(obj.constructor.name==\"Application\"){\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Application._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t}\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Application._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\treturn null;\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Application._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Application._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Application._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\treturn this;\n}\n\n_insertAssert() {\n\treturn true;\n}\n\n_updateAssert() {\n\treturn true;\n}\n\n_storeAssert() {\n\treturn true;\n}\n\n_findAssert() {\n\treturn true;\n}\n\n_new(c) {\n\n\treturn new shs_arbfw_appd_Platform._new(c);\n\n}\n\n_toDocument(arFields) {\n\n\tlet ret = undefined || {};\n\n\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tret.active = this.active();\n\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tret.enabled = this.enabled();\n\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tret.code = this.code();\n\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tret.order = this.order();\n\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tret.date = this.date();\n\n\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tret.name = this.name();\n\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tret.remark = this.remark();\n\n\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t}\n\n\tif (typeof(this._version) !== 'undefined') {\n\t\tret.version = this.version();\n\n\t}\n\n\tif (typeof(this.application_Rollback_Contexts()) !== 'undefined') ret.application_Rollback_Contexts = this.application_Rollback_Contexts().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (typeof(this.application_Script_Files()) !== 'undefined') ret.application_Script_Files = this.application_Script_Files().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (typeof(this.application_Fix_Scripts()) !== 'undefined') ret.application_Fix_Scripts = this.application_Fix_Scripts().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (typeof(this.application_Tables()) !== 'undefined') ret.application_Tables = this.application_Tables().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (typeof(this.application_Save_Subscriptions()) !== 'undefined') ret.application_Save_Subscriptions = this.application_Save_Subscriptions().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (typeof(this.application_Flows()) !== 'undefined') ret.application_Flows = this.application_Flows().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (typeof(this.application_Field_Labels()) !== 'undefined') ret.application_Field_Labels = this.application_Field_Labels().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (typeof(this.application_Flow_Logics()) !== 'undefined') ret.application_Flow_Logics = this.application_Flow_Logics().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (typeof(this.application_Flow_Instances()) !== 'undefined') ret.application_Flow_Instances = this.application_Flow_Instances().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (typeof(this.application_Action_Instances()) !== 'undefined') ret.application_Action_Instances = this.application_Action_Instances().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (typeof(this.application_Action_Types()) !== 'undefined') ret.application_Action_Types = this.application_Action_Types().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (typeof(this.application_Flow_Snapshots()) !== 'undefined') ret.application_Flow_Snapshots = this.application_Flow_Snapshots().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (typeof(this.application_Pill_Compounds()) !== 'undefined') ret.application_Pill_Compounds = this.application_Pill_Compounds().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (typeof(this.application_Security_Controls()) !== 'undefined') ret.application_Security_Controls = this.application_Security_Controls().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (typeof(this.application_Security_Types()) !== 'undefined') ret.application_Security_Types = this.application_Security_Types().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (typeof(this.application_Security_Operations()) !== 'undefined') ret.application_Security_Operations = this.application_Security_Operations().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\treturn !arFields.find(function(_k) {\n\t\t\treturn _k == k;\n\t\t});\n\t}).forEach(function(k) {\n\t\tdelete ret[k];\n\t});\n\n\treturn ret;\n}\n\n_unique(keys, ret) {\n\tret = ret || new shs_arbfw_appd_Application();\n\n\tundefined\n\n\t// if(this.Id) ret.Id = this.Id;\n\tif (!keys) {\n\n\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t} else {\n\n\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t\tif (keys.indexOf(\"version\") >= 0 && typeof(this.version()) !== 'undefined') ret.version(this.version());\n\n\t}\n\n\treturn ret;\n}\n\n_query(gq) {\n\tlet arFields = Object.keys(global.Schema.of('sys_scope', ['*'])['sys_scope']);\n\n\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('sys_scope');\n\n\tundefined\n\n\tlet idf = ((function(r) {\n\t\tlet ret = 'sys_id';\n\t\tif (typeof(r.__idField) === 'function') {\n\t\t\tret = r.__idField();\n\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\tret = r.__idField || this.__idField();\n\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\tret = 'Id';\n\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\tret = 'sys_id';\n\t\t}\n\t\treturn ret;\n\t})(this));\n\tif (idf == 'Id') idf = 'sys_id';\n\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tlet coop = this._active_coop || '=';\n\n\t\tlet v = this.active();\n\n\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Application._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tlet coop = this._enabled_coop || '=';\n\n\t\tlet v = this.enabled();\n\n\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Application._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tlet coop = this._code_coop || '=';\n\n\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.code();\n\n\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Application._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tlet coop = this._order_coop || '=';\n\n\t\tlet v = this.order();\n\n\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Application._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tlet coop = this._date_coop || '=';\n\n\t\tlet v = this.date();\n\n\t\tif (v) {\n\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t}\n\n\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Application._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tlet coop = this._name_coop || '=';\n\n\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.name();\n\n\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Application._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tlet coop = this._remark_coop || '=';\n\n\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.remark();\n\n\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Application._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._version) !== 'undefined') {\n\t\tlet coop = this._version_coop || '=';\n\n\t\tif (!this._version_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.version();\n\n\t\tif (arFields.indexOf('version') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Application._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('version');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('version');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('version', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Application._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\treturn this._queryGQ;\n}\n\n_save(obj) {\n\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\treturn new shs_arbfw_appd_Application()._save(o)\n\t});\n\n\tlet _obj = {};\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Application._save(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\tObject.keys(obj).filter(function(k) {\n\t\treturn Object.keys(global.Schema.of('sys_scope', ['*'])['sys_scope']).filter(function(_k) {\n\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t}).indexOf(k.toLowerCase()) >= 0\n\t}).forEach(function(k) {\n\t\t_obj[k.toLowerCase()] = obj[k]\n\t});\n\n\tObject.keys(_obj).forEach(function(k) {\n\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Application._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tdelete _obj[k];\n\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Application._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t}\n\t});\n\n\tlet _this = null;\n\tif (obj.__keys) {\n\t\tlet kObj = {};\n\t\tkObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(_obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))));\n\t\tobj.__keys.forEach(function(k) {\n\t\t\tkObj[k] = _obj[k]\n\t\t});\n\t\t_this = new shs_arbfw_appd_Application()._fromDocument(kObj);\n\t} else {\n\t\t_this = new shs_arbfw_appd_Application()._fromDocument(_obj)._unique();\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Application._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\tdelete _obj.__idField;\n\n\ttry {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Application._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\tObject.keys(_obj).filter(function(k) {\n\t\t\treturn k.toLowerCase() != k;\n\t\t}).forEach(function(k) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Application._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tvar lk = k.toLowerCase();\n\t\t\t_obj[lk] = _obj[k];\n\t\t\tdelete _obj[k];\n\t\t});\n\n\t\tlet gq = new global.GlideQuery(obj.__type || 'sys_scope');\n\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Application._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\tif (_obj.sys_id) {\n\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t} else {\n\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\tgq = gq.insert(_obj);\n\t\t}\n\t\tlet _fObj = {};\n\t\t_fObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))));\n\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('sys_scope', ['*'])['sys_scope']))));\n\t} catch (ex) {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Application._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Application._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\treturn this;\n\t}\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Application._save(): \" + \"obj.application_Rollback_Contexts: \" + JSON.stringify(obj.application_Rollback_Contexts, null, 4));\n\tif (Array.isArray(obj.application_Rollback_Contexts)) this.application_Rollback_Contexts(obj.application_Rollback_Contexts.map(function(ta) {\n\t\treturn new shs_arbfw_appd_Rollback_Context()._save(ta)\n\t}));\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Application._save(): \" + \"obj.application_Script_Files: \" + JSON.stringify(obj.application_Script_Files, null, 4));\n\tif (Array.isArray(obj.application_Script_Files)) this.application_Script_Files(obj.application_Script_Files.map(function(ta) {\n\t\treturn new shs_arbfw_appd_Script_File()._save(ta)\n\t}));\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Application._save(): \" + \"obj.application_Fix_Scripts: \" + JSON.stringify(obj.application_Fix_Scripts, null, 4));\n\tif (Array.isArray(obj.application_Fix_Scripts)) this.application_Fix_Scripts(obj.application_Fix_Scripts.map(function(ta) {\n\t\treturn new shs_arbfw_appd_Fix_Script()._save(ta)\n\t}));\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Application._save(): \" + \"obj.application_Tables: \" + JSON.stringify(obj.application_Tables, null, 4));\n\tif (Array.isArray(obj.application_Tables)) this.application_Tables(obj.application_Tables.map(function(ta) {\n\t\treturn new shs_arbfw_appd_Table()._save(ta)\n\t}));\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Application._save(): \" + \"obj.application_Save_Subscriptions: \" + JSON.stringify(obj.application_Save_Subscriptions, null, 4));\n\tif (Array.isArray(obj.application_Save_Subscriptions)) this.application_Save_Subscriptions(obj.application_Save_Subscriptions.map(function(ta) {\n\t\treturn new shs_arbfw_appd_Save_Subscription()._save(ta)\n\t}));\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Application._save(): \" + \"obj.application_Flows: \" + JSON.stringify(obj.application_Flows, null, 4));\n\tif (Array.isArray(obj.application_Flows)) this.application_Flows(obj.application_Flows.map(function(ta) {\n\t\treturn new shs_arbfw_appd_Flow()._save(ta)\n\t}));\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Application._save(): \" + \"obj.application_Field_Labels: \" + JSON.stringify(obj.application_Field_Labels, null, 4));\n\tif (Array.isArray(obj.application_Field_Labels)) this.application_Field_Labels(obj.application_Field_Labels.map(function(ta) {\n\t\treturn new shs_arbfw_appd_Field_Label()._save(ta)\n\t}));\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Application._save(): \" + \"obj.application_Flow_Logics: \" + JSON.stringify(obj.application_Flow_Logics, null, 4));\n\tif (Array.isArray(obj.application_Flow_Logics)) this.application_Flow_Logics(obj.application_Flow_Logics.map(function(ta) {\n\t\treturn new shs_arbfw_appd_Flow_Logic()._save(ta)\n\t}));\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Application._save(): \" + \"obj.application_Flow_Instances: \" + JSON.stringify(obj.application_Flow_Instances, null, 4));\n\tif (Array.isArray(obj.application_Flow_Instances)) this.application_Flow_Instances(obj.application_Flow_Instances.map(function(ta) {\n\t\treturn new shs_arbfw_appd_Flow_Instance()._save(ta)\n\t}));\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Application._save(): \" + \"obj.application_Action_Instances: \" + JSON.stringify(obj.application_Action_Instances, null, 4));\n\tif (Array.isArray(obj.application_Action_Instances)) this.application_Action_Instances(obj.application_Action_Instances.map(function(ta) {\n\t\treturn new shs_arbfw_appd_Action_Instance()._save(ta)\n\t}));\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Application._save(): \" + \"obj.application_Action_Types: \" + JSON.stringify(obj.application_Action_Types, null, 4));\n\tif (Array.isArray(obj.application_Action_Types)) this.application_Action_Types(obj.application_Action_Types.map(function(ta) {\n\t\treturn new shs_arbfw_appd_Action_Type()._save(ta)\n\t}));\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Application._save(): \" + \"obj.application_Flow_Snapshots: \" + JSON.stringify(obj.application_Flow_Snapshots, null, 4));\n\tif (Array.isArray(obj.application_Flow_Snapshots)) this.application_Flow_Snapshots(obj.application_Flow_Snapshots.map(function(ta) {\n\t\treturn new shs_arbfw_appd_Flow_Snapshot()._save(ta)\n\t}));\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Application._save(): \" + \"obj.application_Pill_Compounds: \" + JSON.stringify(obj.application_Pill_Compounds, null, 4));\n\tif (Array.isArray(obj.application_Pill_Compounds)) this.application_Pill_Compounds(obj.application_Pill_Compounds.map(function(ta) {\n\t\treturn new shs_arbfw_appd_Pill_Compound()._save(ta)\n\t}));\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Application._save(): \" + \"obj.application_Security_Controls: \" + JSON.stringify(obj.application_Security_Controls, null, 4));\n\tif (Array.isArray(obj.application_Security_Controls)) this.application_Security_Controls(obj.application_Security_Controls.map(function(ta) {\n\t\treturn new shs_arbfw_appd_Security_Control()._save(ta)\n\t}));\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Application._save(): \" + \"obj.application_Security_Types: \" + JSON.stringify(obj.application_Security_Types, null, 4));\n\tif (Array.isArray(obj.application_Security_Types)) this.application_Security_Types(obj.application_Security_Types.map(function(ta) {\n\t\treturn new shs_arbfw_appd_Security_Type()._save(ta)\n\t}));\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Application._save(): \" + \"obj.application_Security_Operations: \" + JSON.stringify(obj.application_Security_Operations, null, 4));\n\tif (Array.isArray(obj.application_Security_Operations)) this.application_Security_Operations(obj.application_Security_Operations.map(function(ta) {\n\t\treturn new shs_arbfw_appd_Security_Operation()._save(ta)\n\t}));\n\n\treturn this;\n}\n\n/************* Application.store() **********************/\nstore(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Application.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Application.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Application.store(): \" + \"executing locally \");\n\n\t\t// store locally\n\t\treturn this._save(this._toDocument());\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Application.findAll() **********************/\nfindAll(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Application.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Application.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Application.findAll(): \" + \"executing locally \");\n\n\t\t// findAll locally\n\t\tlet gr = new GlideRecord('sys_scope');\n\t\tgr.addEncodedQuery(this._toEQuery());\n\t\treturn this._fromDocument(gr);\n\n\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('sys_scope', ['*'])['sys_scope'])));\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Application.find() **********************/\nfind(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Application.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Application.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Application.find(): \" + \"executing locally \");\n\n\t\tlet ret = this.findAll();\n\t\treturn ret.length ? ret[0] : null;\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"scriptFile_Script_Compatibilitys":[{"active":true,"enabled":true}],"client_callable":true,"sys_name":"shs_arbfw_appd_Queue","api_name":"x_1790593_arboard.shs_arbfw_appd_Queue","name":"shs_arbfw_appd_Queue","script":"class shs_arbfw_appd_Queue extends global.AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"Application Designer\";\n\t\tthis.__type = \"shs_arbfw_appd_Queue\";\n\t\tthis.__alias = \"shs_arbfw_appd\";\n\t\tthis.__scope = \"shs_arbfw\";\n\t}\n\n\t/************* Queue.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Queue.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Queue.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Queue.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Queue.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//(typeof(window)!=='undefined'?alert:gs.info)(\"Queue.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Queue.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Queue.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Queue.cluster GETTERS AND SETTERS **********************/\n\tcluster(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._cluster = v;\n\t\t\tthis._cluster_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._cluster;\n\t\t}\n\t}\n\n\t/************* Queue.topic GETTERS AND SETTERS **********************/\n\ttopic(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._topic = v;\n\t\t\tthis._topic_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._topic;\n\t\t}\n\t}\n\n\t/************* Queue.processed GETTERS AND SETTERS **********************/\n\tprocessed(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//(typeof(window)!=='undefined'?alert:gs.info)(\"Queue.processed(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._processed = v;\n\t\t\tthis._processed_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._processed;\n\t\t}\n\t}\n\n\t/************* Queue.direction GETTERS AND SETTERS **********************/\n\tdirection(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._direction = v;\n\t\t\tthis._direction_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._direction;\n\t\t}\n\t}\n\n\t/************* Queue.state GETTERS AND SETTERS **********************/\n\tstate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._state = v;\n\t\t\tthis._state_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._state;\n\t\t}\n\t}\n\n\t/************* Queue.sender GETTERS AND SETTERS **********************/\n\tsender(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._sender = v;\n\t\t\tthis._sender_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._sender;\n\t\t}\n\t}\n\n\t/************* Queue.recipient GETTERS AND SETTERS **********************/\n\trecipient(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._recipient = v;\n\t\t\tthis._recipient_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._recipient;\n\t\t}\n\t}\n\n\t/************* Queue.responseTo GETTERS AND SETTERS **********************/\n\tresponseTo(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._responseTo = v;\n\t\t\tthis._responseTo_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._responseTo;\n\t\t}\n\t}\n\n\t/************* Queue.responseTo_Queues GETTERS AND SETTERS **********************/\n\tresponseTo_Queues(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._responseTo_Queues = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._responseTo_Queues_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._responseTo_Queues;\n\t\t}\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = undefined || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\tif (this._cluster) ret += '^' + sPath + 'cluster' + (this._cluster_coop || '=') + this.cluster();\n\n\t\tif (this._topic) ret += '^' + sPath + 'topic' + (this._topic_coop || '=') + this.topic();\n\n\t\tif (this._processed) ret += '^' + sPath + 'processed' + (this._processed_coop || '=') + this.processed();\n\n\t\tif (this._direction) ret += '^' + sPath + 'direction' + (this._direction_coop || '=') + this.direction();\n\n\t\tif (this._state) ret += '^' + sPath + 'state' + (this._state_coop || '=') + this.state();\n\n\t\tif (this._sender) ret += '^' + sPath + 'sender' + (this._sender_coop || '=') + this.sender();\n\n\t\tif (this._recipient) ret += '^' + sPath + 'recipient' + (this._recipient_coop || '=') + this.recipient();\n\n\t\tif (this._responseTo) ret += /*(this._responseTo_coop || '=') + */ this.responseTo()._toEQuery(sPath + 'responseTo.');\n\n\t\t(this.responseTo_Queues() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYQueue.responseTo,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Queue._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn new shs_arbfw_appd_Queue()._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Queue._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tcase \"process\": {\n\t\t\t\treturn this.process();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Queue._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromGlideRecord(obj) {\n\t\tif (!obj) return null;\n\t\tif (obj.isValidRecord()) {\n\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Queue\" != 'ecc_queue' && obj.source == \"shs_arbfw_appd_Queue\") {\n\t\t\t\tobj.state = \"processing\";\n\t\t\t\tobj.update();\n\n\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\tresp.queue = 'output';\n\t\t\t\tresp.agent = obj.agent;\n\t\t\t\tresp.topic = obj.topic;\n\t\t\t\tresp.name = obj.name;\n\t\t\t\tresp.source = obj.source;\n\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\tlet ret = new shs_arbfw_appd_Queue()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t});\n\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t}\n\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\tresp.insert();\n\n\t\t\t\tobj.state = \"processed\";\n\t\t\t\tobj.update();\n\t\t\t\treturn resp;\n\t\t\t} else {\n\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\tcluster: obj.getValue(\"cluster\"),\n\n\t\t\t\t\ttopic: obj.getValue(\"topic\"),\n\n\t\t\t\t\tprocessed: obj.getValue(\"processed\"),\n\n\t\t\t\t\tdirection: obj.getValue(\"direction\"),\n\n\t\t\t\t\tstate: obj.getValue(\"state\"),\n\n\t\t\t\t\tsender: obj.getValue(\"sender\"),\n\n\t\t\t\t\trecipient: obj.getValue(\"recipient\"),\n\n\t\t\t\t\tresponseTo: obj.getValue(\"responseTo\"),\n\n\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tobj.query();\n\t\t\tlet grRet = [];\n\t\t\twhile (obj.next()) grRet.push(this._fromGlideRecord(obj));\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Queue._fromGlideRecord(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\treturn grRet;\n\t\t}\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\tundefined\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_appd_Queue()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\tif (/((([A-Za-z]{3,9}:(?:/ / ) ? )( ? : [-;: &= +$, w] + @) ? [A - Za - z0 - 9. - ] + | ( ? : www. | [-;: &= +$, w] + @)[A - Za - z0 - 9. - ] + )(( ? : /[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)/g.test(obj)) {\n\t\t\tvar msg = new sn_ws.RESTMessageV2();\n\t\t\tmsg.setEndpoint(obj);\n\t\t\tmsg.setRequestHeader('Content-Type', 'application/json');\n\t\t\tmsg.setHttpMethod('get');\n\t\t\treturn this._fromDocument(msg.execute().getBody());\n\t\t}\n\n\t\ttry {\n\t\t\tobj = JSON.parse(obj);\n\t\t} catch (ex) {\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Queue._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\tlet _obj = {\n\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))\n\t\t\t};\n\t\t\t_obj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(this))] = obj;\n\t\t\tobj = _obj;\n\t\t}\n\t\treturn this._fromDocument(obj);\n\t}\n\telse if (typeof(obj) === 'object') {\n\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\treturn this._fromGlideRecord(obj);\n\t\t} else if (obj._fromDocument) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Queue._fromDocument(): \" + \"redundent call\");\n\t\t\treturn obj;\n\t\t} else if (Array.isArray(obj)) {\n\t\t\treturn obj.map(function(o) {\n\t\t\t\treturn new shs_arbfw_appd_Queue()._fromDocument(o)\n\t\t\t});\n\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(obj))));\n\n\t\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Queue._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.cluster) !== 'undefined') {\n\n\t\t\t\t\tthis.cluster(obj.cluster);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.topic) !== 'undefined') {\n\n\t\t\t\t\tthis.topic(obj.topic);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.processed) !== 'undefined') {\n\n\t\t\t\t\tthis.processed(obj.processed);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.direction) !== 'undefined') {\n\n\t\t\t\t\tthis.direction(obj.direction);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.state) !== 'undefined') {\n\n\t\t\t\t\tthis.state(obj.state);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.sender) !== 'undefined') {\n\n\t\t\t\t\tthis.sender(obj.sender);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.recipient) !== 'undefined') {\n\n\t\t\t\t\tthis.recipient(obj.recipient);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.responseTo) !== 'undefined') {\n\n\t\t\t\t\tthis.responseTo(new shs_arbfw_appd_Queue()._fromDocument(obj.responseTo));\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.responseTo_Queues) !== 'undefined') this.responseTo_Queues(new shs_arbfw_appd_Queue()._fromDocument(obj.responseTo_Queues));\n\n\t\t\t} else { // if(obj.constructor.name==\"Queue\"){\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Queue._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t}\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Queue._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\treturn null;\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Queue._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Queue._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Queue._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\treturn this;\n}\n\n_insertAssert() {\n\treturn true;\n}\n\n_updateAssert() {\n\treturn true;\n}\n\n_storeAssert() {\n\treturn true;\n}\n\n_findAssert() {\n\treturn true;\n}\n\n_new(c) {\n\n\treturn new shs_arbfw_appd_Platform._new(c);\n\n}\n\n_toDocument(arFields) {\n\n\tlet ret = undefined || {};\n\n\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tret.active = this.active();\n\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tret.enabled = this.enabled();\n\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tret.code = this.code();\n\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tret.order = this.order();\n\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tret.date = this.date();\n\n\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tret.name = this.name();\n\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tret.remark = this.remark();\n\n\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t}\n\n\tif (typeof(this._cluster) !== 'undefined') {\n\t\tret.cluster = this.cluster();\n\n\t}\n\n\tif (typeof(this._topic) !== 'undefined') {\n\t\tret.topic = this.topic();\n\n\t}\n\n\tif (typeof(this._processed) !== 'undefined') {\n\t\tret.processed = this.processed();\n\n\t\tif (ret.processed && typeof(ret.processed.toISOString) === 'function') ret.processed = ret.processed.toISOString().replace('.000Z', 'Z');\n\n\t}\n\n\tif (typeof(this._direction) !== 'undefined') {\n\t\tret.direction = this.direction();\n\n\t}\n\n\tif (typeof(this._state) !== 'undefined') {\n\t\tret.state = this.state();\n\n\t}\n\n\tif (typeof(this._sender) !== 'undefined') {\n\t\tret.sender = this.sender();\n\n\t}\n\n\tif (typeof(this._recipient) !== 'undefined') {\n\t\tret.recipient = this.recipient();\n\n\t}\n\n\tif (typeof(this._responseTo) !== 'undefined') {\n\t\tret.responseTo = this.responseTo();\n\n\t\tif (ret.responseTo) {\n\t\t\tret.responseTo = ret.responseTo._toDocument();\n\t\t\tif (typeof(ret.responseTo) === 'object' && !Object.keys(ret.responseTo).length) ret.responseTo = null;\n\t\t}\n\n\t}\n\n\tif (typeof(this.responseTo_Queues()) !== 'undefined') ret.responseTo_Queues = this.responseTo_Queues().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\treturn !arFields.find(function(_k) {\n\t\t\treturn _k == k;\n\t\t});\n\t}).forEach(function(k) {\n\t\tdelete ret[k];\n\t});\n\n\treturn ret;\n}\n\n_unique(keys, ret) {\n\tret = ret || new shs_arbfw_appd_Queue();\n\n\tundefined\n\n\t// if(this.Id) ret.Id = this.Id;\n\tif (!keys) {\n\n\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\tif (typeof(this.cluster()) !== 'undefined') ret.cluster(this.cluster());\n\n\t\tif (typeof(this.topic()) !== 'undefined') ret.topic(this.topic());\n\n\t\tif (typeof(this.direction()) !== 'undefined') ret.direction(this.direction());\n\n\t\tif (typeof(this.sender()) !== 'undefined') ret.sender(this.sender());\n\n\t\tif (typeof(this.recipient()) !== 'undefined') ret.recipient(this.recipient());\n\n\t\tif (typeof(this.responseTo()) !== 'undefined') ret.responseTo(this.responseTo()._unique());\n\n\t} else {\n\n\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t\tif (keys.indexOf(\"cluster\") >= 0 && typeof(this.cluster()) !== 'undefined') ret.cluster(this.cluster());\n\n\t\tif (keys.indexOf(\"topic\") >= 0 && typeof(this.topic()) !== 'undefined') ret.topic(this.topic());\n\n\t\tif (keys.indexOf(\"processed\") >= 0 && typeof(this.processed()) !== 'undefined') ret.processed(this.processed());\n\n\t\tif (keys.indexOf(\"direction\") >= 0 && typeof(this.direction()) !== 'undefined') ret.direction(this.direction());\n\n\t\tif (keys.indexOf(\"state\") >= 0 && typeof(this.state()) !== 'undefined') ret.state(this.state());\n\n\t\tif (keys.indexOf(\"sender\") >= 0 && typeof(this.sender()) !== 'undefined') ret.sender(this.sender());\n\n\t\tif (keys.indexOf(\"recipient\") >= 0 && typeof(this.recipient()) !== 'undefined') ret.recipient(this.recipient());\n\n\t\tif (keys.indexOf(\"responseTo\") >= 0 && typeof(this.responseTo()) !== 'undefined') ret.responseTo(this.responseTo()._unique());\n\n\t}\n\n\treturn ret;\n}\n\n_query(gq) {\n\tlet arFields = Object.keys(global.Schema.of('ecc_queue', ['*'])['ecc_queue']);\n\n\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('ecc_queue');\n\n\tundefined\n\n\tlet idf = ((function(r) {\n\t\tlet ret = 'sys_id';\n\t\tif (typeof(r.__idField) === 'function') {\n\t\t\tret = r.__idField();\n\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\tret = r.__idField || this.__idField();\n\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\tret = 'Id';\n\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\tret = 'sys_id';\n\t\t}\n\t\treturn ret;\n\t})(this));\n\tif (idf == 'Id') idf = 'sys_id';\n\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tlet coop = this._active_coop || '=';\n\n\t\tlet v = this.active();\n\n\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Queue._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tlet coop = this._enabled_coop || '=';\n\n\t\tlet v = this.enabled();\n\n\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Queue._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tlet coop = this._code_coop || '=';\n\n\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.code();\n\n\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Queue._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tlet coop = this._order_coop || '=';\n\n\t\tlet v = this.order();\n\n\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Queue._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tlet coop = this._date_coop || '=';\n\n\t\tlet v = this.date();\n\n\t\tif (v) {\n\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t}\n\n\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Queue._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tlet coop = this._name_coop || '=';\n\n\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.name();\n\n\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Queue._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tlet coop = this._remark_coop || '=';\n\n\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.remark();\n\n\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Queue._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._cluster) !== 'undefined') {\n\t\tlet coop = this._cluster_coop || '=';\n\n\t\tif (!this._cluster_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.cluster();\n\n\t\tif (arFields.indexOf('cluster') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Queue._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('cluster');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('cluster');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('cluster', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._topic) !== 'undefined') {\n\t\tlet coop = this._topic_coop || '=';\n\n\t\tif (!this._topic_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.topic();\n\n\t\tif (arFields.indexOf('topic') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Queue._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('topic');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('topic');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('topic', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._processed) !== 'undefined') {\n\t\tlet coop = this._processed_coop || '=';\n\n\t\tlet v = this.processed();\n\n\t\tif (v) {\n\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t}\n\n\t\tif (arFields.indexOf('processed') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Queue._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('processed');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('processed');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('processed', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._direction) !== 'undefined') {\n\t\tlet coop = this._direction_coop || '=';\n\n\t\tif (!this._direction_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.direction();\n\n\t\tif (arFields.indexOf('direction') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Queue._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('direction');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('direction');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('direction', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._state) !== 'undefined') {\n\t\tlet coop = this._state_coop || '=';\n\n\t\tif (!this._state_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.state();\n\n\t\tif (arFields.indexOf('state') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Queue._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('state');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('state');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('state', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._sender) !== 'undefined') {\n\t\tlet coop = this._sender_coop || '=';\n\n\t\tif (!this._sender_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.sender();\n\n\t\tif (arFields.indexOf('sender') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Queue._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('sender');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('sender');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('sender', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._recipient) !== 'undefined') {\n\t\tlet coop = this._recipient_coop || '=';\n\n\t\tif (!this._recipient_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.recipient();\n\n\t\tif (arFields.indexOf('recipient') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Queue._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('recipient');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('recipient');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('recipient', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._responseTo) !== 'undefined') {\n\t\tlet coop = this._responseTo_coop || '=';\n\n\t\tlet v = this.responseTo();\n\n\t\tif (v) {\n\t\t\tv = v.findAll();\n\t\t\tif (v.length == 1) {\n\t\t\t\t/*if(\"Queue\"==\"Column\") (typeof(window)!=='undefined'?alert:gs.info)(\"Queue._query(): \"+ \"responseTo \"+ \"v[0]._toDocument(): \" + JSON.stringify(v[0]._toDocument(), null, 4)); */\n\t\t\t\tv = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(v[0], ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(v[0]))));\n\t\t\t} else if (!v.length) {\n\t\t\t\tv = null;\n\t\t\t} else {\n\t\t\t\tcoop = 'IN';\n\t\t\t\tv = v.map(function(r) {\n\t\t\t\t\treturn ((function(r, f) {\n\t\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t})(r, ((function(r) {\n\t\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t})(r))));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (typeof(v) === 'undefined') {\n\t\t\tv = -1;\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Queue._query(): \" + \"responseTo[responseTo] resuled in undefined: \" + JSON.stringify(this.responseTo()));\n\t\t}\n\n\t\tif (arFields.indexOf('responseto') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Queue._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('responseto');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('responseto');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('responseto', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Queue._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\treturn this._queryGQ;\n}\n\n_save(obj) {\n\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\treturn new shs_arbfw_appd_Queue()._save(o)\n\t});\n\n\tlet _obj = {};\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Queue._save(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\tObject.keys(obj).filter(function(k) {\n\t\treturn Object.keys(global.Schema.of('ecc_queue', ['*'])['ecc_queue']).filter(function(_k) {\n\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t}).indexOf(k.toLowerCase()) >= 0\n\t}).forEach(function(k) {\n\t\t_obj[k.toLowerCase()] = obj[k]\n\t});\n\n\tObject.keys(_obj).forEach(function(k) {\n\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Queue._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tdelete _obj[k];\n\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Queue._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t}\n\t});\n\n\tlet _this = null;\n\tif (obj.__keys) {\n\t\tlet kObj = {};\n\t\tkObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(_obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))));\n\t\tobj.__keys.forEach(function(k) {\n\t\t\tkObj[k] = _obj[k]\n\t\t});\n\t\t_this = new shs_arbfw_appd_Queue()._fromDocument(kObj);\n\t} else {\n\t\t_this = new shs_arbfw_appd_Queue()._fromDocument(_obj)._unique();\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Queue._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\tdelete _obj.__idField;\n\n\ttry {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Queue._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\tObject.keys(_obj).filter(function(k) {\n\t\t\treturn k.toLowerCase() != k;\n\t\t}).forEach(function(k) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Queue._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tvar lk = k.toLowerCase();\n\t\t\t_obj[lk] = _obj[k];\n\t\t\tdelete _obj[k];\n\t\t});\n\n\t\tlet gq = new global.GlideQuery(obj.__type || 'ecc_queue');\n\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Queue._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\tif (_obj.sys_id) {\n\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t} else {\n\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\tgq = gq.insert(_obj);\n\t\t}\n\t\tlet _fObj = {};\n\t\t_fObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))));\n\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('ecc_queue', ['*'])['ecc_queue']))));\n\t} catch (ex) {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Queue._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Queue._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\treturn this;\n\t}\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Queue._save(): \" + \"obj.responseTo_Queues: \" + JSON.stringify(obj.responseTo_Queues, null, 4));\n\tif (Array.isArray(obj.responseTo_Queues)) this.responseTo_Queues(obj.responseTo_Queues.map(function(ta) {\n\t\treturn new shs_arbfw_appd_Queue()._save(ta)\n\t}));\n\n\treturn this;\n}\n\n/************* Queue.store() **********************/\nstore(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Queue.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Queue.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Queue.store(): \" + \"executing locally \");\n\n\t\t// store locally\n\t\treturn this._save(this._toDocument());\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Queue.findAll() **********************/\nfindAll(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Queue.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Queue.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Queue.findAll(): \" + \"executing locally \");\n\n\t\t// findAll locally\n\t\tlet gr = new GlideRecord('ecc_queue');\n\t\tgr.addEncodedQuery(this._toEQuery());\n\t\treturn this._fromDocument(gr);\n\n\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('ecc_queue', ['*'])['ecc_queue'])));\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Queue.find() **********************/\nfind(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Queue.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Queue.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Queue.find(): \" + \"executing locally \");\n\n\t\tlet ret = this.findAll();\n\t\treturn ret.length ? ret[0] : null;\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Queue.process() **********************/\nprocess(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Queue.process(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Queue.process(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Queue.process(): \" + \"executing locally \");\n\n\t\tthis._new().code(this.__scope + \"_\").state(\"ready\", \"=\").type(\"input\", \"=\").processed(null) /*.processed(new Date().toJSON().slice(0, 10), '<')*/ .responseTo(null).findAll().slice(0, 1).forEach(function(e) {\n\t\t\te.state(\"processing\");\n\t\t\te.processed(new Date());\n\t\t\te.responseTo(null); // e has empty object as responseTo!!!\n\t\t\te.store();\n\n\t\t\tvar r = e._new().type(\"output\").name(e.name()).code(e.code()).state(\"processed\").processed(new Date()).responseTo(e.state(\"processed\").processed(new Date()));\n\t\t\ttry {\n\t\t\t\tr.remark(e._new(e.code())._invoke(e.name(), e.remark()));\n\t\t\t} catch (ex) {\n\t\t\t\tgs.info(\"Exception: \" + ex);\n\t\t\t\te.state(\"error\").remark(ex.toString());\n\t\t\t}\n\t\t\tr.store();\n\t\t});\n\t\treturn;\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"scriptFile_Script_Compatibilitys":[{"active":true,"enabled":true}],"client_callable":true,"sys_name":"shs_arbfw_appd_Connection","api_name":"x_1790593_arboard.shs_arbfw_appd_Connection","name":"shs_arbfw_appd_Connection","script":"class shs_arbfw_appd_Connection extends global.AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"Application Designer\";\n\t\tthis.__type = \"shs_arbfw_appd_Connection\";\n\t\tthis.__alias = \"shs_arbfw_appd\";\n\t\tthis.__scope = \"shs_arbfw\";\n\t}\n\n\t/************* Connection.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Connection.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Connection.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Connection.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Connection.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//(typeof(window)!=='undefined'?alert:gs.info)(\"Connection.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Connection.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Connection.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Connection.profile_Save_Subscriptions GETTERS AND SETTERS **********************/\n\tprofile_Save_Subscriptions(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._profile_Save_Subscriptions = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._profile_Save_Subscriptions_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._profile_Save_Subscriptions;\n\t\t}\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = undefined || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\t(this.profile_Save_Subscriptions() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYSave_Subscription.profile,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Connection._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn new shs_arbfw_appd_Connection()._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Connection._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Connection._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromGlideRecord(obj) {\n\t\tif (!obj) return null;\n\t\tif (obj.isValidRecord()) {\n\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Connection\" != 'ecc_queue' && obj.source == \"shs_arbfw_appd_Connection\") {\n\t\t\t\tobj.state = \"processing\";\n\t\t\t\tobj.update();\n\n\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\tresp.queue = 'output';\n\t\t\t\tresp.agent = obj.agent;\n\t\t\t\tresp.topic = obj.topic;\n\t\t\t\tresp.name = obj.name;\n\t\t\t\tresp.source = obj.source;\n\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\tlet ret = new shs_arbfw_appd_Connection()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t});\n\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t}\n\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\tresp.insert();\n\n\t\t\t\tobj.state = \"processed\";\n\t\t\t\tobj.update();\n\t\t\t\treturn resp;\n\t\t\t} else {\n\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tobj.query();\n\t\t\tlet grRet = [];\n\t\t\twhile (obj.next()) grRet.push(this._fromGlideRecord(obj));\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Connection._fromGlideRecord(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\treturn grRet;\n\t\t}\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\tundefined\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_appd_Connection()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\tif (/((([A-Za-z]{3,9}:(?:/ / ) ? )( ? : [-;: &= +$, w] + @) ? [A - Za - z0 - 9. - ] + | ( ? : www. | [-;: &= +$, w] + @)[A - Za - z0 - 9. - ] + )(( ? : /[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)/g.test(obj)) {\n\t\t\tvar msg = new sn_ws.RESTMessageV2();\n\t\t\tmsg.setEndpoint(obj);\n\t\t\tmsg.setRequestHeader('Content-Type', 'application/json');\n\t\t\tmsg.setHttpMethod('get');\n\t\t\treturn this._fromDocument(msg.execute().getBody());\n\t\t}\n\n\t\ttry {\n\t\t\tobj = JSON.parse(obj);\n\t\t} catch (ex) {\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Connection._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\tlet _obj = {\n\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))\n\t\t\t};\n\t\t\t_obj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(this))] = obj;\n\t\t\tobj = _obj;\n\t\t}\n\t\treturn this._fromDocument(obj);\n\t}\n\telse if (typeof(obj) === 'object') {\n\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\treturn this._fromGlideRecord(obj);\n\t\t} else if (obj._fromDocument) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Connection._fromDocument(): \" + \"redundent call\");\n\t\t\treturn obj;\n\t\t} else if (Array.isArray(obj)) {\n\t\t\treturn obj.map(function(o) {\n\t\t\t\treturn new shs_arbfw_appd_Connection()._fromDocument(o)\n\t\t\t});\n\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(obj))));\n\n\t\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Connection._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.profile_Save_Subscriptions) !== 'undefined') this.profile_Save_Subscriptions(new shs_arbfw_appd_Save_Subscription()._fromDocument(obj.profile_Save_Subscriptions));\n\n\t\t\t} else { // if(obj.constructor.name==\"Connection\"){\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Connection._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t}\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Connection._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\treturn null;\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Connection._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Connection._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Connection._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\treturn this;\n}\n\n_insertAssert() {\n\treturn true;\n}\n\n_updateAssert() {\n\treturn true;\n}\n\n_storeAssert() {\n\treturn true;\n}\n\n_findAssert() {\n\treturn true;\n}\n\n_new(c) {\n\n\treturn new shs_arbfw_appd_Platform._new(c);\n\n}\n\n_toDocument(arFields) {\n\n\tlet ret = undefined || {};\n\n\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tret.active = this.active();\n\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tret.enabled = this.enabled();\n\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tret.code = this.code();\n\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tret.order = this.order();\n\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tret.date = this.date();\n\n\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tret.name = this.name();\n\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tret.remark = this.remark();\n\n\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t}\n\n\tif (typeof(this.profile_Save_Subscriptions()) !== 'undefined') ret.profile_Save_Subscriptions = this.profile_Save_Subscriptions().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\treturn !arFields.find(function(_k) {\n\t\t\treturn _k == k;\n\t\t});\n\t}).forEach(function(k) {\n\t\tdelete ret[k];\n\t});\n\n\treturn ret;\n}\n\n_unique(keys, ret) {\n\tret = ret || new shs_arbfw_appd_Connection();\n\n\tundefined\n\n\t// if(this.Id) ret.Id = this.Id;\n\tif (!keys) {\n\n\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t} else {\n\n\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t}\n\n\treturn ret;\n}\n\n_query(gq) {\n\tlet arFields = Object.keys(global.Schema.of('Connection', ['*'])['Connection']);\n\n\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('Connection');\n\n\tundefined\n\n\tlet idf = ((function(r) {\n\t\tlet ret = 'sys_id';\n\t\tif (typeof(r.__idField) === 'function') {\n\t\t\tret = r.__idField();\n\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\tret = r.__idField || this.__idField();\n\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\tret = 'Id';\n\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\tret = 'sys_id';\n\t\t}\n\t\treturn ret;\n\t})(this));\n\tif (idf == 'Id') idf = 'sys_id';\n\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tlet coop = this._active_coop || '=';\n\n\t\tlet v = this.active();\n\n\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Connection._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tlet coop = this._enabled_coop || '=';\n\n\t\tlet v = this.enabled();\n\n\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Connection._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tlet coop = this._code_coop || '=';\n\n\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.code();\n\n\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Connection._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tlet coop = this._order_coop || '=';\n\n\t\tlet v = this.order();\n\n\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Connection._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tlet coop = this._date_coop || '=';\n\n\t\tlet v = this.date();\n\n\t\tif (v) {\n\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t}\n\n\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Connection._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tlet coop = this._name_coop || '=';\n\n\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.name();\n\n\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Connection._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tlet coop = this._remark_coop || '=';\n\n\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.remark();\n\n\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Connection._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Connection._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\treturn this._queryGQ;\n}\n\n_save(obj) {\n\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\treturn new shs_arbfw_appd_Connection()._save(o)\n\t});\n\n\tlet _obj = {};\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Connection._save(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\tObject.keys(obj).filter(function(k) {\n\t\treturn Object.keys(global.Schema.of('Connection', ['*'])['Connection']).filter(function(_k) {\n\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t}).indexOf(k.toLowerCase()) >= 0\n\t}).forEach(function(k) {\n\t\t_obj[k.toLowerCase()] = obj[k]\n\t});\n\n\tObject.keys(_obj).forEach(function(k) {\n\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Connection._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tdelete _obj[k];\n\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Connection._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t}\n\t});\n\n\tlet _this = null;\n\tif (obj.__keys) {\n\t\tlet kObj = {};\n\t\tkObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(_obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))));\n\t\tobj.__keys.forEach(function(k) {\n\t\t\tkObj[k] = _obj[k]\n\t\t});\n\t\t_this = new shs_arbfw_appd_Connection()._fromDocument(kObj);\n\t} else {\n\t\t_this = new shs_arbfw_appd_Connection()._fromDocument(_obj)._unique();\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Connection._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\tdelete _obj.__idField;\n\n\ttry {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Connection._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\tObject.keys(_obj).filter(function(k) {\n\t\t\treturn k.toLowerCase() != k;\n\t\t}).forEach(function(k) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Connection._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tvar lk = k.toLowerCase();\n\t\t\t_obj[lk] = _obj[k];\n\t\t\tdelete _obj[k];\n\t\t});\n\n\t\tlet gq = new global.GlideQuery(obj.__type || 'Connection');\n\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Connection._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\tif (_obj.sys_id) {\n\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t} else {\n\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\tgq = gq.insert(_obj);\n\t\t}\n\t\tlet _fObj = {};\n\t\t_fObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))));\n\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('Connection', ['*'])['Connection']))));\n\t} catch (ex) {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Connection._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Connection._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\treturn this;\n\t}\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Connection._save(): \" + \"obj.profile_Save_Subscriptions: \" + JSON.stringify(obj.profile_Save_Subscriptions, null, 4));\n\tif (Array.isArray(obj.profile_Save_Subscriptions)) this.profile_Save_Subscriptions(obj.profile_Save_Subscriptions.map(function(ta) {\n\t\treturn new shs_arbfw_appd_Save_Subscription()._save(ta)\n\t}));\n\n\treturn this;\n}\n\n/************* Connection.store() **********************/\nstore(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Connection.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Connection.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Connection.store(): \" + \"executing locally \");\n\n\t\t// store locally\n\t\treturn this._save(this._toDocument());\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Connection.findAll() **********************/\nfindAll(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Connection.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Connection.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Connection.findAll(): \" + \"executing locally \");\n\n\t\t// findAll locally\n\t\tlet gr = new GlideRecord('Connection');\n\t\tgr.addEncodedQuery(this._toEQuery());\n\t\treturn this._fromDocument(gr);\n\n\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('Connection', ['*'])['Connection'])));\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Connection.find() **********************/\nfind(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Connection.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Connection.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Connection.find(): \" + \"executing locally \");\n\n\t\tlet ret = this.findAll();\n\t\treturn ret.length ? ret[0] : null;\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"scriptFile_Script_Compatibilitys":[{"active":true,"enabled":true}],"client_callable":true,"sys_name":"shs_arbfw_appd_Logic_Definition","api_name":"x_1790593_arboard.shs_arbfw_appd_Logic_Definition","name":"shs_arbfw_appd_Logic_Definition","script":"class shs_arbfw_appd_Logic_Definition extends global.AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"Application Designer\";\n\t\tthis.__type = \"shs_arbfw_appd_Logic_Definition\";\n\t\tthis.__alias = \"shs_arbfw_appd\";\n\t\tthis.__scope = \"shs_arbfw\";\n\t}\n\n\t/************* Logic_Definition.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Logic_Definition.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Logic_Definition.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Logic_Definition.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Logic_Definition.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//(typeof(window)!=='undefined'?alert:gs.info)(\"Logic_Definition.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Logic_Definition.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Logic_Definition.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Logic_Definition.definition_Flow_Logics GETTERS AND SETTERS **********************/\n\tdefinition_Flow_Logics(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._definition_Flow_Logics = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._definition_Flow_Logics_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._definition_Flow_Logics;\n\t\t}\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = undefined || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\t(this.definition_Flow_Logics() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYFlow_Logic.definition,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Logic_Definition._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn new shs_arbfw_appd_Logic_Definition()._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Logic_Definition._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Logic_Definition._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromGlideRecord(obj) {\n\t\tif (!obj) return null;\n\t\tif (obj.isValidRecord()) {\n\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Logic_Definition\" != 'ecc_queue' && obj.source == \"shs_arbfw_appd_Logic_Definition\") {\n\t\t\t\tobj.state = \"processing\";\n\t\t\t\tobj.update();\n\n\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\tresp.queue = 'output';\n\t\t\t\tresp.agent = obj.agent;\n\t\t\t\tresp.topic = obj.topic;\n\t\t\t\tresp.name = obj.name;\n\t\t\t\tresp.source = obj.source;\n\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\tlet ret = new shs_arbfw_appd_Logic_Definition()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t});\n\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t}\n\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\tresp.insert();\n\n\t\t\t\tobj.state = \"processed\";\n\t\t\t\tobj.update();\n\t\t\t\treturn resp;\n\t\t\t} else {\n\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tobj.query();\n\t\t\tlet grRet = [];\n\t\t\twhile (obj.next()) grRet.push(this._fromGlideRecord(obj));\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Logic_Definition._fromGlideRecord(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\treturn grRet;\n\t\t}\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\tundefined\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_appd_Logic_Definition()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\tif (/((([A-Za-z]{3,9}:(?:/ / ) ? )( ? : [-;: &= +$, w] + @) ? [A - Za - z0 - 9. - ] + | ( ? : www. | [-;: &= +$, w] + @)[A - Za - z0 - 9. - ] + )(( ? : /[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)/g.test(obj)) {\n\t\t\tvar msg = new sn_ws.RESTMessageV2();\n\t\t\tmsg.setEndpoint(obj);\n\t\t\tmsg.setRequestHeader('Content-Type', 'application/json');\n\t\t\tmsg.setHttpMethod('get');\n\t\t\treturn this._fromDocument(msg.execute().getBody());\n\t\t}\n\n\t\ttry {\n\t\t\tobj = JSON.parse(obj);\n\t\t} catch (ex) {\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Logic_Definition._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\tlet _obj = {\n\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))\n\t\t\t};\n\t\t\t_obj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(this))] = obj;\n\t\t\tobj = _obj;\n\t\t}\n\t\treturn this._fromDocument(obj);\n\t}\n\telse if (typeof(obj) === 'object') {\n\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\treturn this._fromGlideRecord(obj);\n\t\t} else if (obj._fromDocument) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Logic_Definition._fromDocument(): \" + \"redundent call\");\n\t\t\treturn obj;\n\t\t} else if (Array.isArray(obj)) {\n\t\t\treturn obj.map(function(o) {\n\t\t\t\treturn new shs_arbfw_appd_Logic_Definition()._fromDocument(o)\n\t\t\t});\n\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(obj))));\n\n\t\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Logic_Definition._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.definition_Flow_Logics) !== 'undefined') this.definition_Flow_Logics(new shs_arbfw_appd_Flow_Logic()._fromDocument(obj.definition_Flow_Logics));\n\n\t\t\t} else { // if(obj.constructor.name==\"Logic_Definition\"){\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Logic_Definition._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t}\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Logic_Definition._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\treturn null;\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Logic_Definition._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Logic_Definition._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Logic_Definition._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\treturn this;\n}\n\n_insertAssert() {\n\treturn true;\n}\n\n_updateAssert() {\n\treturn true;\n}\n\n_storeAssert() {\n\treturn true;\n}\n\n_findAssert() {\n\treturn true;\n}\n\n_new(c) {\n\n\treturn new shs_arbfw_appd_Platform._new(c);\n\n}\n\n_toDocument(arFields) {\n\n\tlet ret = undefined || {};\n\n\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tret.active = this.active();\n\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tret.enabled = this.enabled();\n\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tret.code = this.code();\n\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tret.order = this.order();\n\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tret.date = this.date();\n\n\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tret.name = this.name();\n\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tret.remark = this.remark();\n\n\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t}\n\n\tif (typeof(this.definition_Flow_Logics()) !== 'undefined') ret.definition_Flow_Logics = this.definition_Flow_Logics().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\treturn !arFields.find(function(_k) {\n\t\t\treturn _k == k;\n\t\t});\n\t}).forEach(function(k) {\n\t\tdelete ret[k];\n\t});\n\n\treturn ret;\n}\n\n_unique(keys, ret) {\n\tret = ret || new shs_arbfw_appd_Logic_Definition();\n\n\tundefined\n\n\t// if(this.Id) ret.Id = this.Id;\n\tif (!keys) {\n\n\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t} else {\n\n\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t}\n\n\treturn ret;\n}\n\n_query(gq) {\n\tlet arFields = Object.keys(global.Schema.of('sys_hub_flow_logic_definition', ['*'])['sys_hub_flow_logic_definition']);\n\n\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('sys_hub_flow_logic_definition');\n\n\tundefined\n\n\tlet idf = ((function(r) {\n\t\tlet ret = 'sys_id';\n\t\tif (typeof(r.__idField) === 'function') {\n\t\t\tret = r.__idField();\n\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\tret = r.__idField || this.__idField();\n\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\tret = 'Id';\n\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\tret = 'sys_id';\n\t\t}\n\t\treturn ret;\n\t})(this));\n\tif (idf == 'Id') idf = 'sys_id';\n\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tlet coop = this._active_coop || '=';\n\n\t\tlet v = this.active();\n\n\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Logic_Definition._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tlet coop = this._enabled_coop || '=';\n\n\t\tlet v = this.enabled();\n\n\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Logic_Definition._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tlet coop = this._code_coop || '=';\n\n\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.code();\n\n\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Logic_Definition._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tlet coop = this._order_coop || '=';\n\n\t\tlet v = this.order();\n\n\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Logic_Definition._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tlet coop = this._date_coop || '=';\n\n\t\tlet v = this.date();\n\n\t\tif (v) {\n\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t}\n\n\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Logic_Definition._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tlet coop = this._name_coop || '=';\n\n\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.name();\n\n\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Logic_Definition._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tlet coop = this._remark_coop || '=';\n\n\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.remark();\n\n\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Logic_Definition._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Logic_Definition._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\treturn this._queryGQ;\n}\n\n_save(obj) {\n\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\treturn new shs_arbfw_appd_Logic_Definition()._save(o)\n\t});\n\n\tlet _obj = {};\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Logic_Definition._save(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\tObject.keys(obj).filter(function(k) {\n\t\treturn Object.keys(global.Schema.of('sys_hub_flow_logic_definition', ['*'])['sys_hub_flow_logic_definition']).filter(function(_k) {\n\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t}).indexOf(k.toLowerCase()) >= 0\n\t}).forEach(function(k) {\n\t\t_obj[k.toLowerCase()] = obj[k]\n\t});\n\n\tObject.keys(_obj).forEach(function(k) {\n\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Logic_Definition._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tdelete _obj[k];\n\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Logic_Definition._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t}\n\t});\n\n\tlet _this = null;\n\tif (obj.__keys) {\n\t\tlet kObj = {};\n\t\tkObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(_obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))));\n\t\tobj.__keys.forEach(function(k) {\n\t\t\tkObj[k] = _obj[k]\n\t\t});\n\t\t_this = new shs_arbfw_appd_Logic_Definition()._fromDocument(kObj);\n\t} else {\n\t\t_this = new shs_arbfw_appd_Logic_Definition()._fromDocument(_obj)._unique();\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Logic_Definition._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\tdelete _obj.__idField;\n\n\ttry {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Logic_Definition._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\tObject.keys(_obj).filter(function(k) {\n\t\t\treturn k.toLowerCase() != k;\n\t\t}).forEach(function(k) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Logic_Definition._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tvar lk = k.toLowerCase();\n\t\t\t_obj[lk] = _obj[k];\n\t\t\tdelete _obj[k];\n\t\t});\n\n\t\tlet gq = new global.GlideQuery(obj.__type || 'sys_hub_flow_logic_definition');\n\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Logic_Definition._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\tif (_obj.sys_id) {\n\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t} else {\n\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\tgq = gq.insert(_obj);\n\t\t}\n\t\tlet _fObj = {};\n\t\t_fObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))));\n\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('sys_hub_flow_logic_definition', ['*'])['sys_hub_flow_logic_definition']))));\n\t} catch (ex) {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Logic_Definition._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Logic_Definition._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\treturn this;\n\t}\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Logic_Definition._save(): \" + \"obj.definition_Flow_Logics: \" + JSON.stringify(obj.definition_Flow_Logics, null, 4));\n\tif (Array.isArray(obj.definition_Flow_Logics)) this.definition_Flow_Logics(obj.definition_Flow_Logics.map(function(ta) {\n\t\treturn new shs_arbfw_appd_Flow_Logic()._save(ta)\n\t}));\n\n\treturn this;\n}\n\n/************* Logic_Definition.store() **********************/\nstore(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Logic_Definition.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Logic_Definition.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Logic_Definition.store(): \" + \"executing locally \");\n\n\t\t// store locally\n\t\treturn this._save(this._toDocument());\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Logic_Definition.findAll() **********************/\nfindAll(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Logic_Definition.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Logic_Definition.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Logic_Definition.findAll(): \" + \"executing locally \");\n\n\t\t// findAll locally\n\t\tlet gr = new GlideRecord('sys_hub_flow_logic_definition');\n\t\tgr.addEncodedQuery(this._toEQuery());\n\t\treturn this._fromDocument(gr);\n\n\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('sys_hub_flow_logic_definition', ['*'])['sys_hub_flow_logic_definition'])));\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Logic_Definition.find() **********************/\nfind(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Logic_Definition.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Logic_Definition.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Logic_Definition.find(): \" + \"executing locally \");\n\n\t\tlet ret = this.findAll();\n\t\treturn ret.length ? ret[0] : null;\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"scriptFile_Script_Compatibilitys":[{"active":true,"enabled":true}],"client_callable":true,"sys_name":"shs_arbfw_appd_Flow_Block","api_name":"x_1790593_arboard.shs_arbfw_appd_Flow_Block","name":"shs_arbfw_appd_Flow_Block","script":"class shs_arbfw_appd_Flow_Block extends global.AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"Application Designer\";\n\t\tthis.__type = \"shs_arbfw_appd_Flow_Block\";\n\t\tthis.__alias = \"shs_arbfw_appd\";\n\t\tthis.__scope = \"shs_arbfw\";\n\t}\n\n\t/************* Flow_Block.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Flow_Block.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Flow_Block.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Flow_Block.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Flow_Block.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Block.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Flow_Block.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Flow_Block.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Flow_Block.block_Flows GETTERS AND SETTERS **********************/\n\tblock_Flows(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._block_Flows = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._block_Flows_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._block_Flows;\n\t\t}\n\t}\n\n\t/************* Flow_Block.block_Flow_Logics GETTERS AND SETTERS **********************/\n\tblock_Flow_Logics(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._block_Flow_Logics = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._block_Flow_Logics_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._block_Flow_Logics;\n\t\t}\n\t}\n\n\t/************* Flow_Block.block_Element_Mappings GETTERS AND SETTERS **********************/\n\tblock_Element_Mappings(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._block_Element_Mappings = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._block_Element_Mappings_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._block_Element_Mappings;\n\t\t}\n\t}\n\n\t/************* Flow_Block.block_Flow_Snapshots GETTERS AND SETTERS **********************/\n\tblock_Flow_Snapshots(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._block_Flow_Snapshots = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._block_Flow_Snapshots_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._block_Flow_Snapshots;\n\t\t}\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = undefined || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\t(this.block_Flows() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYFlow.block,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(this.block_Flow_Logics() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYFlow_Logic.block,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(this.block_Element_Mappings() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYElement_Mapping.block,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(this.block_Flow_Snapshots() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYFlow_Snapshot.block,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Block._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn new shs_arbfw_appd_Flow_Block()._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Block._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Block._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromGlideRecord(obj) {\n\t\tif (!obj) return null;\n\t\tif (obj.isValidRecord()) {\n\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Flow_Block\" != 'ecc_queue' && obj.source == \"shs_arbfw_appd_Flow_Block\") {\n\t\t\t\tobj.state = \"processing\";\n\t\t\t\tobj.update();\n\n\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\tresp.queue = 'output';\n\t\t\t\tresp.agent = obj.agent;\n\t\t\t\tresp.topic = obj.topic;\n\t\t\t\tresp.name = obj.name;\n\t\t\t\tresp.source = obj.source;\n\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\tlet ret = new shs_arbfw_appd_Flow_Block()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t});\n\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t}\n\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\tresp.insert();\n\n\t\t\t\tobj.state = \"processed\";\n\t\t\t\tobj.update();\n\t\t\t\treturn resp;\n\t\t\t} else {\n\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tobj.query();\n\t\t\tlet grRet = [];\n\t\t\twhile (obj.next()) grRet.push(this._fromGlideRecord(obj));\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Block._fromGlideRecord(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\treturn grRet;\n\t\t}\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\tundefined\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_appd_Flow_Block()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\tif (/((([A-Za-z]{3,9}:(?:/ / ) ? )( ? : [-;: &= +$, w] + @) ? [A - Za - z0 - 9. - ] + | ( ? : www. | [-;: &= +$, w] + @)[A - Za - z0 - 9. - ] + )(( ? : /[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)/g.test(obj)) {\n\t\t\tvar msg = new sn_ws.RESTMessageV2();\n\t\t\tmsg.setEndpoint(obj);\n\t\t\tmsg.setRequestHeader('Content-Type', 'application/json');\n\t\t\tmsg.setHttpMethod('get');\n\t\t\treturn this._fromDocument(msg.execute().getBody());\n\t\t}\n\n\t\ttry {\n\t\t\tobj = JSON.parse(obj);\n\t\t} catch (ex) {\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Block._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\tlet _obj = {\n\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))\n\t\t\t};\n\t\t\t_obj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(this))] = obj;\n\t\t\tobj = _obj;\n\t\t}\n\t\treturn this._fromDocument(obj);\n\t}\n\telse if (typeof(obj) === 'object') {\n\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\treturn this._fromGlideRecord(obj);\n\t\t} else if (obj._fromDocument) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Block._fromDocument(): \" + \"redundent call\");\n\t\t\treturn obj;\n\t\t} else if (Array.isArray(obj)) {\n\t\t\treturn obj.map(function(o) {\n\t\t\t\treturn new shs_arbfw_appd_Flow_Block()._fromDocument(o)\n\t\t\t});\n\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(obj))));\n\n\t\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Block._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.block_Flows) !== 'undefined') this.block_Flows(new shs_arbfw_appd_Flow()._fromDocument(obj.block_Flows));\n\n\t\t\t\tif (typeof(obj.block_Flow_Logics) !== 'undefined') this.block_Flow_Logics(new shs_arbfw_appd_Flow_Logic()._fromDocument(obj.block_Flow_Logics));\n\n\t\t\t\tif (typeof(obj.block_Element_Mappings) !== 'undefined') this.block_Element_Mappings(new shs_arbfw_appd_Element_Mapping()._fromDocument(obj.block_Element_Mappings));\n\n\t\t\t\tif (typeof(obj.block_Flow_Snapshots) !== 'undefined') this.block_Flow_Snapshots(new shs_arbfw_appd_Flow_Snapshot()._fromDocument(obj.block_Flow_Snapshots));\n\n\t\t\t} else { // if(obj.constructor.name==\"Flow_Block\"){\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Block._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t}\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Block._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\treturn null;\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Block._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Block._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Block._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\treturn this;\n}\n\n_insertAssert() {\n\treturn true;\n}\n\n_updateAssert() {\n\treturn true;\n}\n\n_storeAssert() {\n\treturn true;\n}\n\n_findAssert() {\n\treturn true;\n}\n\n_new(c) {\n\n\treturn new shs_arbfw_appd_Platform._new(c);\n\n}\n\n_toDocument(arFields) {\n\n\tlet ret = undefined || {};\n\n\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tret.active = this.active();\n\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tret.enabled = this.enabled();\n\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tret.code = this.code();\n\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tret.order = this.order();\n\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tret.date = this.date();\n\n\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tret.name = this.name();\n\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tret.remark = this.remark();\n\n\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t}\n\n\tif (typeof(this.block_Flows()) !== 'undefined') ret.block_Flows = this.block_Flows().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (typeof(this.block_Flow_Logics()) !== 'undefined') ret.block_Flow_Logics = this.block_Flow_Logics().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (typeof(this.block_Element_Mappings()) !== 'undefined') ret.block_Element_Mappings = this.block_Element_Mappings().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (typeof(this.block_Flow_Snapshots()) !== 'undefined') ret.block_Flow_Snapshots = this.block_Flow_Snapshots().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\treturn !arFields.find(function(_k) {\n\t\t\treturn _k == k;\n\t\t});\n\t}).forEach(function(k) {\n\t\tdelete ret[k];\n\t});\n\n\treturn ret;\n}\n\n_unique(keys, ret) {\n\tret = ret || new shs_arbfw_appd_Flow_Block();\n\n\tundefined\n\n\t// if(this.Id) ret.Id = this.Id;\n\tif (!keys) {\n\n\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t} else {\n\n\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t}\n\n\treturn ret;\n}\n\n_query(gq) {\n\tlet arFields = Object.keys(global.Schema.of('sys_hub_flow_block', ['*'])['sys_hub_flow_block']);\n\n\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('sys_hub_flow_block');\n\n\tundefined\n\n\tlet idf = ((function(r) {\n\t\tlet ret = 'sys_id';\n\t\tif (typeof(r.__idField) === 'function') {\n\t\t\tret = r.__idField();\n\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\tret = r.__idField || this.__idField();\n\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\tret = 'Id';\n\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\tret = 'sys_id';\n\t\t}\n\t\treturn ret;\n\t})(this));\n\tif (idf == 'Id') idf = 'sys_id';\n\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tlet coop = this._active_coop || '=';\n\n\t\tlet v = this.active();\n\n\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Block._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tlet coop = this._enabled_coop || '=';\n\n\t\tlet v = this.enabled();\n\n\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Block._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tlet coop = this._code_coop || '=';\n\n\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.code();\n\n\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Block._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tlet coop = this._order_coop || '=';\n\n\t\tlet v = this.order();\n\n\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Block._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tlet coop = this._date_coop || '=';\n\n\t\tlet v = this.date();\n\n\t\tif (v) {\n\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t}\n\n\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Block._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tlet coop = this._name_coop || '=';\n\n\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.name();\n\n\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Block._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tlet coop = this._remark_coop || '=';\n\n\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.remark();\n\n\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Block._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Block._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\treturn this._queryGQ;\n}\n\n_save(obj) {\n\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\treturn new shs_arbfw_appd_Flow_Block()._save(o)\n\t});\n\n\tlet _obj = {};\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Block._save(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\tObject.keys(obj).filter(function(k) {\n\t\treturn Object.keys(global.Schema.of('sys_hub_flow_block', ['*'])['sys_hub_flow_block']).filter(function(_k) {\n\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t}).indexOf(k.toLowerCase()) >= 0\n\t}).forEach(function(k) {\n\t\t_obj[k.toLowerCase()] = obj[k]\n\t});\n\n\tObject.keys(_obj).forEach(function(k) {\n\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Block._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tdelete _obj[k];\n\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Block._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t}\n\t});\n\n\tlet _this = null;\n\tif (obj.__keys) {\n\t\tlet kObj = {};\n\t\tkObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(_obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))));\n\t\tobj.__keys.forEach(function(k) {\n\t\t\tkObj[k] = _obj[k]\n\t\t});\n\t\t_this = new shs_arbfw_appd_Flow_Block()._fromDocument(kObj);\n\t} else {\n\t\t_this = new shs_arbfw_appd_Flow_Block()._fromDocument(_obj)._unique();\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Block._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\tdelete _obj.__idField;\n\n\ttry {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Block._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\tObject.keys(_obj).filter(function(k) {\n\t\t\treturn k.toLowerCase() != k;\n\t\t}).forEach(function(k) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Block._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tvar lk = k.toLowerCase();\n\t\t\t_obj[lk] = _obj[k];\n\t\t\tdelete _obj[k];\n\t\t});\n\n\t\tlet gq = new global.GlideQuery(obj.__type || 'sys_hub_flow_block');\n\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Flow_Block._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\tif (_obj.sys_id) {\n\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t} else {\n\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\tgq = gq.insert(_obj);\n\t\t}\n\t\tlet _fObj = {};\n\t\t_fObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))));\n\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('sys_hub_flow_block', ['*'])['sys_hub_flow_block']))));\n\t} catch (ex) {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Block._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Block._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\treturn this;\n\t}\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Block._save(): \" + \"obj.block_Flows: \" + JSON.stringify(obj.block_Flows, null, 4));\n\tif (Array.isArray(obj.block_Flows)) this.block_Flows(obj.block_Flows.map(function(ta) {\n\t\treturn new shs_arbfw_appd_Flow()._save(ta)\n\t}));\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Block._save(): \" + \"obj.block_Flow_Logics: \" + JSON.stringify(obj.block_Flow_Logics, null, 4));\n\tif (Array.isArray(obj.block_Flow_Logics)) this.block_Flow_Logics(obj.block_Flow_Logics.map(function(ta) {\n\t\treturn new shs_arbfw_appd_Flow_Logic()._save(ta)\n\t}));\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Block._save(): \" + \"obj.block_Element_Mappings: \" + JSON.stringify(obj.block_Element_Mappings, null, 4));\n\tif (Array.isArray(obj.block_Element_Mappings)) this.block_Element_Mappings(obj.block_Element_Mappings.map(function(ta) {\n\t\treturn new shs_arbfw_appd_Element_Mapping()._save(ta)\n\t}));\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Block._save(): \" + \"obj.block_Flow_Snapshots: \" + JSON.stringify(obj.block_Flow_Snapshots, null, 4));\n\tif (Array.isArray(obj.block_Flow_Snapshots)) this.block_Flow_Snapshots(obj.block_Flow_Snapshots.map(function(ta) {\n\t\treturn new shs_arbfw_appd_Flow_Snapshot()._save(ta)\n\t}));\n\n\treturn this;\n}\n\n/************* Flow_Block.store() **********************/\nstore(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Block.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Block.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Block.store(): \" + \"executing locally \");\n\n\t\t// store locally\n\t\treturn this._save(this._toDocument());\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Flow_Block.findAll() **********************/\nfindAll(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Block.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Block.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Block.findAll(): \" + \"executing locally \");\n\n\t\t// findAll locally\n\t\tlet gr = new GlideRecord('sys_hub_flow_block');\n\t\tgr.addEncodedQuery(this._toEQuery());\n\t\treturn this._fromDocument(gr);\n\n\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('sys_hub_flow_block', ['*'])['sys_hub_flow_block'])));\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Flow_Block.find() **********************/\nfind(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Block.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Block.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Flow_Block.find(): \" + \"executing locally \");\n\n\t\tlet ret = this.findAll();\n\t\treturn ret.length ? ret[0] : null;\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"scriptFile_Script_Compatibilitys":[{"active":true,"enabled":true}],"client_callable":true,"sys_name":"shs_arbfw_appd_Transform","api_name":"x_1790593_arboard.shs_arbfw_appd_Transform","name":"shs_arbfw_appd_Transform","script":"class shs_arbfw_appd_Transform extends global.AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"Application Designer\";\n\t\tthis.__type = \"shs_arbfw_appd_Transform\";\n\t\tthis.__alias = \"shs_arbfw_appd\";\n\t\tthis.__scope = \"shs_arbfw\";\n\t}\n\n\t/************* Transform.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Transform.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Transform.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Transform.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Transform.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//(typeof(window)!=='undefined'?alert:gs.info)(\"Transform.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Transform.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Transform.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Transform.transform_Pill_Compounds GETTERS AND SETTERS **********************/\n\ttransform_Pill_Compounds(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._transform_Pill_Compounds = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._transform_Pill_Compounds_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._transform_Pill_Compounds;\n\t\t}\n\t}\n\n\t/************* Transform.transform_Transform_Compositions GETTERS AND SETTERS **********************/\n\ttransform_Transform_Compositions(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._transform_Transform_Compositions = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._transform_Transform_Compositions_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._transform_Transform_Compositions;\n\t\t}\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = undefined || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\t(this.transform_Pill_Compounds() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYPill_Compound.transform,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(this.transform_Transform_Compositions() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYTransform_Composition.transform,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Transform._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn new shs_arbfw_appd_Transform()._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Transform._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Transform._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromGlideRecord(obj) {\n\t\tif (!obj) return null;\n\t\tif (obj.isValidRecord()) {\n\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Transform\" != 'ecc_queue' && obj.source == \"shs_arbfw_appd_Transform\") {\n\t\t\t\tobj.state = \"processing\";\n\t\t\t\tobj.update();\n\n\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\tresp.queue = 'output';\n\t\t\t\tresp.agent = obj.agent;\n\t\t\t\tresp.topic = obj.topic;\n\t\t\t\tresp.name = obj.name;\n\t\t\t\tresp.source = obj.source;\n\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\tlet ret = new shs_arbfw_appd_Transform()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t});\n\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t}\n\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\tresp.insert();\n\n\t\t\t\tobj.state = \"processed\";\n\t\t\t\tobj.update();\n\t\t\t\treturn resp;\n\t\t\t} else {\n\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tobj.query();\n\t\t\tlet grRet = [];\n\t\t\twhile (obj.next()) grRet.push(this._fromGlideRecord(obj));\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Transform._fromGlideRecord(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\treturn grRet;\n\t\t}\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\tundefined\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_appd_Transform()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\tif (/((([A-Za-z]{3,9}:(?:/ / ) ? )( ? : [-;: &= +$, w] + @) ? [A - Za - z0 - 9. - ] + | ( ? : www. | [-;: &= +$, w] + @)[A - Za - z0 - 9. - ] + )(( ? : /[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)/g.test(obj)) {\n\t\t\tvar msg = new sn_ws.RESTMessageV2();\n\t\t\tmsg.setEndpoint(obj);\n\t\t\tmsg.setRequestHeader('Content-Type', 'application/json');\n\t\t\tmsg.setHttpMethod('get');\n\t\t\treturn this._fromDocument(msg.execute().getBody());\n\t\t}\n\n\t\ttry {\n\t\t\tobj = JSON.parse(obj);\n\t\t} catch (ex) {\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Transform._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\tlet _obj = {\n\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))\n\t\t\t};\n\t\t\t_obj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(this))] = obj;\n\t\t\tobj = _obj;\n\t\t}\n\t\treturn this._fromDocument(obj);\n\t}\n\telse if (typeof(obj) === 'object') {\n\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\treturn this._fromGlideRecord(obj);\n\t\t} else if (obj._fromDocument) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Transform._fromDocument(): \" + \"redundent call\");\n\t\t\treturn obj;\n\t\t} else if (Array.isArray(obj)) {\n\t\t\treturn obj.map(function(o) {\n\t\t\t\treturn new shs_arbfw_appd_Transform()._fromDocument(o)\n\t\t\t});\n\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(obj))));\n\n\t\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Transform._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.transform_Pill_Compounds) !== 'undefined') this.transform_Pill_Compounds(new shs_arbfw_appd_Pill_Compound()._fromDocument(obj.transform_Pill_Compounds));\n\n\t\t\t\tif (typeof(obj.transform_Transform_Compositions) !== 'undefined') this.transform_Transform_Compositions(new shs_arbfw_appd_Transform_Composition()._fromDocument(obj.transform_Transform_Compositions));\n\n\t\t\t} else { // if(obj.constructor.name==\"Transform\"){\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Transform._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t}\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Transform._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\treturn null;\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Transform._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Transform._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Transform._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\treturn this;\n}\n\n_insertAssert() {\n\treturn true;\n}\n\n_updateAssert() {\n\treturn true;\n}\n\n_storeAssert() {\n\treturn true;\n}\n\n_findAssert() {\n\treturn true;\n}\n\n_new(c) {\n\n\treturn new shs_arbfw_appd_Platform._new(c);\n\n}\n\n_toDocument(arFields) {\n\n\tlet ret = undefined || {};\n\n\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tret.active = this.active();\n\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tret.enabled = this.enabled();\n\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tret.code = this.code();\n\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tret.order = this.order();\n\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tret.date = this.date();\n\n\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tret.name = this.name();\n\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tret.remark = this.remark();\n\n\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t}\n\n\tif (typeof(this.transform_Pill_Compounds()) !== 'undefined') ret.transform_Pill_Compounds = this.transform_Pill_Compounds().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (typeof(this.transform_Transform_Compositions()) !== 'undefined') ret.transform_Transform_Compositions = this.transform_Transform_Compositions().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\treturn !arFields.find(function(_k) {\n\t\t\treturn _k == k;\n\t\t});\n\t}).forEach(function(k) {\n\t\tdelete ret[k];\n\t});\n\n\treturn ret;\n}\n\n_unique(keys, ret) {\n\tret = ret || new shs_arbfw_appd_Transform();\n\n\tundefined\n\n\t// if(this.Id) ret.Id = this.Id;\n\tif (!keys) {\n\n\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t} else {\n\n\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t}\n\n\treturn ret;\n}\n\n_query(gq) {\n\tlet arFields = Object.keys(global.Schema.of('sys_transform_definition', ['*'])['sys_transform_definition']);\n\n\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('sys_transform_definition');\n\n\tundefined\n\n\tlet idf = ((function(r) {\n\t\tlet ret = 'sys_id';\n\t\tif (typeof(r.__idField) === 'function') {\n\t\t\tret = r.__idField();\n\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\tret = r.__idField || this.__idField();\n\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\tret = 'Id';\n\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\tret = 'sys_id';\n\t\t}\n\t\treturn ret;\n\t})(this));\n\tif (idf == 'Id') idf = 'sys_id';\n\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tlet coop = this._active_coop || '=';\n\n\t\tlet v = this.active();\n\n\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Transform._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tlet coop = this._enabled_coop || '=';\n\n\t\tlet v = this.enabled();\n\n\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Transform._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tlet coop = this._code_coop || '=';\n\n\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.code();\n\n\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Transform._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tlet coop = this._order_coop || '=';\n\n\t\tlet v = this.order();\n\n\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Transform._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tlet coop = this._date_coop || '=';\n\n\t\tlet v = this.date();\n\n\t\tif (v) {\n\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t}\n\n\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Transform._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tlet coop = this._name_coop || '=';\n\n\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.name();\n\n\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Transform._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tlet coop = this._remark_coop || '=';\n\n\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.remark();\n\n\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Transform._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Transform._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\treturn this._queryGQ;\n}\n\n_save(obj) {\n\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\treturn new shs_arbfw_appd_Transform()._save(o)\n\t});\n\n\tlet _obj = {};\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Transform._save(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\tObject.keys(obj).filter(function(k) {\n\t\treturn Object.keys(global.Schema.of('sys_transform_definition', ['*'])['sys_transform_definition']).filter(function(_k) {\n\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t}).indexOf(k.toLowerCase()) >= 0\n\t}).forEach(function(k) {\n\t\t_obj[k.toLowerCase()] = obj[k]\n\t});\n\n\tObject.keys(_obj).forEach(function(k) {\n\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Transform._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tdelete _obj[k];\n\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Transform._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t}\n\t});\n\n\tlet _this = null;\n\tif (obj.__keys) {\n\t\tlet kObj = {};\n\t\tkObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(_obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))));\n\t\tobj.__keys.forEach(function(k) {\n\t\t\tkObj[k] = _obj[k]\n\t\t});\n\t\t_this = new shs_arbfw_appd_Transform()._fromDocument(kObj);\n\t} else {\n\t\t_this = new shs_arbfw_appd_Transform()._fromDocument(_obj)._unique();\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Transform._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\tdelete _obj.__idField;\n\n\ttry {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Transform._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\tObject.keys(_obj).filter(function(k) {\n\t\t\treturn k.toLowerCase() != k;\n\t\t}).forEach(function(k) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Transform._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tvar lk = k.toLowerCase();\n\t\t\t_obj[lk] = _obj[k];\n\t\t\tdelete _obj[k];\n\t\t});\n\n\t\tlet gq = new global.GlideQuery(obj.__type || 'sys_transform_definition');\n\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Transform._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\tif (_obj.sys_id) {\n\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t} else {\n\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\tgq = gq.insert(_obj);\n\t\t}\n\t\tlet _fObj = {};\n\t\t_fObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))));\n\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('sys_transform_definition', ['*'])['sys_transform_definition']))));\n\t} catch (ex) {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Transform._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Transform._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\treturn this;\n\t}\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Transform._save(): \" + \"obj.transform_Pill_Compounds: \" + JSON.stringify(obj.transform_Pill_Compounds, null, 4));\n\tif (Array.isArray(obj.transform_Pill_Compounds)) this.transform_Pill_Compounds(obj.transform_Pill_Compounds.map(function(ta) {\n\t\treturn new shs_arbfw_appd_Pill_Compound()._save(ta)\n\t}));\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Transform._save(): \" + \"obj.transform_Transform_Compositions: \" + JSON.stringify(obj.transform_Transform_Compositions, null, 4));\n\tif (Array.isArray(obj.transform_Transform_Compositions)) this.transform_Transform_Compositions(obj.transform_Transform_Compositions.map(function(ta) {\n\t\treturn new shs_arbfw_appd_Transform_Composition()._save(ta)\n\t}));\n\n\treturn this;\n}\n\n/************* Transform.store() **********************/\nstore(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Transform.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Transform.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Transform.store(): \" + \"executing locally \");\n\n\t\t// store locally\n\t\treturn this._save(this._toDocument());\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Transform.findAll() **********************/\nfindAll(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Transform.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Transform.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Transform.findAll(): \" + \"executing locally \");\n\n\t\t// findAll locally\n\t\tlet gr = new GlideRecord('sys_transform_definition');\n\t\tgr.addEncodedQuery(this._toEQuery());\n\t\treturn this._fromDocument(gr);\n\n\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('sys_transform_definition', ['*'])['sys_transform_definition'])));\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Transform.find() **********************/\nfind(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Transform.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Transform.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Transform.find(): \" + \"executing locally \");\n\n\t\tlet ret = this.findAll();\n\t\treturn ret.length ? ret[0] : null;\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"scriptFile_Script_Compatibilitys":[{"active":true,"enabled":true}],"client_callable":true,"sys_name":"shs_arbfw_appd_Data_Definition","api_name":"x_1790593_arboard.shs_arbfw_appd_Data_Definition","name":"shs_arbfw_appd_Data_Definition","script":"class shs_arbfw_appd_Data_Definition extends global.AbstractAjaxProcessor {\n\tconstructor(id) {\n\t\t/*AbstractAjaxProcessor.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"Application Designer\";\n\t\tthis.__type = \"shs_arbfw_appd_Data_Definition\";\n\t\tthis.__alias = \"shs_arbfw_appd\";\n\t\tthis.__scope = \"shs_arbfw\";\n\t}\n\n\t/************* Data_Definition.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Data_Definition.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Data_Definition.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Data_Definition.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Data_Definition.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//(typeof(window)!=='undefined'?alert:gs.info)(\"Data_Definition.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Data_Definition.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Data_Definition.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Data_Definition.definition_Flow_Datas GETTERS AND SETTERS **********************/\n\tdefinition_Flow_Datas(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._definition_Flow_Datas = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._definition_Flow_Datas_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._definition_Flow_Datas;\n\t\t}\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = undefined || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\t(this.definition_Flow_Datas() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYFlow_Data.definition,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Data_Definition._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn new shs_arbfw_appd_Data_Definition()._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Data_Definition._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Data_Definition._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromGlideRecord(obj) {\n\t\tif (!obj) return null;\n\t\tif (obj.isValidRecord()) {\n\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Data_Definition\" != 'ecc_queue' && obj.source == \"shs_arbfw_appd_Data_Definition\") {\n\t\t\t\tobj.state = \"processing\";\n\t\t\t\tobj.update();\n\n\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\tresp.queue = 'output';\n\t\t\t\tresp.agent = obj.agent;\n\t\t\t\tresp.topic = obj.topic;\n\t\t\t\tresp.name = obj.name;\n\t\t\t\tresp.source = obj.source;\n\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\tlet ret = new shs_arbfw_appd_Data_Definition()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t});\n\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t}\n\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\tresp.insert();\n\n\t\t\t\tobj.state = \"processed\";\n\t\t\t\tobj.update();\n\t\t\t\treturn resp;\n\t\t\t} else {\n\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tobj.query();\n\t\t\tlet grRet = [];\n\t\t\twhile (obj.next()) grRet.push(this._fromGlideRecord(obj));\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Data_Definition._fromGlideRecord(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\treturn grRet;\n\t\t}\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\tundefined\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_appd_Data_Definition()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\tif (/((([A-Za-z]{3,9}:(?:/ / ) ? )( ? : [-;: &= +$, w] + @) ? [A - Za - z0 - 9. - ] + | ( ? : www. | [-;: &= +$, w] + @)[A - Za - z0 - 9. - ] + )(( ? : /[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)/g.test(obj)) {\n\t\t\tvar msg = new sn_ws.RESTMessageV2();\n\t\t\tmsg.setEndpoint(obj);\n\t\t\tmsg.setRequestHeader('Content-Type', 'application/json');\n\t\t\tmsg.setHttpMethod('get');\n\t\t\treturn this._fromDocument(msg.execute().getBody());\n\t\t}\n\n\t\ttry {\n\t\t\tobj = JSON.parse(obj);\n\t\t} catch (ex) {\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Data_Definition._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\tlet _obj = {\n\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))\n\t\t\t};\n\t\t\t_obj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(this))] = obj;\n\t\t\tobj = _obj;\n\t\t}\n\t\treturn this._fromDocument(obj);\n\t}\n\telse if (typeof(obj) === 'object') {\n\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\treturn this._fromGlideRecord(obj);\n\t\t} else if (obj._fromDocument) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Data_Definition._fromDocument(): \" + \"redundent call\");\n\t\t\treturn obj;\n\t\t} else if (Array.isArray(obj)) {\n\t\t\treturn obj.map(function(o) {\n\t\t\t\treturn new shs_arbfw_appd_Data_Definition()._fromDocument(o)\n\t\t\t});\n\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(obj))));\n\n\t\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Data_Definition._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.definition_Flow_Datas) !== 'undefined') this.definition_Flow_Datas(new shs_arbfw_appd_Flow_Data()._fromDocument(obj.definition_Flow_Datas));\n\n\t\t\t} else { // if(obj.constructor.name==\"Data_Definition\"){\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Data_Definition._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t}\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Data_Definition._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\treturn null;\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Data_Definition._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Data_Definition._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Data_Definition._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\treturn this;\n}\n\n_insertAssert() {\n\treturn true;\n}\n\n_updateAssert() {\n\treturn true;\n}\n\n_storeAssert() {\n\treturn true;\n}\n\n_findAssert() {\n\treturn true;\n}\n\n_new(c) {\n\n\treturn new shs_arbfw_appd_Platform._new(c);\n\n}\n\n_toDocument(arFields) {\n\n\tlet ret = undefined || {};\n\n\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tret.active = this.active();\n\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tret.enabled = this.enabled();\n\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tret.code = this.code();\n\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tret.order = this.order();\n\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tret.date = this.date();\n\n\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tret.name = this.name();\n\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tret.remark = this.remark();\n\n\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t}\n\n\tif (typeof(this.definition_Flow_Datas()) !== 'undefined') ret.definition_Flow_Datas = this.definition_Flow_Datas().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\treturn !arFields.find(function(_k) {\n\t\t\treturn _k == k;\n\t\t});\n\t}).forEach(function(k) {\n\t\tdelete ret[k];\n\t});\n\n\treturn ret;\n}\n\n_unique(keys, ret) {\n\tret = ret || new shs_arbfw_appd_Data_Definition();\n\n\tundefined\n\n\t// if(this.Id) ret.Id = this.Id;\n\tif (!keys) {\n\n\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t} else {\n\n\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t}\n\n\treturn ret;\n}\n\n_query(gq) {\n\tlet arFields = Object.keys(global.Schema.of('sys_flow_data_definition', ['*'])['sys_flow_data_definition']);\n\n\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('sys_flow_data_definition');\n\n\tundefined\n\n\tlet idf = ((function(r) {\n\t\tlet ret = 'sys_id';\n\t\tif (typeof(r.__idField) === 'function') {\n\t\t\tret = r.__idField();\n\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\tret = r.__idField || this.__idField();\n\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\tret = 'Id';\n\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\tret = 'sys_id';\n\t\t}\n\t\treturn ret;\n\t})(this));\n\tif (idf == 'Id') idf = 'sys_id';\n\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tlet coop = this._active_coop || '=';\n\n\t\tlet v = this.active();\n\n\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Data_Definition._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tlet coop = this._enabled_coop || '=';\n\n\t\tlet v = this.enabled();\n\n\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Data_Definition._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tlet coop = this._code_coop || '=';\n\n\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.code();\n\n\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Data_Definition._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tlet coop = this._order_coop || '=';\n\n\t\tlet v = this.order();\n\n\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Data_Definition._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tlet coop = this._date_coop || '=';\n\n\t\tlet v = this.date();\n\n\t\tif (v) {\n\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t}\n\n\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Data_Definition._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tlet coop = this._name_coop || '=';\n\n\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.name();\n\n\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Data_Definition._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tlet coop = this._remark_coop || '=';\n\n\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.remark();\n\n\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Data_Definition._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Data_Definition._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\treturn this._queryGQ;\n}\n\n_save(obj) {\n\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\treturn new shs_arbfw_appd_Data_Definition()._save(o)\n\t});\n\n\tlet _obj = {};\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Data_Definition._save(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\tObject.keys(obj).filter(function(k) {\n\t\treturn Object.keys(global.Schema.of('sys_flow_data_definition', ['*'])['sys_flow_data_definition']).filter(function(_k) {\n\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t}).indexOf(k.toLowerCase()) >= 0\n\t}).forEach(function(k) {\n\t\t_obj[k.toLowerCase()] = obj[k]\n\t});\n\n\tObject.keys(_obj).forEach(function(k) {\n\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Data_Definition._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tdelete _obj[k];\n\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Data_Definition._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t}\n\t});\n\n\tlet _this = null;\n\tif (obj.__keys) {\n\t\tlet kObj = {};\n\t\tkObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(_obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))));\n\t\tobj.__keys.forEach(function(k) {\n\t\t\tkObj[k] = _obj[k]\n\t\t});\n\t\t_this = new shs_arbfw_appd_Data_Definition()._fromDocument(kObj);\n\t} else {\n\t\t_this = new shs_arbfw_appd_Data_Definition()._fromDocument(_obj)._unique();\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Data_Definition._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\tdelete _obj.__idField;\n\n\ttry {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Data_Definition._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\tObject.keys(_obj).filter(function(k) {\n\t\t\treturn k.toLowerCase() != k;\n\t\t}).forEach(function(k) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Data_Definition._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tvar lk = k.toLowerCase();\n\t\t\t_obj[lk] = _obj[k];\n\t\t\tdelete _obj[k];\n\t\t});\n\n\t\tlet gq = new global.GlideQuery(obj.__type || 'sys_flow_data_definition');\n\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Data_Definition._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\tif (_obj.sys_id) {\n\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t} else {\n\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\tgq = gq.insert(_obj);\n\t\t}\n\t\tlet _fObj = {};\n\t\t_fObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))));\n\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('sys_flow_data_definition', ['*'])['sys_flow_data_definition']))));\n\t} catch (ex) {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Data_Definition._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Data_Definition._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\treturn this;\n\t}\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Data_Definition._save(): \" + \"obj.definition_Flow_Datas: \" + JSON.stringify(obj.definition_Flow_Datas, null, 4));\n\tif (Array.isArray(obj.definition_Flow_Datas)) this.definition_Flow_Datas(obj.definition_Flow_Datas.map(function(ta) {\n\t\treturn new shs_arbfw_appd_Flow_Data()._save(ta)\n\t}));\n\n\treturn this;\n}\n\n/************* Data_Definition.store() **********************/\nstore(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Data_Definition.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Data_Definition.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Data_Definition.store(): \" + \"executing locally \");\n\n\t\t// store locally\n\t\treturn this._save(this._toDocument());\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Data_Definition.findAll() **********************/\nfindAll(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Data_Definition.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Data_Definition.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Data_Definition.findAll(): \" + \"executing locally \");\n\n\t\t// findAll locally\n\t\tlet gr = new GlideRecord('sys_flow_data_definition');\n\t\tgr.addEncodedQuery(this._toEQuery());\n\t\treturn this._fromDocument(gr);\n\n\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('sys_flow_data_definition', ['*'])['sys_flow_data_definition'])));\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Data_Definition.find() **********************/\nfind(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Data_Definition.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Data_Definition.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Data_Definition.find(): \" + \"executing locally \");\n\n\t\tlet ret = this.findAll();\n\t\treturn ret.length ? ret[0] : null;\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n}"},{"active":true,"access":"package_private","caller_access":null,"scriptFile_Script_Compatibilitys":[{"active":true,"enabled":true}],"client_callable":true,"sys_name":"shs_arbfw_Solution_Design","api_name":"x_1790593_arboard.shs_arbfw_Solution_Design","name":"shs_arbfw_Solution_Design","script":"class shs_arbfw_Solution_Design extends shs_arbfw_Task {\n\tconstructor(id) {\n\t\t/*shs_arbfw_Task.prototype.constructor.call(this, */\n\t\tsuper(id)\n\t\tthis.Id = id;\n\t\tthis.__module = \"\";\n\t\tthis.__type = \"shs_arbfw_Solution_Design\";\n\t\tthis.__alias = \"shs_arbfw\";\n\t\tthis.__scope = \"shs_arbfw\";\n\t}\n\n\t/************* Solution_Design.active GETTERS AND SETTERS **********************/\n\tactive(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._active = v;\n\t\t\tthis._active_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._active;\n\t\t}\n\t}\n\n\t/************* Solution_Design.enabled GETTERS AND SETTERS **********************/\n\tenabled(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._enabled = v;\n\t\t\tthis._enabled_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._enabled;\n\t\t}\n\t}\n\n\t/************* Solution_Design.code GETTERS AND SETTERS **********************/\n\tcode(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._code = v;\n\t\t\tthis._code_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._code;\n\t\t}\n\t}\n\n\t/************* Solution_Design.order GETTERS AND SETTERS **********************/\n\torder(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._order = v;\n\t\t\tthis._order_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._order;\n\t\t}\n\t}\n\n\t/************* Solution_Design.date GETTERS AND SETTERS **********************/\n\tdate(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tif (v) v = Object.prototype.toString.call(v) === '[object Date]' ? v : (new Date(v));\n\t\t\tif (v && isNaN(v.getTime())) v = null;\n\t\t\t//(typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Design.date(): \"+ \"typeof(v): \" + JSON.stringify(typeof(v), null, 4));\n\n\t\t\tthis._date = v;\n\t\t\tthis._date_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._date;\n\t\t}\n\t}\n\n\t/************* Solution_Design.name GETTERS AND SETTERS **********************/\n\tname(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._name = v;\n\t\t\tthis._name_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._name;\n\t\t}\n\t}\n\n\t/************* Solution_Design.remark GETTERS AND SETTERS **********************/\n\tremark(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\n\t\t\tthis._remark = v;\n\t\t\tthis._remark_coop = coop;\n\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._remark;\n\t\t}\n\t}\n\n\t/************* Solution_Design.design_Version_Historys GETTERS AND SETTERS **********************/\n\tdesign_Version_Historys(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._design_Version_Historys = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._design_Version_Historys_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._design_Version_Historys;\n\t\t}\n\t}\n\n\t/************* Solution_Design.design_Solution_Sections GETTERS AND SETTERS **********************/\n\tdesign_Solution_Sections(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._design_Solution_Sections = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._design_Solution_Sections_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._design_Solution_Sections;\n\t\t}\n\t}\n\n\t/************* Solution_Design.design_Solution_Appendixs GETTERS AND SETTERS **********************/\n\tdesign_Solution_Appendixs(v, coop) {\n\t\tif (typeof(v) !== 'undefined') {\n\t\t\tthis._design_Solution_Appendixs = !Array.isArray(v) ? [v] : v;\n\t\t\tthis._design_Solution_Appendixs_coop = coop;\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn this._design_Solution_Appendixs;\n\t\t}\n\t}\n\n\t_toEQuery(sPath) {\n\t\tsPath = sPath || '';\n\t\tlet ret = /*shs_arbfw_Task.prototype._toEQuery.call(this, */ super._toEQuery(sPath) || '';\n\n\t\tif (this._active) ret += '^' + sPath + 'active' + (this._active_coop || '=') + this.active();\n\n\t\tif (this._enabled) ret += '^' + sPath + 'enabled' + (this._enabled_coop || '=') + this.enabled();\n\n\t\tif (this._code) ret += '^' + sPath + 'code' + (this._code_coop || '=') + this.code();\n\n\t\tif (this._order) ret += '^' + sPath + 'order' + (this._order_coop || '=') + this.order();\n\n\t\tif (this._date) ret += '^' + sPath + 'date' + (this._date_coop || '=') + this.date();\n\n\t\tif (this._name) ret += '^' + sPath + 'name' + (this._name_coop || '=') + this.name();\n\n\t\tif (this._remark) ret += '^' + sPath + 'remark' + (this._remark_coop || '=') + this.remark();\n\n\t\t(this.design_Version_Historys() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYVersion_History.design,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(this.design_Solution_Sections() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYSolution_Section.design,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(this.design_Solution_Appendixs() || []).forEach(function(ta) {\n\t\t\tret += '^RLQUERYSolution_Appendix.design,>=1' + ta._toEQuery() + '^ENDRLQUERY';\n\t\t});\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Design._toEQuery(): \" + \"ret: \" + JSON.stringify(ret, null, 4));\n\t\treturn ret;\n\t}\n\n\t_invoke(method, payload) {\n\t\tif (!method) return null;\n\t\tif (typeof(payload) === 'string') return this._invoke(method, JSON.parse(payload));\n\t\tif (Array.isArray(payload)) return payload.map(function(p) {\n\t\t\treturn new shs_arbfw_Solution_Design()._invoke(method, p);\n\t\t});\n\n\t\tthis._fromDocument(payload);\n\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Design._invoke(): \" + \"method: \" + JSON.stringify(method, null, 4));\n\n\t\tswitch (method) {\n\n\t\t\tcase \"store\": {\n\t\t\t\treturn this.store();\n\t\t\t}\n\n\t\t\tcase \"findAll\": {\n\t\t\t\treturn this.findAll();\n\t\t\t}\n\n\t\t\tcase \"find\": {\n\t\t\t\treturn this.find();\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\t// if(typeof(this[method])==='function') return this[method](payload);\n\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Design._invoke(): \" + \"invalid method \" + method);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t_fromGlideRecord(obj) {\n\t\tif (!obj) return null;\n\t\tif (obj.isValidRecord()) {\n\t\t\tif (obj.getTableName() == 'ecc_queue' && \"Solution_Design\" != 'ecc_queue' && obj.source == \"shs_arbfw_Solution_Design\") {\n\t\t\t\tobj.state = \"processing\";\n\t\t\t\tobj.update();\n\n\t\t\t\tlet resp = new GlideRecord('ecc_queue');\n\t\t\t\tresp.response_to = obj.sys_id;\n\t\t\t\tresp.queue = 'output';\n\t\t\t\tresp.agent = obj.agent;\n\t\t\t\tresp.topic = obj.topic;\n\t\t\t\tresp.name = obj.name;\n\t\t\t\tresp.source = obj.source;\n\t\t\t\tresp.from_host = obj.agent_correlator;\n\t\t\t\tresp.agent_correlator = obj.from_host;\n\n\t\t\t\tlet ret = new shs_arbfw_Solution_Design()._invoke(obj.name.toString(), obj.payload.toString());\n\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\tret = ret.map(function(r) {\n\t\t\t\t\t\treturn (r && typeof(r._toDocument) === 'function') ? r._toDocument() : r;\n\t\t\t\t\t});\n\t\t\t\t} else if (ret && typeof(ret._toDocument) === 'function') {\n\t\t\t\t\tret = ret._toDocument();\n\t\t\t\t}\n\t\t\t\tresp.payload = JSON.stringify(ret, null, 4);\n\n\t\t\t\tresp.insert();\n\n\t\t\t\tobj.state = \"processed\";\n\t\t\t\tobj.update();\n\t\t\t\treturn resp;\n\t\t\t} else {\n\t\t\t\treturn this._fromDocument({\n\n\t\t\t\t\tactive: obj.getValue(\"active\"),\n\n\t\t\t\t\tenabled: obj.getValue(\"enabled\"),\n\n\t\t\t\t\tcode: obj.getValue(\"code\"),\n\n\t\t\t\t\torder: obj.getValue(\"order\"),\n\n\t\t\t\t\tdate: obj.getValue(\"date\"),\n\n\t\t\t\t\tname: obj.getValue(\"name\"),\n\n\t\t\t\t\tremark: obj.getValue(\"remark\"),\n\n\t\t\t\t\tId: obj.getValue('sys_id')\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tobj.query();\n\t\t\tlet grRet = [];\n\t\t\twhile (obj.next()) grRet.push(this._fromGlideRecord(obj));\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Design._fromGlideRecord(): \"+ \"glide objects \"+ \"grRet: \" + JSON.stringify(grRet, null, 4));*/\n\t\t\treturn grRet;\n\t\t}\n\t}\n\n\t_fromDocument(obj) {\n\t\tif (!obj) return this;\n\n\t\t/*shs_arbfw_Task.prototype._fromDocument.call(this, */\n\t\tsuper._fromDocument(obj)\n\n\t\tif (typeof(obj.isValidRecord) !== 'function' && obj.constructor.name == \"Stream\") {\n\t\t\tlet ret = [];\n\t\t\tobj.forEach(function(o) {\n\t\t\t\tret.push(new shs_arbfw_Solution_Design()._fromDocument(o));\n\t\t\t});\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (typeof(obj) === 'string') {\n\t\t\tif (/((([A-Za-z]{3,9}:(?:/ / ) ? )( ? : [-;: &= +$, w] + @) ? [A - Za - z0 - 9. - ] + | ( ? : www. | [-;: &= +$, w] + @)[A - Za - z0 - 9. - ] + )(( ? : /[+~%/.w-_]*)???(?:[-+=&;%@.w_]*)#?(?:[w]*))?)/g.test(obj)) {\n\t\t\tvar msg = new sn_ws.RESTMessageV2();\n\t\t\tmsg.setEndpoint(obj);\n\t\t\tmsg.setRequestHeader('Content-Type', 'application/json');\n\t\t\tmsg.setHttpMethod('get');\n\t\t\treturn this._fromDocument(msg.execute().getBody());\n\t\t}\n\n\t\ttry {\n\t\t\tobj = JSON.parse(obj);\n\t\t} catch (ex) {\n\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Design._fromDocument(): \" + \"string [\"+obj+\"] into \" + ((function(r){\n    let ret = 'sys_id';\n    if(typeof(r.__idField)==='function'){\n        ret = r.__idField();\n    }else if(typeof(r[r.__idField || (typeof(this.__idField)==='function'?this.__idField():undefined)])!=='undefined'){\n        ret = r.__idField || this.__idField();\n    }else if(typeof(r.Id)!=='undefined'){\n        ret = 'Id';\n    }else if(typeof(r.sys_mod_count)!=='undefined'){\n        ret = 'sys_id';\n    }\n    return ret;\n})(this)));*/\n\t\t\tlet _obj = {\n\t\t\t\t__idField: ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(this))\n\t\t\t};\n\t\t\t_obj[((function(r) {\n\t\t\t\tlet ret = 'sys_id';\n\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\tret = r.__idField();\n\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\tret = 'Id';\n\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\tret = 'sys_id';\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t})(this))] = obj;\n\t\t\tobj = _obj;\n\t\t}\n\t\treturn this._fromDocument(obj);\n\t}\n\telse if (typeof(obj) === 'object') {\n\t\tif (typeof(obj.isValidRecord) === 'function') {\n\t\t\treturn this._fromGlideRecord(obj);\n\t\t} else if (obj._fromDocument) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Design._fromDocument(): \" + \"redundent call\");\n\t\t\treturn obj;\n\t\t} else if (Array.isArray(obj)) {\n\t\t\treturn obj.map(function(o) {\n\t\t\t\treturn new shs_arbfw_Solution_Design()._fromDocument(o)\n\t\t\t});\n\t\t} else if (typeof(obj.constructor) === \"function\") {\n\t\t\tif (obj.constructor.name == \"Object\") {\n\n\t\t\t\tthis.Id = ((function(r, f) {\n\t\t\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r[f];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t})(obj, ((function(r) {\n\t\t\t\t\tlet ret = 'sys_id';\n\t\t\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\t\t\tret = r.__idField();\n\t\t\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\t\t\tret = 'Id';\n\t\t\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\t\t\tret = 'sys_id';\n\t\t\t\t\t}\n\t\t\t\t\treturn ret;\n\t\t\t\t})(obj))));\n\n\t\t\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Design._fromDocument(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\t\t\t\tif (typeof(obj.active) !== 'undefined') {\n\n\t\t\t\t\tthis.active(obj.active);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.enabled) !== 'undefined') {\n\n\t\t\t\t\tthis.enabled(obj.enabled);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.code) !== 'undefined') {\n\n\t\t\t\t\tthis.code(obj.code);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.order) !== 'undefined') {\n\n\t\t\t\t\tthis.order(obj.order);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.date) !== 'undefined') {\n\n\t\t\t\t\tthis.date(obj.date);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.name) !== 'undefined') {\n\n\t\t\t\t\tthis.name(obj.name);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.remark) !== 'undefined') {\n\n\t\t\t\t\tthis.remark(String((gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Decode(obj.remark)));\n\n\t\t\t\t\tthis.remark(obj.remark);\n\t\t\t\t}\n\n\t\t\t\tif (typeof(obj.design_Version_Historys) !== 'undefined') this.design_Version_Historys(new shs_arbfw_Version_History()._fromDocument(obj.design_Version_Historys));\n\n\t\t\t\tif (typeof(obj.design_Solution_Sections) !== 'undefined') this.design_Solution_Sections(new shs_arbfw_Solution_Section()._fromDocument(obj.design_Solution_Sections));\n\n\t\t\t\tif (typeof(obj.design_Solution_Appendixs) !== 'undefined') this.design_Solution_Appendixs(new shs_arbfw_Solution_Appendix()._fromDocument(obj.design_Solution_Appendixs));\n\n\t\t\t} else { // if(obj.constructor.name==\"Solution_Design\"){\n\t\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Design._fromDocument(): \" + \"unknown object constructor: \" + obj.constructor.name);\n\t\t\t}\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Design._fromDocument(): \" + \"unknown object \" + \"obj: \" + JSON.stringify(obj, null, 4));\n\t\t\treturn null;\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Design._fromDocument(): \" + \"invalid object \" + \"typeof(obj): \" + JSON.stringify(typeof(obj), null, 4));\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Design._fromDocument(): \"+ \"Id \"+ \"this.Id: \" + JSON.stringify(this.Id, null, 4));*/\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Design._fromDocument(): \"+ \"this: \" + JSON.stringify(this, null, 4));*/\n\treturn this;\n}\n\n_insertAssert() {\n\treturn true;\n}\n\n_updateAssert() {\n\treturn true;\n}\n\n_storeAssert() {\n\treturn true;\n}\n\n_findAssert() {\n\treturn true;\n}\n\n_new(c) {\n\n\treturn new shs_arbfw_Platform._new(c);\n\n}\n\n_toDocument(arFields) {\n\n\tlet ret = /*shs_arbfw_Task.prototype._toDocument.call(this, */ super._toDocument(arFields) || {};\n\n\tif (typeof(this.Id) !== 'undefined') ret.sys_id = this.Id;\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tret.active = this.active();\n\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tret.enabled = this.enabled();\n\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tret.code = this.code();\n\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tret.order = this.order();\n\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tret.date = this.date();\n\n\t\tif (ret.date && typeof(ret.date.toISOString) === 'function') ret.date = ret.date.toISOString().replace('.000Z', 'Z');\n\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tret.name = this.name();\n\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tret.remark = this.remark();\n\n\t\tif (typeof(ret.remark) === 'object') ret.remark = (gs.getCurrentScopeName() == 'rhino.global' ? GlideStringUtil : gs).base64Encode(JSON.stringify(ret.remark));\n\n\t}\n\n\tif (typeof(this.design_Version_Historys()) !== 'undefined') ret.design_Version_Historys = this.design_Version_Historys().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (typeof(this.design_Solution_Sections()) !== 'undefined') ret.design_Solution_Sections = this.design_Solution_Sections().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (typeof(this.design_Solution_Appendixs()) !== 'undefined') ret.design_Solution_Appendixs = this.design_Solution_Appendixs().map(function(ta) {\n\t\treturn ta._toDocument();\n\t});\n\n\tif (Array.isArray(arFields)) Object.keys(ret).filter(function(k) {\n\t\treturn !arFields.find(function(_k) {\n\t\t\treturn _k == k;\n\t\t});\n\t}).forEach(function(k) {\n\t\tdelete ret[k];\n\t});\n\n\treturn ret;\n}\n\n_unique(keys, ret) {\n\tret = ret || new shs_arbfw_Solution_Design();\n\n\t/*shs_arbfw_Task.prototype._unique.call(this, */\n\tsuper._unique(keys, ret)\n\n\t// if(this.Id) ret.Id = this.Id;\n\tif (!keys) {\n\n\t\tif (typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t} else {\n\n\t\tif (keys.indexOf(\"active\") >= 0 && typeof(this.active()) !== 'undefined') ret.active(this.active());\n\n\t\tif (keys.indexOf(\"enabled\") >= 0 && typeof(this.enabled()) !== 'undefined') ret.enabled(this.enabled());\n\n\t\tif (keys.indexOf(\"code\") >= 0 && typeof(this.code()) !== 'undefined') ret.code(this.code());\n\n\t\tif (keys.indexOf(\"order\") >= 0 && typeof(this.order()) !== 'undefined') ret.order(this.order());\n\n\t\tif (keys.indexOf(\"date\") >= 0 && typeof(this.date()) !== 'undefined') ret.date(this.date());\n\n\t\tif (keys.indexOf(\"name\") >= 0 && typeof(this.name()) !== 'undefined') ret.name(this.name());\n\n\t\tif (keys.indexOf(\"remark\") >= 0 && typeof(this.remark()) !== 'undefined') ret.remark(this.remark());\n\n\t}\n\n\treturn ret;\n}\n\n_query(gq) {\n\tlet arFields = Object.keys(global.Schema.of('x_1790593_arboard_solution_design', ['*'])['x_1790593_arboard_solution_design']);\n\n\tif (!this._queryGQ) this._queryGQ = new global.GlideQuery('x_1790593_arboard_solution_design');\n\n\t/*shs_arbfw_Task.prototype._query.call(this, */\n\tsuper._query(gq)\n\n\tlet idf = ((function(r) {\n\t\tlet ret = 'sys_id';\n\t\tif (typeof(r.__idField) === 'function') {\n\t\t\tret = r.__idField();\n\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\tret = r.__idField || this.__idField();\n\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\tret = 'Id';\n\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\tret = 'sys_id';\n\t\t}\n\t\treturn ret;\n\t})(this));\n\tif (idf == 'Id') idf = 'sys_id';\n\tif (typeof(this.Id) !== 'undefined') this._queryGQ = this._queryGQ.where(idf, '=', this.Id);\n\n\tif (typeof(this._active) !== 'undefined') {\n\t\tlet coop = this._active_coop || '=';\n\n\t\tlet v = this.active();\n\n\t\tif (arFields.indexOf('active') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Design._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('active');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('active');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('active', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._enabled) !== 'undefined') {\n\t\tlet coop = this._enabled_coop || '=';\n\n\t\tlet v = this.enabled();\n\n\t\tif (arFields.indexOf('enabled') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Design._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('enabled');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('enabled');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('enabled', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._code) !== 'undefined') {\n\t\tlet coop = this._code_coop || '=';\n\n\t\tif (!this._code_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.code();\n\n\t\tif (arFields.indexOf('code') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Design._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('code');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('code');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('code', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._order) !== 'undefined') {\n\t\tlet coop = this._order_coop || '=';\n\n\t\tlet v = this.order();\n\n\t\tif (arFields.indexOf('order') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Design._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('order');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('order');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('order', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._date) !== 'undefined') {\n\t\tlet coop = this._date_coop || '=';\n\n\t\tlet v = this.date();\n\n\t\tif (v) {\n\t\t\tv = new GlideDateTime(v.toJSON());\n\t\t}\n\n\t\tif (arFields.indexOf('date') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Design._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('date');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('date');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('date', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._name) !== 'undefined') {\n\t\tlet coop = this._name_coop || '=';\n\n\t\tif (!this._name_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.name();\n\n\t\tif (arFields.indexOf('name') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Design._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('name');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('name');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('name', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof(this._remark) !== 'undefined') {\n\t\tlet coop = this._remark_coop || '=';\n\n\t\tif (!this._remark_coop) coop = 'STARTSWITH';\n\n\t\tlet v = this.remark();\n\n\t\tif (arFields.indexOf('remark') >= 0) {\n\t\t\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Design._query(): \"+ \"this: \" + JSON.stringify(this, null, 4)); */\n\t\t\tif (v == null && coop == '=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNull('remark');\n\t\t\t} else if (v == null && coop == '!=') {\n\t\t\t\tthis._queryGQ = this._queryGQ.whereNoNull('remark');\n\t\t\t} else {\n\t\t\t\tthis._queryGQ = this._queryGQ.where('remark', coop, v);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!this._queryGQ.plan.length) this._queryGQ.whereNull(idf);\n\n\t/* (typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Design._query(): \"+ \"this._queryGQ.toGlideRecord().getEncodedQuery(): \" + JSON.stringify(this._queryGQ.toGlideRecord().getEncodedQuery(), null, 4)); */\n\treturn this._queryGQ;\n}\n\n_save(obj) {\n\tif (Array.isArray(obj)) return obj.map(function(o) {\n\t\treturn new shs_arbfw_Solution_Design()._save(o)\n\t});\n\n\tlet _obj = {};\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Design._save(): \"+ \"obj: \" + JSON.stringify(obj, null, 4));*/\n\n\tObject.keys(obj).filter(function(k) {\n\t\treturn Object.keys(global.Schema.of('x_1790593_arboard_solution_design', ['*'])['x_1790593_arboard_solution_design']).filter(function(_k) {\n\t\t\treturn true || ['sys_updated_on', 'sys_created_on', 'updates', 'sys_created_by', 'sys_updated_by'].indexOf(_k) < 0\n\t\t}).indexOf(k.toLowerCase()) >= 0\n\t}).forEach(function(k) {\n\t\t_obj[k.toLowerCase()] = obj[k]\n\t});\n\n\tObject.keys(_obj).forEach(function(k) {\n\t\tif (Object.prototype.toString.call(_obj[k]) === \"[object Date]\" && isNaN(_obj[k])) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Design._save(): \" + \"invalid date \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tdelete _obj[k];\n\t\t} else if (typeof(_obj[k]) === 'object' && _obj[k] && _obj[k].sys_id) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Design._save(): \" + \"sys_id to string \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\t_obj[k] = _obj[k].sys_id;\n\t\t}\n\t});\n\n\tlet _this = null;\n\tif (obj.__keys) {\n\t\tlet kObj = {};\n\t\tkObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(_obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(_obj))));\n\t\tobj.__keys.forEach(function(k) {\n\t\t\tkObj[k] = _obj[k]\n\t\t});\n\t\t_this = new shs_arbfw_Solution_Design()._fromDocument(kObj);\n\t} else {\n\t\t_this = new shs_arbfw_Solution_Design()._fromDocument(_obj)._unique();\n\t}\n\n\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Design._save(): \" + \"_this.Id=\" + _this.Id + \", _this.find().Id: \" + _this.find().Id);*/\n\n\t_obj.sys_id = (_this.find() || this || {}).Id || _obj.sys_id;\n\tdelete _obj.__idField;\n\n\ttry {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Design._save(): \" + \"_obj.sys_id: \" + JSON.stringify(_obj.sys_id, null, 4));\n\n\t\tObject.keys(_obj).filter(function(k) {\n\t\t\treturn k.toLowerCase() != k;\n\t\t}).forEach(function(k) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Design._save(): \" + \"renaming \" + \"k: \" + JSON.stringify(k, null, 4));\n\t\t\tvar lk = k.toLowerCase();\n\t\t\t_obj[lk] = _obj[k];\n\t\t\tdelete _obj[k];\n\t\t});\n\n\t\tlet gq = new global.GlideQuery(obj.__type || 'x_1790593_arboard_solution_design');\n\t\t/*(typeof(window)!=='undefined'?alert:gs.info)(\"Solution_Design._save(): \"+ \"upserting... \"+ \"_obj: \" + JSON.stringify(_obj, null, 4));*/\n\t\tif (_obj.sys_id) {\n\t\t\tgq = gq.where('sys_id', _obj.sys_id).update(_obj);\n\t\t} else {\n\t\t\t_obj.sys_id = gs.generateGUID();\n\t\t\tgq = gq.insert(_obj);\n\t\t}\n\t\tlet _fObj = {};\n\t\t_fObj[((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))] = ((function(r, f) {\n\t\t\tif (typeof(r) === 'object' && r) {\n\t\t\t\tif (typeof(r._toDocument) === 'function' && typeof(r[f]) === 'function') {\n\t\t\t\t\treturn r._toDocument()[f];\n\t\t\t\t}\n\n\t\t\t\treturn r[f];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t})(obj, ((function(r) {\n\t\t\tlet ret = 'sys_id';\n\t\t\tif (typeof(r.__idField) === 'function') {\n\t\t\t\tret = r.__idField();\n\t\t\t} else if (typeof(r[r.__idField || (typeof(this.__idField) === 'function' ? this.__idField() : undefined)]) !== 'undefined') {\n\t\t\t\tret = r.__idField || this.__idField();\n\t\t\t} else if (typeof(r.Id) !== 'undefined') {\n\t\t\t\tret = 'Id';\n\t\t\t} else if (typeof(r.sys_mod_count) !== 'undefined') {\n\t\t\t\tret = 'sys_id';\n\t\t\t}\n\t\t\treturn ret;\n\t\t})(obj))));\n\t\tthis._fromDocument(_obj = Object.assign(_fObj, gq.get(Object.keys(global.Schema.of('x_1790593_arboard_solution_design', ['*'])['x_1790593_arboard_solution_design']))));\n\t} catch (ex) {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Design._save(): \" + \"Exception \" + \"ex: \" + JSON.stringify(ex, null, 4));\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Design._save(): \" + \"Exception \" + \"_obj: \" + JSON.stringify(_obj, null, 4));\n\t\treturn this;\n\t}\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Design._save(): \" + \"obj.design_Version_Historys: \" + JSON.stringify(obj.design_Version_Historys, null, 4));\n\tif (Array.isArray(obj.design_Version_Historys)) this.design_Version_Historys(obj.design_Version_Historys.map(function(ta) {\n\t\treturn new shs_arbfw_Version_History()._save(ta)\n\t}));\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Design._save(): \" + \"obj.design_Solution_Sections: \" + JSON.stringify(obj.design_Solution_Sections, null, 4));\n\tif (Array.isArray(obj.design_Solution_Sections)) this.design_Solution_Sections(obj.design_Solution_Sections.map(function(ta) {\n\t\treturn new shs_arbfw_Solution_Section()._save(ta)\n\t}));\n\n\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Design._save(): \" + \"obj.design_Solution_Appendixs: \" + JSON.stringify(obj.design_Solution_Appendixs, null, 4));\n\tif (Array.isArray(obj.design_Solution_Appendixs)) this.design_Solution_Appendixs(obj.design_Solution_Appendixs.map(function(ta) {\n\t\treturn new shs_arbfw_Solution_Appendix()._save(ta)\n\t}));\n\n\treturn this;\n}\n\n/************* Solution_Design.store() **********************/\nstore(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Design.store(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Design.store(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Design.store(): \" + \"executing locally \");\n\n\t\t// store locally\n\t\treturn this._save(this._toDocument());\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Solution_Design.findAll() **********************/\nfindAll(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Design.findAll(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Design.findAll(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Design.findAll(): \" + \"executing locally \");\n\n\t\t// findAll locally\n\t\tlet gr = new GlideRecord('x_1790593_arboard_solution_design');\n\t\tgr.addEncodedQuery(this._toEQuery());\n\t\treturn this._fromDocument(gr);\n\n\t\t//return this._fromDocument(this._query().select(Object.keys(global.Schema.of('x_1790593_arboard_solution_design', ['*'])['x_1790593_arboard_solution_design'])));\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n/************* Solution_Design.find() **********************/\nfind(__event) {\n\tlet answer = undefined;\n\n\tlet node = null;\n\n\tlet __response = null;\n\n\tlet evJSON = null;\n\tif (__event) {\n\t\tevJSON = JSON.parse(__event.payload());\n\t\tif (typeof(evJSON.__this) !== 'undefined') {\n\t\t\tthis._fromDocument(evJSON.__this);\n\t\t}\n\n\t\tif (__response) __response.recipient(__event.sender()._unique()).responseTo(__event._unique());\n\n\t\tif (!__event.responseTo()) {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Design.find(): \" + \" handling event[\" + __event.code() + \"]\");\n\n\t\t} else {\n\t\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Design.find(): \" + \"a response to my event(\" + __event.responseTo().code() + \") [\" + __event.className() + \"().\" + __event.method() + \"()]\");\n\n\t\t\tanswer = this._new()._fromDocument(evJSON);\n\n\t\t}\n\t} else {\n\t\t(typeof(window) !== 'undefined' ? alert : gs.info)(\"Solution_Design.find(): \" + \"executing locally \");\n\n\t\tlet ret = this.findAll();\n\t\treturn ret.length ? ret[0] : null;\n\n\t}\n\n\tif (__response && (!__event || !__event.responseTo())) {\n\t\tif (answer) {\n\n\t\t\t__response.payload(answer._toDocument());\n\n\t\t} else {\n\t\t\t__response.payload({\n\t\t\t\t__this: this._toDocument()\n\t\t\t});\n\t\t}\n\n\t\t__response.trigger();\n\n\t}\n\n\treturn answer;\n}\n\n}"}]",
	"cluster": "APISERVER",
	"topic": "apiserver.shs_arbfw",
	"direction": "input",
	"state": "ready",
	"sender": "apiserver.shs_arbfw",
	"recipient": "instance_name",
	"__keys": ["code", "name", "cluster", "topic", "direction", "sender", "recipient", "responseTo"],
	"active": true,
	"enabled": true,
	"__trMap": []
}